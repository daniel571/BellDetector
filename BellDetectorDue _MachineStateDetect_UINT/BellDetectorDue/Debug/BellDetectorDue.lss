
BellDetectorDue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000664c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008664c  0008664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000eb0  20070000  00086654  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000290  20070eb0  00087504  00020eb0  2**2
                  ALLOC
  4 .stack        00002000  20071140  00087794  00020eb0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020eb0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020ed9  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a7b8  00000000  00000000  00020f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004081  00000000  00000000  0003b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005024  00000000  00000000  0003f76b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a88  00000000  00000000  0004478f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009b0  00000000  00000000  00045217  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b29a  00000000  00000000  00045bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012861  00000000  00000000  00060e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066288  00000000  00000000  000736c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002284  00000000  00000000  000d994c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	40 31 07 20 49 15 08 00 45 15 08 00 45 15 08 00     @1. I...E...E...
   80010:	45 15 08 00 45 15 08 00 45 15 08 00 00 00 00 00     E...E...E.......
	...
   8002c:	45 15 08 00 45 15 08 00 00 00 00 00 45 15 08 00     E...E.......E...
   8003c:	45 15 08 00 45 15 08 00 45 15 08 00 45 15 08 00     E...E...E...E...
   8004c:	45 15 08 00 45 15 08 00 45 15 08 00 45 15 08 00     E...E...E...E...
   8005c:	45 15 08 00 45 15 08 00 45 15 08 00 00 00 00 00     E...E...E.......
   8006c:	ed 13 08 00 01 14 08 00 15 14 08 00 29 14 08 00     ............)...
	...
   80084:	45 15 08 00 45 15 08 00 45 15 08 00 45 15 08 00     E...E...E...E...
   80094:	45 15 08 00 45 15 08 00 45 15 08 00 45 15 08 00     E...E...E...E...
   800a4:	00 00 00 00 45 15 08 00 45 15 08 00 45 15 08 00     ....E...E...E...
   800b4:	45 15 08 00 45 15 08 00 45 15 08 00 45 15 08 00     E...E...E...E...
   800c4:	45 15 08 00 45 15 08 00 45 15 08 00 45 15 08 00     E...E...E...E...
   800d4:	c5 01 07 20 45 15 08 00 45 15 08 00 45 15 08 00     ... E...E...E...
   800e4:	45 15 08 00 45 15 08 00 45 15 08 00 45 15 08 00     E...E...E...E...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070eb0 	.word	0x20070eb0
   80110:	00000000 	.word	0x00000000
   80114:	00086654 	.word	0x00086654

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00086654 	.word	0x00086654
   80154:	20070eb4 	.word	0x20070eb4
   80158:	00086654 	.word	0x00086654
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80162:	2401      	movs	r4, #1
   80164:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80166:	2400      	movs	r4, #0
   80168:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8016a:	f240 2502 	movw	r5, #514	; 0x202
   8016e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80172:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80176:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8017a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8017c:	0052      	lsls	r2, r2, #1
   8017e:	fbb1 f2f2 	udiv	r2, r1, r2
   80182:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80184:	0212      	lsls	r2, r2, #8
   80186:	b292      	uxth	r2, r2
   80188:	432b      	orrs	r3, r5
   8018a:	431a      	orrs	r2, r3
   8018c:	6042      	str	r2, [r0, #4]
	return 0;
}
   8018e:	4620      	mov	r0, r4
   80190:	bc30      	pop	{r4, r5}
   80192:	4770      	bx	lr

00080194 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80194:	6843      	ldr	r3, [r0, #4]
   80196:	f023 0310 	bic.w	r3, r3, #16
   8019a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8019c:	6843      	ldr	r3, [r0, #4]
   8019e:	4319      	orrs	r1, r3
   801a0:	6041      	str	r1, [r0, #4]
   801a2:	4770      	bx	lr

000801a4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801a4:	6843      	ldr	r3, [r0, #4]
   801a6:	01d2      	lsls	r2, r2, #7
   801a8:	b2d2      	uxtb	r2, r2
   801aa:	4319      	orrs	r1, r3
   801ac:	430a      	orrs	r2, r1
   801ae:	6042      	str	r2, [r0, #4]
   801b0:	4770      	bx	lr

000801b2 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801b2:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801b4:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   801b6:	0609      	lsls	r1, r1, #24
   801b8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801bc:	4321      	orrs	r1, r4
   801be:	430a      	orrs	r2, r1
   801c0:	0719      	lsls	r1, r3, #28
   801c2:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   801c6:	4311      	orrs	r1, r2
   801c8:	6041      	str	r1, [r0, #4]
}
   801ca:	bc10      	pop	{r4}
   801cc:	4770      	bx	lr

000801ce <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   801ce:	2302      	movs	r3, #2
   801d0:	6003      	str	r3, [r0, #0]
   801d2:	4770      	bx	lr

000801d4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   801d4:	2301      	movs	r3, #1
   801d6:	fa03 f101 	lsl.w	r1, r3, r1
   801da:	6101      	str	r1, [r0, #16]
   801dc:	4770      	bx	lr

000801de <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
   801de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801e2:	6143      	str	r3, [r0, #20]
   801e4:	4770      	bx	lr

000801e6 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   801e6:	6241      	str	r1, [r0, #36]	; 0x24
   801e8:	4770      	bx	lr

000801ea <adc_disable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IDR = ul_source;
   801ea:	6281      	str	r1, [r0, #40]	; 0x28
   801ec:	4770      	bx	lr

000801ee <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   801ee:	6800      	ldr	r0, [r0, #0]
}
   801f0:	f3c0 2003 	ubfx	r0, r0, #8, #4
   801f4:	4770      	bx	lr
	...

000801f8 <efc_init>:
{
   801f8:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   801fa:	0212      	lsls	r2, r2, #8
   801fc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   80200:	4311      	orrs	r1, r2
   80202:	4b02      	ldr	r3, [pc, #8]	; (8020c <efc_init+0x14>)
   80204:	4798      	blx	r3
}
   80206:	2000      	movs	r0, #0
   80208:	bd08      	pop	{r3, pc}
   8020a:	bf00      	nop
   8020c:	20070079 	.word	0x20070079

00080210 <efc_set_wait_state>:
{
   80210:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   80212:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   80214:	0209      	lsls	r1, r1, #8
   80216:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   8021a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   8021e:	4319      	orrs	r1, r3
   80220:	4b01      	ldr	r3, [pc, #4]	; (80228 <efc_set_wait_state+0x18>)
   80222:	4798      	blx	r3
   80224:	bd08      	pop	{r3, pc}
   80226:	bf00      	nop
   80228:	20070079 	.word	0x20070079

0008022c <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   8022c:	f1a1 030e 	sub.w	r3, r1, #14
   80230:	2b01      	cmp	r3, #1
   80232:	d802      	bhi.n	8023a <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   80234:	f04f 30ff 	mov.w	r0, #4294967295
   80238:	4770      	bx	lr
{
   8023a:	b510      	push	{r4, lr}
   8023c:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8023e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80242:	fab3 f383 	clz	r3, r3
   80246:	095b      	lsrs	r3, r3, #5
   80248:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8024a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8024c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80250:	2400      	movs	r4, #0
   80252:	4b0b      	ldr	r3, [pc, #44]	; (80280 <efc_perform_command+0x54>)
   80254:	701c      	strb	r4, [r3, #0]
	return flags;
   80256:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   80258:	0212      	lsls	r2, r2, #8
   8025a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   8025e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   80262:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   80266:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   80268:	4311      	orrs	r1, r2
   8026a:	4b06      	ldr	r3, [pc, #24]	; (80284 <efc_perform_command+0x58>)
   8026c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8026e:	b12c      	cbz	r4, 8027c <efc_perform_command+0x50>
		cpu_irq_enable();
   80270:	2201      	movs	r2, #1
   80272:	4b03      	ldr	r3, [pc, #12]	; (80280 <efc_perform_command+0x54>)
   80274:	701a      	strb	r2, [r3, #0]
   80276:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8027a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   8027c:	b002      	add	sp, #8
   8027e:	bd10      	pop	{r4, pc}
   80280:	200704f0 	.word	0x200704f0
   80284:	2007007d 	.word	0x2007007d

00080288 <FIFO_Init>:

int32_t AlphaQ,BetaQ,BetaSQrtQ,BetaMul2Q,BetaSQRTInvQ;

void FIFO_Init(XFifo* Fifo1 )
{
	Fifo1->WriteInx = 0;
   80288:	2300      	movs	r3, #0
   8028a:	6003      	str	r3, [r0, #0]
	Fifo1->ReadInx = 0;
   8028c:	6043      	str	r3, [r0, #4]
	Fifo1->Data[0] = 0;
   8028e:	60c3      	str	r3, [r0, #12]
	Fifo1->Data[1] = 0;
   80290:	6103      	str	r3, [r0, #16]
	Fifo1->Data[2] = 0;
   80292:	6143      	str	r3, [r0, #20]
	Fifo1->FilterY[0] = 0;
   80294:	6183      	str	r3, [r0, #24]
	Fifo1->FilterY[1] = 0;
   80296:	61c3      	str	r3, [r0, #28]
	Fifo1->FilterY[2] = 0;
   80298:	6203      	str	r3, [r0, #32]
	Fifo1->WriteIndxY = 0;
   8029a:	6083      	str	r3, [r0, #8]
	
	Fifo1->AlphaQ = (int32_t)(ALPHA * BETA_MUL2_Q);
   8029c:	6283      	str	r3, [r0, #40]	; 0x28
	Fifo1->BetaQ =  (int32_t)(BETA * BETA_MUL2_Q);
   8029e:	2369      	movs	r3, #105	; 0x69
   802a0:	62c3      	str	r3, [r0, #44]	; 0x2c
	Fifo1->BetaSQrtQ = (int32_t)(BETA_SQRT * BETA_MUL2_Q);
   802a2:	f240 23b6 	movw	r3, #694	; 0x2b6
   802a6:	6303      	str	r3, [r0, #48]	; 0x30
	Fifo1->BetaMul2Q =  (int32_t)(BETA_MUL2 * BETA_MUL2_Q);
   802a8:	23d2      	movs	r3, #210	; 0xd2
   802aa:	6343      	str	r3, [r0, #52]	; 0x34
	Fifo1->BetaSQRTInvQ =  (int32_t)(BETA_SQRT_INV * BETA_SQRT_INV_Q);
   802ac:	23bd      	movs	r3, #189	; 0xbd
   802ae:	6383      	str	r3, [r0, #56]	; 0x38
   802b0:	4770      	bx	lr
	...

000802b4 <FIFO2_Init>:

// Fifo2p1 located at 0x20072de0 after malloc - stack section end in 20072dd8 (8 bytes dif)
// Fifo2p2 located at 0x20077438 after malloc
// len = T (integration time)
void FIFO2_Init(XFifo2* Fifo2, int len)
{
   802b4:	b538      	push	{r3, r4, r5, lr}
   802b6:	4604      	mov	r4, r0
   802b8:	460d      	mov	r5, r1
	int i;
	Fifo2->OldestInd = 0;
   802ba:	2300      	movs	r3, #0
   802bc:	6003      	str	r3, [r0, #0]
	Fifo2->len = len;
   802be:	60c1      	str	r1, [r0, #12]
	Fifo2->Wave = (uint32_t*)malloc(sizeof(uint32_t)*len);
   802c0:	0088      	lsls	r0, r1, #2
   802c2:	4b08      	ldr	r3, [pc, #32]	; (802e4 <FIFO2_Init+0x30>)
   802c4:	4798      	blx	r3
   802c6:	6060      	str	r0, [r4, #4]
	
	for (i=0;i<len;i++)
   802c8:	2d00      	cmp	r5, #0
   802ca:	dd07      	ble.n	802dc <FIFO2_Init+0x28>
   802cc:	2300      	movs	r3, #0
	{
		Fifo2->Wave[i] = 0;	
   802ce:	4619      	mov	r1, r3
   802d0:	6862      	ldr	r2, [r4, #4]
   802d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<len;i++)
   802d6:	3301      	adds	r3, #1
   802d8:	429d      	cmp	r5, r3
   802da:	d1f9      	bne.n	802d0 <FIFO2_Init+0x1c>
	}
	Fifo2->Energy = 0;
   802dc:	2300      	movs	r3, #0
   802de:	60a3      	str	r3, [r4, #8]
   802e0:	bd38      	pop	{r3, r4, r5, pc}
   802e2:	bf00      	nop
   802e4:	00081a7d 	.word	0x00081a7d

000802e8 <FIFO2_Insert>:
Insert new digital wave strength
Input: the Fifo2 , inp=new strength
Ret : the Energy of total vector upon T
*/
uint32_t FIFO2_Insert(XFifo2* Fifo2, uint32_t inp)
{
   802e8:	b430      	push	{r4, r5}
	Fifo2->Energy += (inp*inp - Fifo2->Wave[Fifo2->OldestInd]*Fifo2->Wave[Fifo2->OldestInd]);	
   802ea:	6805      	ldr	r5, [r0, #0]
   802ec:	6844      	ldr	r4, [r0, #4]
   802ee:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   802f2:	6882      	ldr	r2, [r0, #8]
   802f4:	fb01 2201 	mla	r2, r1, r1, r2
   802f8:	fb03 2313 	mls	r3, r3, r3, r2
   802fc:	6083      	str	r3, [r0, #8]
	Fifo2->Wave[Fifo2->OldestInd] = inp;
   802fe:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
	if(Fifo2->OldestInd == (Fifo2->len -1))	
   80302:	6803      	ldr	r3, [r0, #0]
   80304:	68c2      	ldr	r2, [r0, #12]
   80306:	3a01      	subs	r2, #1
   80308:	4293      	cmp	r3, r2
		Fifo2->OldestInd = 0;	
   8030a:	bf0c      	ite	eq
   8030c:	2300      	moveq	r3, #0
	else
		Fifo2->OldestInd++;
   8030e:	3301      	addne	r3, #1
   80310:	6003      	str	r3, [r0, #0]
	return Fifo2->Energy;
}
   80312:	6880      	ldr	r0, [r0, #8]
   80314:	bc30      	pop	{r4, r5}
   80316:	4770      	bx	lr

00080318 <FIFO2_Reset>:

void FIFO2_Reset(XFifo2* Fifo2)
{
	int i;
	Fifo2->OldestInd = 0;	
   80318:	2300      	movs	r3, #0
   8031a:	6003      	str	r3, [r0, #0]
	
	for (i=0;i<Fifo2->len;i++)
   8031c:	68c3      	ldr	r3, [r0, #12]
   8031e:	2b00      	cmp	r3, #0
   80320:	dd08      	ble.n	80334 <FIFO2_Reset+0x1c>
   80322:	2300      	movs	r3, #0
	{
		Fifo2->Wave[i] = 0;
   80324:	4619      	mov	r1, r3
   80326:	6842      	ldr	r2, [r0, #4]
   80328:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<Fifo2->len;i++)
   8032c:	3301      	adds	r3, #1
   8032e:	68c2      	ldr	r2, [r0, #12]
   80330:	429a      	cmp	r2, r3
   80332:	dcf8      	bgt.n	80326 <FIFO2_Reset+0xe>
	}
	Fifo2->Energy = 0;
   80334:	2300      	movs	r3, #0
   80336:	6083      	str	r3, [r0, #8]
   80338:	4770      	bx	lr
	...

0008033c <DAC3X8E_Init>:
#include "DAC3X8E.h"
#include "sam3x8e.h"
#include "pmc.h"

void DAC3X8E_Init()
{
   8033c:	b508      	push	{r3, lr}
	uint32_t mr;
	pmc_enable_periph_clk(ID_DACC);
   8033e:	2026      	movs	r0, #38	; 0x26
   80340:	4b15      	ldr	r3, [pc, #84]	; (80398 <DAC3X8E_Init+0x5c>)
   80342:	4798      	blx	r3
	
	//disable write protect
	DACC->DACC_CDR = 0;
   80344:	4b15      	ldr	r3, [pc, #84]	; (8039c <DAC3X8E_Init+0x60>)
   80346:	2200      	movs	r2, #0
   80348:	621a      	str	r2, [r3, #32]
	// Set trigger mode 1
	mr = DACC->DACC_MR & (~(DACC_MR_TRGSEL_Msk));
   8034a:	685a      	ldr	r2, [r3, #4]
   8034c:	f022 020e 	bic.w	r2, r2, #14
	DACC->DACC_MR = mr | DACC_MR_TRGEN_EN | DACC_MR_TRGSEL(1);
   80350:	f042 0203 	orr.w	r2, r2, #3
   80354:	605a      	str	r2, [r3, #4]
	
	// Set transfer mode 0 - half word mode
	DACC->DACC_MR &= (~DACC_MR_WORD_WORD);
   80356:	685a      	ldr	r2, [r3, #4]
   80358:	f022 0210 	bic.w	r2, r2, #16
   8035c:	605a      	str	r2, [r3, #4]
	//Set flexible mode
	DACC->DACC_MR |= DACC_MR_TAG;
   8035e:	685a      	ldr	r2, [r3, #4]
   80360:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80364:	605a      	str	r2, [r3, #4]
	// set timing
	mr = DACC->DACC_MR & (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
   80366:	6859      	ldr	r1, [r3, #4]
	mr |= DACC_MR_REFRESH(1);
	mr &= ~DACC_MR_MAXS;
	mr |= (DACC_MR_STARTUP_Msk & ((3) << DACC_MR_STARTUP_Pos));
   80368:	4a0d      	ldr	r2, [pc, #52]	; (803a0 <DAC3X8E_Init+0x64>)
   8036a:	400a      	ands	r2, r1
   8036c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
   80370:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	DACC->DACC_MR = mr;
   80374:	605a      	str	r2, [r3, #4]
	//set power save off
	DACC->DACC_MR &= (~DACC_MR_SLEEP);
   80376:	685a      	ldr	r2, [r3, #4]
   80378:	f022 0220 	bic.w	r2, r2, #32
   8037c:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR |= DACC_MR_FASTWKUP;
   8037e:	685a      	ldr	r2, [r3, #4]
   80380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80384:	605a      	str	r2, [r3, #4]
	//disable INT
	DACC->DACC_IDR = 0xf;
   80386:	220f      	movs	r2, #15
   80388:	629a      	str	r2, [r3, #40]	; 0x28
	//enable ch0 and ch1
	DACC->DACC_CHER = DACC_CHER_CH0 << 0;
   8038a:	2201      	movs	r2, #1
   8038c:	611a      	str	r2, [r3, #16]
	DACC->DACC_CHER = DACC_CHER_CH0 << 1;
   8038e:	2102      	movs	r1, #2
   80390:	6119      	str	r1, [r3, #16]
	//enable write protect
	DACC->DACC_CDR = 1;
   80392:	621a      	str	r2, [r3, #32]
   80394:	bd08      	pop	{r3, pc}
   80396:	bf00      	nop
   80398:	00081525 	.word	0x00081525
   8039c:	400c8000 	.word	0x400c8000
   803a0:	c0df00ff 	.word	0xc0df00ff

000803a4 <DAC3X8E_write>:
	
	
}
void DAC3X8E_write(uint32_t ul_data)
{
	DACC->DACC_CDR = ul_data;
   803a4:	4b01      	ldr	r3, [pc, #4]	; (803ac <DAC3X8E_write+0x8>)
   803a6:	6218      	str	r0, [r3, #32]
   803a8:	4770      	bx	lr
   803aa:	bf00      	nop
   803ac:	400c8000 	.word	0x400c8000

000803b0 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   803b0:	b430      	push	{r4, r5}
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

	if (ul_addr >= IFLASH1_ADDR) {
   803b2:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
   803b6:	d30d      	bcc.n	803d4 <translate_address+0x24>
		p_efc = EFC1;
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   803b8:	f5a1 2440 	sub.w	r4, r1, #786432	; 0xc0000
   803bc:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   803c0:	b2c9      	uxtb	r1, r1
		p_efc = EFC1;
   803c2:	4d08      	ldr	r5, [pc, #32]	; (803e4 <translate_address+0x34>)
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
	}

	/* Store values */
	if (pp_efc) {
   803c4:	b100      	cbz	r0, 803c8 <translate_address+0x18>
		*pp_efc = p_efc;
   803c6:	6005      	str	r5, [r0, #0]
	}

	if (pus_page) {
   803c8:	b102      	cbz	r2, 803cc <translate_address+0x1c>
		*pus_page = us_page;
   803ca:	8014      	strh	r4, [r2, #0]
	}

	if (pus_offset) {
   803cc:	b103      	cbz	r3, 803d0 <translate_address+0x20>
		*pus_offset = us_offset;
   803ce:	8019      	strh	r1, [r3, #0]
	}
}
   803d0:	bc30      	pop	{r4, r5}
   803d2:	4770      	bx	lr
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   803d4:	f5a1 2400 	sub.w	r4, r1, #524288	; 0x80000
   803d8:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   803dc:	b2c9      	uxtb	r1, r1
		p_efc = EFC0;
   803de:	4d02      	ldr	r5, [pc, #8]	; (803e8 <translate_address+0x38>)
   803e0:	e7f0      	b.n	803c4 <translate_address+0x14>
   803e2:	bf00      	nop
   803e4:	400e0c00 	.word	0x400e0c00
   803e8:	400e0a00 	.word	0x400e0a00

000803ec <FLASH_Init>:



uint32_t FLASH_Init()
{
   803ec:	b508      	push	{r3, lr}
	return efc_init(EFC1,EEFC_FMR_FAM,6);
   803ee:	2206      	movs	r2, #6
   803f0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   803f4:	4801      	ldr	r0, [pc, #4]	; (803fc <FLASH_Init+0x10>)
   803f6:	4b02      	ldr	r3, [pc, #8]	; (80400 <FLASH_Init+0x14>)
   803f8:	4798      	blx	r3
}
   803fa:	bd08      	pop	{r3, pc}
   803fc:	400e0c00 	.word	0x400e0c00
   80400:	000801f9 	.word	0x000801f9

00080404 <ReadCalibFromFlash>:

Byte* ReadCalibFromFlash()
{
	return (FLASH_START+4);
}
   80404:	4800      	ldr	r0, [pc, #0]	; (80408 <ReadCalibFromFlash+0x4>)
   80406:	4770      	bx	lr
   80408:	000c0004 	.word	0x000c0004

0008040c <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   8040c:	b530      	push	{r4, r5, lr}
   8040e:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80410:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   80414:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   80418:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   8041c:	ea6f 3484 	mvn.w	r4, r4, lsl #14
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
   80420:	b102      	cbz	r2, 80424 <flash_lock+0x18>
		*pul_actual_start = ul_actual_start;
   80422:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
   80424:	b103      	cbz	r3, 80428 <flash_lock+0x1c>
		*pul_actual_end = ul_actual_end;
   80426:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80428:	2300      	movs	r3, #0
   8042a:	f10d 0202 	add.w	r2, sp, #2
   8042e:	4601      	mov	r1, r0
   80430:	a801      	add	r0, sp, #4
   80432:	4d11      	ldr	r5, [pc, #68]	; (80478 <flash_lock+0x6c>)
   80434:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80436:	2300      	movs	r3, #0
   80438:	466a      	mov	r2, sp
   8043a:	4621      	mov	r1, r4
   8043c:	4618      	mov	r0, r3
   8043e:	47a8      	blx	r5

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80440:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   80444:	f8bd 3000 	ldrh.w	r3, [sp]
   80448:	4293      	cmp	r3, r2
   8044a:	d913      	bls.n	80474 <flash_lock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   8044c:	2508      	movs	r5, #8
   8044e:	4c0b      	ldr	r4, [pc, #44]	; (8047c <flash_lock+0x70>)
   80450:	4629      	mov	r1, r5
   80452:	9801      	ldr	r0, [sp, #4]
   80454:	47a0      	blx	r4

		if (ul_error) {
   80456:	4601      	mov	r1, r0
   80458:	b948      	cbnz	r0, 8046e <flash_lock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   8045a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   8045e:	3240      	adds	r2, #64	; 0x40
   80460:	b292      	uxth	r2, r2
   80462:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   80466:	f8bd 3000 	ldrh.w	r3, [sp]
   8046a:	4293      	cmp	r3, r2
   8046c:	d8f0      	bhi.n	80450 <flash_lock+0x44>
	}

	return FLASH_RC_OK;
}
   8046e:	4608      	mov	r0, r1
   80470:	b003      	add	sp, #12
   80472:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   80474:	2100      	movs	r1, #0
   80476:	e7fa      	b.n	8046e <flash_lock+0x62>
   80478:	000803b1 	.word	0x000803b1
   8047c:	0008022d 	.word	0x0008022d

00080480 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80480:	b530      	push	{r4, r5, lr}
   80482:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80484:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   80488:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   8048c:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   80490:	ea6f 3484 	mvn.w	r4, r4, lsl #14
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
   80494:	b102      	cbz	r2, 80498 <flash_unlock+0x18>
		*pul_actual_start = ul_actual_start;
   80496:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
   80498:	b103      	cbz	r3, 8049c <flash_unlock+0x1c>
		*pul_actual_end = ul_actual_end;
   8049a:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   8049c:	2300      	movs	r3, #0
   8049e:	f10d 0202 	add.w	r2, sp, #2
   804a2:	4601      	mov	r1, r0
   804a4:	a801      	add	r0, sp, #4
   804a6:	4d11      	ldr	r5, [pc, #68]	; (804ec <flash_unlock+0x6c>)
   804a8:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   804aa:	2300      	movs	r3, #0
   804ac:	466a      	mov	r2, sp
   804ae:	4621      	mov	r1, r4
   804b0:	4618      	mov	r0, r3
   804b2:	47a8      	blx	r5

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   804b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   804b8:	f8bd 3000 	ldrh.w	r3, [sp]
   804bc:	4293      	cmp	r3, r2
   804be:	d913      	bls.n	804e8 <flash_unlock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   804c0:	2509      	movs	r5, #9
   804c2:	4c0b      	ldr	r4, [pc, #44]	; (804f0 <flash_unlock+0x70>)
   804c4:	4629      	mov	r1, r5
   804c6:	9801      	ldr	r0, [sp, #4]
   804c8:	47a0      	blx	r4
				us_start_page);
		if (ul_error) {
   804ca:	4601      	mov	r1, r0
   804cc:	b948      	cbnz	r0, 804e2 <flash_unlock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   804ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   804d2:	3240      	adds	r2, #64	; 0x40
   804d4:	b292      	uxth	r2, r2
   804d6:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   804da:	f8bd 3000 	ldrh.w	r3, [sp]
   804de:	4293      	cmp	r3, r2
   804e0:	d8f0      	bhi.n	804c4 <flash_unlock+0x44>
	}

	return FLASH_RC_OK;
}
   804e2:	4608      	mov	r0, r1
   804e4:	b003      	add	sp, #12
   804e6:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   804e8:	2100      	movs	r1, #0
   804ea:	e7fa      	b.n	804e2 <flash_unlock+0x62>
   804ec:	000803b1 	.word	0x000803b1
   804f0:	0008022d 	.word	0x0008022d

000804f4 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   804f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804f8:	b087      	sub	sp, #28
   804fa:	9101      	str	r1, [sp, #4]
   804fc:	4692      	mov	sl, r2
   804fe:	9302      	str	r3, [sp, #8]
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   80500:	ab04      	add	r3, sp, #16
   80502:	f10d 0212 	add.w	r2, sp, #18
   80506:	4601      	mov	r1, r0
   80508:	a805      	add	r0, sp, #20
   8050a:	4c31      	ldr	r4, [pc, #196]	; (805d0 <flash_write+0xdc>)
   8050c:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   8050e:	9805      	ldr	r0, [sp, #20]
   80510:	4b30      	ldr	r3, [pc, #192]	; (805d4 <flash_write+0xe0>)
   80512:	4798      	blx	r3
   80514:	9003      	str	r0, [sp, #12]
	efc_set_wait_state(p_efc, 6);
   80516:	2106      	movs	r1, #6
   80518:	9805      	ldr	r0, [sp, #20]
   8051a:	4b2f      	ldr	r3, [pc, #188]	; (805d8 <flash_write+0xe4>)
   8051c:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   8051e:	f1ba 0f00 	cmp.w	sl, #0
   80522:	d04d      	beq.n	805c0 <flash_write+0xcc>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   80524:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 805e0 <flash_write+0xec>
   80528:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 805e4 <flash_write+0xf0>
   8052c:	f109 05fc 	add.w	r5, r9, #252	; 0xfc
   80530:	e015      	b.n	8055e <flash_write+0x6a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   80532:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   80536:	2101      	movs	r1, #1
   80538:	9805      	ldr	r0, [sp, #20]
   8053a:	4b28      	ldr	r3, [pc, #160]	; (805dc <flash_write+0xe8>)
   8053c:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
   8053e:	2800      	cmp	r0, #0
   80540:	d143      	bne.n	805ca <flash_write+0xd6>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80542:	9b01      	ldr	r3, [sp, #4]
   80544:	443b      	add	r3, r7
   80546:	9301      	str	r3, [sp, #4]
		ul_size -= writeSize;
		us_page++;
   80548:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   8054c:	3301      	adds	r3, #1
   8054e:	f8ad 3012 	strh.w	r3, [sp, #18]
		us_offset = 0;
   80552:	2300      	movs	r3, #0
   80554:	f8ad 3010 	strh.w	r3, [sp, #16]
	while (ul_size > 0) {
   80558:	ebba 0a07 	subs.w	sl, sl, r7
   8055c:	d030      	beq.n	805c0 <flash_write+0xcc>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   8055e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   80562:	f5c6 7880 	rsb	r8, r6, #256	; 0x100
   80566:	4647      	mov	r7, r8
   80568:	45d0      	cmp	r8, sl
   8056a:	bf28      	it	cs
   8056c:	4657      	movcs	r7, sl
	ul_addr = IFLASH1_ADDR + us_page * IFLASH0_PAGE_SIZE + us_offset;
   8056e:	f8bd 4012 	ldrh.w	r4, [sp, #18]
   80572:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
   80576:	0224      	lsls	r4, r4, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   80578:	4632      	mov	r2, r6
   8057a:	4621      	mov	r1, r4
   8057c:	4648      	mov	r0, r9
   8057e:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   80580:	463a      	mov	r2, r7
   80582:	9901      	ldr	r1, [sp, #4]
   80584:	eb09 0006 	add.w	r0, r9, r6
   80588:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset + writeSize,
   8058a:	19f0      	adds	r0, r6, r7
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   8058c:	eba8 0207 	sub.w	r2, r8, r7
				(void *)(ul_page_addr + us_offset + writeSize),
   80590:	1931      	adds	r1, r6, r4
		memcpy(puc_page_buffer + us_offset + writeSize,
   80592:	b292      	uxth	r2, r2
   80594:	4439      	add	r1, r7
   80596:	4448      	add	r0, r9
   80598:	47d8      	blx	fp
   8059a:	f1a9 0304 	sub.w	r3, r9, #4
   8059e:	3c04      	subs	r4, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   805a0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   805a4:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   805a8:	42ab      	cmp	r3, r5
   805aa:	d1f9      	bne.n	805a0 <flash_write+0xac>
		if (ul_erase_flag) {
   805ac:	9b02      	ldr	r3, [sp, #8]
   805ae:	2b00      	cmp	r3, #0
   805b0:	d0bf      	beq.n	80532 <flash_write+0x3e>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   805b2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   805b6:	2103      	movs	r1, #3
   805b8:	9805      	ldr	r0, [sp, #20]
   805ba:	4b08      	ldr	r3, [pc, #32]	; (805dc <flash_write+0xe8>)
   805bc:	4798      	blx	r3
   805be:	e7be      	b.n	8053e <flash_write+0x4a>
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   805c0:	9903      	ldr	r1, [sp, #12]
   805c2:	9805      	ldr	r0, [sp, #20]
   805c4:	4b04      	ldr	r3, [pc, #16]	; (805d8 <flash_write+0xe4>)
   805c6:	4798      	blx	r3

	return FLASH_RC_OK;
   805c8:	2000      	movs	r0, #0
}
   805ca:	b007      	add	sp, #28
   805cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   805d0:	000803b1 	.word	0x000803b1
   805d4:	000801ef 	.word	0x000801ef
   805d8:	00080211 	.word	0x00080211
   805dc:	0008022d 	.word	0x0008022d
   805e0:	20070ecc 	.word	0x20070ecc
   805e4:	00081fd1 	.word	0x00081fd1

000805e8 <WriteCalibToFlash>:
{
   805e8:	b538      	push	{r3, r4, r5, lr}
   805ea:	4604      	mov	r4, r0
	PrintLn("Writing to flash\n");
   805ec:	4812      	ldr	r0, [pc, #72]	; (80638 <WriteCalibToFlash+0x50>)
   805ee:	4b13      	ldr	r3, [pc, #76]	; (8063c <WriteCalibToFlash+0x54>)
   805f0:	4798      	blx	r3
	if(flash_unlock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   805f2:	2300      	movs	r3, #0
   805f4:	461a      	mov	r2, r3
   805f6:	4912      	ldr	r1, [pc, #72]	; (80640 <WriteCalibToFlash+0x58>)
   805f8:	4812      	ldr	r0, [pc, #72]	; (80644 <WriteCalibToFlash+0x5c>)
   805fa:	4d13      	ldr	r5, [pc, #76]	; (80648 <WriteCalibToFlash+0x60>)
   805fc:	47a8      	blx	r5
   805fe:	b970      	cbnz	r0, 8061e <WriteCalibToFlash+0x36>
	if(flash_write((uint32_t)FLASH_START+4, Calib, sizeof(uint32_t), 1) != FLASH_RC_OK)
   80600:	2301      	movs	r3, #1
   80602:	2204      	movs	r2, #4
   80604:	4621      	mov	r1, r4
   80606:	480f      	ldr	r0, [pc, #60]	; (80644 <WriteCalibToFlash+0x5c>)
   80608:	4c10      	ldr	r4, [pc, #64]	; (8064c <WriteCalibToFlash+0x64>)
   8060a:	47a0      	blx	r4
   8060c:	b958      	cbnz	r0, 80626 <WriteCalibToFlash+0x3e>
	if(flash_lock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   8060e:	2300      	movs	r3, #0
   80610:	461a      	mov	r2, r3
   80612:	490b      	ldr	r1, [pc, #44]	; (80640 <WriteCalibToFlash+0x58>)
   80614:	480b      	ldr	r0, [pc, #44]	; (80644 <WriteCalibToFlash+0x5c>)
   80616:	4c0e      	ldr	r4, [pc, #56]	; (80650 <WriteCalibToFlash+0x68>)
   80618:	47a0      	blx	r4
   8061a:	b940      	cbnz	r0, 8062e <WriteCalibToFlash+0x46>
   8061c:	bd38      	pop	{r3, r4, r5, pc}
		PrintLn("Bad unlock\n");
   8061e:	480d      	ldr	r0, [pc, #52]	; (80654 <WriteCalibToFlash+0x6c>)
   80620:	4b06      	ldr	r3, [pc, #24]	; (8063c <WriteCalibToFlash+0x54>)
   80622:	4798      	blx	r3
   80624:	e7ec      	b.n	80600 <WriteCalibToFlash+0x18>
		PrintLn("Bad write\n");
   80626:	480c      	ldr	r0, [pc, #48]	; (80658 <WriteCalibToFlash+0x70>)
   80628:	4b04      	ldr	r3, [pc, #16]	; (8063c <WriteCalibToFlash+0x54>)
   8062a:	4798      	blx	r3
   8062c:	e7ef      	b.n	8060e <WriteCalibToFlash+0x26>
		PrintLn("Bad lock\n");
   8062e:	480b      	ldr	r0, [pc, #44]	; (8065c <WriteCalibToFlash+0x74>)
   80630:	4b02      	ldr	r3, [pc, #8]	; (8063c <WriteCalibToFlash+0x54>)
   80632:	4798      	blx	r3
}
   80634:	e7f2      	b.n	8061c <WriteCalibToFlash+0x34>
   80636:	bf00      	nop
   80638:	000862dc 	.word	0x000862dc
   8063c:	00080661 	.word	0x00080661
   80640:	000c0003 	.word	0x000c0003
   80644:	000c0004 	.word	0x000c0004
   80648:	00080481 	.word	0x00080481
   8064c:	000804f5 	.word	0x000804f5
   80650:	0008040d 	.word	0x0008040d
   80654:	000862f0 	.word	0x000862f0
   80658:	000862fc 	.word	0x000862fc
   8065c:	00086308 	.word	0x00086308

00080660 <PrintLn>:

#include "Prints.h"
#include <asf.h>

void PrintLn(const char *str)
{
   80660:	4770      	bx	lr
	...

00080664 <writeByte_register>:

// When writing 0x1234 to SPI only 0x34 will be written

// In multi-byte registers read or write to the MSBit of the LSByte first.
void writeByte_register(uint8_t reg, uint8_t value)
{
   80664:	b500      	push	{lr}
   80666:	b083      	sub	sp, #12
	//uint8_t Test;
	//char out_str2[30] = {0};
	uint16_t Cmd[2];
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   80668:	f000 001f 	and.w	r0, r0, #31
   8066c:	f040 0020 	orr.w	r0, r0, #32
   80670:	f8ad 0004 	strh.w	r0, [sp, #4]
	Cmd[1] = value;
   80674:	f8ad 1006 	strh.w	r1, [sp, #6]
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   80678:	4a06      	ldr	r2, [pc, #24]	; (80694 <writeByte_register+0x30>)
   8067a:	2102      	movs	r1, #2
   8067c:	a801      	add	r0, sp, #4
   8067e:	4b06      	ldr	r3, [pc, #24]	; (80698 <writeByte_register+0x34>)
   80680:	4798      	blx	r3
   80682:	b110      	cbz	r0, 8068a <writeByte_register+0x26>
	}
	#endif*/
	
	//sprintf(out_str2,"Reg %u is %u write data %u\n", reg,Test,value);
	//PrintLn(out_str2);
}
   80684:	b003      	add	sp, #12
   80686:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   8068a:	4804      	ldr	r0, [pc, #16]	; (8069c <writeByte_register+0x38>)
   8068c:	4b04      	ldr	r3, [pc, #16]	; (806a0 <writeByte_register+0x3c>)
   8068e:	4798      	blx	r3
}
   80690:	e7f8      	b.n	80684 <writeByte_register+0x20>
   80692:	bf00      	nop
   80694:	20070fcc 	.word	0x20070fcc
   80698:	00080e31 	.word	0x00080e31
   8069c:	00086374 	.word	0x00086374
   806a0:	00080661 	.word	0x00080661

000806a4 <writeBuf_register>:

void writeBuf_register(uint8_t reg, const uint16_t* Buf, int Len)
{
   806a4:	b530      	push	{r4, r5, lr}
   806a6:	b085      	sub	sp, #20
	int i;
	uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   806a8:	f000 001f 	and.w	r0, r0, #31
   806ac:	f040 0020 	orr.w	r0, r0, #32
   806b0:	f8ad 0004 	strh.w	r0, [sp, #4]
	for(i=0;i<Len;i++)
   806b4:	1e15      	subs	r5, r2, #0
   806b6:	dd0a      	ble.n	806ce <writeBuf_register+0x2a>
   806b8:	460b      	mov	r3, r1
   806ba:	f10d 0206 	add.w	r2, sp, #6
   806be:	eb01 0445 	add.w	r4, r1, r5, lsl #1
		Cmd[i+1] = Buf[i];	
   806c2:	f833 0b02 	ldrh.w	r0, [r3], #2
   806c6:	f822 0b02 	strh.w	r0, [r2], #2
	for(i=0;i<Len;i++)
   806ca:	42a3      	cmp	r3, r4
   806cc:	d1f9      	bne.n	806c2 <writeBuf_register+0x1e>
	
	if(!SPIC_Write(Cmd, Len+1, &StatusRegister))
   806ce:	4a06      	ldr	r2, [pc, #24]	; (806e8 <writeBuf_register+0x44>)
   806d0:	1c69      	adds	r1, r5, #1
   806d2:	a801      	add	r0, sp, #4
   806d4:	4b05      	ldr	r3, [pc, #20]	; (806ec <writeBuf_register+0x48>)
   806d6:	4798      	blx	r3
   806d8:	b108      	cbz	r0, 806de <writeBuf_register+0x3a>
		PrintLn("Error2\n");
	
}
   806da:	b005      	add	sp, #20
   806dc:	bd30      	pop	{r4, r5, pc}
		PrintLn("Error2\n");
   806de:	4804      	ldr	r0, [pc, #16]	; (806f0 <writeBuf_register+0x4c>)
   806e0:	4b04      	ldr	r3, [pc, #16]	; (806f4 <writeBuf_register+0x50>)
   806e2:	4798      	blx	r3
}
   806e4:	e7f9      	b.n	806da <writeBuf_register+0x36>
   806e6:	bf00      	nop
   806e8:	20070fcc 	.word	0x20070fcc
   806ec:	00080e31 	.word	0x00080e31
   806f0:	0008636c 	.word	0x0008636c
   806f4:	00080661 	.word	0x00080661

000806f8 <readByte_register>:

uint8_t readByte_register(uint8_t reg)
{
   806f8:	b530      	push	{r4, r5, lr}
   806fa:	b08b      	sub	sp, #44	; 0x2c
   806fc:	4604      	mov	r4, r0
	uint16_t Resp;
	uint16_t Cmd[2];
	char out_str[30] = {0};
   806fe:	221e      	movs	r2, #30
   80700:	2100      	movs	r1, #0
   80702:	4668      	mov	r0, sp
   80704:	4b0d      	ldr	r3, [pc, #52]	; (8073c <readByte_register+0x44>)
   80706:	4798      	blx	r3
		
	Cmd[0] = R_REGISTER| (REGISTER_MASK & reg);
   80708:	f004 031f 	and.w	r3, r4, #31
   8070c:	f8ad 3020 	strh.w	r3, [sp, #32]
	Cmd[1] = 0;
   80710:	2300      	movs	r3, #0
   80712:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	SPIC_Read(Cmd, 2, &StatusRegister,&Resp);
   80716:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   8071a:	4a09      	ldr	r2, [pc, #36]	; (80740 <readByte_register+0x48>)
   8071c:	2102      	movs	r1, #2
   8071e:	a808      	add	r0, sp, #32
   80720:	4d08      	ldr	r5, [pc, #32]	; (80744 <readByte_register+0x4c>)
   80722:	47a8      	blx	r5
	
	sprintf(out_str,"read reg %u val %u \n", reg,Resp);
   80724:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   80728:	4622      	mov	r2, r4
   8072a:	4907      	ldr	r1, [pc, #28]	; (80748 <readByte_register+0x50>)
   8072c:	4668      	mov	r0, sp
   8072e:	4c07      	ldr	r4, [pc, #28]	; (8074c <readByte_register+0x54>)
   80730:	47a0      	blx	r4
	//PrintLn(out_str);
	return (uint8_t)(Resp);
}
   80732:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80736:	b00b      	add	sp, #44	; 0x2c
   80738:	bd30      	pop	{r4, r5, pc}
   8073a:	bf00      	nop
   8073c:	000820bd 	.word	0x000820bd
   80740:	20070fcc 	.word	0x20070fcc
   80744:	00080eed 	.word	0x00080eed
   80748:	00086354 	.word	0x00086354
   8074c:	00082195 	.word	0x00082195

00080750 <readBuf_register>:

void readBuf_register(uint8_t reg, uint16_t* Resp)
{
   80750:	b570      	push	{r4, r5, r6, lr}
   80752:	b090      	sub	sp, #64	; 0x40
   80754:	4605      	mov	r5, r0
   80756:	460c      	mov	r4, r1
	int i;
	uint16_t Cmd[6];
	char out_str[30] = {0};
   80758:	221e      	movs	r2, #30
   8075a:	2100      	movs	r1, #0
   8075c:	a805      	add	r0, sp, #20
   8075e:	4b13      	ldr	r3, [pc, #76]	; (807ac <readBuf_register+0x5c>)
   80760:	4798      	blx	r3
	//uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = R_REGISTER | (REGISTER_MASK & reg);
   80762:	f005 031f 	and.w	r3, r5, #31
   80766:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	for(i=0;i<5;i++)
		Cmd[i+1] = 0;
   8076a:	2300      	movs	r3, #0
   8076c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   80770:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   80774:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   80778:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   8077c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	
	SPIC_Read(Cmd, 6, &StatusRegister, Resp);
   80780:	4623      	mov	r3, r4
   80782:	4a0b      	ldr	r2, [pc, #44]	; (807b0 <readBuf_register+0x60>)
   80784:	2106      	movs	r1, #6
   80786:	a80d      	add	r0, sp, #52	; 0x34
   80788:	4e0a      	ldr	r6, [pc, #40]	; (807b4 <readBuf_register+0x64>)
   8078a:	47b0      	blx	r6
	sprintf(out_str,"read reg %u val %u %u %u %u %u\n", reg,Resp[0],Resp[1],Resp[2],Resp[3],Resp[4]);
   8078c:	8823      	ldrh	r3, [r4, #0]
   8078e:	8922      	ldrh	r2, [r4, #8]
   80790:	9203      	str	r2, [sp, #12]
   80792:	88e2      	ldrh	r2, [r4, #6]
   80794:	9202      	str	r2, [sp, #8]
   80796:	88a2      	ldrh	r2, [r4, #4]
   80798:	9201      	str	r2, [sp, #4]
   8079a:	8862      	ldrh	r2, [r4, #2]
   8079c:	9200      	str	r2, [sp, #0]
   8079e:	462a      	mov	r2, r5
   807a0:	4905      	ldr	r1, [pc, #20]	; (807b8 <readBuf_register+0x68>)
   807a2:	a805      	add	r0, sp, #20
   807a4:	4c05      	ldr	r4, [pc, #20]	; (807bc <readBuf_register+0x6c>)
   807a6:	47a0      	blx	r4
	//PrintLn(out_str);
}
   807a8:	b010      	add	sp, #64	; 0x40
   807aa:	bd70      	pop	{r4, r5, r6, pc}
   807ac:	000820bd 	.word	0x000820bd
   807b0:	20070fcc 	.word	0x20070fcc
   807b4:	00080eed 	.word	0x00080eed
   807b8:	00086334 	.word	0x00086334
   807bc:	00082195 	.word	0x00082195

000807c0 <RF_ActiveUp>:

void RF_ActiveUp()
{
   807c0:	b508      	push	{r3, lr}
	pio_set_pin_high(LED1_GPIO);
   807c2:	2055      	movs	r0, #85	; 0x55
   807c4:	4b01      	ldr	r3, [pc, #4]	; (807cc <RF_ActiveUp+0xc>)
   807c6:	4798      	blx	r3
   807c8:	bd08      	pop	{r3, pc}
   807ca:	bf00      	nop
   807cc:	000811fb 	.word	0x000811fb

000807d0 <RF_DisActive>:
}

void RF_DisActive()
{
   807d0:	b508      	push	{r3, lr}
	pio_set_pin_low(LED1_GPIO);
   807d2:	2055      	movs	r0, #85	; 0x55
   807d4:	4b01      	ldr	r3, [pc, #4]	; (807dc <RF_DisActive+0xc>)
   807d6:	4798      	blx	r3
   807d8:	bd08      	pop	{r3, pc}
   807da:	bf00      	nop
   807dc:	00081215 	.word	0x00081215

000807e0 <RF_PowerUpTXmode>:
}

void RF_PowerUpTXmode()
{
   807e0:	b510      	push	{r4, lr}
	int i;
	writeByte_register(CONFIG,(readByte_register(CONFIG)) | ((1<<PWR_UP) & ~_BV(PRIM_RX)) );
   807e2:	2000      	movs	r0, #0
   807e4:	4c06      	ldr	r4, [pc, #24]	; (80800 <RF_PowerUpTXmode+0x20>)
   807e6:	47a0      	blx	r4
   807e8:	f040 0102 	orr.w	r1, r0, #2
   807ec:	b2c9      	uxtb	r1, r1
   807ee:	2000      	movs	r0, #0
   807f0:	4b04      	ldr	r3, [pc, #16]	; (80804 <RF_PowerUpTXmode+0x24>)
   807f2:	4798      	blx	r3
	readByte_register(CONFIG);
   807f4:	2000      	movs	r0, #0
   807f6:	47a0      	blx	r4
   807f8:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   807fa:	3b01      	subs	r3, #1
   807fc:	d1fd      	bne.n	807fa <RF_PowerUpTXmode+0x1a>
		__NOP;
}
   807fe:	bd10      	pop	{r4, pc}
   80800:	000806f9 	.word	0x000806f9
   80804:	00080665 	.word	0x00080665

00080808 <RF_SetPALevel>:

void RF_SetPALevel(rf24_pa_dbm_e level)
{
   80808:	b510      	push	{r4, lr}
   8080a:	4604      	mov	r4, r0
	uint8_t setup = readByte_register(RF_SETUP) ;
   8080c:	2006      	movs	r0, #6
   8080e:	4b0c      	ldr	r3, [pc, #48]	; (80840 <RF_SetPALevel+0x38>)
   80810:	4798      	blx	r3
   80812:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	setup |= (1<<RF_PWR_LOW);
	setup &= ~(1<<RF_PWR_HIGH);

	// switch uses RAM (evil!)
	if ( level == RF24_PA_MAX )
   80816:	2c03      	cmp	r4, #3
   80818:	d00b      	beq.n	80832 <RF_SetPALevel+0x2a>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_HIGH )
   8081a:	2c02      	cmp	r4, #2
   8081c:	d00c      	beq.n	80838 <RF_SetPALevel+0x30>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_LOW )
   8081e:	2c04      	cmp	r4, #4
	setup &= ~(1<<RF_PWR_HIGH);
   80820:	bf14      	ite	ne
   80822:	f040 0102 	orrne.w	r1, r0, #2
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   80826:	f040 0106 	orreq.w	r1, r0, #6
	}

	writeByte_register( RF_SETUP, setup ) ;
   8082a:	2006      	movs	r0, #6
   8082c:	4b05      	ldr	r3, [pc, #20]	; (80844 <RF_SetPALevel+0x3c>)
   8082e:	4798      	blx	r3
   80830:	bd10      	pop	{r4, pc}
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   80832:	f040 0106 	orr.w	r1, r0, #6
   80836:	e7f8      	b.n	8082a <RF_SetPALevel+0x22>
		setup |= _BV(RF_PWR_HIGH) ;
   80838:	f040 0106 	orr.w	r1, r0, #6
   8083c:	e7f5      	b.n	8082a <RF_SetPALevel+0x22>
   8083e:	bf00      	nop
   80840:	000806f9 	.word	0x000806f9
   80844:	00080665 	.word	0x00080665

00080848 <RF_setDataRate>:
}


bool RF_setDataRate(rf24_datarate_e speed)
{
   80848:	b510      	push	{r4, lr}
   8084a:	4604      	mov	r4, r0
	bool result = false;
	uint8_t setup = readByte_register(RF_SETUP) ;
   8084c:	2006      	movs	r0, #6
   8084e:	4b09      	ldr	r3, [pc, #36]	; (80874 <RF_setDataRate+0x2c>)
   80850:	4798      	blx	r3

	// HIGH and LOW '00' is 1Mbs - our default
	//wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   80852:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
   80856:	2c02      	cmp	r4, #2
   80858:	d008      	beq.n	8086c <RF_setDataRate+0x24>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
   8085a:	2c01      	cmp	r4, #1
		{
			//wide_band = true ;
			setup |= _BV(RF_DR_HIGH);
   8085c:	bf08      	it	eq
   8085e:	f041 0108 	orreq.w	r1, r1, #8
		{
			// 1Mbs
			//wide_band = false ;
		}
	}
	writeByte_register(RF_SETUP,setup);
   80862:	2006      	movs	r0, #6
   80864:	4b04      	ldr	r3, [pc, #16]	; (80878 <RF_setDataRate+0x30>)
   80866:	4798      	blx	r3
	//	sprintf(out_str2,"Daniel %u setup %u \n", setup2,setup);
		//PrintLn(out_str2);
	}
	#endif*/
	return result;
}
   80868:	2000      	movs	r0, #0
   8086a:	bd10      	pop	{r4, pc}
		setup |= _BV( RF_DR_LOW ) ;
   8086c:	f041 0120 	orr.w	r1, r1, #32
   80870:	e7f7      	b.n	80862 <RF_setDataRate+0x1a>
   80872:	bf00      	nop
   80874:	000806f9 	.word	0x000806f9
   80878:	00080665 	.word	0x00080665

0008087c <RF_setCRCLength>:

void RF_setCRCLength(rf24_crclength_e length)
{
   8087c:	b510      	push	{r4, lr}
   8087e:	4604      	mov	r4, r0
	uint8_t config = readByte_register(CONFIG) & ~( _BV(CRCO) | _BV(EN_CRC)) ;
   80880:	2000      	movs	r0, #0
   80882:	4b07      	ldr	r3, [pc, #28]	; (808a0 <RF_setCRCLength+0x24>)
   80884:	4798      	blx	r3
   80886:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	
	// switch uses RAM (evil!)
	if ( length == RF24_CRC_DISABLED )
   8088a:	b12c      	cbz	r4, 80898 <RF_setCRCLength+0x1c>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
   8088c:	2c01      	cmp	r4, #1
	{
		config |= _BV(EN_CRC);
   8088e:	bf0c      	ite	eq
   80890:	f041 0108 	orreq.w	r1, r1, #8
	}
	else
	{
		config |= _BV(EN_CRC);
		config |= _BV( CRCO );
   80894:	f041 010c 	orrne.w	r1, r1, #12
	}
	writeByte_register( CONFIG, config ) ;
   80898:	2000      	movs	r0, #0
   8089a:	4b02      	ldr	r3, [pc, #8]	; (808a4 <RF_setCRCLength+0x28>)
   8089c:	4798      	blx	r3
   8089e:	bd10      	pop	{r4, pc}
   808a0:	000806f9 	.word	0x000806f9
   808a4:	00080665 	.word	0x00080665

000808a8 <RF_setChannel>:
}


void RF_setChannel(uint8_t channel)
{
   808a8:	b508      	push	{r3, lr}
	//const uint8_t max_channel = 127;
	uint8_t RF_CH2;
	
	writeByte_register(RF_CH,channel);
   808aa:	4601      	mov	r1, r0
   808ac:	2005      	movs	r0, #5
   808ae:	4b03      	ldr	r3, [pc, #12]	; (808bc <RF_setChannel+0x14>)
   808b0:	4798      	blx	r3
	// Verify our result
	if ( (RF_CH2=readByte_register(RF_CH)) == channel )
   808b2:	2005      	movs	r0, #5
   808b4:	4b02      	ldr	r3, [pc, #8]	; (808c0 <RF_setChannel+0x18>)
   808b6:	4798      	blx	r3
   808b8:	bd08      	pop	{r3, pc}
   808ba:	bf00      	nop
   808bc:	00080665 	.word	0x00080665
   808c0:	000806f9 	.word	0x000806f9

000808c4 <flush_rx>:
	//	PrintLn(out_str2);
	}
	
}
void flush_rx(void)
{
   808c4:	b500      	push	{lr}
   808c6:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_RX;
   808c8:	a802      	add	r0, sp, #8
   808ca:	23e2      	movs	r3, #226	; 0xe2
   808cc:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   808d0:	4a05      	ldr	r2, [pc, #20]	; (808e8 <flush_rx+0x24>)
   808d2:	2101      	movs	r1, #1
   808d4:	4b05      	ldr	r3, [pc, #20]	; (808ec <flush_rx+0x28>)
   808d6:	4798      	blx	r3
   808d8:	b110      	cbz	r0, 808e0 <flush_rx+0x1c>
		PrintLn("Error\n");
}
   808da:	b003      	add	sp, #12
   808dc:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   808e0:	4803      	ldr	r0, [pc, #12]	; (808f0 <flush_rx+0x2c>)
   808e2:	4b04      	ldr	r3, [pc, #16]	; (808f4 <flush_rx+0x30>)
   808e4:	4798      	blx	r3
}
   808e6:	e7f8      	b.n	808da <flush_rx+0x16>
   808e8:	20070fcc 	.word	0x20070fcc
   808ec:	00080e31 	.word	0x00080e31
   808f0:	00086374 	.word	0x00086374
   808f4:	00080661 	.word	0x00080661

000808f8 <flush_tx>:

/****************************************************************************/

void flush_tx(void)
{
   808f8:	b500      	push	{lr}
   808fa:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_TX;
   808fc:	a802      	add	r0, sp, #8
   808fe:	23e1      	movs	r3, #225	; 0xe1
   80900:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   80904:	4a05      	ldr	r2, [pc, #20]	; (8091c <flush_tx+0x24>)
   80906:	2101      	movs	r1, #1
   80908:	4b05      	ldr	r3, [pc, #20]	; (80920 <flush_tx+0x28>)
   8090a:	4798      	blx	r3
   8090c:	b110      	cbz	r0, 80914 <flush_tx+0x1c>
		PrintLn("Error\n");
}
   8090e:	b003      	add	sp, #12
   80910:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   80914:	4803      	ldr	r0, [pc, #12]	; (80924 <flush_tx+0x2c>)
   80916:	4b04      	ldr	r3, [pc, #16]	; (80928 <flush_tx+0x30>)
   80918:	4798      	blx	r3
}
   8091a:	e7f8      	b.n	8090e <flush_tx+0x16>
   8091c:	20070fcc 	.word	0x20070fcc
   80920:	00080e31 	.word	0x00080e31
   80924:	00086374 	.word	0x00086374
   80928:	00080661 	.word	0x00080661

0008092c <RF_OpenWritePipe>:

void RF_OpenWritePipe()
{
   8092c:	b508      	push	{r3, lr}
	writeBuf_register(TX_ADDR, pipe0, 5);
   8092e:	2205      	movs	r2, #5
   80930:	4902      	ldr	r1, [pc, #8]	; (8093c <RF_OpenWritePipe+0x10>)
   80932:	2010      	movs	r0, #16
   80934:	4b02      	ldr	r3, [pc, #8]	; (80940 <RF_OpenWritePipe+0x14>)
   80936:	4798      	blx	r3
   80938:	bd08      	pop	{r3, pc}
   8093a:	bf00      	nop
   8093c:	00086328 	.word	0x00086328
   80940:	000806a5 	.word	0x000806a5

00080944 <RF_InitTX>:
}

void RF_InitTX()
{
   80944:	b510      	push	{r4, lr}
   80946:	b084      	sub	sp, #16
	uint16_t Response[5]= {0,0,0,0,0};
   80948:	2300      	movs	r3, #0
   8094a:	9301      	str	r3, [sp, #4]
   8094c:	9302      	str	r3, [sp, #8]
   8094e:	f8ad 300c 	strh.w	r3, [sp, #12]
	int i;
	RF_DisActive();
   80952:	4b1a      	ldr	r3, [pc, #104]	; (809bc <RF_InitTX+0x78>)
   80954:	4798      	blx	r3
   80956:	23ff      	movs	r3, #255	; 0xff
	//little delay
	for(i=0;i<0xff;i++)
   80958:	3b01      	subs	r3, #1
   8095a:	d1fd      	bne.n	80958 <RF_InitTX+0x14>
		__NOP;
	
	
	// Disable auto-retransmit
	writeByte_register(SETUP_RETR,(0b0100 << ARD) | (0 << ARC));
   8095c:	2140      	movs	r1, #64	; 0x40
   8095e:	2004      	movs	r0, #4
   80960:	4b17      	ldr	r3, [pc, #92]	; (809c0 <RF_InitTX+0x7c>)
   80962:	4798      	blx	r3
	// You can configure the RF24 when power-down , stand-by or RX,TX mode
	RF_SetPALevel(RF24_PA_MAX);
   80964:	2003      	movs	r0, #3
   80966:	4b17      	ldr	r3, [pc, #92]	; (809c4 <RF_InitTX+0x80>)
   80968:	4798      	blx	r3
	if(!RF_setDataRate(RF24_250KBPS))
   8096a:	2002      	movs	r0, #2
   8096c:	4b16      	ldr	r3, [pc, #88]	; (809c8 <RF_InitTX+0x84>)
   8096e:	4798      	blx	r3
   80970:	b1f8      	cbz	r0, 809b2 <RF_InitTX+0x6e>
		PrintLn("Error3\n");
	// Initialize no CRC
	RF_setCRCLength(RF24_CRC_DISABLED);
   80972:	2000      	movs	r0, #0
   80974:	4b15      	ldr	r3, [pc, #84]	; (809cc <RF_InitTX+0x88>)
   80976:	4798      	blx	r3
	// Disable dynamic payloads, to match dynamic_payloads_enabled setting
	writeByte_register(DYNPD,0);
   80978:	2100      	movs	r1, #0
   8097a:	201c      	movs	r0, #28
   8097c:	4c10      	ldr	r4, [pc, #64]	; (809c0 <RF_InitTX+0x7c>)
   8097e:	47a0      	blx	r4
	// Reset current status
	// Notice reset and flush is the last thing we do
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   80980:	2170      	movs	r1, #112	; 0x70
   80982:	2007      	movs	r0, #7
   80984:	47a0      	blx	r4
	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	RF_setChannel(76);
   80986:	204c      	movs	r0, #76	; 0x4c
   80988:	4b11      	ldr	r3, [pc, #68]	; (809d0 <RF_InitTX+0x8c>)
   8098a:	4798      	blx	r3
	// NO_ACK Mode
	writeByte_register(EN_AA, 0);
   8098c:	2100      	movs	r1, #0
   8098e:	2001      	movs	r0, #1
   80990:	47a0      	blx	r4
	// Flush buffers
	flush_rx();
   80992:	4b10      	ldr	r3, [pc, #64]	; (809d4 <RF_InitTX+0x90>)
   80994:	4798      	blx	r3
	flush_tx();
   80996:	4b10      	ldr	r3, [pc, #64]	; (809d8 <RF_InitTX+0x94>)
   80998:	4798      	blx	r3
	// Route the packet to PTX address at pipe0
	RF_OpenWritePipe();
   8099a:	4b10      	ldr	r3, [pc, #64]	; (809dc <RF_InitTX+0x98>)
   8099c:	4798      	blx	r3
	RF_PowerUpTXmode();
   8099e:	4b10      	ldr	r3, [pc, #64]	; (809e0 <RF_InitTX+0x9c>)
   809a0:	4798      	blx	r3
	
	RF_ActiveUp();
   809a2:	4b10      	ldr	r3, [pc, #64]	; (809e4 <RF_InitTX+0xa0>)
   809a4:	4798      	blx	r3
	readByte_register(RF_CH);
	readByte_register(SETUP_RETR);
	readByte_register(DYNPD);
	readByte_register(STATUS);
	readByte_register(EN_AA);*/
	readBuf_register(TX_ADDR,Response);
   809a6:	a901      	add	r1, sp, #4
   809a8:	2010      	movs	r0, #16
   809aa:	4b0f      	ldr	r3, [pc, #60]	; (809e8 <RF_InitTX+0xa4>)
   809ac:	4798      	blx	r3
	
}
   809ae:	b004      	add	sp, #16
   809b0:	bd10      	pop	{r4, pc}
		PrintLn("Error3\n");
   809b2:	480e      	ldr	r0, [pc, #56]	; (809ec <RF_InitTX+0xa8>)
   809b4:	4b0e      	ldr	r3, [pc, #56]	; (809f0 <RF_InitTX+0xac>)
   809b6:	4798      	blx	r3
   809b8:	e7db      	b.n	80972 <RF_InitTX+0x2e>
   809ba:	bf00      	nop
   809bc:	000807d1 	.word	0x000807d1
   809c0:	00080665 	.word	0x00080665
   809c4:	00080809 	.word	0x00080809
   809c8:	00080849 	.word	0x00080849
   809cc:	0008087d 	.word	0x0008087d
   809d0:	000808a9 	.word	0x000808a9
   809d4:	000808c5 	.word	0x000808c5
   809d8:	000808f9 	.word	0x000808f9
   809dc:	0008092d 	.word	0x0008092d
   809e0:	000807e1 	.word	0x000807e1
   809e4:	000807c1 	.word	0x000807c1
   809e8:	00080751 	.word	0x00080751
   809ec:	00086314 	.word	0x00086314
   809f0:	00080661 	.word	0x00080661

000809f4 <RF_SendBell>:


void RF_SendBell(uint16_t CmdID)
{
   809f4:	b510      	push	{r4, lr}
   809f6:	b082      	sub	sp, #8
   809f8:	4604      	mov	r4, r0
	uint16_t Cmd[2];
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   809fa:	2170      	movs	r1, #112	; 0x70
   809fc:	2007      	movs	r0, #7
   809fe:	4b0e      	ldr	r3, [pc, #56]	; (80a38 <RF_SendBell+0x44>)
   80a00:	4798      	blx	r3
	Cmd[0] = W_TX_PAYLOAD;
   80a02:	23a0      	movs	r3, #160	; 0xa0
   80a04:	f8ad 3004 	strh.w	r3, [sp, #4]
	Cmd[1] = CmdID;
   80a08:	f8ad 4006 	strh.w	r4, [sp, #6]
	Timer_Sleep(10);
   80a0c:	200a      	movs	r0, #10
   80a0e:	4b0b      	ldr	r3, [pc, #44]	; (80a3c <RF_SendBell+0x48>)
   80a10:	4798      	blx	r3
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   80a12:	4a0b      	ldr	r2, [pc, #44]	; (80a40 <RF_SendBell+0x4c>)
   80a14:	2102      	movs	r1, #2
   80a16:	a801      	add	r0, sp, #4
   80a18:	4b0a      	ldr	r3, [pc, #40]	; (80a44 <RF_SendBell+0x50>)
   80a1a:	4798      	blx	r3
   80a1c:	b138      	cbz	r0, 80a2e <RF_SendBell+0x3a>
		PrintLn("Error\n");
	Timer_Sleep(10);
   80a1e:	200a      	movs	r0, #10
   80a20:	4b06      	ldr	r3, [pc, #24]	; (80a3c <RF_SendBell+0x48>)
   80a22:	4798      	blx	r3
	PrintLn("Send RF \n");
   80a24:	4808      	ldr	r0, [pc, #32]	; (80a48 <RF_SendBell+0x54>)
   80a26:	4b09      	ldr	r3, [pc, #36]	; (80a4c <RF_SendBell+0x58>)
   80a28:	4798      	blx	r3
   80a2a:	b002      	add	sp, #8
   80a2c:	bd10      	pop	{r4, pc}
		PrintLn("Error\n");
   80a2e:	4808      	ldr	r0, [pc, #32]	; (80a50 <RF_SendBell+0x5c>)
   80a30:	4b06      	ldr	r3, [pc, #24]	; (80a4c <RF_SendBell+0x58>)
   80a32:	4798      	blx	r3
   80a34:	e7f3      	b.n	80a1e <RF_SendBell+0x2a>
   80a36:	bf00      	nop
   80a38:	00080665 	.word	0x00080665
   80a3c:	00081029 	.word	0x00081029
   80a40:	20070fcc 	.word	0x20070fcc
   80a44:	00080e31 	.word	0x00080e31
   80a48:	0008631c 	.word	0x0008631c
   80a4c:	00080661 	.word	0x00080661
   80a50:	00086374 	.word	0x00086374

00080a54 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   80a54:	6843      	ldr	r3, [r0, #4]
   80a56:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80a5a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   80a5c:	6843      	ldr	r3, [r0, #4]
   80a5e:	0409      	lsls	r1, r1, #16
   80a60:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   80a64:	4319      	orrs	r1, r3
   80a66:	6041      	str	r1, [r0, #4]
   80a68:	4770      	bx	lr

00080a6a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   80a6a:	6843      	ldr	r3, [r0, #4]
   80a6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80a70:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   80a72:	6843      	ldr	r3, [r0, #4]
   80a74:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   80a78:	6041      	str	r1, [r0, #4]
   80a7a:	4770      	bx	lr

00080a7c <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80a7c:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80a7e:	f643 2399 	movw	r3, #15001	; 0x3a99
   80a82:	6904      	ldr	r4, [r0, #16]
   80a84:	f014 0f01 	tst.w	r4, #1
   80a88:	d103      	bne.n	80a92 <spi_read+0x16>
		if (!timeout--) {
   80a8a:	3b01      	subs	r3, #1
   80a8c:	d1f9      	bne.n	80a82 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   80a8e:	2001      	movs	r0, #1
   80a90:	e009      	b.n	80aa6 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   80a92:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80a94:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80a96:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80a9a:	bf1c      	itt	ne
   80a9c:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   80aa0:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80aa2:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   80aa4:	2000      	movs	r0, #0
}
   80aa6:	bc10      	pop	{r4}
   80aa8:	4770      	bx	lr

00080aaa <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80aaa:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80aac:	f643 2499 	movw	r4, #15001	; 0x3a99
   80ab0:	6905      	ldr	r5, [r0, #16]
   80ab2:	f015 0f02 	tst.w	r5, #2
   80ab6:	d103      	bne.n	80ac0 <spi_write+0x16>
		if (!timeout--) {
   80ab8:	3c01      	subs	r4, #1
   80aba:	d1f9      	bne.n	80ab0 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   80abc:	2001      	movs	r0, #1
   80abe:	e00c      	b.n	80ada <spi_write+0x30>
   80ac0:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   80ac2:	f014 0f02 	tst.w	r4, #2
   80ac6:	d006      	beq.n	80ad6 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   80ac8:	0412      	lsls	r2, r2, #16
   80aca:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80ace:	4311      	orrs	r1, r2
		if (uc_last) {
   80ad0:	b10b      	cbz	r3, 80ad6 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   80ad2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   80ad6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   80ad8:	2000      	movs	r0, #0
}
   80ada:	bc30      	pop	{r4, r5}
   80adc:	4770      	bx	lr

00080ade <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   80ade:	b932      	cbnz	r2, 80aee <spi_set_clock_polarity+0x10>
   80ae0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80ae4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ae6:	f023 0301 	bic.w	r3, r3, #1
   80aea:	6303      	str	r3, [r0, #48]	; 0x30
   80aec:	4770      	bx	lr
   80aee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80af2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80af4:	f043 0301 	orr.w	r3, r3, #1
   80af8:	6303      	str	r3, [r0, #48]	; 0x30
   80afa:	4770      	bx	lr

00080afc <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   80afc:	b932      	cbnz	r2, 80b0c <spi_set_clock_phase+0x10>
   80afe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80b02:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b04:	f023 0302 	bic.w	r3, r3, #2
   80b08:	6303      	str	r3, [r0, #48]	; 0x30
   80b0a:	4770      	bx	lr
   80b0c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80b10:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b12:	f043 0302 	orr.w	r3, r3, #2
   80b16:	6303      	str	r3, [r0, #48]	; 0x30
   80b18:	4770      	bx	lr

00080b1a <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   80b1a:	2a04      	cmp	r2, #4
   80b1c:	d003      	beq.n	80b26 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   80b1e:	b16a      	cbz	r2, 80b3c <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   80b20:	2a08      	cmp	r2, #8
   80b22:	d016      	beq.n	80b52 <spi_configure_cs_behavior+0x38>
   80b24:	4770      	bx	lr
   80b26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80b2a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b2c:	f023 0308 	bic.w	r3, r3, #8
   80b30:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   80b32:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b34:	f043 0304 	orr.w	r3, r3, #4
   80b38:	6303      	str	r3, [r0, #48]	; 0x30
   80b3a:	4770      	bx	lr
   80b3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80b40:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b42:	f023 0308 	bic.w	r3, r3, #8
   80b46:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80b48:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b4a:	f023 0304 	bic.w	r3, r3, #4
   80b4e:	6303      	str	r3, [r0, #48]	; 0x30
   80b50:	4770      	bx	lr
   80b52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80b56:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b58:	f043 0308 	orr.w	r3, r3, #8
   80b5c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   80b5e:	e7e1      	b.n	80b24 <spi_configure_cs_behavior+0xa>

00080b60 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80b60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80b64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   80b6a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80b6c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b6e:	431a      	orrs	r2, r3
   80b70:	630a      	str	r2, [r1, #48]	; 0x30
   80b72:	4770      	bx	lr

00080b74 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
   80b74:	b172      	cbz	r2, 80b94 <spi_set_baudrate_div+0x20>
{
   80b76:	b410      	push	{r4}
   80b78:	4614      	mov	r4, r2
   80b7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   80b7e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   80b84:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80b86:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80b88:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   80b8c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   80b8e:	2000      	movs	r0, #0
}
   80b90:	bc10      	pop	{r4}
   80b92:	4770      	bx	lr
        return -1;
   80b94:	f04f 30ff 	mov.w	r0, #4294967295
   80b98:	4770      	bx	lr

00080b9a <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80b9a:	b410      	push	{r4}
   80b9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   80ba0:	6b08      	ldr	r0, [r1, #48]	; 0x30
   80ba2:	b280      	uxth	r0, r0
   80ba4:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80ba6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   80ba8:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   80bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   80bb0:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   80bb2:	bc10      	pop	{r4}
   80bb4:	4770      	bx	lr
	...

00080bb8 <spi_set_writeprotect>:
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE | SPI_WPCR_SPIWPEN;
	} else {
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE;
	}
#else
	if (ul_enable) {
   80bb8:	b919      	cbnz	r1, 80bc2 <spi_set_writeprotect+0xa>
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
	} else {
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD;
   80bba:	4b04      	ldr	r3, [pc, #16]	; (80bcc <spi_set_writeprotect+0x14>)
   80bbc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80bc0:	4770      	bx	lr
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
   80bc2:	4b03      	ldr	r3, [pc, #12]	; (80bd0 <spi_set_writeprotect+0x18>)
   80bc4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80bc8:	4770      	bx	lr
   80bca:	bf00      	nop
   80bcc:	53504900 	.word	0x53504900
   80bd0:	53504901 	.word	0x53504901

00080bd4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80bd4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80bd6:	0189      	lsls	r1, r1, #6
   80bd8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80bda:	2402      	movs	r4, #2
   80bdc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80bde:	f04f 31ff 	mov.w	r1, #4294967295
   80be2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80be4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80be6:	605a      	str	r2, [r3, #4]
}
   80be8:	bc10      	pop	{r4}
   80bea:	4770      	bx	lr

00080bec <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80bec:	0189      	lsls	r1, r1, #6
   80bee:	2305      	movs	r3, #5
   80bf0:	5043      	str	r3, [r0, r1]
   80bf2:	4770      	bx	lr

00080bf4 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80bf4:	0189      	lsls	r1, r1, #6
   80bf6:	2302      	movs	r3, #2
   80bf8:	5043      	str	r3, [r0, r1]
   80bfa:	4770      	bx	lr

00080bfc <tc_set_writeprotect>:
		uint32_t ul_enable)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	if (ul_enable) {
   80bfc:	b919      	cbnz	r1, 80c06 <tc_set_writeprotect+0xa>
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
	} else {
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
   80bfe:	4b04      	ldr	r3, [pc, #16]	; (80c10 <tc_set_writeprotect+0x14>)
   80c00:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80c04:	4770      	bx	lr
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
   80c06:	4b03      	ldr	r3, [pc, #12]	; (80c14 <tc_set_writeprotect+0x18>)
   80c08:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80c0c:	4770      	bx	lr
   80c0e:	bf00      	nop
   80c10:	54494d00 	.word	0x54494d00
   80c14:	54494d01 	.word	0x54494d01

00080c18 <ADCC_Init>:
#include "ADCC.h"

uint16_t ADCC_GlobalRawData[ADC_NUM_CHANNELS];

void ADCC_Init()
{
   80c18:	b570      	push	{r4, r5, r6, lr}
	pmc_enable_periph_clk(ID_ADC);
   80c1a:	2025      	movs	r0, #37	; 0x25
   80c1c:	4b21      	ldr	r3, [pc, #132]	; (80ca4 <ADCC_Init+0x8c>)
   80c1e:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(),sysclk_get_main_hz()/4, ADC_STARTUP_TIME_5);
   80c20:	4c21      	ldr	r4, [pc, #132]	; (80ca8 <ADCC_Init+0x90>)
   80c22:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
   80c26:	4a21      	ldr	r2, [pc, #132]	; (80cac <ADCC_Init+0x94>)
   80c28:	4921      	ldr	r1, [pc, #132]	; (80cb0 <ADCC_Init+0x98>)
   80c2a:	4620      	mov	r0, r4
   80c2c:	4d21      	ldr	r5, [pc, #132]	; (80cb4 <ADCC_Init+0x9c>)
   80c2e:	47a8      	blx	r5
	adc_configure_timing(ADC,20,ADC_SETTLING_TIME_0,50);
   80c30:	2332      	movs	r3, #50	; 0x32
   80c32:	2200      	movs	r2, #0
   80c34:	2114      	movs	r1, #20
   80c36:	4620      	mov	r0, r4
   80c38:	4d1f      	ldr	r5, [pc, #124]	; (80cb8 <ADCC_Init+0xa0>)
   80c3a:	47a8      	blx	r5
	adc_configure_trigger(ADC,ADC_TRIG_TIO_CH_0,0);
   80c3c:	2200      	movs	r2, #0
   80c3e:	2103      	movs	r1, #3
   80c40:	4620      	mov	r0, r4
   80c42:	4b1e      	ldr	r3, [pc, #120]	; (80cbc <ADCC_Init+0xa4>)
   80c44:	4798      	blx	r3
	adc_disable_all_channel(ADC);
   80c46:	4620      	mov	r0, r4
   80c48:	4b1d      	ldr	r3, [pc, #116]	; (80cc0 <ADCC_Init+0xa8>)
   80c4a:	4798      	blx	r3
	adc_disable_interrupt(ADC, 0xFFFFFFFF);
   80c4c:	f04f 31ff 	mov.w	r1, #4294967295
   80c50:	4620      	mov	r0, r4
   80c52:	4b1c      	ldr	r3, [pc, #112]	; (80cc4 <ADCC_Init+0xac>)
   80c54:	4798      	blx	r3
	adc_set_resolution(ADC, ADC_12_BITS);
   80c56:	2100      	movs	r1, #0
   80c58:	4620      	mov	r0, r4
   80c5a:	4b1b      	ldr	r3, [pc, #108]	; (80cc8 <ADCC_Init+0xb0>)
   80c5c:	4798      	blx	r3
	ADC->ADC_PTCR =  ADC_PTCR_RXTEN;
   80c5e:	2601      	movs	r6, #1
   80c60:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
	ADC->ADC_RPR = (uint32_t)ADCC_GlobalRawData;
   80c64:	4a19      	ldr	r2, [pc, #100]	; (80ccc <ADCC_Init+0xb4>)
   80c66:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	ADC->ADC_RCR = ADC_NUM_CHANNELS;
   80c6a:	2303      	movs	r3, #3
   80c6c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	ADC->ADC_RNPR =  (uint32_t)ADCC_GlobalRawData;
   80c70:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
	ADC->ADC_RNCR = ADC_NUM_CHANNELS;
   80c74:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	adc_enable_channel(ADC,ADC_CHANNEL_0);
   80c78:	2100      	movs	r1, #0
   80c7a:	4620      	mov	r0, r4
   80c7c:	4d14      	ldr	r5, [pc, #80]	; (80cd0 <ADCC_Init+0xb8>)
   80c7e:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_1);
   80c80:	4631      	mov	r1, r6
   80c82:	4620      	mov	r0, r4
   80c84:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_2);
   80c86:	2102      	movs	r1, #2
   80c88:	4620      	mov	r0, r4
   80c8a:	47a8      	blx	r5
	//adc_enable_interrupt(ADC,ADC_IER_EOC0);
	adc_enable_interrupt(ADC,ADC_IER_ENDRX);
   80c8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c90:	4620      	mov	r0, r4
   80c92:	4b10      	ldr	r3, [pc, #64]	; (80cd4 <ADCC_Init+0xbc>)
   80c94:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c96:	2220      	movs	r2, #32
   80c98:	4b0f      	ldr	r3, [pc, #60]	; (80cd8 <ADCC_Init+0xc0>)
   80c9a:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(ADC_IRQn);	
	adc_start(ADC);
   80c9c:	4620      	mov	r0, r4
   80c9e:	4b0f      	ldr	r3, [pc, #60]	; (80cdc <ADCC_Init+0xc4>)
   80ca0:	4798      	blx	r3
   80ca2:	bd70      	pop	{r4, r5, r6, pc}
   80ca4:	00081525 	.word	0x00081525
   80ca8:	400c0000 	.word	0x400c0000
   80cac:	0280de80 	.word	0x0280de80
   80cb0:	0a037a00 	.word	0x0a037a00
   80cb4:	00080161 	.word	0x00080161
   80cb8:	000801b3 	.word	0x000801b3
   80cbc:	000801a5 	.word	0x000801a5
   80cc0:	000801df 	.word	0x000801df
   80cc4:	000801eb 	.word	0x000801eb
   80cc8:	00080195 	.word	0x00080195
   80ccc:	20071080 	.word	0x20071080
   80cd0:	000801d5 	.word	0x000801d5
   80cd4:	000801e7 	.word	0x000801e7
   80cd8:	e000e100 	.word	0xe000e100
   80cdc:	000801cf 	.word	0x000801cf

00080ce0 <SPI_InitPIO>:
	//Because we are using PORTB.PIN25 in peripheral B mode
	//	we need to enable the clock for that line.
	//PMC->PMC_PCER0 |= _BV(ID_PIOA);
	
	//configure for input
	PIOA->PIO_PDR |= PIO_PA25;
   80ce0:	4b1a      	ldr	r3, [pc, #104]	; (80d4c <SPI_InitPIO+0x6c>)
   80ce2:	685a      	ldr	r2, [r3, #4]
   80ce4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80ce8:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ODR |= PIO_PA25;		//Input
   80cea:	695a      	ldr	r2, [r3, #20]
   80cec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80cf0:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PUER |= PIO_PA25;		//pull-up
   80cf2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80cf4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80cf8:	665a      	str	r2, [r3, #100]	; 0x64
	
	PIOA->PIO_PDR |= PIO_PA26;		//MOSI
   80cfa:	685a      	ldr	r2, [r3, #4]
   80cfc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80d00:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA26;		//MOSI	Output
   80d02:	691a      	ldr	r2, [r3, #16]
   80d04:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80d08:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA26;	//Peripheral A
   80d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d0c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   80d10:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA27;		//SPCK
   80d12:	685a      	ldr	r2, [r3, #4]
   80d14:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80d18:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA27;		//SPCK	Output
   80d1a:	691a      	ldr	r2, [r3, #16]
   80d1c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80d20:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA27;	//Peripheral A
   80d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d24:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
   80d28:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA28;		//NPCS0
   80d2a:	685a      	ldr	r2, [r3, #4]
   80d2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d30:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA28;		//NPCS0	Output
   80d32:	691a      	ldr	r2, [r3, #16]
   80d34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d38:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA28;	//Peripheral A
   80d3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d3c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   80d40:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER |= PIO_PA28;		//pull-up
   80d42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80d44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d48:	665a      	str	r2, [r3, #100]	; 0x64
   80d4a:	4770      	bx	lr
   80d4c:	400e0e00 	.word	0x400e0e00

00080d50 <SPI_Init>:
}

void SPI_Init(void)
{
   80d50:	b538      	push	{r3, r4, r5, lr}
	int i;
	pmc_enable_periph_clk(ID_SPI0);
   80d52:	2018      	movs	r0, #24
   80d54:	4b2a      	ldr	r3, [pc, #168]	; (80e00 <SPI_Init+0xb0>)
   80d56:	4798      	blx	r3
	spi_set_writeprotect(SPI0, 0);
   80d58:	4c2a      	ldr	r4, [pc, #168]	; (80e04 <SPI_Init+0xb4>)
   80d5a:	2100      	movs	r1, #0
   80d5c:	4620      	mov	r0, r4
   80d5e:	4b2a      	ldr	r3, [pc, #168]	; (80e08 <SPI_Init+0xb8>)
   80d60:	4798      	blx	r3
	SPI_InitPIO();
   80d62:	4b2a      	ldr	r3, [pc, #168]	; (80e0c <SPI_Init+0xbc>)
   80d64:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80d66:	2380      	movs	r3, #128	; 0x80
   80d68:	6023      	str	r3, [r4, #0]
   80d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  __ASM volatile ("nop");
   80d6e:	bf00      	nop
	spi_reset(SPI0);	
	for(i=0;i<0xffff;i++)
   80d70:	3b01      	subs	r3, #1
   80d72:	d1fc      	bne.n	80d6e <SPI_Init+0x1e>
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80d74:	4c23      	ldr	r4, [pc, #140]	; (80e04 <SPI_Init+0xb4>)
   80d76:	2302      	movs	r3, #2
   80d78:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80d7a:	6863      	ldr	r3, [r4, #4]
   80d7c:	f043 0301 	orr.w	r3, r3, #1
   80d80:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80d82:	6863      	ldr	r3, [r4, #4]
   80d84:	f043 0310 	orr.w	r3, r3, #16
   80d88:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80d8a:	6863      	ldr	r3, [r4, #4]
   80d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80d90:	6063      	str	r3, [r4, #4]
		__NOP();
	spi_disable(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_disable_loopback(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(DEFAULT_CHIP_ID)); //NPCS[3:0]=1110b
   80d92:	210e      	movs	r1, #14
   80d94:	4620      	mov	r0, r4
   80d96:	4b1e      	ldr	r3, [pc, #120]	; (80e10 <SPI_Init+0xc0>)
   80d98:	4798      	blx	r3
	p_spi->SPI_MR |= SPI_MR_PS;
   80d9a:	6863      	ldr	r3, [r4, #4]
   80d9c:	f043 0302 	orr.w	r3, r3, #2
   80da0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80da2:	6863      	ldr	r3, [r4, #4]
   80da4:	f023 0304 	bic.w	r3, r3, #4
   80da8:	6063      	str	r3, [r4, #4]
	spi_set_variable_peripheral_select(SPI0);
	spi_disable_peripheral_select_decode(SPI0);
	spi_set_delay_between_chip_select(SPI0, 6);
   80daa:	2106      	movs	r1, #6
   80dac:	4620      	mov	r0, r4
   80dae:	4b19      	ldr	r3, [pc, #100]	; (80e14 <SPI_Init+0xc4>)
   80db0:	4798      	blx	r3
	spi_set_clock_polarity(SPI0,0,false);
   80db2:	2200      	movs	r2, #0
   80db4:	4611      	mov	r1, r2
   80db6:	4620      	mov	r0, r4
   80db8:	4b17      	ldr	r3, [pc, #92]	; (80e18 <SPI_Init+0xc8>)
   80dba:	4798      	blx	r3
	spi_set_clock_phase(SPI0, 0, true);
   80dbc:	2201      	movs	r2, #1
   80dbe:	2100      	movs	r1, #0
   80dc0:	4620      	mov	r0, r4
   80dc2:	4b16      	ldr	r3, [pc, #88]	; (80e1c <SPI_Init+0xcc>)
   80dc4:	4798      	blx	r3
	spi_set_baudrate_div(SPI0,0,21); //SCLK = 4Mhz
   80dc6:	2215      	movs	r2, #21
   80dc8:	2100      	movs	r1, #0
   80dca:	4620      	mov	r0, r4
   80dcc:	4b14      	ldr	r3, [pc, #80]	; (80e20 <SPI_Init+0xd0>)
   80dce:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0,0,0);
   80dd0:	2200      	movs	r2, #0
   80dd2:	4611      	mov	r1, r2
   80dd4:	4620      	mov	r0, r4
   80dd6:	4b13      	ldr	r3, [pc, #76]	; (80e24 <SPI_Init+0xd4>)
   80dd8:	4798      	blx	r3
	spi_set_transfer_delay(SPI0,0,10,1); //
   80dda:	2301      	movs	r3, #1
   80ddc:	220a      	movs	r2, #10
   80dde:	2100      	movs	r1, #0
   80de0:	4620      	mov	r0, r4
   80de2:	4d11      	ldr	r5, [pc, #68]	; (80e28 <SPI_Init+0xd8>)
   80de4:	47a8      	blx	r5
	spi_configure_cs_behavior(SPI0, 0, SPI_CS_KEEP_LOW);
   80de6:	2208      	movs	r2, #8
   80de8:	2100      	movs	r1, #0
   80dea:	4620      	mov	r0, r4
   80dec:	4b0f      	ldr	r3, [pc, #60]	; (80e2c <SPI_Init+0xdc>)
   80dee:	4798      	blx	r3
	SPI0->SPI_IER = 0;	
   80df0:	2300      	movs	r3, #0
   80df2:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80df4:	2101      	movs	r1, #1
   80df6:	6021      	str	r1, [r4, #0]
	spi_enable(SPI0);
	spi_set_writeprotect(SPI0, 1);
   80df8:	4620      	mov	r0, r4
   80dfa:	4b03      	ldr	r3, [pc, #12]	; (80e08 <SPI_Init+0xb8>)
   80dfc:	4798      	blx	r3
   80dfe:	bd38      	pop	{r3, r4, r5, pc}
   80e00:	00081525 	.word	0x00081525
   80e04:	40008000 	.word	0x40008000
   80e08:	00080bb9 	.word	0x00080bb9
   80e0c:	00080ce1 	.word	0x00080ce1
   80e10:	00080a55 	.word	0x00080a55
   80e14:	00080a6b 	.word	0x00080a6b
   80e18:	00080adf 	.word	0x00080adf
   80e1c:	00080afd 	.word	0x00080afd
   80e20:	00080b75 	.word	0x00080b75
   80e24:	00080b61 	.word	0x00080b61
   80e28:	00080b9b 	.word	0x00080b9b
   80e2c:	00080b1b 	.word	0x00080b1b

00080e30 <SPIC_Write>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Write(uint16_t *data, int length, uint16_t *SR)
{
   80e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e34:	b085      	sub	sp, #20
   80e36:	4682      	mov	sl, r0
   80e38:	4689      	mov	r9, r1
   80e3a:	9201      	str	r2, [sp, #4]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80e3c:	4b28      	ldr	r3, [pc, #160]	; (80ee0 <SPIC_Write+0xb0>)
   80e3e:	691b      	ldr	r3, [r3, #16]
   80e40:	f013 0f01 	tst.w	r3, #1
   80e44:	d12b      	bne.n	80e9e <SPIC_Write+0x6e>
		spi_read(SPI0,SR,&Pcs);	
	if(length>1)
   80e46:	f1b9 0f01 	cmp.w	r9, #1
   80e4a:	dd35      	ble.n	80eb8 <SPIC_Write+0x88>
	{
		for (i=0; i<(length-1);i++)
   80e4c:	f109 33ff 	add.w	r3, r9, #4294967295
   80e50:	2b00      	cmp	r3, #0
   80e52:	dd13      	ble.n	80e7c <SPIC_Write+0x4c>
   80e54:	f1aa 0502 	sub.w	r5, sl, #2
   80e58:	4698      	mov	r8, r3
   80e5a:	2400      	movs	r4, #0
		{		
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80e5c:	4e20      	ldr	r6, [pc, #128]	; (80ee0 <SPIC_Write+0xb0>)
   80e5e:	4f21      	ldr	r7, [pc, #132]	; (80ee4 <SPIC_Write+0xb4>)
				return 0;
			if(i==0)
				spi_read(SPI0,SR,&Pcs);
   80e60:	f8df b084 	ldr.w	fp, [pc, #132]	; 80ee8 <SPIC_Write+0xb8>
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80e64:	2300      	movs	r3, #0
   80e66:	461a      	mov	r2, r3
   80e68:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   80e6c:	4630      	mov	r0, r6
   80e6e:	47b8      	blx	r7
   80e70:	2800      	cmp	r0, #0
   80e72:	d133      	bne.n	80edc <SPIC_Write+0xac>
			if(i==0)
   80e74:	b1d4      	cbz	r4, 80eac <SPIC_Write+0x7c>
		for (i=0; i<(length-1);i++)
   80e76:	3401      	adds	r4, #1
   80e78:	4544      	cmp	r4, r8
   80e7a:	d1f3      	bne.n	80e64 <SPIC_Write+0x34>
		}
		if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)
   80e7c:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
   80e80:	f109 39ff 	add.w	r9, r9, #4294967295
   80e84:	2301      	movs	r3, #1
   80e86:	2200      	movs	r2, #0
   80e88:	f83a 1019 	ldrh.w	r1, [sl, r9, lsl #1]
   80e8c:	4814      	ldr	r0, [pc, #80]	; (80ee0 <SPIC_Write+0xb0>)
   80e8e:	4c15      	ldr	r4, [pc, #84]	; (80ee4 <SPIC_Write+0xb4>)
   80e90:	47a0      	blx	r4
				return 0;
   80e92:	fab0 f080 	clz	r0, r0
   80e96:	0940      	lsrs	r0, r0, #5
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
			return 0;
		spi_read(SPI0,SR,&Pcs);
	}
	return 1;
}
   80e98:	b005      	add	sp, #20
   80e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		spi_read(SPI0,SR,&Pcs);	
   80e9e:	f10d 020f 	add.w	r2, sp, #15
   80ea2:	9901      	ldr	r1, [sp, #4]
   80ea4:	480e      	ldr	r0, [pc, #56]	; (80ee0 <SPIC_Write+0xb0>)
   80ea6:	4b10      	ldr	r3, [pc, #64]	; (80ee8 <SPIC_Write+0xb8>)
   80ea8:	4798      	blx	r3
   80eaa:	e7cc      	b.n	80e46 <SPIC_Write+0x16>
				spi_read(SPI0,SR,&Pcs);
   80eac:	f10d 020f 	add.w	r2, sp, #15
   80eb0:	9901      	ldr	r1, [sp, #4]
   80eb2:	4630      	mov	r0, r6
   80eb4:	47d8      	blx	fp
   80eb6:	e7de      	b.n	80e76 <SPIC_Write+0x46>
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
   80eb8:	2301      	movs	r3, #1
   80eba:	2200      	movs	r2, #0
   80ebc:	f8ba 1000 	ldrh.w	r1, [sl]
   80ec0:	4807      	ldr	r0, [pc, #28]	; (80ee0 <SPIC_Write+0xb0>)
   80ec2:	4c08      	ldr	r4, [pc, #32]	; (80ee4 <SPIC_Write+0xb4>)
   80ec4:	47a0      	blx	r4
   80ec6:	b108      	cbz	r0, 80ecc <SPIC_Write+0x9c>
			return 0;
   80ec8:	2000      	movs	r0, #0
   80eca:	e7e5      	b.n	80e98 <SPIC_Write+0x68>
		spi_read(SPI0,SR,&Pcs);
   80ecc:	f10d 020f 	add.w	r2, sp, #15
   80ed0:	9901      	ldr	r1, [sp, #4]
   80ed2:	4803      	ldr	r0, [pc, #12]	; (80ee0 <SPIC_Write+0xb0>)
   80ed4:	4b04      	ldr	r3, [pc, #16]	; (80ee8 <SPIC_Write+0xb8>)
   80ed6:	4798      	blx	r3
	return 1;
   80ed8:	2001      	movs	r0, #1
   80eda:	e7dd      	b.n	80e98 <SPIC_Write+0x68>
				return 0;
   80edc:	2000      	movs	r0, #0
   80ede:	e7db      	b.n	80e98 <SPIC_Write+0x68>
   80ee0:	40008000 	.word	0x40008000
   80ee4:	00080aab 	.word	0x00080aab
   80ee8:	00080a7d 	.word	0x00080a7d

00080eec <SPIC_Read>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Read(uint16_t *data, int length, uint16_t *SR, uint16_t *Resp)
{
   80eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ef0:	b087      	sub	sp, #28
   80ef2:	9001      	str	r0, [sp, #4]
   80ef4:	468b      	mov	fp, r1
   80ef6:	9203      	str	r2, [sp, #12]
   80ef8:	9302      	str	r3, [sp, #8]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80efa:	4b2a      	ldr	r3, [pc, #168]	; (80fa4 <SPIC_Read+0xb8>)
   80efc:	691b      	ldr	r3, [r3, #16]
   80efe:	f013 0f01 	tst.w	r3, #1
   80f02:	d132      	bne.n	80f6a <SPIC_Read+0x7e>
		spi_read(SPI0,SR,&Pcs);
	for (i=0; i<(length-1);i++)
   80f04:	f10b 33ff 	add.w	r3, fp, #4294967295
   80f08:	2b00      	cmp	r3, #0
   80f0a:	dd1d      	ble.n	80f48 <SPIC_Read+0x5c>
   80f0c:	9b01      	ldr	r3, [sp, #4]
   80f0e:	1e9e      	subs	r6, r3, #2
   80f10:	9b02      	ldr	r3, [sp, #8]
   80f12:	1e9d      	subs	r5, r3, #2
   80f14:	f10b 3aff 	add.w	sl, fp, #4294967295
   80f18:	2400      	movs	r4, #0
	{
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80f1a:	4f22      	ldr	r7, [pc, #136]	; (80fa4 <SPIC_Read+0xb8>)
   80f1c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80fa8 <SPIC_Read+0xbc>
			return 0;
		if(i==0)
			spi_read(SPI0,SR,&Pcs);
		else
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80f20:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80fac <SPIC_Read+0xc0>
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80f24:	2300      	movs	r3, #0
   80f26:	461a      	mov	r2, r3
   80f28:	f836 1f02 	ldrh.w	r1, [r6, #2]!
   80f2c:	4638      	mov	r0, r7
   80f2e:	47c0      	blx	r8
   80f30:	2800      	cmp	r0, #0
   80f32:	d132      	bne.n	80f9a <SPIC_Read+0xae>
		if(i==0)
   80f34:	b304      	cbz	r4, 80f78 <SPIC_Read+0x8c>
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80f36:	f10d 0217 	add.w	r2, sp, #23
   80f3a:	4629      	mov	r1, r5
   80f3c:	4638      	mov	r0, r7
   80f3e:	47c8      	blx	r9
	for (i=0; i<(length-1);i++)
   80f40:	3401      	adds	r4, #1
   80f42:	3502      	adds	r5, #2
   80f44:	4554      	cmp	r4, sl
   80f46:	d1ed      	bne.n	80f24 <SPIC_Read+0x38>
	}
	if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)	
   80f48:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
   80f4c:	f10b 3bff 	add.w	fp, fp, #4294967295
   80f50:	ea4f 044b 	mov.w	r4, fp, lsl #1
   80f54:	2301      	movs	r3, #1
   80f56:	2200      	movs	r2, #0
   80f58:	9901      	ldr	r1, [sp, #4]
   80f5a:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
   80f5e:	4811      	ldr	r0, [pc, #68]	; (80fa4 <SPIC_Read+0xb8>)
   80f60:	4d11      	ldr	r5, [pc, #68]	; (80fa8 <SPIC_Read+0xbc>)
   80f62:	47a8      	blx	r5
   80f64:	b170      	cbz	r0, 80f84 <SPIC_Read+0x98>
		return 0;
   80f66:	2000      	movs	r0, #0
   80f68:	e018      	b.n	80f9c <SPIC_Read+0xb0>
		spi_read(SPI0,SR,&Pcs);
   80f6a:	f10d 0217 	add.w	r2, sp, #23
   80f6e:	9903      	ldr	r1, [sp, #12]
   80f70:	480c      	ldr	r0, [pc, #48]	; (80fa4 <SPIC_Read+0xb8>)
   80f72:	4b0e      	ldr	r3, [pc, #56]	; (80fac <SPIC_Read+0xc0>)
   80f74:	4798      	blx	r3
   80f76:	e7c5      	b.n	80f04 <SPIC_Read+0x18>
			spi_read(SPI0,SR,&Pcs);
   80f78:	f10d 0217 	add.w	r2, sp, #23
   80f7c:	9903      	ldr	r1, [sp, #12]
   80f7e:	4638      	mov	r0, r7
   80f80:	47c8      	blx	r9
   80f82:	e7dd      	b.n	80f40 <SPIC_Read+0x54>
	spi_read(SPI0,&Resp[length-2],&Pcs);
   80f84:	1ea1      	subs	r1, r4, #2
   80f86:	f10d 0217 	add.w	r2, sp, #23
   80f8a:	9b02      	ldr	r3, [sp, #8]
   80f8c:	440b      	add	r3, r1
   80f8e:	4619      	mov	r1, r3
   80f90:	4804      	ldr	r0, [pc, #16]	; (80fa4 <SPIC_Read+0xb8>)
   80f92:	4b06      	ldr	r3, [pc, #24]	; (80fac <SPIC_Read+0xc0>)
   80f94:	4798      	blx	r3
	return 1;
   80f96:	2001      	movs	r0, #1
   80f98:	e000      	b.n	80f9c <SPIC_Read+0xb0>
			return 0;
   80f9a:	2000      	movs	r0, #0
   80f9c:	b007      	add	sp, #28
   80f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fa2:	bf00      	nop
   80fa4:	40008000 	.word	0x40008000
   80fa8:	00080aab 	.word	0x00080aab
   80fac:	00080a7d 	.word	0x00080a7d

00080fb0 <Timer_init>:
 */ 
#include "Timer.h"
#include "Prints.h"

void Timer_init(void)
{
   80fb0:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_TC0);
   80fb2:	201b      	movs	r0, #27
   80fb4:	4c14      	ldr	r4, [pc, #80]	; (81008 <Timer_init+0x58>)
   80fb6:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_TC1);
   80fb8:	201c      	movs	r0, #28
   80fba:	47a0      	blx	r4
	tc_set_writeprotect(TC0,0);
   80fbc:	4c13      	ldr	r4, [pc, #76]	; (8100c <Timer_init+0x5c>)
   80fbe:	2100      	movs	r1, #0
   80fc0:	4620      	mov	r0, r4
   80fc2:	4b13      	ldr	r3, [pc, #76]	; (81010 <Timer_init+0x60>)
   80fc4:	4798      	blx	r3
	
	REG_PIOB_ABSR |= PIO_ABSR_P25;     // Switch the multiplexer to peripheral B for TIOA0
   80fc6:	4a13      	ldr	r2, [pc, #76]	; (81014 <Timer_init+0x64>)
   80fc8:	6813      	ldr	r3, [r2, #0]
   80fca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80fce:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= PIO_PDR_P25;        // Disable the GPIO on the corresponding pins
   80fd0:	3a6c      	subs	r2, #108	; 0x6c
   80fd2:	6813      	ldr	r3, [r2, #0]
   80fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80fd8:	6013      	str	r3, [r2, #0]
	tc_init(TC0,0,TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC|TC_CMR_ACPA_SET|TC_CMR_ACPC_CLEAR|TC_CMR_TCCLKS_TIMER_CLOCK2); // divide MCLK by 8 
   80fda:	4a0f      	ldr	r2, [pc, #60]	; (81018 <Timer_init+0x68>)
   80fdc:	2100      	movs	r1, #0
   80fde:	4620      	mov	r0, r4
   80fe0:	4d0e      	ldr	r5, [pc, #56]	; (8101c <Timer_init+0x6c>)
   80fe2:	47a8      	blx	r5
	tc_init(TC0,1,TC_CMR_TCCLKS_TIMER_CLOCK4); // divide MCLK by 128
   80fe4:	2203      	movs	r2, #3
   80fe6:	2101      	movs	r1, #1
   80fe8:	4620      	mov	r0, r4
   80fea:	47a8      	blx	r5
	TC0->TC_CHANNEL[0].TC_RC = 210;//238; // 210 cycles of MCLK/8 to reach 50Khz  -- 420 to reach 25KHz -- 230 to 45.6KHz~
   80fec:	23d2      	movs	r3, #210	; 0xd2
   80fee:	61e3      	str	r3, [r4, #28]
	TC0->TC_CHANNEL[0].TC_RA = 105;//119; // 105 for 50Khz , 210 for 25kH
   80ff0:	2369      	movs	r3, #105	; 0x69
   80ff2:	6163      	str	r3, [r4, #20]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80ff4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80ff8:	4b09      	ldr	r3, [pc, #36]	; (81020 <Timer_init+0x70>)
   80ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	NVIC_DisableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC0_IRQn);
	//tc_enable_interrupt(TC0,0,TC_IER_CPCS);
	tc_start(TC0,0);
   80ffe:	2100      	movs	r1, #0
   81000:	4620      	mov	r0, r4
   81002:	4b08      	ldr	r3, [pc, #32]	; (81024 <Timer_init+0x74>)
   81004:	4798      	blx	r3
   81006:	bd38      	pop	{r3, r4, r5, pc}
   81008:	00081525 	.word	0x00081525
   8100c:	40080000 	.word	0x40080000
   81010:	00080bfd 	.word	0x00080bfd
   81014:	400e1070 	.word	0x400e1070
   81018:	0009c001 	.word	0x0009c001
   8101c:	00080bd5 	.word	0x00080bd5
   81020:	e000e100 	.word	0xe000e100
   81024:	00080bed 	.word	0x00080bed

00081028 <Timer_Sleep>:
	
}

void Timer_Sleep(uint32_t msDelay)
{
   81028:	b510      	push	{r4, lr}
   8102a:	4604      	mov	r4, r0
	tc_start(TC0,1);	
   8102c:	2101      	movs	r1, #1
   8102e:	4808      	ldr	r0, [pc, #32]	; (81050 <Timer_Sleep+0x28>)
   81030:	4b08      	ldr	r3, [pc, #32]	; (81054 <Timer_Sleep+0x2c>)
   81032:	4798      	blx	r3
	//PrintLn("wait\n");
	while(TC0->TC_CHANNEL[1].TC_CV < 656*msDelay);
   81034:	f44f 7024 	mov.w	r0, #656	; 0x290
   81038:	fb00 f004 	mul.w	r0, r0, r4
   8103c:	4a04      	ldr	r2, [pc, #16]	; (81050 <Timer_Sleep+0x28>)
   8103e:	6d13      	ldr	r3, [r2, #80]	; 0x50
   81040:	4283      	cmp	r3, r0
   81042:	d3fc      	bcc.n	8103e <Timer_Sleep+0x16>
	//PrintLn("done wait\n");
	tc_stop(TC0,1);
   81044:	2101      	movs	r1, #1
   81046:	4802      	ldr	r0, [pc, #8]	; (81050 <Timer_Sleep+0x28>)
   81048:	4b03      	ldr	r3, [pc, #12]	; (81058 <Timer_Sleep+0x30>)
   8104a:	4798      	blx	r3
   8104c:	bd10      	pop	{r4, pc}
   8104e:	bf00      	nop
   81050:	40080000 	.word	0x40080000
   81054:	00080bed 	.word	0x00080bed
   81058:	00080bf5 	.word	0x00080bf5

0008105c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8105c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8105e:	480e      	ldr	r0, [pc, #56]	; (81098 <sysclk_init+0x3c>)
   81060:	4b0e      	ldr	r3, [pc, #56]	; (8109c <sysclk_init+0x40>)
   81062:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81064:	213e      	movs	r1, #62	; 0x3e
   81066:	2000      	movs	r0, #0
   81068:	4b0d      	ldr	r3, [pc, #52]	; (810a0 <sysclk_init+0x44>)
   8106a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8106c:	4c0d      	ldr	r4, [pc, #52]	; (810a4 <sysclk_init+0x48>)
   8106e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81070:	2800      	cmp	r0, #0
   81072:	d0fc      	beq.n	8106e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81074:	4b0c      	ldr	r3, [pc, #48]	; (810a8 <sysclk_init+0x4c>)
   81076:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81078:	4a0c      	ldr	r2, [pc, #48]	; (810ac <sysclk_init+0x50>)
   8107a:	4b0d      	ldr	r3, [pc, #52]	; (810b0 <sysclk_init+0x54>)
   8107c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8107e:	4c0d      	ldr	r4, [pc, #52]	; (810b4 <sysclk_init+0x58>)
   81080:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81082:	2800      	cmp	r0, #0
   81084:	d0fc      	beq.n	81080 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81086:	2010      	movs	r0, #16
   81088:	4b0b      	ldr	r3, [pc, #44]	; (810b8 <sysclk_init+0x5c>)
   8108a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8108c:	4b0b      	ldr	r3, [pc, #44]	; (810bc <sysclk_init+0x60>)
   8108e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81090:	4801      	ldr	r0, [pc, #4]	; (81098 <sysclk_init+0x3c>)
   81092:	4b02      	ldr	r3, [pc, #8]	; (8109c <sysclk_init+0x40>)
   81094:	4798      	blx	r3
   81096:	bd10      	pop	{r4, pc}
   81098:	0501bd00 	.word	0x0501bd00
   8109c:	2007013d 	.word	0x2007013d
   810a0:	000814a1 	.word	0x000814a1
   810a4:	000814f5 	.word	0x000814f5
   810a8:	00081505 	.word	0x00081505
   810ac:	200d3f01 	.word	0x200d3f01
   810b0:	400e0600 	.word	0x400e0600
   810b4:	00081515 	.word	0x00081515
   810b8:	0008143d 	.word	0x0008143d
   810bc:	000815e1 	.word	0x000815e1

000810c0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   810c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   810c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   810c6:	4b16      	ldr	r3, [pc, #88]	; (81120 <board_init+0x60>)
   810c8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   810ca:	200b      	movs	r0, #11
   810cc:	4c15      	ldr	r4, [pc, #84]	; (81124 <board_init+0x64>)
   810ce:	47a0      	blx	r4
   810d0:	200c      	movs	r0, #12
   810d2:	47a0      	blx	r4
   810d4:	200d      	movs	r0, #13
   810d6:	47a0      	blx	r4
   810d8:	200e      	movs	r0, #14
   810da:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   810dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810e0:	203b      	movs	r0, #59	; 0x3b
   810e2:	4c11      	ldr	r4, [pc, #68]	; (81128 <board_init+0x68>)
   810e4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   810e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810ea:	2055      	movs	r0, #85	; 0x55
   810ec:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   810ee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810f2:	2056      	movs	r0, #86	; 0x56
   810f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   810f6:	490d      	ldr	r1, [pc, #52]	; (8112c <board_init+0x6c>)
   810f8:	2068      	movs	r0, #104	; 0x68
   810fa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   810fc:	490c      	ldr	r1, [pc, #48]	; (81130 <board_init+0x70>)
   810fe:	205c      	movs	r0, #92	; 0x5c
   81100:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81102:	4a0c      	ldr	r2, [pc, #48]	; (81134 <board_init+0x74>)
   81104:	f44f 7140 	mov.w	r1, #768	; 0x300
   81108:	480b      	ldr	r0, [pc, #44]	; (81138 <board_init+0x78>)
   8110a:	4b0c      	ldr	r3, [pc, #48]	; (8113c <board_init+0x7c>)
   8110c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8110e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81112:	202b      	movs	r0, #43	; 0x2b
   81114:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81116:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8111a:	202a      	movs	r0, #42	; 0x2a
   8111c:	47a0      	blx	r4
   8111e:	bd10      	pop	{r4, pc}
   81120:	400e1a50 	.word	0x400e1a50
   81124:	00081525 	.word	0x00081525
   81128:	00081231 	.word	0x00081231
   8112c:	28000079 	.word	0x28000079
   81130:	28000001 	.word	0x28000001
   81134:	08000001 	.word	0x08000001
   81138:	400e0e00 	.word	0x400e0e00
   8113c:	00081301 	.word	0x00081301

00081140 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81140:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81142:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81146:	d016      	beq.n	81176 <pio_set_peripheral+0x36>
   81148:	d80b      	bhi.n	81162 <pio_set_peripheral+0x22>
   8114a:	b149      	cbz	r1, 81160 <pio_set_peripheral+0x20>
   8114c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81150:	d105      	bne.n	8115e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81152:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81154:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81156:	400b      	ands	r3, r1
   81158:	ea23 0302 	bic.w	r3, r3, r2
   8115c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8115e:	6042      	str	r2, [r0, #4]
   81160:	4770      	bx	lr
	switch (ul_type) {
   81162:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81166:	d0fb      	beq.n	81160 <pio_set_peripheral+0x20>
   81168:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8116c:	d0f8      	beq.n	81160 <pio_set_peripheral+0x20>
   8116e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81172:	d1f4      	bne.n	8115e <pio_set_peripheral+0x1e>
   81174:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81176:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81178:	4313      	orrs	r3, r2
   8117a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8117c:	e7ef      	b.n	8115e <pio_set_peripheral+0x1e>

0008117e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8117e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81180:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81184:	bf14      	ite	ne
   81186:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81188:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8118a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8118e:	bf14      	ite	ne
   81190:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81192:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81194:	f012 0f02 	tst.w	r2, #2
   81198:	d107      	bne.n	811aa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8119a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8119e:	bf18      	it	ne
   811a0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   811a4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   811a6:	6001      	str	r1, [r0, #0]
   811a8:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   811aa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   811ae:	e7f9      	b.n	811a4 <pio_set_input+0x26>

000811b0 <pio_set_output>:
{
   811b0:	b410      	push	{r4}
   811b2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   811b4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   811b6:	b944      	cbnz	r4, 811ca <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   811b8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   811ba:	b143      	cbz	r3, 811ce <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   811bc:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   811be:	b942      	cbnz	r2, 811d2 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   811c0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   811c2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   811c4:	6001      	str	r1, [r0, #0]
}
   811c6:	bc10      	pop	{r4}
   811c8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   811ca:	6641      	str	r1, [r0, #100]	; 0x64
   811cc:	e7f5      	b.n	811ba <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   811ce:	6541      	str	r1, [r0, #84]	; 0x54
   811d0:	e7f5      	b.n	811be <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   811d2:	6301      	str	r1, [r0, #48]	; 0x30
   811d4:	e7f5      	b.n	811c2 <pio_set_output+0x12>

000811d6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   811d6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   811d8:	4770      	bx	lr

000811da <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   811da:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   811dc:	4770      	bx	lr

000811de <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811de:	0943      	lsrs	r3, r0, #5
   811e0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811e4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811e8:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   811ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   811ec:	f000 001f 	and.w	r0, r0, #31
   811f0:	fa23 f000 	lsr.w	r0, r3, r0
}
   811f4:	f000 0001 	and.w	r0, r0, #1
   811f8:	4770      	bx	lr

000811fa <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811fa:	0943      	lsrs	r3, r0, #5
   811fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81200:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81204:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81206:	f000 001f 	and.w	r0, r0, #31
   8120a:	2201      	movs	r2, #1
   8120c:	fa02 f000 	lsl.w	r0, r2, r0
   81210:	6318      	str	r0, [r3, #48]	; 0x30
   81212:	4770      	bx	lr

00081214 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81214:	0943      	lsrs	r3, r0, #5
   81216:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8121a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8121e:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81220:	f000 001f 	and.w	r0, r0, #31
   81224:	2201      	movs	r2, #1
   81226:	fa02 f000 	lsl.w	r0, r2, r0
   8122a:	6358      	str	r0, [r3, #52]	; 0x34
   8122c:	4770      	bx	lr
	...

00081230 <pio_configure_pin>:
{
   81230:	b570      	push	{r4, r5, r6, lr}
   81232:	b082      	sub	sp, #8
   81234:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81236:	0943      	lsrs	r3, r0, #5
   81238:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8123c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81240:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81242:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81246:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8124a:	d031      	beq.n	812b0 <pio_configure_pin+0x80>
   8124c:	d816      	bhi.n	8127c <pio_configure_pin+0x4c>
   8124e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81252:	d01b      	beq.n	8128c <pio_configure_pin+0x5c>
   81254:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81258:	d116      	bne.n	81288 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8125a:	f000 001f 	and.w	r0, r0, #31
   8125e:	2601      	movs	r6, #1
   81260:	4086      	lsls	r6, r0
   81262:	4632      	mov	r2, r6
   81264:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81268:	4620      	mov	r0, r4
   8126a:	4b22      	ldr	r3, [pc, #136]	; (812f4 <pio_configure_pin+0xc4>)
   8126c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8126e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81272:	bf14      	ite	ne
   81274:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81276:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81278:	2001      	movs	r0, #1
   8127a:	e017      	b.n	812ac <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8127c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81280:	d021      	beq.n	812c6 <pio_configure_pin+0x96>
   81282:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81286:	d01e      	beq.n	812c6 <pio_configure_pin+0x96>
		return 0;
   81288:	2000      	movs	r0, #0
   8128a:	e00f      	b.n	812ac <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8128c:	f000 001f 	and.w	r0, r0, #31
   81290:	2601      	movs	r6, #1
   81292:	4086      	lsls	r6, r0
   81294:	4632      	mov	r2, r6
   81296:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8129a:	4620      	mov	r0, r4
   8129c:	4b15      	ldr	r3, [pc, #84]	; (812f4 <pio_configure_pin+0xc4>)
   8129e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   812a0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   812a4:	bf14      	ite	ne
   812a6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   812a8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   812aa:	2001      	movs	r0, #1
}
   812ac:	b002      	add	sp, #8
   812ae:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   812b0:	f000 011f 	and.w	r1, r0, #31
   812b4:	2601      	movs	r6, #1
   812b6:	462a      	mov	r2, r5
   812b8:	fa06 f101 	lsl.w	r1, r6, r1
   812bc:	4620      	mov	r0, r4
   812be:	4b0e      	ldr	r3, [pc, #56]	; (812f8 <pio_configure_pin+0xc8>)
   812c0:	4798      	blx	r3
	return 1;
   812c2:	4630      	mov	r0, r6
		break;
   812c4:	e7f2      	b.n	812ac <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   812c6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   812ca:	f000 011f 	and.w	r1, r0, #31
   812ce:	2601      	movs	r6, #1
   812d0:	ea05 0306 	and.w	r3, r5, r6
   812d4:	9300      	str	r3, [sp, #0]
   812d6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   812da:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   812de:	bf14      	ite	ne
   812e0:	2200      	movne	r2, #0
   812e2:	2201      	moveq	r2, #1
   812e4:	fa06 f101 	lsl.w	r1, r6, r1
   812e8:	4620      	mov	r0, r4
   812ea:	4c04      	ldr	r4, [pc, #16]	; (812fc <pio_configure_pin+0xcc>)
   812ec:	47a0      	blx	r4
	return 1;
   812ee:	4630      	mov	r0, r6
		break;
   812f0:	e7dc      	b.n	812ac <pio_configure_pin+0x7c>
   812f2:	bf00      	nop
   812f4:	00081141 	.word	0x00081141
   812f8:	0008117f 	.word	0x0008117f
   812fc:	000811b1 	.word	0x000811b1

00081300 <pio_configure_pin_group>:
{
   81300:	b570      	push	{r4, r5, r6, lr}
   81302:	b082      	sub	sp, #8
   81304:	4605      	mov	r5, r0
   81306:	460e      	mov	r6, r1
   81308:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8130a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8130e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81312:	d027      	beq.n	81364 <pio_configure_pin_group+0x64>
   81314:	d811      	bhi.n	8133a <pio_configure_pin_group+0x3a>
   81316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8131a:	d016      	beq.n	8134a <pio_configure_pin_group+0x4a>
   8131c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81320:	d111      	bne.n	81346 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81322:	460a      	mov	r2, r1
   81324:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81328:	4b19      	ldr	r3, [pc, #100]	; (81390 <pio_configure_pin_group+0x90>)
   8132a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8132c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81330:	bf14      	ite	ne
   81332:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81334:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81336:	2001      	movs	r0, #1
   81338:	e012      	b.n	81360 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8133a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8133e:	d015      	beq.n	8136c <pio_configure_pin_group+0x6c>
   81340:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81344:	d012      	beq.n	8136c <pio_configure_pin_group+0x6c>
		return 0;
   81346:	2000      	movs	r0, #0
   81348:	e00a      	b.n	81360 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8134a:	460a      	mov	r2, r1
   8134c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81350:	4b0f      	ldr	r3, [pc, #60]	; (81390 <pio_configure_pin_group+0x90>)
   81352:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81354:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81358:	bf14      	ite	ne
   8135a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8135c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8135e:	2001      	movs	r0, #1
}
   81360:	b002      	add	sp, #8
   81362:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81364:	4b0b      	ldr	r3, [pc, #44]	; (81394 <pio_configure_pin_group+0x94>)
   81366:	4798      	blx	r3
	return 1;
   81368:	2001      	movs	r0, #1
		break;
   8136a:	e7f9      	b.n	81360 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8136c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81370:	f004 0301 	and.w	r3, r4, #1
   81374:	9300      	str	r3, [sp, #0]
   81376:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8137a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8137e:	bf14      	ite	ne
   81380:	2200      	movne	r2, #0
   81382:	2201      	moveq	r2, #1
   81384:	4631      	mov	r1, r6
   81386:	4628      	mov	r0, r5
   81388:	4c03      	ldr	r4, [pc, #12]	; (81398 <pio_configure_pin_group+0x98>)
   8138a:	47a0      	blx	r4
	return 1;
   8138c:	2001      	movs	r0, #1
		break;
   8138e:	e7e7      	b.n	81360 <pio_configure_pin_group+0x60>
   81390:	00081141 	.word	0x00081141
   81394:	0008117f 	.word	0x0008117f
   81398:	000811b1 	.word	0x000811b1

0008139c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   813a0:	4604      	mov	r4, r0
   813a2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   813a4:	4b0e      	ldr	r3, [pc, #56]	; (813e0 <pio_handler_process+0x44>)
   813a6:	4798      	blx	r3
   813a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   813aa:	4620      	mov	r0, r4
   813ac:	4b0d      	ldr	r3, [pc, #52]	; (813e4 <pio_handler_process+0x48>)
   813ae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   813b0:	4005      	ands	r5, r0
   813b2:	d013      	beq.n	813dc <pio_handler_process+0x40>
   813b4:	4c0c      	ldr	r4, [pc, #48]	; (813e8 <pio_handler_process+0x4c>)
   813b6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   813ba:	e003      	b.n	813c4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   813bc:	42b4      	cmp	r4, r6
   813be:	d00d      	beq.n	813dc <pio_handler_process+0x40>
   813c0:	3410      	adds	r4, #16
		while (status != 0) {
   813c2:	b15d      	cbz	r5, 813dc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   813c4:	6820      	ldr	r0, [r4, #0]
   813c6:	4540      	cmp	r0, r8
   813c8:	d1f8      	bne.n	813bc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   813ca:	6861      	ldr	r1, [r4, #4]
   813cc:	4229      	tst	r1, r5
   813ce:	d0f5      	beq.n	813bc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   813d0:	68e3      	ldr	r3, [r4, #12]
   813d2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   813d4:	6863      	ldr	r3, [r4, #4]
   813d6:	ea25 0503 	bic.w	r5, r5, r3
   813da:	e7ef      	b.n	813bc <pio_handler_process+0x20>
   813dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813e0:	000811d7 	.word	0x000811d7
   813e4:	000811db 	.word	0x000811db
   813e8:	20070fd0 	.word	0x20070fd0

000813ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   813ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   813ee:	210b      	movs	r1, #11
   813f0:	4801      	ldr	r0, [pc, #4]	; (813f8 <PIOA_Handler+0xc>)
   813f2:	4b02      	ldr	r3, [pc, #8]	; (813fc <PIOA_Handler+0x10>)
   813f4:	4798      	blx	r3
   813f6:	bd08      	pop	{r3, pc}
   813f8:	400e0e00 	.word	0x400e0e00
   813fc:	0008139d 	.word	0x0008139d

00081400 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81400:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81402:	210c      	movs	r1, #12
   81404:	4801      	ldr	r0, [pc, #4]	; (8140c <PIOB_Handler+0xc>)
   81406:	4b02      	ldr	r3, [pc, #8]	; (81410 <PIOB_Handler+0x10>)
   81408:	4798      	blx	r3
   8140a:	bd08      	pop	{r3, pc}
   8140c:	400e1000 	.word	0x400e1000
   81410:	0008139d 	.word	0x0008139d

00081414 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81414:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81416:	210d      	movs	r1, #13
   81418:	4801      	ldr	r0, [pc, #4]	; (81420 <PIOC_Handler+0xc>)
   8141a:	4b02      	ldr	r3, [pc, #8]	; (81424 <PIOC_Handler+0x10>)
   8141c:	4798      	blx	r3
   8141e:	bd08      	pop	{r3, pc}
   81420:	400e1200 	.word	0x400e1200
   81424:	0008139d 	.word	0x0008139d

00081428 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81428:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8142a:	210e      	movs	r1, #14
   8142c:	4801      	ldr	r0, [pc, #4]	; (81434 <PIOD_Handler+0xc>)
   8142e:	4b02      	ldr	r3, [pc, #8]	; (81438 <PIOD_Handler+0x10>)
   81430:	4798      	blx	r3
   81432:	bd08      	pop	{r3, pc}
   81434:	400e1400 	.word	0x400e1400
   81438:	0008139d 	.word	0x0008139d

0008143c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8143c:	4a17      	ldr	r2, [pc, #92]	; (8149c <pmc_switch_mck_to_pllack+0x60>)
   8143e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81444:	4318      	orrs	r0, r3
   81446:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81448:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8144a:	f013 0f08 	tst.w	r3, #8
   8144e:	d10a      	bne.n	81466 <pmc_switch_mck_to_pllack+0x2a>
   81450:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81454:	4911      	ldr	r1, [pc, #68]	; (8149c <pmc_switch_mck_to_pllack+0x60>)
   81456:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81458:	f012 0f08 	tst.w	r2, #8
   8145c:	d103      	bne.n	81466 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8145e:	3b01      	subs	r3, #1
   81460:	d1f9      	bne.n	81456 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81462:	2001      	movs	r0, #1
   81464:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81466:	4a0d      	ldr	r2, [pc, #52]	; (8149c <pmc_switch_mck_to_pllack+0x60>)
   81468:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8146a:	f023 0303 	bic.w	r3, r3, #3
   8146e:	f043 0302 	orr.w	r3, r3, #2
   81472:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81474:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81476:	f013 0f08 	tst.w	r3, #8
   8147a:	d10a      	bne.n	81492 <pmc_switch_mck_to_pllack+0x56>
   8147c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81480:	4906      	ldr	r1, [pc, #24]	; (8149c <pmc_switch_mck_to_pllack+0x60>)
   81482:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81484:	f012 0f08 	tst.w	r2, #8
   81488:	d105      	bne.n	81496 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8148a:	3b01      	subs	r3, #1
   8148c:	d1f9      	bne.n	81482 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8148e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81490:	4770      	bx	lr
	return 0;
   81492:	2000      	movs	r0, #0
   81494:	4770      	bx	lr
   81496:	2000      	movs	r0, #0
   81498:	4770      	bx	lr
   8149a:	bf00      	nop
   8149c:	400e0600 	.word	0x400e0600

000814a0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   814a0:	b9c8      	cbnz	r0, 814d6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   814a2:	4a11      	ldr	r2, [pc, #68]	; (814e8 <pmc_switch_mainck_to_xtal+0x48>)
   814a4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   814a6:	0209      	lsls	r1, r1, #8
   814a8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   814aa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   814ae:	f023 0303 	bic.w	r3, r3, #3
   814b2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   814b6:	f043 0301 	orr.w	r3, r3, #1
   814ba:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   814bc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   814be:	6e93      	ldr	r3, [r2, #104]	; 0x68
   814c0:	f013 0f01 	tst.w	r3, #1
   814c4:	d0fb      	beq.n	814be <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   814c6:	4a08      	ldr	r2, [pc, #32]	; (814e8 <pmc_switch_mainck_to_xtal+0x48>)
   814c8:	6a13      	ldr	r3, [r2, #32]
   814ca:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   814ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   814d2:	6213      	str	r3, [r2, #32]
   814d4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   814d6:	4904      	ldr	r1, [pc, #16]	; (814e8 <pmc_switch_mainck_to_xtal+0x48>)
   814d8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   814da:	4a04      	ldr	r2, [pc, #16]	; (814ec <pmc_switch_mainck_to_xtal+0x4c>)
   814dc:	401a      	ands	r2, r3
   814de:	4b04      	ldr	r3, [pc, #16]	; (814f0 <pmc_switch_mainck_to_xtal+0x50>)
   814e0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   814e2:	620b      	str	r3, [r1, #32]
   814e4:	4770      	bx	lr
   814e6:	bf00      	nop
   814e8:	400e0600 	.word	0x400e0600
   814ec:	fec8fffc 	.word	0xfec8fffc
   814f0:	01370002 	.word	0x01370002

000814f4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   814f4:	4b02      	ldr	r3, [pc, #8]	; (81500 <pmc_osc_is_ready_mainck+0xc>)
   814f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   814f8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   814fc:	4770      	bx	lr
   814fe:	bf00      	nop
   81500:	400e0600 	.word	0x400e0600

00081504 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81504:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81508:	4b01      	ldr	r3, [pc, #4]	; (81510 <pmc_disable_pllack+0xc>)
   8150a:	629a      	str	r2, [r3, #40]	; 0x28
   8150c:	4770      	bx	lr
   8150e:	bf00      	nop
   81510:	400e0600 	.word	0x400e0600

00081514 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81514:	4b02      	ldr	r3, [pc, #8]	; (81520 <pmc_is_locked_pllack+0xc>)
   81516:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81518:	f000 0002 	and.w	r0, r0, #2
   8151c:	4770      	bx	lr
   8151e:	bf00      	nop
   81520:	400e0600 	.word	0x400e0600

00081524 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   81524:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81528:	4b05      	ldr	r3, [pc, #20]	; (81540 <pmc_enable_periph_clk+0x1c>)
   8152a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   8152e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   81532:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   81536:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   8153a:	2000      	movs	r0, #0
   8153c:	4770      	bx	lr
   8153e:	bf00      	nop
   81540:	400e0600 	.word	0x400e0600

00081544 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81544:	e7fe      	b.n	81544 <Dummy_Handler>
	...

00081548 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81548:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8154a:	4b1c      	ldr	r3, [pc, #112]	; (815bc <Reset_Handler+0x74>)
   8154c:	4a1c      	ldr	r2, [pc, #112]	; (815c0 <Reset_Handler+0x78>)
   8154e:	429a      	cmp	r2, r3
   81550:	d010      	beq.n	81574 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81552:	4b1c      	ldr	r3, [pc, #112]	; (815c4 <Reset_Handler+0x7c>)
   81554:	4a19      	ldr	r2, [pc, #100]	; (815bc <Reset_Handler+0x74>)
   81556:	429a      	cmp	r2, r3
   81558:	d20c      	bcs.n	81574 <Reset_Handler+0x2c>
   8155a:	3b01      	subs	r3, #1
   8155c:	1a9b      	subs	r3, r3, r2
   8155e:	f023 0303 	bic.w	r3, r3, #3
   81562:	3304      	adds	r3, #4
   81564:	4413      	add	r3, r2
   81566:	4916      	ldr	r1, [pc, #88]	; (815c0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81568:	f851 0b04 	ldr.w	r0, [r1], #4
   8156c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81570:	429a      	cmp	r2, r3
   81572:	d1f9      	bne.n	81568 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81574:	4b14      	ldr	r3, [pc, #80]	; (815c8 <Reset_Handler+0x80>)
   81576:	4a15      	ldr	r2, [pc, #84]	; (815cc <Reset_Handler+0x84>)
   81578:	429a      	cmp	r2, r3
   8157a:	d20a      	bcs.n	81592 <Reset_Handler+0x4a>
   8157c:	3b01      	subs	r3, #1
   8157e:	1a9b      	subs	r3, r3, r2
   81580:	f023 0303 	bic.w	r3, r3, #3
   81584:	3304      	adds	r3, #4
   81586:	4413      	add	r3, r2
		*pDest++ = 0;
   81588:	2100      	movs	r1, #0
   8158a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8158e:	4293      	cmp	r3, r2
   81590:	d1fb      	bne.n	8158a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81592:	4b0f      	ldr	r3, [pc, #60]	; (815d0 <Reset_Handler+0x88>)
   81594:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81598:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8159c:	490d      	ldr	r1, [pc, #52]	; (815d4 <Reset_Handler+0x8c>)
   8159e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   815a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   815a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   815a8:	d203      	bcs.n	815b2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   815aa:	688b      	ldr	r3, [r1, #8]
   815ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   815b0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   815b2:	4b09      	ldr	r3, [pc, #36]	; (815d8 <Reset_Handler+0x90>)
   815b4:	4798      	blx	r3

	/* Branch to main function */
	main();
   815b6:	4b09      	ldr	r3, [pc, #36]	; (815dc <Reset_Handler+0x94>)
   815b8:	4798      	blx	r3
   815ba:	e7fe      	b.n	815ba <Reset_Handler+0x72>
   815bc:	20070000 	.word	0x20070000
   815c0:	00086654 	.word	0x00086654
   815c4:	20070eb0 	.word	0x20070eb0
   815c8:	20071140 	.word	0x20071140
   815cc:	20070eb0 	.word	0x20070eb0
   815d0:	00080000 	.word	0x00080000
   815d4:	e000ed00 	.word	0xe000ed00
   815d8:	00081a2d 	.word	0x00081a2d
   815dc:	00081785 	.word	0x00081785

000815e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   815e0:	4b3d      	ldr	r3, [pc, #244]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   815e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   815e4:	f003 0303 	and.w	r3, r3, #3
   815e8:	2b03      	cmp	r3, #3
   815ea:	d80e      	bhi.n	8160a <SystemCoreClockUpdate+0x2a>
   815ec:	e8df f003 	tbb	[pc, r3]
   815f0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   815f4:	4b39      	ldr	r3, [pc, #228]	; (816dc <SystemCoreClockUpdate+0xfc>)
   815f6:	695b      	ldr	r3, [r3, #20]
   815f8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   815fc:	bf14      	ite	ne
   815fe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81602:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81606:	4b36      	ldr	r3, [pc, #216]	; (816e0 <SystemCoreClockUpdate+0x100>)
   81608:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8160a:	4b33      	ldr	r3, [pc, #204]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   8160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8160e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81612:	2b70      	cmp	r3, #112	; 0x70
   81614:	d057      	beq.n	816c6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81616:	4b30      	ldr	r3, [pc, #192]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   81618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8161a:	4931      	ldr	r1, [pc, #196]	; (816e0 <SystemCoreClockUpdate+0x100>)
   8161c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81620:	680b      	ldr	r3, [r1, #0]
   81622:	40d3      	lsrs	r3, r2
   81624:	600b      	str	r3, [r1, #0]
   81626:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81628:	4b2b      	ldr	r3, [pc, #172]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   8162a:	6a1b      	ldr	r3, [r3, #32]
   8162c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81630:	d003      	beq.n	8163a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81632:	4a2c      	ldr	r2, [pc, #176]	; (816e4 <SystemCoreClockUpdate+0x104>)
   81634:	4b2a      	ldr	r3, [pc, #168]	; (816e0 <SystemCoreClockUpdate+0x100>)
   81636:	601a      	str	r2, [r3, #0]
   81638:	e7e7      	b.n	8160a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8163a:	4a2b      	ldr	r2, [pc, #172]	; (816e8 <SystemCoreClockUpdate+0x108>)
   8163c:	4b28      	ldr	r3, [pc, #160]	; (816e0 <SystemCoreClockUpdate+0x100>)
   8163e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81640:	4b25      	ldr	r3, [pc, #148]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   81642:	6a1b      	ldr	r3, [r3, #32]
   81644:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81648:	2b10      	cmp	r3, #16
   8164a:	d005      	beq.n	81658 <SystemCoreClockUpdate+0x78>
   8164c:	2b20      	cmp	r3, #32
   8164e:	d1dc      	bne.n	8160a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81650:	4a24      	ldr	r2, [pc, #144]	; (816e4 <SystemCoreClockUpdate+0x104>)
   81652:	4b23      	ldr	r3, [pc, #140]	; (816e0 <SystemCoreClockUpdate+0x100>)
   81654:	601a      	str	r2, [r3, #0]
				break;
   81656:	e7d8      	b.n	8160a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81658:	4a24      	ldr	r2, [pc, #144]	; (816ec <SystemCoreClockUpdate+0x10c>)
   8165a:	4b21      	ldr	r3, [pc, #132]	; (816e0 <SystemCoreClockUpdate+0x100>)
   8165c:	601a      	str	r2, [r3, #0]
				break;
   8165e:	e7d4      	b.n	8160a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81660:	4b1d      	ldr	r3, [pc, #116]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   81662:	6a1b      	ldr	r3, [r3, #32]
   81664:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81668:	d00c      	beq.n	81684 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8166a:	4a1e      	ldr	r2, [pc, #120]	; (816e4 <SystemCoreClockUpdate+0x104>)
   8166c:	4b1c      	ldr	r3, [pc, #112]	; (816e0 <SystemCoreClockUpdate+0x100>)
   8166e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81670:	4b19      	ldr	r3, [pc, #100]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   81672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81674:	f003 0303 	and.w	r3, r3, #3
   81678:	2b02      	cmp	r3, #2
   8167a:	d016      	beq.n	816aa <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8167c:	4a1c      	ldr	r2, [pc, #112]	; (816f0 <SystemCoreClockUpdate+0x110>)
   8167e:	4b18      	ldr	r3, [pc, #96]	; (816e0 <SystemCoreClockUpdate+0x100>)
   81680:	601a      	str	r2, [r3, #0]
   81682:	e7c2      	b.n	8160a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81684:	4a18      	ldr	r2, [pc, #96]	; (816e8 <SystemCoreClockUpdate+0x108>)
   81686:	4b16      	ldr	r3, [pc, #88]	; (816e0 <SystemCoreClockUpdate+0x100>)
   81688:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8168a:	4b13      	ldr	r3, [pc, #76]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   8168c:	6a1b      	ldr	r3, [r3, #32]
   8168e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81692:	2b10      	cmp	r3, #16
   81694:	d005      	beq.n	816a2 <SystemCoreClockUpdate+0xc2>
   81696:	2b20      	cmp	r3, #32
   81698:	d1ea      	bne.n	81670 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8169a:	4a12      	ldr	r2, [pc, #72]	; (816e4 <SystemCoreClockUpdate+0x104>)
   8169c:	4b10      	ldr	r3, [pc, #64]	; (816e0 <SystemCoreClockUpdate+0x100>)
   8169e:	601a      	str	r2, [r3, #0]
				break;
   816a0:	e7e6      	b.n	81670 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   816a2:	4a12      	ldr	r2, [pc, #72]	; (816ec <SystemCoreClockUpdate+0x10c>)
   816a4:	4b0e      	ldr	r3, [pc, #56]	; (816e0 <SystemCoreClockUpdate+0x100>)
   816a6:	601a      	str	r2, [r3, #0]
				break;
   816a8:	e7e2      	b.n	81670 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   816aa:	4a0b      	ldr	r2, [pc, #44]	; (816d8 <SystemCoreClockUpdate+0xf8>)
   816ac:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   816ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
   816b0:	480b      	ldr	r0, [pc, #44]	; (816e0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   816b2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   816b6:	6803      	ldr	r3, [r0, #0]
   816b8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   816bc:	b2d2      	uxtb	r2, r2
   816be:	fbb3 f3f2 	udiv	r3, r3, r2
   816c2:	6003      	str	r3, [r0, #0]
   816c4:	e7a1      	b.n	8160a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   816c6:	4a06      	ldr	r2, [pc, #24]	; (816e0 <SystemCoreClockUpdate+0x100>)
   816c8:	6813      	ldr	r3, [r2, #0]
   816ca:	490a      	ldr	r1, [pc, #40]	; (816f4 <SystemCoreClockUpdate+0x114>)
   816cc:	fba1 1303 	umull	r1, r3, r1, r3
   816d0:	085b      	lsrs	r3, r3, #1
   816d2:	6013      	str	r3, [r2, #0]
   816d4:	4770      	bx	lr
   816d6:	bf00      	nop
   816d8:	400e0600 	.word	0x400e0600
   816dc:	400e1a10 	.word	0x400e1a10
   816e0:	200704f4 	.word	0x200704f4
   816e4:	00b71b00 	.word	0x00b71b00
   816e8:	003d0900 	.word	0x003d0900
   816ec:	007a1200 	.word	0x007a1200
   816f0:	0e4e1c00 	.word	0x0e4e1c00
   816f4:	aaaaaaab 	.word	0xaaaaaaab

000816f8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   816f8:	4b0a      	ldr	r3, [pc, #40]	; (81724 <_sbrk+0x2c>)
   816fa:	681b      	ldr	r3, [r3, #0]
   816fc:	b153      	cbz	r3, 81714 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   816fe:	4b09      	ldr	r3, [pc, #36]	; (81724 <_sbrk+0x2c>)
   81700:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81702:	181a      	adds	r2, r3, r0
   81704:	4908      	ldr	r1, [pc, #32]	; (81728 <_sbrk+0x30>)
   81706:	4291      	cmp	r1, r2
   81708:	db08      	blt.n	8171c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8170a:	4610      	mov	r0, r2
   8170c:	4a05      	ldr	r2, [pc, #20]	; (81724 <_sbrk+0x2c>)
   8170e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81710:	4618      	mov	r0, r3
   81712:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81714:	4a05      	ldr	r2, [pc, #20]	; (8172c <_sbrk+0x34>)
   81716:	4b03      	ldr	r3, [pc, #12]	; (81724 <_sbrk+0x2c>)
   81718:	601a      	str	r2, [r3, #0]
   8171a:	e7f0      	b.n	816fe <_sbrk+0x6>
		return (caddr_t) -1;	
   8171c:	f04f 30ff 	mov.w	r0, #4294967295
}
   81720:	4770      	bx	lr
   81722:	bf00      	nop
   81724:	20071040 	.word	0x20071040
   81728:	20087ffc 	.word	0x20087ffc
   8172c:	20073140 	.word	0x20073140

00081730 <GetDetectState>:

uint GetDetectState(void);
void Detector_Calib2Regular(void);

uint GetDetectState()
{
   81730:	b508      	push	{r3, lr}
	uint32_t inputpin;
	uint RetVal;
	inputpin = pio_get_pin_value(PIO_PB26_IDX);
   81732:	203a      	movs	r0, #58	; 0x3a
   81734:	4b04      	ldr	r3, [pc, #16]	; (81748 <GetDetectState+0x18>)
   81736:	4798      	blx	r3
	switch(inputpin)
   81738:	b120      	cbz	r0, 81744 <GetDetectState+0x14>
		break;
		case CALIBRATE_Detector:
		RetVal = CALIBRATE_Detector;
		break;
		default:
		RetVal = UNKNOWN_Detector;
   8173a:	2801      	cmp	r0, #1
   8173c:	bf0c      	ite	eq
   8173e:	2001      	moveq	r0, #1
   81740:	2002      	movne	r0, #2
   81742:	bd08      	pop	{r3, pc}
		RetVal = REGULAR_Detector;
   81744:	2000      	movs	r0, #0
		break;
	}
	return RetVal;
}
   81746:	bd08      	pop	{r3, pc}
   81748:	000811df 	.word	0x000811df

0008174c <Detector_Calib2Regular>:

void Detector_Calib2Regular()
{
   8174c:	b500      	push	{lr}
   8174e:	b085      	sub	sp, #20
	// stop ADC channel 1 
	// save Calibration in FLASH (NFC)	
	Byte b2[10];
	FilterState = 6;
   81750:	2206      	movs	r2, #6
   81752:	4b07      	ldr	r3, [pc, #28]	; (81770 <Detector_Calib2Regular+0x24>)
   81754:	601a      	str	r2, [r3, #0]
	memcpy(b2,&Threshold,sizeof(uint32_t));
   81756:	4b07      	ldr	r3, [pc, #28]	; (81774 <Detector_Calib2Regular+0x28>)
   81758:	681b      	ldr	r3, [r3, #0]
   8175a:	a804      	add	r0, sp, #16
   8175c:	f840 3d0c 	str.w	r3, [r0, #-12]!
	//memcpy(b2,&TTest,sizeof(uint32_t));
	WriteCalibToFlash(b2);
   81760:	4b05      	ldr	r3, [pc, #20]	; (81778 <Detector_Calib2Regular+0x2c>)
   81762:	4798      	blx	r3
	PrintLn("Write to flash\n");
   81764:	4805      	ldr	r0, [pc, #20]	; (8177c <Detector_Calib2Regular+0x30>)
   81766:	4b06      	ldr	r3, [pc, #24]	; (81780 <Detector_Calib2Regular+0x34>)
   81768:	4798      	blx	r3
//	adc_disable_interrupt(ADC,ADC_IER_EOC0);	
	
}
   8176a:	b005      	add	sp, #20
   8176c:	f85d fb04 	ldr.w	pc, [sp], #4
   81770:	200704f8 	.word	0x200704f8
   81774:	20070500 	.word	0x20070500
   81778:	000805e9 	.word	0x000805e9
   8177c:	0008637c 	.word	0x0008637c
   81780:	00080661 	.word	0x00080661

00081784 <main>:
	// start ADC Channel 1 
	// Update Calibration according to potentiometer ADC ch1	
}*/

int main (void)
{
   81784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	char out_str[70] = {0};
	int i;	


	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   81788:	4b81      	ldr	r3, [pc, #516]	; (81990 <main+0x20c>)
   8178a:	4798      	blx	r3
	//Allow UART to control PB2 and PB3
	pio_set_peripheral(PIOA, PIO_PERIPH_A, PINS_UART);
	//Enable UART1 Clock	
	sysclk_enable_peripheral_clock(ID_UART);
	#endif
	gpio_configure_group(PIOB, PIO_PB26, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 22
   8178c:	4e81      	ldr	r6, [pc, #516]	; (81994 <main+0x210>)
   8178e:	4d82      	ldr	r5, [pc, #520]	; (81998 <main+0x214>)
   81790:	4632      	mov	r2, r6
   81792:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   81796:	4628      	mov	r0, r5
   81798:	4c80      	ldr	r4, [pc, #512]	; (8199c <main+0x218>)
   8179a:	47a0      	blx	r4
	gpio_configure_group(PIOD, PIO_PD1, PIO_OUTPUT_0); // arduino due pin # 26 OUTPUT red LED error
   8179c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   817a0:	2102      	movs	r1, #2
   817a2:	487f      	ldr	r0, [pc, #508]	; (819a0 <main+0x21c>)
   817a4:	47a0      	blx	r4
	gpio_configure_group(PIOB, PIO_PB21, PIO_OUTPUT_0); // arduino Blue LED
   817a6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   817aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   817ae:	4628      	mov	r0, r5
   817b0:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA7, PIO_OUTPUT_0); // arduino RT meas
   817b2:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
   817b6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   817ba:	2180      	movs	r1, #128	; 0x80
   817bc:	4628      	mov	r0, r5
   817be:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA15, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 24 BUTTON
   817c0:	4632      	mov	r2, r6
   817c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   817c6:	4628      	mov	r0, r5
   817c8:	47a0      	blx	r4
	// might conister to use pull down instead of debouncer
	board_init();
   817ca:	4b76      	ldr	r3, [pc, #472]	; (819a4 <main+0x220>)
   817cc:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);	
   817ce:	2056      	movs	r0, #86	; 0x56
   817d0:	4c75      	ldr	r4, [pc, #468]	; (819a8 <main+0x224>)
   817d2:	47a0      	blx	r4
	pio_set_pin_low(PIO_PD1_IDX);
   817d4:	2061      	movs	r0, #97	; 0x61
   817d6:	47a0      	blx	r4
	pio_set_pin_low(PIO_PB21_IDX);
   817d8:	2035      	movs	r0, #53	; 0x35
   817da:	47a0      	blx	r4
	pio_set_pin_low(PIO_PA7_IDX);
   817dc:	2007      	movs	r0, #7
   817de:	47a0      	blx	r4
	
	
	// Init FIFO's
	FIFO_Init(&Fifo);
   817e0:	4872      	ldr	r0, [pc, #456]	; (819ac <main+0x228>)
   817e2:	4b73      	ldr	r3, [pc, #460]	; (819b0 <main+0x22c>)
   817e4:	4798      	blx	r3
	FIFO2_Init(&WaveArray,FIFO2_LEN);
   817e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   817ea:	4872      	ldr	r0, [pc, #456]	; (819b4 <main+0x230>)
   817ec:	4c72      	ldr	r4, [pc, #456]	; (819b8 <main+0x234>)
   817ee:	47a0      	blx	r4
	//Fifo2LenAverage = 1.0f/((float)Fifo2p1.len);
	//FIFO2_Init(&Fifo2p2,5435);
	FIFO2_Init(&fifoDebug,3000);
   817f0:	f640 31b8 	movw	r1, #3000	; 0xbb8
   817f4:	4871      	ldr	r0, [pc, #452]	; (819bc <main+0x238>)
   817f6:	47a0      	blx	r4
		
	
	Timer_init();
   817f8:	4b71      	ldr	r3, [pc, #452]	; (819c0 <main+0x23c>)
   817fa:	4798      	blx	r3
	
	SPI_Init();
   817fc:	4b71      	ldr	r3, [pc, #452]	; (819c4 <main+0x240>)
   817fe:	4798      	blx	r3
	FLASH_Init();
   81800:	4b71      	ldr	r3, [pc, #452]	; (819c8 <main+0x244>)
   81802:	4798      	blx	r3
	#if DEBUG_UART
	uart_init(UART, &uart1Settings);
	//irq_register_handler(UART_IRQn, 0);
	#endif
	
	RF_InitTX();
   81804:	4b71      	ldr	r3, [pc, #452]	; (819cc <main+0x248>)
   81806:	4798      	blx	r3
   81808:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   8180a:	3b01      	subs	r3, #1
   8180c:	d1fd      	bne.n	8180a <main+0x86>
		__NOP;
	RF_SendBell(RF24_TEST);
   8180e:	2000      	movs	r0, #0
   81810:	4b6f      	ldr	r3, [pc, #444]	; (819d0 <main+0x24c>)
   81812:	4798      	blx	r3
	pio_set_pin_high(LED2_GPIO);
   81814:	2056      	movs	r0, #86	; 0x56
   81816:	4c6f      	ldr	r4, [pc, #444]	; (819d4 <main+0x250>)
   81818:	47a0      	blx	r4
	pio_set_pin_high(PIO_PD1_IDX);
   8181a:	2061      	movs	r0, #97	; 0x61
   8181c:	47a0      	blx	r4
	pio_set_pin_high(PIO_PB21_IDX);
   8181e:	2035      	movs	r0, #53	; 0x35
   81820:	47a0      	blx	r4
	Timer_Sleep(1000);
   81822:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   81826:	4b6c      	ldr	r3, [pc, #432]	; (819d8 <main+0x254>)
   81828:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);
   8182a:	2056      	movs	r0, #86	; 0x56
   8182c:	4c5e      	ldr	r4, [pc, #376]	; (819a8 <main+0x224>)
   8182e:	47a0      	blx	r4
	pio_set_pin_low(PIO_PD1_IDX);
   81830:	2061      	movs	r0, #97	; 0x61
   81832:	47a0      	blx	r4
	pio_set_pin_low(PIO_PB21_IDX);
   81834:	2035      	movs	r0, #53	; 0x35
   81836:	47a0      	blx	r4
	
	//Timer_Sleep(10000);
	DetectorState = GetDetectState();
   81838:	4b68      	ldr	r3, [pc, #416]	; (819dc <main+0x258>)
   8183a:	4798      	blx	r3
   8183c:	b2c0      	uxtb	r0, r0
   8183e:	4b68      	ldr	r3, [pc, #416]	; (819e0 <main+0x25c>)
   81840:	7018      	strb	r0, [r3, #0]
	PrevDetectorState = DetectorState;
   81842:	4b68      	ldr	r3, [pc, #416]	; (819e4 <main+0x260>)
   81844:	7018      	strb	r0, [r3, #0]

	if(DetectorState == REGULAR_Detector)
   81846:	b138      	cbz	r0, 81858 <main+0xd4>
		Byte *p;
		p = ReadCalibFromFlash();
		memcpy(&Threshold,p,sizeof(uint32_t));
	}
		
	ADCC_Init();
   81848:	4b67      	ldr	r3, [pc, #412]	; (819e8 <main+0x264>)
   8184a:	4798      	blx	r3
	DAC3X8E_Init();
   8184c:	4b67      	ldr	r3, [pc, #412]	; (819ec <main+0x268>)
   8184e:	4798      	blx	r3
	Insert application code here, after the board has been initialized. */
	while(1)
	{	
		//Calibration = ADC->ADC_CDR[1];		
		Calibration = ADCC_GlobalRawData[1];
		DetectorState = GetDetectState();
   81850:	4d63      	ldr	r5, [pc, #396]	; (819e0 <main+0x25c>)
			{
				case REGULAR_Detector:				
				Detector_Calib2Regular();
				break;
				case CALIBRATE_Detector:
				FilterState = 6;				
   81852:	4f67      	ldr	r7, [pc, #412]	; (819f0 <main+0x26c>)
			FIFO_Init(&Fifo);
			FIFO2_Reset(&WaveArray);
			FilterState = 6;
			delay = 0;
			//FIFO2_Reset(&Fifo2p2);
			Timer_Sleep(20);
   81854:	4e60      	ldr	r6, [pc, #384]	; (819d8 <main+0x254>)
   81856:	e048      	b.n	818ea <main+0x166>
		p = ReadCalibFromFlash();
   81858:	4b66      	ldr	r3, [pc, #408]	; (819f4 <main+0x270>)
   8185a:	4798      	blx	r3
		memcpy(&Threshold,p,sizeof(uint32_t));
   8185c:	6802      	ldr	r2, [r0, #0]
   8185e:	4b66      	ldr	r3, [pc, #408]	; (819f8 <main+0x274>)
   81860:	601a      	str	r2, [r3, #0]
   81862:	e7f1      	b.n	81848 <main+0xc4>
				Detector_Calib2Regular();
   81864:	4b65      	ldr	r3, [pc, #404]	; (819fc <main+0x278>)
   81866:	4798      	blx	r3
			PrevDetectorState = DetectorState;
   81868:	782a      	ldrb	r2, [r5, #0]
   8186a:	4b5e      	ldr	r3, [pc, #376]	; (819e4 <main+0x260>)
   8186c:	701a      	strb	r2, [r3, #0]
		switch(DetectorState)
   8186e:	782b      	ldrb	r3, [r5, #0]
   81870:	b163      	cbz	r3, 8188c <main+0x108>
   81872:	2b01      	cmp	r3, #1
   81874:	d110      	bne.n	81898 <main+0x114>
			pio_set_pin_low(PIO_PD1_IDX);
   81876:	2061      	movs	r0, #97	; 0x61
   81878:	4b4b      	ldr	r3, [pc, #300]	; (819a8 <main+0x224>)
   8187a:	4798      	blx	r3
			MaxAllowedFirstVal = UINT32_MAX;
   8187c:	f04f 32ff 	mov.w	r2, #4294967295
   81880:	4b5f      	ldr	r3, [pc, #380]	; (81a00 <main+0x27c>)
   81882:	601a      	str	r2, [r3, #0]
			break;
   81884:	e008      	b.n	81898 <main+0x114>
				FilterState = 6;				
   81886:	2306      	movs	r3, #6
   81888:	603b      	str	r3, [r7, #0]
				break;
   8188a:	e7ed      	b.n	81868 <main+0xe4>
			MaxAllowedFirstVal = Threshold + (4<<17);//(29<<17)/10;
   8188c:	4b5a      	ldr	r3, [pc, #360]	; (819f8 <main+0x274>)
   8188e:	681b      	ldr	r3, [r3, #0]
   81890:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   81894:	4a5a      	ldr	r2, [pc, #360]	; (81a00 <main+0x27c>)
   81896:	6013      	str	r3, [r2, #0]
		if(FilterState == 5)
   81898:	683b      	ldr	r3, [r7, #0]
   8189a:	2b05      	cmp	r3, #5
			pio_set_pin_high(PIO_PD1_IDX);
   8189c:	f04f 0061 	mov.w	r0, #97	; 0x61
   818a0:	bf0c      	ite	eq
   818a2:	4b4c      	ldreq	r3, [pc, #304]	; (819d4 <main+0x250>)
			pio_set_pin_low(PIO_PD1_IDX);
   818a4:	4b40      	ldrne	r3, [pc, #256]	; (819a8 <main+0x224>)
   818a6:	4798      	blx	r3
		if(Det_flag)
   818a8:	4b56      	ldr	r3, [pc, #344]	; (81a04 <main+0x280>)
   818aa:	681b      	ldr	r3, [r3, #0]
   818ac:	b1c3      	cbz	r3, 818e0 <main+0x15c>
			Det_flag = 0;				
   818ae:	2200      	movs	r2, #0
   818b0:	4b54      	ldr	r3, [pc, #336]	; (81a04 <main+0x280>)
   818b2:	601a      	str	r2, [r3, #0]
			switch (DetectorState)
   818b4:	782b      	ldrb	r3, [r5, #0]
   818b6:	2b00      	cmp	r3, #0
   818b8:	d030      	beq.n	8191c <main+0x198>
   818ba:	2b01      	cmp	r3, #1
   818bc:	d043      	beq.n	81946 <main+0x1c2>
			FIFO_Init(&Fifo);
   818be:	483b      	ldr	r0, [pc, #236]	; (819ac <main+0x228>)
   818c0:	4b3b      	ldr	r3, [pc, #236]	; (819b0 <main+0x22c>)
   818c2:	4798      	blx	r3
			FIFO2_Reset(&WaveArray);
   818c4:	483b      	ldr	r0, [pc, #236]	; (819b4 <main+0x230>)
   818c6:	4b50      	ldr	r3, [pc, #320]	; (81a08 <main+0x284>)
   818c8:	4798      	blx	r3
			FilterState = 6;
   818ca:	2306      	movs	r3, #6
   818cc:	603b      	str	r3, [r7, #0]
			delay = 0;
   818ce:	2200      	movs	r2, #0
   818d0:	4b4e      	ldr	r3, [pc, #312]	; (81a0c <main+0x288>)
   818d2:	601a      	str	r2, [r3, #0]
			Timer_Sleep(20);
   818d4:	2014      	movs	r0, #20
   818d6:	47b0      	blx	r6
			adc_enable_interrupt(ADC,ADC_IER_EOC0);
   818d8:	2101      	movs	r1, #1
   818da:	484d      	ldr	r0, [pc, #308]	; (81a10 <main+0x28c>)
   818dc:	4b4d      	ldr	r3, [pc, #308]	; (81a14 <main+0x290>)
   818de:	4798      	blx	r3
		}
		if(DetectorState == CALIBRATE_Detector){
   818e0:	782b      	ldrb	r3, [r5, #0]
   818e2:	2b01      	cmp	r3, #1
   818e4:	d04b      	beq.n	8197e <main+0x1fa>
		#if DEBUG_UART
		Timer_Sleep(10);
		sprintf(out_str,"%lu\r\n", ADCC_GlobalRawData[2]);//ADC->ADC_CDR[2]);
		PrintLn(out_str);		
		#endif
		Timer_Sleep(100);
   818e6:	2064      	movs	r0, #100	; 0x64
   818e8:	47b0      	blx	r6
		Calibration = ADCC_GlobalRawData[1];
   818ea:	4b4b      	ldr	r3, [pc, #300]	; (81a18 <main+0x294>)
   818ec:	885a      	ldrh	r2, [r3, #2]
   818ee:	4b4b      	ldr	r3, [pc, #300]	; (81a1c <main+0x298>)
   818f0:	601a      	str	r2, [r3, #0]
		DetectorState = GetDetectState();
   818f2:	4b3a      	ldr	r3, [pc, #232]	; (819dc <main+0x258>)
   818f4:	4798      	blx	r3
   818f6:	b2c0      	uxtb	r0, r0
   818f8:	7028      	strb	r0, [r5, #0]
		if((DetectorState != UNKNOWN_Detector) &&(DetectorState != PrevDetectorState)) // State changed
   818fa:	2802      	cmp	r0, #2
   818fc:	d0cc      	beq.n	81898 <main+0x114>
   818fe:	4b39      	ldr	r3, [pc, #228]	; (819e4 <main+0x260>)
   81900:	781b      	ldrb	r3, [r3, #0]
   81902:	4283      	cmp	r3, r0
   81904:	d0b3      	beq.n	8186e <main+0xea>
			PrintLn("State change\n");
   81906:	4846      	ldr	r0, [pc, #280]	; (81a20 <main+0x29c>)
   81908:	4b46      	ldr	r3, [pc, #280]	; (81a24 <main+0x2a0>)
   8190a:	4798      	blx	r3
			switch(DetectorState)
   8190c:	782b      	ldrb	r3, [r5, #0]
   8190e:	2b00      	cmp	r3, #0
   81910:	d0a8      	beq.n	81864 <main+0xe0>
   81912:	2b01      	cmp	r3, #1
   81914:	d0b7      	beq.n	81886 <main+0x102>
				Detector_Calib2Regular();
   81916:	4b39      	ldr	r3, [pc, #228]	; (819fc <main+0x278>)
   81918:	4798      	blx	r3
   8191a:	e7a5      	b.n	81868 <main+0xe4>
			switch (DetectorState)
   8191c:	240a      	movs	r4, #10
					Timer_Sleep(20);				
   8191e:	f04f 0914 	mov.w	r9, #20
					RF_SendBell(RF24_BELLDOOR);
   81922:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 819d0 <main+0x24c>
					Timer_Sleep(20);				
   81926:	4648      	mov	r0, r9
   81928:	47b0      	blx	r6
					RF_SendBell(RF24_BELLDOOR);
   8192a:	2001      	movs	r0, #1
   8192c:	47c0      	blx	r8
				for(i=0;i<10;i++)
   8192e:	3c01      	subs	r4, #1
   81930:	d1f9      	bne.n	81926 <main+0x1a2>
				pio_set_pin_high(LED2_GPIO);
   81932:	2056      	movs	r0, #86	; 0x56
   81934:	4b27      	ldr	r3, [pc, #156]	; (819d4 <main+0x250>)
   81936:	4798      	blx	r3
				Timer_Sleep(500);
   81938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   8193c:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   8193e:	2056      	movs	r0, #86	; 0x56
   81940:	4b19      	ldr	r3, [pc, #100]	; (819a8 <main+0x224>)
   81942:	4798      	blx	r3
				break;
   81944:	e7bb      	b.n	818be <main+0x13a>
				pio_set_pin_high(LED2_GPIO);
   81946:	2056      	movs	r0, #86	; 0x56
   81948:	4b22      	ldr	r3, [pc, #136]	; (819d4 <main+0x250>)
   8194a:	4798      	blx	r3
				if((FirstDetVal>(Threshold+(1<<17))) && (FirstDetVal<(Threshold+(3<<17))))
   8194c:	4b2a      	ldr	r3, [pc, #168]	; (819f8 <main+0x274>)
   8194e:	681b      	ldr	r3, [r3, #0]
   81950:	4a35      	ldr	r2, [pc, #212]	; (81a28 <main+0x2a4>)
   81952:	6812      	ldr	r2, [r2, #0]
   81954:	f503 3100 	add.w	r1, r3, #131072	; 0x20000
   81958:	4291      	cmp	r1, r2
   8195a:	d203      	bcs.n	81964 <main+0x1e0>
   8195c:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
   81960:	429a      	cmp	r2, r3
   81962:	d308      	bcc.n	81976 <main+0x1f2>
				Timer_Sleep(3000);				
   81964:	f640 30b8 	movw	r0, #3000	; 0xbb8
   81968:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   8196a:	2056      	movs	r0, #86	; 0x56
   8196c:	4c0e      	ldr	r4, [pc, #56]	; (819a8 <main+0x224>)
   8196e:	47a0      	blx	r4
				pio_set_pin_low(PIO_PB21_IDX);
   81970:	2035      	movs	r0, #53	; 0x35
   81972:	47a0      	blx	r4
				break;
   81974:	e7a3      	b.n	818be <main+0x13a>
					pio_set_pin_high(PIO_PB21_IDX);
   81976:	2035      	movs	r0, #53	; 0x35
   81978:	4b16      	ldr	r3, [pc, #88]	; (819d4 <main+0x250>)
   8197a:	4798      	blx	r3
   8197c:	e7f2      	b.n	81964 <main+0x1e0>
			Threshold = Calibration*(1<<5)*MAX_CALIBRATION;
   8197e:	4b27      	ldr	r3, [pc, #156]	; (81a1c <main+0x298>)
   81980:	681b      	ldr	r3, [r3, #0]
   81982:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   81986:	019b      	lsls	r3, r3, #6
   81988:	4a1b      	ldr	r2, [pc, #108]	; (819f8 <main+0x274>)
   8198a:	6013      	str	r3, [r2, #0]
   8198c:	e7ab      	b.n	818e6 <main+0x162>
   8198e:	bf00      	nop
   81990:	0008105d 	.word	0x0008105d
   81994:	28000008 	.word	0x28000008
   81998:	400e1000 	.word	0x400e1000
   8199c:	00081301 	.word	0x00081301
   819a0:	400e1400 	.word	0x400e1400
   819a4:	000810c1 	.word	0x000810c1
   819a8:	00081215 	.word	0x00081215
   819ac:	200710cc 	.word	0x200710cc
   819b0:	00080289 	.word	0x00080289
   819b4:	2007108c 	.word	0x2007108c
   819b8:	000802b5 	.word	0x000802b5
   819bc:	20071108 	.word	0x20071108
   819c0:	00080fb1 	.word	0x00080fb1
   819c4:	00080d51 	.word	0x00080d51
   819c8:	000803ed 	.word	0x000803ed
   819cc:	00080945 	.word	0x00080945
   819d0:	000809f5 	.word	0x000809f5
   819d4:	000811fb 	.word	0x000811fb
   819d8:	00081029 	.word	0x00081029
   819dc:	00081731 	.word	0x00081731
   819e0:	200710b8 	.word	0x200710b8
   819e4:	20071088 	.word	0x20071088
   819e8:	00080c19 	.word	0x00080c19
   819ec:	0008033d 	.word	0x0008033d
   819f0:	200704f8 	.word	0x200704f8
   819f4:	00080405 	.word	0x00080405
   819f8:	20070500 	.word	0x20070500
   819fc:	0008174d 	.word	0x0008174d
   81a00:	200704fc 	.word	0x200704fc
   81a04:	20071044 	.word	0x20071044
   81a08:	00080319 	.word	0x00080319
   81a0c:	200710c0 	.word	0x200710c0
   81a10:	400c0000 	.word	0x400c0000
   81a14:	000801e7 	.word	0x000801e7
   81a18:	20071080 	.word	0x20071080
   81a1c:	200710ac 	.word	0x200710ac
   81a20:	0008638c 	.word	0x0008638c
   81a24:	00080661 	.word	0x00080661
   81a28:	200710bc 	.word	0x200710bc

00081a2c <__libc_init_array>:
   81a2c:	b570      	push	{r4, r5, r6, lr}
   81a2e:	4e0f      	ldr	r6, [pc, #60]	; (81a6c <__libc_init_array+0x40>)
   81a30:	4d0f      	ldr	r5, [pc, #60]	; (81a70 <__libc_init_array+0x44>)
   81a32:	1b76      	subs	r6, r6, r5
   81a34:	10b6      	asrs	r6, r6, #2
   81a36:	bf18      	it	ne
   81a38:	2400      	movne	r4, #0
   81a3a:	d005      	beq.n	81a48 <__libc_init_array+0x1c>
   81a3c:	3401      	adds	r4, #1
   81a3e:	f855 3b04 	ldr.w	r3, [r5], #4
   81a42:	4798      	blx	r3
   81a44:	42a6      	cmp	r6, r4
   81a46:	d1f9      	bne.n	81a3c <__libc_init_array+0x10>
   81a48:	4e0a      	ldr	r6, [pc, #40]	; (81a74 <__libc_init_array+0x48>)
   81a4a:	4d0b      	ldr	r5, [pc, #44]	; (81a78 <__libc_init_array+0x4c>)
   81a4c:	f004 fdec 	bl	86628 <_init>
   81a50:	1b76      	subs	r6, r6, r5
   81a52:	10b6      	asrs	r6, r6, #2
   81a54:	bf18      	it	ne
   81a56:	2400      	movne	r4, #0
   81a58:	d006      	beq.n	81a68 <__libc_init_array+0x3c>
   81a5a:	3401      	adds	r4, #1
   81a5c:	f855 3b04 	ldr.w	r3, [r5], #4
   81a60:	4798      	blx	r3
   81a62:	42a6      	cmp	r6, r4
   81a64:	d1f9      	bne.n	81a5a <__libc_init_array+0x2e>
   81a66:	bd70      	pop	{r4, r5, r6, pc}
   81a68:	bd70      	pop	{r4, r5, r6, pc}
   81a6a:	bf00      	nop
   81a6c:	00086634 	.word	0x00086634
   81a70:	00086634 	.word	0x00086634
   81a74:	0008663c 	.word	0x0008663c
   81a78:	00086634 	.word	0x00086634

00081a7c <malloc>:
   81a7c:	4b02      	ldr	r3, [pc, #8]	; (81a88 <malloc+0xc>)
   81a7e:	4601      	mov	r1, r0
   81a80:	6818      	ldr	r0, [r3, #0]
   81a82:	f000 b803 	b.w	81a8c <_malloc_r>
   81a86:	bf00      	nop
   81a88:	20070504 	.word	0x20070504

00081a8c <_malloc_r>:
   81a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a90:	f101 060b 	add.w	r6, r1, #11
   81a94:	2e16      	cmp	r6, #22
   81a96:	b083      	sub	sp, #12
   81a98:	4605      	mov	r5, r0
   81a9a:	f240 809e 	bls.w	81bda <_malloc_r+0x14e>
   81a9e:	f036 0607 	bics.w	r6, r6, #7
   81aa2:	f100 80bd 	bmi.w	81c20 <_malloc_r+0x194>
   81aa6:	42b1      	cmp	r1, r6
   81aa8:	f200 80ba 	bhi.w	81c20 <_malloc_r+0x194>
   81aac:	f000 fb54 	bl	82158 <__malloc_lock>
   81ab0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81ab4:	f0c0 8285 	bcc.w	81fc2 <_malloc_r+0x536>
   81ab8:	0a73      	lsrs	r3, r6, #9
   81aba:	f000 80b8 	beq.w	81c2e <_malloc_r+0x1a2>
   81abe:	2b04      	cmp	r3, #4
   81ac0:	f200 816c 	bhi.w	81d9c <_malloc_r+0x310>
   81ac4:	09b3      	lsrs	r3, r6, #6
   81ac6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   81aca:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   81ace:	00c1      	lsls	r1, r0, #3
   81ad0:	4fb8      	ldr	r7, [pc, #736]	; (81db4 <_malloc_r+0x328>)
   81ad2:	4439      	add	r1, r7
   81ad4:	684c      	ldr	r4, [r1, #4]
   81ad6:	3908      	subs	r1, #8
   81ad8:	42a1      	cmp	r1, r4
   81ada:	d106      	bne.n	81aea <_malloc_r+0x5e>
   81adc:	e00c      	b.n	81af8 <_malloc_r+0x6c>
   81ade:	2a00      	cmp	r2, #0
   81ae0:	f280 80ab 	bge.w	81c3a <_malloc_r+0x1ae>
   81ae4:	68e4      	ldr	r4, [r4, #12]
   81ae6:	42a1      	cmp	r1, r4
   81ae8:	d006      	beq.n	81af8 <_malloc_r+0x6c>
   81aea:	6863      	ldr	r3, [r4, #4]
   81aec:	f023 0303 	bic.w	r3, r3, #3
   81af0:	1b9a      	subs	r2, r3, r6
   81af2:	2a0f      	cmp	r2, #15
   81af4:	ddf3      	ble.n	81ade <_malloc_r+0x52>
   81af6:	4670      	mov	r0, lr
   81af8:	693c      	ldr	r4, [r7, #16]
   81afa:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 81dc8 <_malloc_r+0x33c>
   81afe:	4574      	cmp	r4, lr
   81b00:	f000 819e 	beq.w	81e40 <_malloc_r+0x3b4>
   81b04:	6863      	ldr	r3, [r4, #4]
   81b06:	f023 0303 	bic.w	r3, r3, #3
   81b0a:	1b9a      	subs	r2, r3, r6
   81b0c:	2a0f      	cmp	r2, #15
   81b0e:	f300 8183 	bgt.w	81e18 <_malloc_r+0x38c>
   81b12:	2a00      	cmp	r2, #0
   81b14:	f8c7 e014 	str.w	lr, [r7, #20]
   81b18:	f8c7 e010 	str.w	lr, [r7, #16]
   81b1c:	f280 8091 	bge.w	81c42 <_malloc_r+0x1b6>
   81b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81b24:	f080 8154 	bcs.w	81dd0 <_malloc_r+0x344>
   81b28:	2201      	movs	r2, #1
   81b2a:	08db      	lsrs	r3, r3, #3
   81b2c:	6879      	ldr	r1, [r7, #4]
   81b2e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81b32:	4413      	add	r3, r2
   81b34:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81b38:	fa02 f20c 	lsl.w	r2, r2, ip
   81b3c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   81b40:	430a      	orrs	r2, r1
   81b42:	f1ac 0108 	sub.w	r1, ip, #8
   81b46:	60e1      	str	r1, [r4, #12]
   81b48:	f8c4 8008 	str.w	r8, [r4, #8]
   81b4c:	607a      	str	r2, [r7, #4]
   81b4e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   81b52:	f8c8 400c 	str.w	r4, [r8, #12]
   81b56:	2401      	movs	r4, #1
   81b58:	1083      	asrs	r3, r0, #2
   81b5a:	409c      	lsls	r4, r3
   81b5c:	4294      	cmp	r4, r2
   81b5e:	d87d      	bhi.n	81c5c <_malloc_r+0x1d0>
   81b60:	4214      	tst	r4, r2
   81b62:	d106      	bne.n	81b72 <_malloc_r+0xe6>
   81b64:	f020 0003 	bic.w	r0, r0, #3
   81b68:	0064      	lsls	r4, r4, #1
   81b6a:	4214      	tst	r4, r2
   81b6c:	f100 0004 	add.w	r0, r0, #4
   81b70:	d0fa      	beq.n	81b68 <_malloc_r+0xdc>
   81b72:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   81b76:	46cc      	mov	ip, r9
   81b78:	4680      	mov	r8, r0
   81b7a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81b7e:	459c      	cmp	ip, r3
   81b80:	d107      	bne.n	81b92 <_malloc_r+0x106>
   81b82:	e15f      	b.n	81e44 <_malloc_r+0x3b8>
   81b84:	2a00      	cmp	r2, #0
   81b86:	f280 816d 	bge.w	81e64 <_malloc_r+0x3d8>
   81b8a:	68db      	ldr	r3, [r3, #12]
   81b8c:	459c      	cmp	ip, r3
   81b8e:	f000 8159 	beq.w	81e44 <_malloc_r+0x3b8>
   81b92:	6859      	ldr	r1, [r3, #4]
   81b94:	f021 0103 	bic.w	r1, r1, #3
   81b98:	1b8a      	subs	r2, r1, r6
   81b9a:	2a0f      	cmp	r2, #15
   81b9c:	ddf2      	ble.n	81b84 <_malloc_r+0xf8>
   81b9e:	68dc      	ldr	r4, [r3, #12]
   81ba0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   81ba4:	f046 0801 	orr.w	r8, r6, #1
   81ba8:	4628      	mov	r0, r5
   81baa:	441e      	add	r6, r3
   81bac:	f042 0501 	orr.w	r5, r2, #1
   81bb0:	f8c3 8004 	str.w	r8, [r3, #4]
   81bb4:	f8cc 400c 	str.w	r4, [ip, #12]
   81bb8:	f8c4 c008 	str.w	ip, [r4, #8]
   81bbc:	617e      	str	r6, [r7, #20]
   81bbe:	613e      	str	r6, [r7, #16]
   81bc0:	f8c6 e00c 	str.w	lr, [r6, #12]
   81bc4:	f8c6 e008 	str.w	lr, [r6, #8]
   81bc8:	6075      	str	r5, [r6, #4]
   81bca:	505a      	str	r2, [r3, r1]
   81bcc:	9300      	str	r3, [sp, #0]
   81bce:	f000 fac9 	bl	82164 <__malloc_unlock>
   81bd2:	9b00      	ldr	r3, [sp, #0]
   81bd4:	f103 0408 	add.w	r4, r3, #8
   81bd8:	e01e      	b.n	81c18 <_malloc_r+0x18c>
   81bda:	2910      	cmp	r1, #16
   81bdc:	d820      	bhi.n	81c20 <_malloc_r+0x194>
   81bde:	f000 fabb 	bl	82158 <__malloc_lock>
   81be2:	2610      	movs	r6, #16
   81be4:	2318      	movs	r3, #24
   81be6:	2002      	movs	r0, #2
   81be8:	4f72      	ldr	r7, [pc, #456]	; (81db4 <_malloc_r+0x328>)
   81bea:	443b      	add	r3, r7
   81bec:	685c      	ldr	r4, [r3, #4]
   81bee:	f1a3 0208 	sub.w	r2, r3, #8
   81bf2:	4294      	cmp	r4, r2
   81bf4:	f000 812f 	beq.w	81e56 <_malloc_r+0x3ca>
   81bf8:	6863      	ldr	r3, [r4, #4]
   81bfa:	68e1      	ldr	r1, [r4, #12]
   81bfc:	f023 0303 	bic.w	r3, r3, #3
   81c00:	4423      	add	r3, r4
   81c02:	685a      	ldr	r2, [r3, #4]
   81c04:	68a6      	ldr	r6, [r4, #8]
   81c06:	f042 0201 	orr.w	r2, r2, #1
   81c0a:	60f1      	str	r1, [r6, #12]
   81c0c:	4628      	mov	r0, r5
   81c0e:	608e      	str	r6, [r1, #8]
   81c10:	605a      	str	r2, [r3, #4]
   81c12:	f000 faa7 	bl	82164 <__malloc_unlock>
   81c16:	3408      	adds	r4, #8
   81c18:	4620      	mov	r0, r4
   81c1a:	b003      	add	sp, #12
   81c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c20:	2400      	movs	r4, #0
   81c22:	230c      	movs	r3, #12
   81c24:	4620      	mov	r0, r4
   81c26:	602b      	str	r3, [r5, #0]
   81c28:	b003      	add	sp, #12
   81c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c2e:	2040      	movs	r0, #64	; 0x40
   81c30:	f44f 7100 	mov.w	r1, #512	; 0x200
   81c34:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   81c38:	e74a      	b.n	81ad0 <_malloc_r+0x44>
   81c3a:	4423      	add	r3, r4
   81c3c:	685a      	ldr	r2, [r3, #4]
   81c3e:	68e1      	ldr	r1, [r4, #12]
   81c40:	e7e0      	b.n	81c04 <_malloc_r+0x178>
   81c42:	4423      	add	r3, r4
   81c44:	685a      	ldr	r2, [r3, #4]
   81c46:	4628      	mov	r0, r5
   81c48:	f042 0201 	orr.w	r2, r2, #1
   81c4c:	605a      	str	r2, [r3, #4]
   81c4e:	3408      	adds	r4, #8
   81c50:	f000 fa88 	bl	82164 <__malloc_unlock>
   81c54:	4620      	mov	r0, r4
   81c56:	b003      	add	sp, #12
   81c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c5c:	68bc      	ldr	r4, [r7, #8]
   81c5e:	6863      	ldr	r3, [r4, #4]
   81c60:	f023 0803 	bic.w	r8, r3, #3
   81c64:	45b0      	cmp	r8, r6
   81c66:	d304      	bcc.n	81c72 <_malloc_r+0x1e6>
   81c68:	eba8 0306 	sub.w	r3, r8, r6
   81c6c:	2b0f      	cmp	r3, #15
   81c6e:	f300 8085 	bgt.w	81d7c <_malloc_r+0x2f0>
   81c72:	f8df 9158 	ldr.w	r9, [pc, #344]	; 81dcc <_malloc_r+0x340>
   81c76:	4b50      	ldr	r3, [pc, #320]	; (81db8 <_malloc_r+0x32c>)
   81c78:	f8d9 2000 	ldr.w	r2, [r9]
   81c7c:	681b      	ldr	r3, [r3, #0]
   81c7e:	3201      	adds	r2, #1
   81c80:	4433      	add	r3, r6
   81c82:	eb04 0a08 	add.w	sl, r4, r8
   81c86:	f000 8154 	beq.w	81f32 <_malloc_r+0x4a6>
   81c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   81c8e:	330f      	adds	r3, #15
   81c90:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   81c94:	f02b 0b0f 	bic.w	fp, fp, #15
   81c98:	4659      	mov	r1, fp
   81c9a:	4628      	mov	r0, r5
   81c9c:	f000 fa68 	bl	82170 <_sbrk_r>
   81ca0:	1c41      	adds	r1, r0, #1
   81ca2:	4602      	mov	r2, r0
   81ca4:	f000 80fb 	beq.w	81e9e <_malloc_r+0x412>
   81ca8:	4582      	cmp	sl, r0
   81caa:	f200 80f6 	bhi.w	81e9a <_malloc_r+0x40e>
   81cae:	4b43      	ldr	r3, [pc, #268]	; (81dbc <_malloc_r+0x330>)
   81cb0:	6819      	ldr	r1, [r3, #0]
   81cb2:	4459      	add	r1, fp
   81cb4:	6019      	str	r1, [r3, #0]
   81cb6:	f000 814c 	beq.w	81f52 <_malloc_r+0x4c6>
   81cba:	f8d9 0000 	ldr.w	r0, [r9]
   81cbe:	3001      	adds	r0, #1
   81cc0:	bf1b      	ittet	ne
   81cc2:	eba2 0a0a 	subne.w	sl, r2, sl
   81cc6:	4451      	addne	r1, sl
   81cc8:	f8c9 2000 	streq.w	r2, [r9]
   81ccc:	6019      	strne	r1, [r3, #0]
   81cce:	f012 0107 	ands.w	r1, r2, #7
   81cd2:	f000 8114 	beq.w	81efe <_malloc_r+0x472>
   81cd6:	f1c1 0008 	rsb	r0, r1, #8
   81cda:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   81cde:	4402      	add	r2, r0
   81ce0:	3108      	adds	r1, #8
   81ce2:	eb02 090b 	add.w	r9, r2, fp
   81ce6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   81cea:	eba1 0909 	sub.w	r9, r1, r9
   81cee:	4649      	mov	r1, r9
   81cf0:	4628      	mov	r0, r5
   81cf2:	9301      	str	r3, [sp, #4]
   81cf4:	9200      	str	r2, [sp, #0]
   81cf6:	f000 fa3b 	bl	82170 <_sbrk_r>
   81cfa:	1c43      	adds	r3, r0, #1
   81cfc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   81d00:	f000 8142 	beq.w	81f88 <_malloc_r+0x4fc>
   81d04:	1a80      	subs	r0, r0, r2
   81d06:	4448      	add	r0, r9
   81d08:	f040 0001 	orr.w	r0, r0, #1
   81d0c:	6819      	ldr	r1, [r3, #0]
   81d0e:	42bc      	cmp	r4, r7
   81d10:	4449      	add	r1, r9
   81d12:	60ba      	str	r2, [r7, #8]
   81d14:	6019      	str	r1, [r3, #0]
   81d16:	6050      	str	r0, [r2, #4]
   81d18:	d017      	beq.n	81d4a <_malloc_r+0x2be>
   81d1a:	f1b8 0f0f 	cmp.w	r8, #15
   81d1e:	f240 80fa 	bls.w	81f16 <_malloc_r+0x48a>
   81d22:	f04f 0c05 	mov.w	ip, #5
   81d26:	6862      	ldr	r2, [r4, #4]
   81d28:	f1a8 000c 	sub.w	r0, r8, #12
   81d2c:	f020 0007 	bic.w	r0, r0, #7
   81d30:	f002 0201 	and.w	r2, r2, #1
   81d34:	eb04 0e00 	add.w	lr, r4, r0
   81d38:	4302      	orrs	r2, r0
   81d3a:	280f      	cmp	r0, #15
   81d3c:	6062      	str	r2, [r4, #4]
   81d3e:	f8ce c004 	str.w	ip, [lr, #4]
   81d42:	f8ce c008 	str.w	ip, [lr, #8]
   81d46:	f200 8116 	bhi.w	81f76 <_malloc_r+0x4ea>
   81d4a:	4b1d      	ldr	r3, [pc, #116]	; (81dc0 <_malloc_r+0x334>)
   81d4c:	68bc      	ldr	r4, [r7, #8]
   81d4e:	681a      	ldr	r2, [r3, #0]
   81d50:	4291      	cmp	r1, r2
   81d52:	bf88      	it	hi
   81d54:	6019      	strhi	r1, [r3, #0]
   81d56:	4b1b      	ldr	r3, [pc, #108]	; (81dc4 <_malloc_r+0x338>)
   81d58:	681a      	ldr	r2, [r3, #0]
   81d5a:	4291      	cmp	r1, r2
   81d5c:	6862      	ldr	r2, [r4, #4]
   81d5e:	bf88      	it	hi
   81d60:	6019      	strhi	r1, [r3, #0]
   81d62:	f022 0203 	bic.w	r2, r2, #3
   81d66:	4296      	cmp	r6, r2
   81d68:	eba2 0306 	sub.w	r3, r2, r6
   81d6c:	d801      	bhi.n	81d72 <_malloc_r+0x2e6>
   81d6e:	2b0f      	cmp	r3, #15
   81d70:	dc04      	bgt.n	81d7c <_malloc_r+0x2f0>
   81d72:	4628      	mov	r0, r5
   81d74:	f000 f9f6 	bl	82164 <__malloc_unlock>
   81d78:	2400      	movs	r4, #0
   81d7a:	e74d      	b.n	81c18 <_malloc_r+0x18c>
   81d7c:	f046 0201 	orr.w	r2, r6, #1
   81d80:	f043 0301 	orr.w	r3, r3, #1
   81d84:	4426      	add	r6, r4
   81d86:	6062      	str	r2, [r4, #4]
   81d88:	4628      	mov	r0, r5
   81d8a:	60be      	str	r6, [r7, #8]
   81d8c:	3408      	adds	r4, #8
   81d8e:	6073      	str	r3, [r6, #4]
   81d90:	f000 f9e8 	bl	82164 <__malloc_unlock>
   81d94:	4620      	mov	r0, r4
   81d96:	b003      	add	sp, #12
   81d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d9c:	2b14      	cmp	r3, #20
   81d9e:	d970      	bls.n	81e82 <_malloc_r+0x3f6>
   81da0:	2b54      	cmp	r3, #84	; 0x54
   81da2:	f200 80a2 	bhi.w	81eea <_malloc_r+0x45e>
   81da6:	0b33      	lsrs	r3, r6, #12
   81da8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   81dac:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   81db0:	00c1      	lsls	r1, r0, #3
   81db2:	e68d      	b.n	81ad0 <_malloc_r+0x44>
   81db4:	20070930 	.word	0x20070930
   81db8:	2007107c 	.word	0x2007107c
   81dbc:	2007104c 	.word	0x2007104c
   81dc0:	20071074 	.word	0x20071074
   81dc4:	20071078 	.word	0x20071078
   81dc8:	20070938 	.word	0x20070938
   81dcc:	20070d38 	.word	0x20070d38
   81dd0:	0a5a      	lsrs	r2, r3, #9
   81dd2:	2a04      	cmp	r2, #4
   81dd4:	d95b      	bls.n	81e8e <_malloc_r+0x402>
   81dd6:	2a14      	cmp	r2, #20
   81dd8:	f200 80ae 	bhi.w	81f38 <_malloc_r+0x4ac>
   81ddc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81de0:	00c9      	lsls	r1, r1, #3
   81de2:	325b      	adds	r2, #91	; 0x5b
   81de4:	eb07 0c01 	add.w	ip, r7, r1
   81de8:	5879      	ldr	r1, [r7, r1]
   81dea:	f1ac 0c08 	sub.w	ip, ip, #8
   81dee:	458c      	cmp	ip, r1
   81df0:	f000 8088 	beq.w	81f04 <_malloc_r+0x478>
   81df4:	684a      	ldr	r2, [r1, #4]
   81df6:	f022 0203 	bic.w	r2, r2, #3
   81dfa:	4293      	cmp	r3, r2
   81dfc:	d273      	bcs.n	81ee6 <_malloc_r+0x45a>
   81dfe:	6889      	ldr	r1, [r1, #8]
   81e00:	458c      	cmp	ip, r1
   81e02:	d1f7      	bne.n	81df4 <_malloc_r+0x368>
   81e04:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81e08:	687a      	ldr	r2, [r7, #4]
   81e0a:	60e3      	str	r3, [r4, #12]
   81e0c:	f8c4 c008 	str.w	ip, [r4, #8]
   81e10:	609c      	str	r4, [r3, #8]
   81e12:	f8cc 400c 	str.w	r4, [ip, #12]
   81e16:	e69e      	b.n	81b56 <_malloc_r+0xca>
   81e18:	f046 0c01 	orr.w	ip, r6, #1
   81e1c:	f042 0101 	orr.w	r1, r2, #1
   81e20:	4426      	add	r6, r4
   81e22:	f8c4 c004 	str.w	ip, [r4, #4]
   81e26:	4628      	mov	r0, r5
   81e28:	617e      	str	r6, [r7, #20]
   81e2a:	613e      	str	r6, [r7, #16]
   81e2c:	f8c6 e00c 	str.w	lr, [r6, #12]
   81e30:	f8c6 e008 	str.w	lr, [r6, #8]
   81e34:	6071      	str	r1, [r6, #4]
   81e36:	50e2      	str	r2, [r4, r3]
   81e38:	f000 f994 	bl	82164 <__malloc_unlock>
   81e3c:	3408      	adds	r4, #8
   81e3e:	e6eb      	b.n	81c18 <_malloc_r+0x18c>
   81e40:	687a      	ldr	r2, [r7, #4]
   81e42:	e688      	b.n	81b56 <_malloc_r+0xca>
   81e44:	f108 0801 	add.w	r8, r8, #1
   81e48:	f018 0f03 	tst.w	r8, #3
   81e4c:	f10c 0c08 	add.w	ip, ip, #8
   81e50:	f47f ae93 	bne.w	81b7a <_malloc_r+0xee>
   81e54:	e02d      	b.n	81eb2 <_malloc_r+0x426>
   81e56:	68dc      	ldr	r4, [r3, #12]
   81e58:	42a3      	cmp	r3, r4
   81e5a:	bf08      	it	eq
   81e5c:	3002      	addeq	r0, #2
   81e5e:	f43f ae4b 	beq.w	81af8 <_malloc_r+0x6c>
   81e62:	e6c9      	b.n	81bf8 <_malloc_r+0x16c>
   81e64:	461c      	mov	r4, r3
   81e66:	4419      	add	r1, r3
   81e68:	684a      	ldr	r2, [r1, #4]
   81e6a:	68db      	ldr	r3, [r3, #12]
   81e6c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   81e70:	f042 0201 	orr.w	r2, r2, #1
   81e74:	604a      	str	r2, [r1, #4]
   81e76:	4628      	mov	r0, r5
   81e78:	60f3      	str	r3, [r6, #12]
   81e7a:	609e      	str	r6, [r3, #8]
   81e7c:	f000 f972 	bl	82164 <__malloc_unlock>
   81e80:	e6ca      	b.n	81c18 <_malloc_r+0x18c>
   81e82:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   81e86:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   81e8a:	00c1      	lsls	r1, r0, #3
   81e8c:	e620      	b.n	81ad0 <_malloc_r+0x44>
   81e8e:	099a      	lsrs	r2, r3, #6
   81e90:	f102 0139 	add.w	r1, r2, #57	; 0x39
   81e94:	00c9      	lsls	r1, r1, #3
   81e96:	3238      	adds	r2, #56	; 0x38
   81e98:	e7a4      	b.n	81de4 <_malloc_r+0x358>
   81e9a:	42bc      	cmp	r4, r7
   81e9c:	d054      	beq.n	81f48 <_malloc_r+0x4bc>
   81e9e:	68bc      	ldr	r4, [r7, #8]
   81ea0:	6862      	ldr	r2, [r4, #4]
   81ea2:	f022 0203 	bic.w	r2, r2, #3
   81ea6:	e75e      	b.n	81d66 <_malloc_r+0x2da>
   81ea8:	f859 3908 	ldr.w	r3, [r9], #-8
   81eac:	4599      	cmp	r9, r3
   81eae:	f040 8086 	bne.w	81fbe <_malloc_r+0x532>
   81eb2:	f010 0f03 	tst.w	r0, #3
   81eb6:	f100 30ff 	add.w	r0, r0, #4294967295
   81eba:	d1f5      	bne.n	81ea8 <_malloc_r+0x41c>
   81ebc:	687b      	ldr	r3, [r7, #4]
   81ebe:	ea23 0304 	bic.w	r3, r3, r4
   81ec2:	607b      	str	r3, [r7, #4]
   81ec4:	0064      	lsls	r4, r4, #1
   81ec6:	429c      	cmp	r4, r3
   81ec8:	f63f aec8 	bhi.w	81c5c <_malloc_r+0x1d0>
   81ecc:	2c00      	cmp	r4, #0
   81ece:	f43f aec5 	beq.w	81c5c <_malloc_r+0x1d0>
   81ed2:	421c      	tst	r4, r3
   81ed4:	4640      	mov	r0, r8
   81ed6:	f47f ae4c 	bne.w	81b72 <_malloc_r+0xe6>
   81eda:	0064      	lsls	r4, r4, #1
   81edc:	421c      	tst	r4, r3
   81ede:	f100 0004 	add.w	r0, r0, #4
   81ee2:	d0fa      	beq.n	81eda <_malloc_r+0x44e>
   81ee4:	e645      	b.n	81b72 <_malloc_r+0xe6>
   81ee6:	468c      	mov	ip, r1
   81ee8:	e78c      	b.n	81e04 <_malloc_r+0x378>
   81eea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81eee:	d815      	bhi.n	81f1c <_malloc_r+0x490>
   81ef0:	0bf3      	lsrs	r3, r6, #15
   81ef2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   81ef6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   81efa:	00c1      	lsls	r1, r0, #3
   81efc:	e5e8      	b.n	81ad0 <_malloc_r+0x44>
   81efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81f02:	e6ee      	b.n	81ce2 <_malloc_r+0x256>
   81f04:	2101      	movs	r1, #1
   81f06:	687b      	ldr	r3, [r7, #4]
   81f08:	1092      	asrs	r2, r2, #2
   81f0a:	fa01 f202 	lsl.w	r2, r1, r2
   81f0e:	431a      	orrs	r2, r3
   81f10:	607a      	str	r2, [r7, #4]
   81f12:	4663      	mov	r3, ip
   81f14:	e779      	b.n	81e0a <_malloc_r+0x37e>
   81f16:	2301      	movs	r3, #1
   81f18:	6053      	str	r3, [r2, #4]
   81f1a:	e72a      	b.n	81d72 <_malloc_r+0x2e6>
   81f1c:	f240 5254 	movw	r2, #1364	; 0x554
   81f20:	4293      	cmp	r3, r2
   81f22:	d822      	bhi.n	81f6a <_malloc_r+0x4de>
   81f24:	0cb3      	lsrs	r3, r6, #18
   81f26:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   81f2a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   81f2e:	00c1      	lsls	r1, r0, #3
   81f30:	e5ce      	b.n	81ad0 <_malloc_r+0x44>
   81f32:	f103 0b10 	add.w	fp, r3, #16
   81f36:	e6af      	b.n	81c98 <_malloc_r+0x20c>
   81f38:	2a54      	cmp	r2, #84	; 0x54
   81f3a:	d829      	bhi.n	81f90 <_malloc_r+0x504>
   81f3c:	0b1a      	lsrs	r2, r3, #12
   81f3e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   81f42:	00c9      	lsls	r1, r1, #3
   81f44:	326e      	adds	r2, #110	; 0x6e
   81f46:	e74d      	b.n	81de4 <_malloc_r+0x358>
   81f48:	4b20      	ldr	r3, [pc, #128]	; (81fcc <_malloc_r+0x540>)
   81f4a:	6819      	ldr	r1, [r3, #0]
   81f4c:	4459      	add	r1, fp
   81f4e:	6019      	str	r1, [r3, #0]
   81f50:	e6b3      	b.n	81cba <_malloc_r+0x22e>
   81f52:	f3ca 000b 	ubfx	r0, sl, #0, #12
   81f56:	2800      	cmp	r0, #0
   81f58:	f47f aeaf 	bne.w	81cba <_malloc_r+0x22e>
   81f5c:	eb08 030b 	add.w	r3, r8, fp
   81f60:	68ba      	ldr	r2, [r7, #8]
   81f62:	f043 0301 	orr.w	r3, r3, #1
   81f66:	6053      	str	r3, [r2, #4]
   81f68:	e6ef      	b.n	81d4a <_malloc_r+0x2be>
   81f6a:	207f      	movs	r0, #127	; 0x7f
   81f6c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81f70:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   81f74:	e5ac      	b.n	81ad0 <_malloc_r+0x44>
   81f76:	f104 0108 	add.w	r1, r4, #8
   81f7a:	4628      	mov	r0, r5
   81f7c:	9300      	str	r3, [sp, #0]
   81f7e:	f002 fc0f 	bl	847a0 <_free_r>
   81f82:	9b00      	ldr	r3, [sp, #0]
   81f84:	6819      	ldr	r1, [r3, #0]
   81f86:	e6e0      	b.n	81d4a <_malloc_r+0x2be>
   81f88:	2001      	movs	r0, #1
   81f8a:	f04f 0900 	mov.w	r9, #0
   81f8e:	e6bd      	b.n	81d0c <_malloc_r+0x280>
   81f90:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81f94:	d805      	bhi.n	81fa2 <_malloc_r+0x516>
   81f96:	0bda      	lsrs	r2, r3, #15
   81f98:	f102 0178 	add.w	r1, r2, #120	; 0x78
   81f9c:	00c9      	lsls	r1, r1, #3
   81f9e:	3277      	adds	r2, #119	; 0x77
   81fa0:	e720      	b.n	81de4 <_malloc_r+0x358>
   81fa2:	f240 5154 	movw	r1, #1364	; 0x554
   81fa6:	428a      	cmp	r2, r1
   81fa8:	d805      	bhi.n	81fb6 <_malloc_r+0x52a>
   81faa:	0c9a      	lsrs	r2, r3, #18
   81fac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81fb0:	00c9      	lsls	r1, r1, #3
   81fb2:	327c      	adds	r2, #124	; 0x7c
   81fb4:	e716      	b.n	81de4 <_malloc_r+0x358>
   81fb6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81fba:	227e      	movs	r2, #126	; 0x7e
   81fbc:	e712      	b.n	81de4 <_malloc_r+0x358>
   81fbe:	687b      	ldr	r3, [r7, #4]
   81fc0:	e780      	b.n	81ec4 <_malloc_r+0x438>
   81fc2:	08f0      	lsrs	r0, r6, #3
   81fc4:	f106 0308 	add.w	r3, r6, #8
   81fc8:	e60e      	b.n	81be8 <_malloc_r+0x15c>
   81fca:	bf00      	nop
   81fcc:	2007104c 	.word	0x2007104c

00081fd0 <memcpy>:
   81fd0:	4684      	mov	ip, r0
   81fd2:	ea41 0300 	orr.w	r3, r1, r0
   81fd6:	f013 0303 	ands.w	r3, r3, #3
   81fda:	d149      	bne.n	82070 <memcpy+0xa0>
   81fdc:	3a40      	subs	r2, #64	; 0x40
   81fde:	d323      	bcc.n	82028 <memcpy+0x58>
   81fe0:	680b      	ldr	r3, [r1, #0]
   81fe2:	6003      	str	r3, [r0, #0]
   81fe4:	684b      	ldr	r3, [r1, #4]
   81fe6:	6043      	str	r3, [r0, #4]
   81fe8:	688b      	ldr	r3, [r1, #8]
   81fea:	6083      	str	r3, [r0, #8]
   81fec:	68cb      	ldr	r3, [r1, #12]
   81fee:	60c3      	str	r3, [r0, #12]
   81ff0:	690b      	ldr	r3, [r1, #16]
   81ff2:	6103      	str	r3, [r0, #16]
   81ff4:	694b      	ldr	r3, [r1, #20]
   81ff6:	6143      	str	r3, [r0, #20]
   81ff8:	698b      	ldr	r3, [r1, #24]
   81ffa:	6183      	str	r3, [r0, #24]
   81ffc:	69cb      	ldr	r3, [r1, #28]
   81ffe:	61c3      	str	r3, [r0, #28]
   82000:	6a0b      	ldr	r3, [r1, #32]
   82002:	6203      	str	r3, [r0, #32]
   82004:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82006:	6243      	str	r3, [r0, #36]	; 0x24
   82008:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8200a:	6283      	str	r3, [r0, #40]	; 0x28
   8200c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8200e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82010:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82012:	6303      	str	r3, [r0, #48]	; 0x30
   82014:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82016:	6343      	str	r3, [r0, #52]	; 0x34
   82018:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8201a:	6383      	str	r3, [r0, #56]	; 0x38
   8201c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8201e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82020:	3040      	adds	r0, #64	; 0x40
   82022:	3140      	adds	r1, #64	; 0x40
   82024:	3a40      	subs	r2, #64	; 0x40
   82026:	d2db      	bcs.n	81fe0 <memcpy+0x10>
   82028:	3230      	adds	r2, #48	; 0x30
   8202a:	d30b      	bcc.n	82044 <memcpy+0x74>
   8202c:	680b      	ldr	r3, [r1, #0]
   8202e:	6003      	str	r3, [r0, #0]
   82030:	684b      	ldr	r3, [r1, #4]
   82032:	6043      	str	r3, [r0, #4]
   82034:	688b      	ldr	r3, [r1, #8]
   82036:	6083      	str	r3, [r0, #8]
   82038:	68cb      	ldr	r3, [r1, #12]
   8203a:	60c3      	str	r3, [r0, #12]
   8203c:	3010      	adds	r0, #16
   8203e:	3110      	adds	r1, #16
   82040:	3a10      	subs	r2, #16
   82042:	d2f3      	bcs.n	8202c <memcpy+0x5c>
   82044:	320c      	adds	r2, #12
   82046:	d305      	bcc.n	82054 <memcpy+0x84>
   82048:	f851 3b04 	ldr.w	r3, [r1], #4
   8204c:	f840 3b04 	str.w	r3, [r0], #4
   82050:	3a04      	subs	r2, #4
   82052:	d2f9      	bcs.n	82048 <memcpy+0x78>
   82054:	3204      	adds	r2, #4
   82056:	d008      	beq.n	8206a <memcpy+0x9a>
   82058:	07d2      	lsls	r2, r2, #31
   8205a:	bf1c      	itt	ne
   8205c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82060:	f800 3b01 	strbne.w	r3, [r0], #1
   82064:	d301      	bcc.n	8206a <memcpy+0x9a>
   82066:	880b      	ldrh	r3, [r1, #0]
   82068:	8003      	strh	r3, [r0, #0]
   8206a:	4660      	mov	r0, ip
   8206c:	4770      	bx	lr
   8206e:	bf00      	nop
   82070:	2a08      	cmp	r2, #8
   82072:	d313      	bcc.n	8209c <memcpy+0xcc>
   82074:	078b      	lsls	r3, r1, #30
   82076:	d0b1      	beq.n	81fdc <memcpy+0xc>
   82078:	f010 0303 	ands.w	r3, r0, #3
   8207c:	d0ae      	beq.n	81fdc <memcpy+0xc>
   8207e:	f1c3 0304 	rsb	r3, r3, #4
   82082:	1ad2      	subs	r2, r2, r3
   82084:	07db      	lsls	r3, r3, #31
   82086:	bf1c      	itt	ne
   82088:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8208c:	f800 3b01 	strbne.w	r3, [r0], #1
   82090:	d3a4      	bcc.n	81fdc <memcpy+0xc>
   82092:	f831 3b02 	ldrh.w	r3, [r1], #2
   82096:	f820 3b02 	strh.w	r3, [r0], #2
   8209a:	e79f      	b.n	81fdc <memcpy+0xc>
   8209c:	3a04      	subs	r2, #4
   8209e:	d3d9      	bcc.n	82054 <memcpy+0x84>
   820a0:	3a01      	subs	r2, #1
   820a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   820a6:	f800 3b01 	strb.w	r3, [r0], #1
   820aa:	d2f9      	bcs.n	820a0 <memcpy+0xd0>
   820ac:	780b      	ldrb	r3, [r1, #0]
   820ae:	7003      	strb	r3, [r0, #0]
   820b0:	784b      	ldrb	r3, [r1, #1]
   820b2:	7043      	strb	r3, [r0, #1]
   820b4:	788b      	ldrb	r3, [r1, #2]
   820b6:	7083      	strb	r3, [r0, #2]
   820b8:	4660      	mov	r0, ip
   820ba:	4770      	bx	lr

000820bc <memset>:
   820bc:	b470      	push	{r4, r5, r6}
   820be:	0786      	lsls	r6, r0, #30
   820c0:	d046      	beq.n	82150 <memset+0x94>
   820c2:	1e54      	subs	r4, r2, #1
   820c4:	2a00      	cmp	r2, #0
   820c6:	d041      	beq.n	8214c <memset+0x90>
   820c8:	b2ca      	uxtb	r2, r1
   820ca:	4603      	mov	r3, r0
   820cc:	e002      	b.n	820d4 <memset+0x18>
   820ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   820d2:	d33b      	bcc.n	8214c <memset+0x90>
   820d4:	f803 2b01 	strb.w	r2, [r3], #1
   820d8:	079d      	lsls	r5, r3, #30
   820da:	d1f8      	bne.n	820ce <memset+0x12>
   820dc:	2c03      	cmp	r4, #3
   820de:	d92e      	bls.n	8213e <memset+0x82>
   820e0:	b2cd      	uxtb	r5, r1
   820e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   820e6:	2c0f      	cmp	r4, #15
   820e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   820ec:	d919      	bls.n	82122 <memset+0x66>
   820ee:	4626      	mov	r6, r4
   820f0:	f103 0210 	add.w	r2, r3, #16
   820f4:	3e10      	subs	r6, #16
   820f6:	2e0f      	cmp	r6, #15
   820f8:	f842 5c10 	str.w	r5, [r2, #-16]
   820fc:	f842 5c0c 	str.w	r5, [r2, #-12]
   82100:	f842 5c08 	str.w	r5, [r2, #-8]
   82104:	f842 5c04 	str.w	r5, [r2, #-4]
   82108:	f102 0210 	add.w	r2, r2, #16
   8210c:	d8f2      	bhi.n	820f4 <memset+0x38>
   8210e:	f1a4 0210 	sub.w	r2, r4, #16
   82112:	f022 020f 	bic.w	r2, r2, #15
   82116:	f004 040f 	and.w	r4, r4, #15
   8211a:	3210      	adds	r2, #16
   8211c:	2c03      	cmp	r4, #3
   8211e:	4413      	add	r3, r2
   82120:	d90d      	bls.n	8213e <memset+0x82>
   82122:	461e      	mov	r6, r3
   82124:	4622      	mov	r2, r4
   82126:	3a04      	subs	r2, #4
   82128:	2a03      	cmp	r2, #3
   8212a:	f846 5b04 	str.w	r5, [r6], #4
   8212e:	d8fa      	bhi.n	82126 <memset+0x6a>
   82130:	1f22      	subs	r2, r4, #4
   82132:	f022 0203 	bic.w	r2, r2, #3
   82136:	3204      	adds	r2, #4
   82138:	4413      	add	r3, r2
   8213a:	f004 0403 	and.w	r4, r4, #3
   8213e:	b12c      	cbz	r4, 8214c <memset+0x90>
   82140:	b2c9      	uxtb	r1, r1
   82142:	441c      	add	r4, r3
   82144:	f803 1b01 	strb.w	r1, [r3], #1
   82148:	429c      	cmp	r4, r3
   8214a:	d1fb      	bne.n	82144 <memset+0x88>
   8214c:	bc70      	pop	{r4, r5, r6}
   8214e:	4770      	bx	lr
   82150:	4614      	mov	r4, r2
   82152:	4603      	mov	r3, r0
   82154:	e7c2      	b.n	820dc <memset+0x20>
   82156:	bf00      	nop

00082158 <__malloc_lock>:
   82158:	4801      	ldr	r0, [pc, #4]	; (82160 <__malloc_lock+0x8>)
   8215a:	f002 bc15 	b.w	84988 <__retarget_lock_acquire_recursive>
   8215e:	bf00      	nop
   82160:	20071128 	.word	0x20071128

00082164 <__malloc_unlock>:
   82164:	4801      	ldr	r0, [pc, #4]	; (8216c <__malloc_unlock+0x8>)
   82166:	f002 bc11 	b.w	8498c <__retarget_lock_release_recursive>
   8216a:	bf00      	nop
   8216c:	20071128 	.word	0x20071128

00082170 <_sbrk_r>:
   82170:	b538      	push	{r3, r4, r5, lr}
   82172:	2300      	movs	r3, #0
   82174:	4c06      	ldr	r4, [pc, #24]	; (82190 <_sbrk_r+0x20>)
   82176:	4605      	mov	r5, r0
   82178:	4608      	mov	r0, r1
   8217a:	6023      	str	r3, [r4, #0]
   8217c:	f7ff fabc 	bl	816f8 <_sbrk>
   82180:	1c43      	adds	r3, r0, #1
   82182:	d000      	beq.n	82186 <_sbrk_r+0x16>
   82184:	bd38      	pop	{r3, r4, r5, pc}
   82186:	6823      	ldr	r3, [r4, #0]
   82188:	2b00      	cmp	r3, #0
   8218a:	d0fb      	beq.n	82184 <_sbrk_r+0x14>
   8218c:	602b      	str	r3, [r5, #0]
   8218e:	bd38      	pop	{r3, r4, r5, pc}
   82190:	2007113c 	.word	0x2007113c

00082194 <sprintf>:
   82194:	b40e      	push	{r1, r2, r3}
   82196:	4601      	mov	r1, r0
   82198:	b5f0      	push	{r4, r5, r6, r7, lr}
   8219a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8219e:	f44f 7702 	mov.w	r7, #520	; 0x208
   821a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   821a6:	b09c      	sub	sp, #112	; 0x70
   821a8:	ac21      	add	r4, sp, #132	; 0x84
   821aa:	f854 2b04 	ldr.w	r2, [r4], #4
   821ae:	4b0b      	ldr	r3, [pc, #44]	; (821dc <sprintf+0x48>)
   821b0:	9102      	str	r1, [sp, #8]
   821b2:	9106      	str	r1, [sp, #24]
   821b4:	6818      	ldr	r0, [r3, #0]
   821b6:	a902      	add	r1, sp, #8
   821b8:	4623      	mov	r3, r4
   821ba:	9401      	str	r4, [sp, #4]
   821bc:	f8ad 7014 	strh.w	r7, [sp, #20]
   821c0:	9504      	str	r5, [sp, #16]
   821c2:	9507      	str	r5, [sp, #28]
   821c4:	f8ad 6016 	strh.w	r6, [sp, #22]
   821c8:	f000 f838 	bl	8223c <_svfprintf_r>
   821cc:	2200      	movs	r2, #0
   821ce:	9b02      	ldr	r3, [sp, #8]
   821d0:	701a      	strb	r2, [r3, #0]
   821d2:	b01c      	add	sp, #112	; 0x70
   821d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   821d8:	b003      	add	sp, #12
   821da:	4770      	bx	lr
   821dc:	20070504 	.word	0x20070504

000821e0 <strlen>:
   821e0:	f020 0103 	bic.w	r1, r0, #3
   821e4:	f010 0003 	ands.w	r0, r0, #3
   821e8:	f1c0 0000 	rsb	r0, r0, #0
   821ec:	f851 3b04 	ldr.w	r3, [r1], #4
   821f0:	f100 0c04 	add.w	ip, r0, #4
   821f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   821f8:	f06f 0200 	mvn.w	r2, #0
   821fc:	bf1c      	itt	ne
   821fe:	fa22 f20c 	lsrne.w	r2, r2, ip
   82202:	4313      	orrne	r3, r2
   82204:	f04f 0c01 	mov.w	ip, #1
   82208:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8220c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82210:	eba3 020c 	sub.w	r2, r3, ip
   82214:	ea22 0203 	bic.w	r2, r2, r3
   82218:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8221c:	bf04      	itt	eq
   8221e:	f851 3b04 	ldreq.w	r3, [r1], #4
   82222:	3004      	addeq	r0, #4
   82224:	d0f4      	beq.n	82210 <strlen+0x30>
   82226:	f1c2 0100 	rsb	r1, r2, #0
   8222a:	ea02 0201 	and.w	r2, r2, r1
   8222e:	fab2 f282 	clz	r2, r2
   82232:	f1c2 021f 	rsb	r2, r2, #31
   82236:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8223a:	4770      	bx	lr

0008223c <_svfprintf_r>:
   8223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82240:	b0c3      	sub	sp, #268	; 0x10c
   82242:	460c      	mov	r4, r1
   82244:	910b      	str	r1, [sp, #44]	; 0x2c
   82246:	4692      	mov	sl, r2
   82248:	930f      	str	r3, [sp, #60]	; 0x3c
   8224a:	900c      	str	r0, [sp, #48]	; 0x30
   8224c:	f002 fb8e 	bl	8496c <_localeconv_r>
   82250:	6803      	ldr	r3, [r0, #0]
   82252:	4618      	mov	r0, r3
   82254:	931a      	str	r3, [sp, #104]	; 0x68
   82256:	f7ff ffc3 	bl	821e0 <strlen>
   8225a:	89a3      	ldrh	r3, [r4, #12]
   8225c:	9019      	str	r0, [sp, #100]	; 0x64
   8225e:	0619      	lsls	r1, r3, #24
   82260:	d503      	bpl.n	8226a <_svfprintf_r+0x2e>
   82262:	6923      	ldr	r3, [r4, #16]
   82264:	2b00      	cmp	r3, #0
   82266:	f001 8035 	beq.w	832d4 <_svfprintf_r+0x1098>
   8226a:	2300      	movs	r3, #0
   8226c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   82270:	46c8      	mov	r8, r9
   82272:	9315      	str	r3, [sp, #84]	; 0x54
   82274:	9313      	str	r3, [sp, #76]	; 0x4c
   82276:	9314      	str	r3, [sp, #80]	; 0x50
   82278:	9318      	str	r3, [sp, #96]	; 0x60
   8227a:	931b      	str	r3, [sp, #108]	; 0x6c
   8227c:	9309      	str	r3, [sp, #36]	; 0x24
   8227e:	9316      	str	r3, [sp, #88]	; 0x58
   82280:	9317      	str	r3, [sp, #92]	; 0x5c
   82282:	9327      	str	r3, [sp, #156]	; 0x9c
   82284:	9326      	str	r3, [sp, #152]	; 0x98
   82286:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8228a:	f89a 3000 	ldrb.w	r3, [sl]
   8228e:	4654      	mov	r4, sl
   82290:	b1eb      	cbz	r3, 822ce <_svfprintf_r+0x92>
   82292:	2b25      	cmp	r3, #37	; 0x25
   82294:	d102      	bne.n	8229c <_svfprintf_r+0x60>
   82296:	e01a      	b.n	822ce <_svfprintf_r+0x92>
   82298:	2b25      	cmp	r3, #37	; 0x25
   8229a:	d003      	beq.n	822a4 <_svfprintf_r+0x68>
   8229c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   822a0:	2b00      	cmp	r3, #0
   822a2:	d1f9      	bne.n	82298 <_svfprintf_r+0x5c>
   822a4:	eba4 050a 	sub.w	r5, r4, sl
   822a8:	b18d      	cbz	r5, 822ce <_svfprintf_r+0x92>
   822aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   822ac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   822ae:	3301      	adds	r3, #1
   822b0:	442a      	add	r2, r5
   822b2:	2b07      	cmp	r3, #7
   822b4:	f8c8 a000 	str.w	sl, [r8]
   822b8:	f8c8 5004 	str.w	r5, [r8, #4]
   822bc:	9227      	str	r2, [sp, #156]	; 0x9c
   822be:	9326      	str	r3, [sp, #152]	; 0x98
   822c0:	f300 808a 	bgt.w	823d8 <_svfprintf_r+0x19c>
   822c4:	f108 0808 	add.w	r8, r8, #8
   822c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   822ca:	442b      	add	r3, r5
   822cc:	9309      	str	r3, [sp, #36]	; 0x24
   822ce:	7823      	ldrb	r3, [r4, #0]
   822d0:	2b00      	cmp	r3, #0
   822d2:	f000 8089 	beq.w	823e8 <_svfprintf_r+0x1ac>
   822d6:	2300      	movs	r3, #0
   822d8:	f04f 30ff 	mov.w	r0, #4294967295
   822dc:	461a      	mov	r2, r3
   822de:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   822e2:	4619      	mov	r1, r3
   822e4:	930d      	str	r3, [sp, #52]	; 0x34
   822e6:	469b      	mov	fp, r3
   822e8:	7863      	ldrb	r3, [r4, #1]
   822ea:	f104 0a01 	add.w	sl, r4, #1
   822ee:	900a      	str	r0, [sp, #40]	; 0x28
   822f0:	f10a 0a01 	add.w	sl, sl, #1
   822f4:	f1a3 0020 	sub.w	r0, r3, #32
   822f8:	2858      	cmp	r0, #88	; 0x58
   822fa:	f200 83b7 	bhi.w	82a6c <_svfprintf_r+0x830>
   822fe:	e8df f010 	tbh	[pc, r0, lsl #1]
   82302:	034c      	.short	0x034c
   82304:	03b503b5 	.word	0x03b503b5
   82308:	03b50354 	.word	0x03b50354
   8230c:	03b503b5 	.word	0x03b503b5
   82310:	03b503b5 	.word	0x03b503b5
   82314:	005903b5 	.word	0x005903b5
   82318:	03b50359 	.word	0x03b50359
   8231c:	02140066 	.word	0x02140066
   82320:	022f03b5 	.word	0x022f03b5
   82324:	03a503a5 	.word	0x03a503a5
   82328:	03a503a5 	.word	0x03a503a5
   8232c:	03a503a5 	.word	0x03a503a5
   82330:	03a503a5 	.word	0x03a503a5
   82334:	03b503a5 	.word	0x03b503a5
   82338:	03b503b5 	.word	0x03b503b5
   8233c:	03b503b5 	.word	0x03b503b5
   82340:	03b503b5 	.word	0x03b503b5
   82344:	03b503b5 	.word	0x03b503b5
   82348:	028b03b5 	.word	0x028b03b5
   8234c:	03b502d3 	.word	0x03b502d3
   82350:	03b502d3 	.word	0x03b502d3
   82354:	03b503b5 	.word	0x03b503b5
   82358:	031b03b5 	.word	0x031b03b5
   8235c:	03b503b5 	.word	0x03b503b5
   82360:	03b50320 	.word	0x03b50320
   82364:	03b503b5 	.word	0x03b503b5
   82368:	03b503b5 	.word	0x03b503b5
   8236c:	03b50234 	.word	0x03b50234
   82370:	024b03b5 	.word	0x024b03b5
   82374:	03b503b5 	.word	0x03b503b5
   82378:	03b503b5 	.word	0x03b503b5
   8237c:	03b503b5 	.word	0x03b503b5
   82380:	03b503b5 	.word	0x03b503b5
   82384:	03b503b5 	.word	0x03b503b5
   82388:	039e0276 	.word	0x039e0276
   8238c:	02d302d3 	.word	0x02d302d3
   82390:	036302d3 	.word	0x036302d3
   82394:	03b5039e 	.word	0x03b5039e
   82398:	036803b5 	.word	0x036803b5
   8239c:	037503b5 	.word	0x037503b5
   823a0:	038c01dd 	.word	0x038c01dd
   823a4:	03b5035e 	.word	0x03b5035e
   823a8:	03b501f2 	.word	0x03b501f2
   823ac:	03b50087 	.word	0x03b50087
   823b0:	033203b5 	.word	0x033203b5
   823b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   823b6:	6823      	ldr	r3, [r4, #0]
   823b8:	4618      	mov	r0, r3
   823ba:	930d      	str	r3, [sp, #52]	; 0x34
   823bc:	4623      	mov	r3, r4
   823be:	2800      	cmp	r0, #0
   823c0:	f103 0304 	add.w	r3, r3, #4
   823c4:	930f      	str	r3, [sp, #60]	; 0x3c
   823c6:	da04      	bge.n	823d2 <_svfprintf_r+0x196>
   823c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   823ca:	425b      	negs	r3, r3
   823cc:	930d      	str	r3, [sp, #52]	; 0x34
   823ce:	f04b 0b04 	orr.w	fp, fp, #4
   823d2:	f89a 3000 	ldrb.w	r3, [sl]
   823d6:	e78b      	b.n	822f0 <_svfprintf_r+0xb4>
   823d8:	aa25      	add	r2, sp, #148	; 0x94
   823da:	990b      	ldr	r1, [sp, #44]	; 0x2c
   823dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   823de:	f003 f849 	bl	85474 <__ssprint_r>
   823e2:	b940      	cbnz	r0, 823f6 <_svfprintf_r+0x1ba>
   823e4:	46c8      	mov	r8, r9
   823e6:	e76f      	b.n	822c8 <_svfprintf_r+0x8c>
   823e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   823ea:	b123      	cbz	r3, 823f6 <_svfprintf_r+0x1ba>
   823ec:	980c      	ldr	r0, [sp, #48]	; 0x30
   823ee:	aa25      	add	r2, sp, #148	; 0x94
   823f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   823f2:	f003 f83f 	bl	85474 <__ssprint_r>
   823f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   823f8:	899b      	ldrh	r3, [r3, #12]
   823fa:	f013 0f40 	tst.w	r3, #64	; 0x40
   823fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82400:	bf18      	it	ne
   82402:	f04f 33ff 	movne.w	r3, #4294967295
   82406:	9309      	str	r3, [sp, #36]	; 0x24
   82408:	9809      	ldr	r0, [sp, #36]	; 0x24
   8240a:	b043      	add	sp, #268	; 0x10c
   8240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82410:	f01b 0f20 	tst.w	fp, #32
   82414:	9311      	str	r3, [sp, #68]	; 0x44
   82416:	f040 81af 	bne.w	82778 <_svfprintf_r+0x53c>
   8241a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8241c:	f01b 0f10 	tst.w	fp, #16
   82420:	4613      	mov	r3, r2
   82422:	f040 859a 	bne.w	82f5a <_svfprintf_r+0xd1e>
   82426:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8242a:	f000 8596 	beq.w	82f5a <_svfprintf_r+0xd1e>
   8242e:	2500      	movs	r5, #0
   82430:	2301      	movs	r3, #1
   82432:	8814      	ldrh	r4, [r2, #0]
   82434:	3204      	adds	r2, #4
   82436:	920f      	str	r2, [sp, #60]	; 0x3c
   82438:	2200      	movs	r2, #0
   8243a:	4617      	mov	r7, r2
   8243c:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   82440:	990a      	ldr	r1, [sp, #40]	; 0x28
   82442:	1c4a      	adds	r2, r1, #1
   82444:	f000 8210 	beq.w	82868 <_svfprintf_r+0x62c>
   82448:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   8244c:	9207      	str	r2, [sp, #28]
   8244e:	ea54 0205 	orrs.w	r2, r4, r5
   82452:	f040 820f 	bne.w	82874 <_svfprintf_r+0x638>
   82456:	2900      	cmp	r1, #0
   82458:	f040 8431 	bne.w	82cbe <_svfprintf_r+0xa82>
   8245c:	2b00      	cmp	r3, #0
   8245e:	f040 8539 	bne.w	82ed4 <_svfprintf_r+0xc98>
   82462:	f01b 0301 	ands.w	r3, fp, #1
   82466:	930e      	str	r3, [sp, #56]	; 0x38
   82468:	f000 8662 	beq.w	83130 <_svfprintf_r+0xef4>
   8246c:	2330      	movs	r3, #48	; 0x30
   8246e:	ae42      	add	r6, sp, #264	; 0x108
   82470:	f806 3d41 	strb.w	r3, [r6, #-65]!
   82474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82476:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82478:	4293      	cmp	r3, r2
   8247a:	bfb8      	it	lt
   8247c:	4613      	movlt	r3, r2
   8247e:	9308      	str	r3, [sp, #32]
   82480:	2300      	movs	r3, #0
   82482:	9312      	str	r3, [sp, #72]	; 0x48
   82484:	b117      	cbz	r7, 8248c <_svfprintf_r+0x250>
   82486:	9b08      	ldr	r3, [sp, #32]
   82488:	3301      	adds	r3, #1
   8248a:	9308      	str	r3, [sp, #32]
   8248c:	9b07      	ldr	r3, [sp, #28]
   8248e:	f013 0302 	ands.w	r3, r3, #2
   82492:	9310      	str	r3, [sp, #64]	; 0x40
   82494:	d002      	beq.n	8249c <_svfprintf_r+0x260>
   82496:	9b08      	ldr	r3, [sp, #32]
   82498:	3302      	adds	r3, #2
   8249a:	9308      	str	r3, [sp, #32]
   8249c:	9b07      	ldr	r3, [sp, #28]
   8249e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   824a2:	f040 8310 	bne.w	82ac6 <_svfprintf_r+0x88a>
   824a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   824a8:	9a08      	ldr	r2, [sp, #32]
   824aa:	eba3 0b02 	sub.w	fp, r3, r2
   824ae:	f1bb 0f00 	cmp.w	fp, #0
   824b2:	f340 8308 	ble.w	82ac6 <_svfprintf_r+0x88a>
   824b6:	f1bb 0f10 	cmp.w	fp, #16
   824ba:	f340 87b2 	ble.w	83422 <_svfprintf_r+0x11e6>
   824be:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   824c0:	4643      	mov	r3, r8
   824c2:	4621      	mov	r1, r4
   824c4:	46a8      	mov	r8, r5
   824c6:	2710      	movs	r7, #16
   824c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   824ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   824cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   824ce:	e006      	b.n	824de <_svfprintf_r+0x2a2>
   824d0:	f1ab 0b10 	sub.w	fp, fp, #16
   824d4:	f1bb 0f10 	cmp.w	fp, #16
   824d8:	f103 0308 	add.w	r3, r3, #8
   824dc:	dd18      	ble.n	82510 <_svfprintf_r+0x2d4>
   824de:	3201      	adds	r2, #1
   824e0:	48ab      	ldr	r0, [pc, #684]	; (82790 <_svfprintf_r+0x554>)
   824e2:	3110      	adds	r1, #16
   824e4:	2a07      	cmp	r2, #7
   824e6:	9127      	str	r1, [sp, #156]	; 0x9c
   824e8:	9226      	str	r2, [sp, #152]	; 0x98
   824ea:	e883 0081 	stmia.w	r3, {r0, r7}
   824ee:	ddef      	ble.n	824d0 <_svfprintf_r+0x294>
   824f0:	aa25      	add	r2, sp, #148	; 0x94
   824f2:	4629      	mov	r1, r5
   824f4:	4620      	mov	r0, r4
   824f6:	f002 ffbd 	bl	85474 <__ssprint_r>
   824fa:	2800      	cmp	r0, #0
   824fc:	f47f af7b 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82500:	f1ab 0b10 	sub.w	fp, fp, #16
   82504:	f1bb 0f10 	cmp.w	fp, #16
   82508:	464b      	mov	r3, r9
   8250a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8250c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8250e:	dce6      	bgt.n	824de <_svfprintf_r+0x2a2>
   82510:	4645      	mov	r5, r8
   82512:	460c      	mov	r4, r1
   82514:	4698      	mov	r8, r3
   82516:	3201      	adds	r2, #1
   82518:	4b9d      	ldr	r3, [pc, #628]	; (82790 <_svfprintf_r+0x554>)
   8251a:	445c      	add	r4, fp
   8251c:	2a07      	cmp	r2, #7
   8251e:	9427      	str	r4, [sp, #156]	; 0x9c
   82520:	9226      	str	r2, [sp, #152]	; 0x98
   82522:	e888 0808 	stmia.w	r8, {r3, fp}
   82526:	f300 82c3 	bgt.w	82ab0 <_svfprintf_r+0x874>
   8252a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8252e:	f108 0808 	add.w	r8, r8, #8
   82532:	b187      	cbz	r7, 82556 <_svfprintf_r+0x31a>
   82534:	2101      	movs	r1, #1
   82536:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82538:	440c      	add	r4, r1
   8253a:	440b      	add	r3, r1
   8253c:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   82540:	2b07      	cmp	r3, #7
   82542:	9427      	str	r4, [sp, #156]	; 0x9c
   82544:	9326      	str	r3, [sp, #152]	; 0x98
   82546:	f8c8 1004 	str.w	r1, [r8, #4]
   8254a:	f8c8 2000 	str.w	r2, [r8]
   8254e:	f300 83cd 	bgt.w	82cec <_svfprintf_r+0xab0>
   82552:	f108 0808 	add.w	r8, r8, #8
   82556:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82558:	b17b      	cbz	r3, 8257a <_svfprintf_r+0x33e>
   8255a:	2102      	movs	r1, #2
   8255c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8255e:	440c      	add	r4, r1
   82560:	3301      	adds	r3, #1
   82562:	aa1e      	add	r2, sp, #120	; 0x78
   82564:	2b07      	cmp	r3, #7
   82566:	9427      	str	r4, [sp, #156]	; 0x9c
   82568:	9326      	str	r3, [sp, #152]	; 0x98
   8256a:	f8c8 1004 	str.w	r1, [r8, #4]
   8256e:	f8c8 2000 	str.w	r2, [r8]
   82572:	f300 8411 	bgt.w	82d98 <_svfprintf_r+0xb5c>
   82576:	f108 0808 	add.w	r8, r8, #8
   8257a:	2d80      	cmp	r5, #128	; 0x80
   8257c:	f000 8304 	beq.w	82b88 <_svfprintf_r+0x94c>
   82580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82584:	1a9f      	subs	r7, r3, r2
   82586:	2f00      	cmp	r7, #0
   82588:	dd37      	ble.n	825fa <_svfprintf_r+0x3be>
   8258a:	2f10      	cmp	r7, #16
   8258c:	f340 8679 	ble.w	83282 <_svfprintf_r+0x1046>
   82590:	4d80      	ldr	r5, [pc, #512]	; (82794 <_svfprintf_r+0x558>)
   82592:	4642      	mov	r2, r8
   82594:	4621      	mov	r1, r4
   82596:	46b0      	mov	r8, r6
   82598:	f04f 0b10 	mov.w	fp, #16
   8259c:	462e      	mov	r6, r5
   8259e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   825a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   825a4:	e004      	b.n	825b0 <_svfprintf_r+0x374>
   825a6:	3f10      	subs	r7, #16
   825a8:	2f10      	cmp	r7, #16
   825aa:	f102 0208 	add.w	r2, r2, #8
   825ae:	dd15      	ble.n	825dc <_svfprintf_r+0x3a0>
   825b0:	3301      	adds	r3, #1
   825b2:	3110      	adds	r1, #16
   825b4:	2b07      	cmp	r3, #7
   825b6:	9127      	str	r1, [sp, #156]	; 0x9c
   825b8:	9326      	str	r3, [sp, #152]	; 0x98
   825ba:	e882 0840 	stmia.w	r2, {r6, fp}
   825be:	ddf2      	ble.n	825a6 <_svfprintf_r+0x36a>
   825c0:	aa25      	add	r2, sp, #148	; 0x94
   825c2:	4629      	mov	r1, r5
   825c4:	4620      	mov	r0, r4
   825c6:	f002 ff55 	bl	85474 <__ssprint_r>
   825ca:	2800      	cmp	r0, #0
   825cc:	f47f af13 	bne.w	823f6 <_svfprintf_r+0x1ba>
   825d0:	3f10      	subs	r7, #16
   825d2:	2f10      	cmp	r7, #16
   825d4:	464a      	mov	r2, r9
   825d6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   825d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825da:	dce9      	bgt.n	825b0 <_svfprintf_r+0x374>
   825dc:	4635      	mov	r5, r6
   825de:	460c      	mov	r4, r1
   825e0:	4646      	mov	r6, r8
   825e2:	4690      	mov	r8, r2
   825e4:	3301      	adds	r3, #1
   825e6:	443c      	add	r4, r7
   825e8:	2b07      	cmp	r3, #7
   825ea:	9427      	str	r4, [sp, #156]	; 0x9c
   825ec:	9326      	str	r3, [sp, #152]	; 0x98
   825ee:	e888 00a0 	stmia.w	r8, {r5, r7}
   825f2:	f300 8370 	bgt.w	82cd6 <_svfprintf_r+0xa9a>
   825f6:	f108 0808 	add.w	r8, r8, #8
   825fa:	9b07      	ldr	r3, [sp, #28]
   825fc:	05df      	lsls	r7, r3, #23
   825fe:	f100 8264 	bmi.w	82aca <_svfprintf_r+0x88e>
   82602:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82604:	990e      	ldr	r1, [sp, #56]	; 0x38
   82606:	3301      	adds	r3, #1
   82608:	440c      	add	r4, r1
   8260a:	2b07      	cmp	r3, #7
   8260c:	9427      	str	r4, [sp, #156]	; 0x9c
   8260e:	f8c8 6000 	str.w	r6, [r8]
   82612:	f8c8 1004 	str.w	r1, [r8, #4]
   82616:	9326      	str	r3, [sp, #152]	; 0x98
   82618:	f300 83b3 	bgt.w	82d82 <_svfprintf_r+0xb46>
   8261c:	f108 0808 	add.w	r8, r8, #8
   82620:	9b07      	ldr	r3, [sp, #28]
   82622:	075b      	lsls	r3, r3, #29
   82624:	d53b      	bpl.n	8269e <_svfprintf_r+0x462>
   82626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82628:	9a08      	ldr	r2, [sp, #32]
   8262a:	1a9d      	subs	r5, r3, r2
   8262c:	2d00      	cmp	r5, #0
   8262e:	dd36      	ble.n	8269e <_svfprintf_r+0x462>
   82630:	2d10      	cmp	r5, #16
   82632:	f340 8721 	ble.w	83478 <_svfprintf_r+0x123c>
   82636:	2610      	movs	r6, #16
   82638:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8263a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8263c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   82640:	e004      	b.n	8264c <_svfprintf_r+0x410>
   82642:	3d10      	subs	r5, #16
   82644:	2d10      	cmp	r5, #16
   82646:	f108 0808 	add.w	r8, r8, #8
   8264a:	dd16      	ble.n	8267a <_svfprintf_r+0x43e>
   8264c:	3301      	adds	r3, #1
   8264e:	4a50      	ldr	r2, [pc, #320]	; (82790 <_svfprintf_r+0x554>)
   82650:	3410      	adds	r4, #16
   82652:	2b07      	cmp	r3, #7
   82654:	9427      	str	r4, [sp, #156]	; 0x9c
   82656:	9326      	str	r3, [sp, #152]	; 0x98
   82658:	e888 0044 	stmia.w	r8, {r2, r6}
   8265c:	ddf1      	ble.n	82642 <_svfprintf_r+0x406>
   8265e:	aa25      	add	r2, sp, #148	; 0x94
   82660:	4659      	mov	r1, fp
   82662:	4638      	mov	r0, r7
   82664:	f002 ff06 	bl	85474 <__ssprint_r>
   82668:	2800      	cmp	r0, #0
   8266a:	f47f aec4 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8266e:	3d10      	subs	r5, #16
   82670:	2d10      	cmp	r5, #16
   82672:	46c8      	mov	r8, r9
   82674:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82676:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82678:	dce8      	bgt.n	8264c <_svfprintf_r+0x410>
   8267a:	3301      	adds	r3, #1
   8267c:	4a44      	ldr	r2, [pc, #272]	; (82790 <_svfprintf_r+0x554>)
   8267e:	442c      	add	r4, r5
   82680:	2b07      	cmp	r3, #7
   82682:	9427      	str	r4, [sp, #156]	; 0x9c
   82684:	9326      	str	r3, [sp, #152]	; 0x98
   82686:	e888 0024 	stmia.w	r8, {r2, r5}
   8268a:	dd08      	ble.n	8269e <_svfprintf_r+0x462>
   8268c:	aa25      	add	r2, sp, #148	; 0x94
   8268e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82690:	980c      	ldr	r0, [sp, #48]	; 0x30
   82692:	f002 feef 	bl	85474 <__ssprint_r>
   82696:	2800      	cmp	r0, #0
   82698:	f47f aead 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8269c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8269e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   826a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   826a2:	9908      	ldr	r1, [sp, #32]
   826a4:	428a      	cmp	r2, r1
   826a6:	bfac      	ite	ge
   826a8:	189b      	addge	r3, r3, r2
   826aa:	185b      	addlt	r3, r3, r1
   826ac:	9309      	str	r3, [sp, #36]	; 0x24
   826ae:	2c00      	cmp	r4, #0
   826b0:	f040 82fb 	bne.w	82caa <_svfprintf_r+0xa6e>
   826b4:	2300      	movs	r3, #0
   826b6:	46c8      	mov	r8, r9
   826b8:	9326      	str	r3, [sp, #152]	; 0x98
   826ba:	e5e6      	b.n	8228a <_svfprintf_r+0x4e>
   826bc:	9311      	str	r3, [sp, #68]	; 0x44
   826be:	f01b 0320 	ands.w	r3, fp, #32
   826c2:	f040 8145 	bne.w	82950 <_svfprintf_r+0x714>
   826c6:	f01b 0210 	ands.w	r2, fp, #16
   826ca:	f040 8466 	bne.w	82f9a <_svfprintf_r+0xd5e>
   826ce:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   826d2:	f000 8462 	beq.w	82f9a <_svfprintf_r+0xd5e>
   826d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   826d8:	4613      	mov	r3, r2
   826da:	460a      	mov	r2, r1
   826dc:	3204      	adds	r2, #4
   826de:	880c      	ldrh	r4, [r1, #0]
   826e0:	2500      	movs	r5, #0
   826e2:	920f      	str	r2, [sp, #60]	; 0x3c
   826e4:	e6a8      	b.n	82438 <_svfprintf_r+0x1fc>
   826e6:	2500      	movs	r5, #0
   826e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   826ea:	9311      	str	r3, [sp, #68]	; 0x44
   826ec:	6816      	ldr	r6, [r2, #0]
   826ee:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   826f2:	1d14      	adds	r4, r2, #4
   826f4:	2e00      	cmp	r6, #0
   826f6:	f000 86cd 	beq.w	83494 <_svfprintf_r+0x1258>
   826fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   826fc:	1c53      	adds	r3, r2, #1
   826fe:	f000 861b 	beq.w	83338 <_svfprintf_r+0x10fc>
   82702:	4629      	mov	r1, r5
   82704:	4630      	mov	r0, r6
   82706:	f002 f959 	bl	849bc <memchr>
   8270a:	2800      	cmp	r0, #0
   8270c:	f000 870d 	beq.w	8352a <_svfprintf_r+0x12ee>
   82710:	1b83      	subs	r3, r0, r6
   82712:	950a      	str	r5, [sp, #40]	; 0x28
   82714:	930e      	str	r3, [sp, #56]	; 0x38
   82716:	940f      	str	r4, [sp, #60]	; 0x3c
   82718:	f8cd b01c 	str.w	fp, [sp, #28]
   8271c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   82720:	9308      	str	r3, [sp, #32]
   82722:	9512      	str	r5, [sp, #72]	; 0x48
   82724:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82728:	e6ac      	b.n	82484 <_svfprintf_r+0x248>
   8272a:	f89a 3000 	ldrb.w	r3, [sl]
   8272e:	f10a 0401 	add.w	r4, sl, #1
   82732:	2b2a      	cmp	r3, #42	; 0x2a
   82734:	f000 87c2 	beq.w	836bc <_svfprintf_r+0x1480>
   82738:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   8273c:	2809      	cmp	r0, #9
   8273e:	46a2      	mov	sl, r4
   82740:	f200 8718 	bhi.w	83574 <_svfprintf_r+0x1338>
   82744:	2300      	movs	r3, #0
   82746:	461c      	mov	r4, r3
   82748:	f81a 3b01 	ldrb.w	r3, [sl], #1
   8274c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82750:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82754:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82758:	2809      	cmp	r0, #9
   8275a:	d9f5      	bls.n	82748 <_svfprintf_r+0x50c>
   8275c:	940a      	str	r4, [sp, #40]	; 0x28
   8275e:	e5c9      	b.n	822f4 <_svfprintf_r+0xb8>
   82760:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   82764:	f89a 3000 	ldrb.w	r3, [sl]
   82768:	e5c2      	b.n	822f0 <_svfprintf_r+0xb4>
   8276a:	f04b 0b10 	orr.w	fp, fp, #16
   8276e:	f01b 0f20 	tst.w	fp, #32
   82772:	9311      	str	r3, [sp, #68]	; 0x44
   82774:	f43f ae51 	beq.w	8241a <_svfprintf_r+0x1de>
   82778:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8277a:	3407      	adds	r4, #7
   8277c:	f024 0307 	bic.w	r3, r4, #7
   82780:	f103 0208 	add.w	r2, r3, #8
   82784:	e9d3 4500 	ldrd	r4, r5, [r3]
   82788:	920f      	str	r2, [sp, #60]	; 0x3c
   8278a:	2301      	movs	r3, #1
   8278c:	e654      	b.n	82438 <_svfprintf_r+0x1fc>
   8278e:	bf00      	nop
   82790:	000863e4 	.word	0x000863e4
   82794:	000863f4 	.word	0x000863f4
   82798:	9311      	str	r3, [sp, #68]	; 0x44
   8279a:	2a00      	cmp	r2, #0
   8279c:	f040 87ad 	bne.w	836fa <_svfprintf_r+0x14be>
   827a0:	4bbe      	ldr	r3, [pc, #760]	; (82a9c <_svfprintf_r+0x860>)
   827a2:	f01b 0f20 	tst.w	fp, #32
   827a6:	9318      	str	r3, [sp, #96]	; 0x60
   827a8:	f040 80e7 	bne.w	8297a <_svfprintf_r+0x73e>
   827ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   827ae:	f01b 0f10 	tst.w	fp, #16
   827b2:	4613      	mov	r3, r2
   827b4:	f040 83d8 	bne.w	82f68 <_svfprintf_r+0xd2c>
   827b8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   827bc:	f000 83d4 	beq.w	82f68 <_svfprintf_r+0xd2c>
   827c0:	2500      	movs	r5, #0
   827c2:	3304      	adds	r3, #4
   827c4:	8814      	ldrh	r4, [r2, #0]
   827c6:	930f      	str	r3, [sp, #60]	; 0x3c
   827c8:	f01b 0f01 	tst.w	fp, #1
   827cc:	f000 80e3 	beq.w	82996 <_svfprintf_r+0x75a>
   827d0:	ea54 0305 	orrs.w	r3, r4, r5
   827d4:	f000 80df 	beq.w	82996 <_svfprintf_r+0x75a>
   827d8:	2330      	movs	r3, #48	; 0x30
   827da:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   827de:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   827e2:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   827e6:	f04b 0b02 	orr.w	fp, fp, #2
   827ea:	2302      	movs	r3, #2
   827ec:	e624      	b.n	82438 <_svfprintf_r+0x1fc>
   827ee:	2201      	movs	r2, #1
   827f0:	9311      	str	r3, [sp, #68]	; 0x44
   827f2:	2300      	movs	r3, #0
   827f4:	4611      	mov	r1, r2
   827f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   827f8:	9208      	str	r2, [sp, #32]
   827fa:	6802      	ldr	r2, [r0, #0]
   827fc:	461f      	mov	r7, r3
   827fe:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82802:	930a      	str	r3, [sp, #40]	; 0x28
   82804:	9312      	str	r3, [sp, #72]	; 0x48
   82806:	1d03      	adds	r3, r0, #4
   82808:	f8cd b01c 	str.w	fp, [sp, #28]
   8280c:	910e      	str	r1, [sp, #56]	; 0x38
   8280e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82812:	930f      	str	r3, [sp, #60]	; 0x3c
   82814:	ae28      	add	r6, sp, #160	; 0xa0
   82816:	e639      	b.n	8248c <_svfprintf_r+0x250>
   82818:	9311      	str	r3, [sp, #68]	; 0x44
   8281a:	2a00      	cmp	r2, #0
   8281c:	f040 8784 	bne.w	83728 <_svfprintf_r+0x14ec>
   82820:	f04b 0b10 	orr.w	fp, fp, #16
   82824:	f01b 0f20 	tst.w	fp, #32
   82828:	f040 8475 	bne.w	83116 <_svfprintf_r+0xeda>
   8282c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8282e:	f01b 0f10 	tst.w	fp, #16
   82832:	4613      	mov	r3, r2
   82834:	f040 839d 	bne.w	82f72 <_svfprintf_r+0xd36>
   82838:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8283c:	f000 8399 	beq.w	82f72 <_svfprintf_r+0xd36>
   82840:	f9b2 4000 	ldrsh.w	r4, [r2]
   82844:	3304      	adds	r3, #4
   82846:	17e5      	asrs	r5, r4, #31
   82848:	930f      	str	r3, [sp, #60]	; 0x3c
   8284a:	4622      	mov	r2, r4
   8284c:	462b      	mov	r3, r5
   8284e:	2a00      	cmp	r2, #0
   82850:	f173 0300 	sbcs.w	r3, r3, #0
   82854:	f2c0 8398 	blt.w	82f88 <_svfprintf_r+0xd4c>
   82858:	990a      	ldr	r1, [sp, #40]	; 0x28
   8285a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8285e:	1c4a      	adds	r2, r1, #1
   82860:	f04f 0301 	mov.w	r3, #1
   82864:	f47f adf0 	bne.w	82448 <_svfprintf_r+0x20c>
   82868:	ea54 0205 	orrs.w	r2, r4, r5
   8286c:	f000 8229 	beq.w	82cc2 <_svfprintf_r+0xa86>
   82870:	f8cd b01c 	str.w	fp, [sp, #28]
   82874:	2b01      	cmp	r3, #1
   82876:	f000 830e 	beq.w	82e96 <_svfprintf_r+0xc5a>
   8287a:	2b02      	cmp	r3, #2
   8287c:	f040 829c 	bne.w	82db8 <_svfprintf_r+0xb7c>
   82880:	464e      	mov	r6, r9
   82882:	9818      	ldr	r0, [sp, #96]	; 0x60
   82884:	0923      	lsrs	r3, r4, #4
   82886:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8288a:	0929      	lsrs	r1, r5, #4
   8288c:	f004 020f 	and.w	r2, r4, #15
   82890:	460d      	mov	r5, r1
   82892:	461c      	mov	r4, r3
   82894:	5c83      	ldrb	r3, [r0, r2]
   82896:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8289a:	ea54 0305 	orrs.w	r3, r4, r5
   8289e:	d1f1      	bne.n	82884 <_svfprintf_r+0x648>
   828a0:	eba9 0306 	sub.w	r3, r9, r6
   828a4:	930e      	str	r3, [sp, #56]	; 0x38
   828a6:	e5e5      	b.n	82474 <_svfprintf_r+0x238>
   828a8:	9311      	str	r3, [sp, #68]	; 0x44
   828aa:	2a00      	cmp	r2, #0
   828ac:	f040 8738 	bne.w	83720 <_svfprintf_r+0x14e4>
   828b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   828b2:	f01b 0f08 	tst.w	fp, #8
   828b6:	f104 0407 	add.w	r4, r4, #7
   828ba:	f000 84cf 	beq.w	8325c <_svfprintf_r+0x1020>
   828be:	f024 0307 	bic.w	r3, r4, #7
   828c2:	f103 0208 	add.w	r2, r3, #8
   828c6:	920f      	str	r2, [sp, #60]	; 0x3c
   828c8:	681a      	ldr	r2, [r3, #0]
   828ca:	685b      	ldr	r3, [r3, #4]
   828cc:	9215      	str	r2, [sp, #84]	; 0x54
   828ce:	9314      	str	r3, [sp, #80]	; 0x50
   828d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   828d2:	9d15      	ldr	r5, [sp, #84]	; 0x54
   828d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   828d8:	4628      	mov	r0, r5
   828da:	4621      	mov	r1, r4
   828dc:	f04f 32ff 	mov.w	r2, #4294967295
   828e0:	4b6f      	ldr	r3, [pc, #444]	; (82aa0 <_svfprintf_r+0x864>)
   828e2:	f003 fb35 	bl	85f50 <__aeabi_dcmpun>
   828e6:	2800      	cmp	r0, #0
   828e8:	f040 8434 	bne.w	83154 <_svfprintf_r+0xf18>
   828ec:	4628      	mov	r0, r5
   828ee:	4621      	mov	r1, r4
   828f0:	f04f 32ff 	mov.w	r2, #4294967295
   828f4:	4b6a      	ldr	r3, [pc, #424]	; (82aa0 <_svfprintf_r+0x864>)
   828f6:	f003 fb0d 	bl	85f14 <__aeabi_dcmple>
   828fa:	2800      	cmp	r0, #0
   828fc:	f040 842a 	bne.w	83154 <_svfprintf_r+0xf18>
   82900:	a815      	add	r0, sp, #84	; 0x54
   82902:	c80d      	ldmia	r0, {r0, r2, r3}
   82904:	9914      	ldr	r1, [sp, #80]	; 0x50
   82906:	f003 fafb 	bl	85f00 <__aeabi_dcmplt>
   8290a:	2800      	cmp	r0, #0
   8290c:	f040 85d4 	bne.w	834b8 <_svfprintf_r+0x127c>
   82910:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82914:	2303      	movs	r3, #3
   82916:	461a      	mov	r2, r3
   82918:	9308      	str	r3, [sp, #32]
   8291a:	2300      	movs	r3, #0
   8291c:	4e61      	ldr	r6, [pc, #388]	; (82aa4 <_svfprintf_r+0x868>)
   8291e:	4619      	mov	r1, r3
   82920:	930a      	str	r3, [sp, #40]	; 0x28
   82922:	4b61      	ldr	r3, [pc, #388]	; (82aa8 <_svfprintf_r+0x86c>)
   82924:	920e      	str	r2, [sp, #56]	; 0x38
   82926:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82928:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   8292c:	9007      	str	r0, [sp, #28]
   8292e:	9112      	str	r1, [sp, #72]	; 0x48
   82930:	2a47      	cmp	r2, #71	; 0x47
   82932:	bfd8      	it	le
   82934:	461e      	movle	r6, r3
   82936:	e5a5      	b.n	82484 <_svfprintf_r+0x248>
   82938:	f04b 0b08 	orr.w	fp, fp, #8
   8293c:	f89a 3000 	ldrb.w	r3, [sl]
   82940:	e4d6      	b.n	822f0 <_svfprintf_r+0xb4>
   82942:	f04b 0b10 	orr.w	fp, fp, #16
   82946:	9311      	str	r3, [sp, #68]	; 0x44
   82948:	f01b 0320 	ands.w	r3, fp, #32
   8294c:	f43f aebb 	beq.w	826c6 <_svfprintf_r+0x48a>
   82950:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82952:	3407      	adds	r4, #7
   82954:	f024 0307 	bic.w	r3, r4, #7
   82958:	f103 0208 	add.w	r2, r3, #8
   8295c:	e9d3 4500 	ldrd	r4, r5, [r3]
   82960:	920f      	str	r2, [sp, #60]	; 0x3c
   82962:	2300      	movs	r3, #0
   82964:	e568      	b.n	82438 <_svfprintf_r+0x1fc>
   82966:	9311      	str	r3, [sp, #68]	; 0x44
   82968:	2a00      	cmp	r2, #0
   8296a:	f040 86c2 	bne.w	836f2 <_svfprintf_r+0x14b6>
   8296e:	4b4f      	ldr	r3, [pc, #316]	; (82aac <_svfprintf_r+0x870>)
   82970:	f01b 0f20 	tst.w	fp, #32
   82974:	9318      	str	r3, [sp, #96]	; 0x60
   82976:	f43f af19 	beq.w	827ac <_svfprintf_r+0x570>
   8297a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8297c:	f01b 0f01 	tst.w	fp, #1
   82980:	f104 0407 	add.w	r4, r4, #7
   82984:	f024 0307 	bic.w	r3, r4, #7
   82988:	f103 0208 	add.w	r2, r3, #8
   8298c:	920f      	str	r2, [sp, #60]	; 0x3c
   8298e:	e9d3 4500 	ldrd	r4, r5, [r3]
   82992:	f47f af1d 	bne.w	827d0 <_svfprintf_r+0x594>
   82996:	2302      	movs	r3, #2
   82998:	e54e      	b.n	82438 <_svfprintf_r+0x1fc>
   8299a:	f89a 3000 	ldrb.w	r3, [sl]
   8299e:	2900      	cmp	r1, #0
   829a0:	f47f aca6 	bne.w	822f0 <_svfprintf_r+0xb4>
   829a4:	2201      	movs	r2, #1
   829a6:	2120      	movs	r1, #32
   829a8:	e4a2      	b.n	822f0 <_svfprintf_r+0xb4>
   829aa:	f04b 0b01 	orr.w	fp, fp, #1
   829ae:	f89a 3000 	ldrb.w	r3, [sl]
   829b2:	e49d      	b.n	822f0 <_svfprintf_r+0xb4>
   829b4:	f89a 3000 	ldrb.w	r3, [sl]
   829b8:	2201      	movs	r2, #1
   829ba:	212b      	movs	r1, #43	; 0x2b
   829bc:	e498      	b.n	822f0 <_svfprintf_r+0xb4>
   829be:	f04b 0b20 	orr.w	fp, fp, #32
   829c2:	f89a 3000 	ldrb.w	r3, [sl]
   829c6:	e493      	b.n	822f0 <_svfprintf_r+0xb4>
   829c8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   829cc:	f89a 3000 	ldrb.w	r3, [sl]
   829d0:	e48e      	b.n	822f0 <_svfprintf_r+0xb4>
   829d2:	f89a 3000 	ldrb.w	r3, [sl]
   829d6:	2b6c      	cmp	r3, #108	; 0x6c
   829d8:	bf03      	ittte	eq
   829da:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   829de:	f04b 0b20 	orreq.w	fp, fp, #32
   829e2:	f10a 0a01 	addeq.w	sl, sl, #1
   829e6:	f04b 0b10 	orrne.w	fp, fp, #16
   829ea:	e481      	b.n	822f0 <_svfprintf_r+0xb4>
   829ec:	2a00      	cmp	r2, #0
   829ee:	f040 867c 	bne.w	836ea <_svfprintf_r+0x14ae>
   829f2:	f01b 0f20 	tst.w	fp, #32
   829f6:	f040 8452 	bne.w	8329e <_svfprintf_r+0x1062>
   829fa:	f01b 0f10 	tst.w	fp, #16
   829fe:	f040 8438 	bne.w	83272 <_svfprintf_r+0x1036>
   82a02:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82a06:	f000 8434 	beq.w	83272 <_svfprintf_r+0x1036>
   82a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82a0c:	6813      	ldr	r3, [r2, #0]
   82a0e:	3204      	adds	r2, #4
   82a10:	920f      	str	r2, [sp, #60]	; 0x3c
   82a12:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   82a16:	801a      	strh	r2, [r3, #0]
   82a18:	e437      	b.n	8228a <_svfprintf_r+0x4e>
   82a1a:	2378      	movs	r3, #120	; 0x78
   82a1c:	2230      	movs	r2, #48	; 0x30
   82a1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82a20:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   82a24:	9311      	str	r3, [sp, #68]	; 0x44
   82a26:	1d03      	adds	r3, r0, #4
   82a28:	930f      	str	r3, [sp, #60]	; 0x3c
   82a2a:	4b20      	ldr	r3, [pc, #128]	; (82aac <_svfprintf_r+0x870>)
   82a2c:	6804      	ldr	r4, [r0, #0]
   82a2e:	9318      	str	r3, [sp, #96]	; 0x60
   82a30:	f04b 0b02 	orr.w	fp, fp, #2
   82a34:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   82a38:	2500      	movs	r5, #0
   82a3a:	2302      	movs	r3, #2
   82a3c:	e4fc      	b.n	82438 <_svfprintf_r+0x1fc>
   82a3e:	9311      	str	r3, [sp, #68]	; 0x44
   82a40:	2a00      	cmp	r2, #0
   82a42:	f43f aeef 	beq.w	82824 <_svfprintf_r+0x5e8>
   82a46:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   82a4a:	e6eb      	b.n	82824 <_svfprintf_r+0x5e8>
   82a4c:	2000      	movs	r0, #0
   82a4e:	4604      	mov	r4, r0
   82a50:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a54:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82a58:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82a5c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82a60:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a64:	2809      	cmp	r0, #9
   82a66:	d9f5      	bls.n	82a54 <_svfprintf_r+0x818>
   82a68:	940d      	str	r4, [sp, #52]	; 0x34
   82a6a:	e443      	b.n	822f4 <_svfprintf_r+0xb8>
   82a6c:	9311      	str	r3, [sp, #68]	; 0x44
   82a6e:	2a00      	cmp	r2, #0
   82a70:	f040 864a 	bne.w	83708 <_svfprintf_r+0x14cc>
   82a74:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82a76:	2a00      	cmp	r2, #0
   82a78:	f43f acb6 	beq.w	823e8 <_svfprintf_r+0x1ac>
   82a7c:	2300      	movs	r3, #0
   82a7e:	2101      	movs	r1, #1
   82a80:	461f      	mov	r7, r3
   82a82:	9108      	str	r1, [sp, #32]
   82a84:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82a88:	f8cd b01c 	str.w	fp, [sp, #28]
   82a8c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82a90:	930a      	str	r3, [sp, #40]	; 0x28
   82a92:	9312      	str	r3, [sp, #72]	; 0x48
   82a94:	910e      	str	r1, [sp, #56]	; 0x38
   82a96:	ae28      	add	r6, sp, #160	; 0xa0
   82a98:	e4f8      	b.n	8248c <_svfprintf_r+0x250>
   82a9a:	bf00      	nop
   82a9c:	000863b0 	.word	0x000863b0
   82aa0:	7fefffff 	.word	0x7fefffff
   82aa4:	000863a4 	.word	0x000863a4
   82aa8:	000863a0 	.word	0x000863a0
   82aac:	000863c4 	.word	0x000863c4
   82ab0:	aa25      	add	r2, sp, #148	; 0x94
   82ab2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82ab4:	980c      	ldr	r0, [sp, #48]	; 0x30
   82ab6:	f002 fcdd 	bl	85474 <__ssprint_r>
   82aba:	2800      	cmp	r0, #0
   82abc:	f47f ac9b 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82ac0:	46c8      	mov	r8, r9
   82ac2:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82ac6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82ac8:	e533      	b.n	82532 <_svfprintf_r+0x2f6>
   82aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82acc:	2b65      	cmp	r3, #101	; 0x65
   82ace:	f340 809a 	ble.w	82c06 <_svfprintf_r+0x9ca>
   82ad2:	a815      	add	r0, sp, #84	; 0x54
   82ad4:	c80d      	ldmia	r0, {r0, r2, r3}
   82ad6:	9914      	ldr	r1, [sp, #80]	; 0x50
   82ad8:	f003 fa08 	bl	85eec <__aeabi_dcmpeq>
   82adc:	2800      	cmp	r0, #0
   82ade:	f000 8193 	beq.w	82e08 <_svfprintf_r+0xbcc>
   82ae2:	2101      	movs	r1, #1
   82ae4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ae6:	4ab5      	ldr	r2, [pc, #724]	; (82dbc <_svfprintf_r+0xb80>)
   82ae8:	440b      	add	r3, r1
   82aea:	440c      	add	r4, r1
   82aec:	2b07      	cmp	r3, #7
   82aee:	9427      	str	r4, [sp, #156]	; 0x9c
   82af0:	9326      	str	r3, [sp, #152]	; 0x98
   82af2:	f8c8 1004 	str.w	r1, [r8, #4]
   82af6:	f8c8 2000 	str.w	r2, [r8]
   82afa:	f300 83c6 	bgt.w	8328a <_svfprintf_r+0x104e>
   82afe:	f108 0808 	add.w	r8, r8, #8
   82b02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82b04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82b06:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82b08:	4293      	cmp	r3, r2
   82b0a:	db03      	blt.n	82b14 <_svfprintf_r+0x8d8>
   82b0c:	9b07      	ldr	r3, [sp, #28]
   82b0e:	07dd      	lsls	r5, r3, #31
   82b10:	f57f ad86 	bpl.w	82620 <_svfprintf_r+0x3e4>
   82b14:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b16:	9919      	ldr	r1, [sp, #100]	; 0x64
   82b18:	3301      	adds	r3, #1
   82b1a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82b1c:	440c      	add	r4, r1
   82b1e:	2b07      	cmp	r3, #7
   82b20:	f8c8 2000 	str.w	r2, [r8]
   82b24:	f8c8 1004 	str.w	r1, [r8, #4]
   82b28:	9427      	str	r4, [sp, #156]	; 0x9c
   82b2a:	9326      	str	r3, [sp, #152]	; 0x98
   82b2c:	f300 83c4 	bgt.w	832b8 <_svfprintf_r+0x107c>
   82b30:	f108 0808 	add.w	r8, r8, #8
   82b34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82b36:	1e5e      	subs	r6, r3, #1
   82b38:	2e00      	cmp	r6, #0
   82b3a:	f77f ad71 	ble.w	82620 <_svfprintf_r+0x3e4>
   82b3e:	2e10      	cmp	r6, #16
   82b40:	f340 8575 	ble.w	8362e <_svfprintf_r+0x13f2>
   82b44:	4622      	mov	r2, r4
   82b46:	2710      	movs	r7, #16
   82b48:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b4a:	4d9d      	ldr	r5, [pc, #628]	; (82dc0 <_svfprintf_r+0xb84>)
   82b4c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82b50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82b52:	e005      	b.n	82b60 <_svfprintf_r+0x924>
   82b54:	f108 0808 	add.w	r8, r8, #8
   82b58:	3e10      	subs	r6, #16
   82b5a:	2e10      	cmp	r6, #16
   82b5c:	f340 8225 	ble.w	82faa <_svfprintf_r+0xd6e>
   82b60:	3301      	adds	r3, #1
   82b62:	3210      	adds	r2, #16
   82b64:	2b07      	cmp	r3, #7
   82b66:	9227      	str	r2, [sp, #156]	; 0x9c
   82b68:	9326      	str	r3, [sp, #152]	; 0x98
   82b6a:	e888 00a0 	stmia.w	r8, {r5, r7}
   82b6e:	ddf1      	ble.n	82b54 <_svfprintf_r+0x918>
   82b70:	aa25      	add	r2, sp, #148	; 0x94
   82b72:	4621      	mov	r1, r4
   82b74:	4658      	mov	r0, fp
   82b76:	f002 fc7d 	bl	85474 <__ssprint_r>
   82b7a:	2800      	cmp	r0, #0
   82b7c:	f47f ac3b 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82b80:	46c8      	mov	r8, r9
   82b82:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82b84:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b86:	e7e7      	b.n	82b58 <_svfprintf_r+0x91c>
   82b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82b8a:	9a08      	ldr	r2, [sp, #32]
   82b8c:	1a9f      	subs	r7, r3, r2
   82b8e:	2f00      	cmp	r7, #0
   82b90:	f77f acf6 	ble.w	82580 <_svfprintf_r+0x344>
   82b94:	2f10      	cmp	r7, #16
   82b96:	f340 84a8 	ble.w	834ea <_svfprintf_r+0x12ae>
   82b9a:	4d89      	ldr	r5, [pc, #548]	; (82dc0 <_svfprintf_r+0xb84>)
   82b9c:	4642      	mov	r2, r8
   82b9e:	4621      	mov	r1, r4
   82ba0:	46b0      	mov	r8, r6
   82ba2:	f04f 0b10 	mov.w	fp, #16
   82ba6:	462e      	mov	r6, r5
   82ba8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82baa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82bac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82bae:	e004      	b.n	82bba <_svfprintf_r+0x97e>
   82bb0:	3f10      	subs	r7, #16
   82bb2:	2f10      	cmp	r7, #16
   82bb4:	f102 0208 	add.w	r2, r2, #8
   82bb8:	dd15      	ble.n	82be6 <_svfprintf_r+0x9aa>
   82bba:	3301      	adds	r3, #1
   82bbc:	3110      	adds	r1, #16
   82bbe:	2b07      	cmp	r3, #7
   82bc0:	9127      	str	r1, [sp, #156]	; 0x9c
   82bc2:	9326      	str	r3, [sp, #152]	; 0x98
   82bc4:	e882 0840 	stmia.w	r2, {r6, fp}
   82bc8:	ddf2      	ble.n	82bb0 <_svfprintf_r+0x974>
   82bca:	aa25      	add	r2, sp, #148	; 0x94
   82bcc:	4629      	mov	r1, r5
   82bce:	4620      	mov	r0, r4
   82bd0:	f002 fc50 	bl	85474 <__ssprint_r>
   82bd4:	2800      	cmp	r0, #0
   82bd6:	f47f ac0e 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82bda:	3f10      	subs	r7, #16
   82bdc:	2f10      	cmp	r7, #16
   82bde:	464a      	mov	r2, r9
   82be0:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82be2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82be4:	dce9      	bgt.n	82bba <_svfprintf_r+0x97e>
   82be6:	4635      	mov	r5, r6
   82be8:	460c      	mov	r4, r1
   82bea:	4646      	mov	r6, r8
   82bec:	4690      	mov	r8, r2
   82bee:	3301      	adds	r3, #1
   82bf0:	443c      	add	r4, r7
   82bf2:	2b07      	cmp	r3, #7
   82bf4:	9427      	str	r4, [sp, #156]	; 0x9c
   82bf6:	9326      	str	r3, [sp, #152]	; 0x98
   82bf8:	e888 00a0 	stmia.w	r8, {r5, r7}
   82bfc:	f300 829e 	bgt.w	8313c <_svfprintf_r+0xf00>
   82c00:	f108 0808 	add.w	r8, r8, #8
   82c04:	e4bc      	b.n	82580 <_svfprintf_r+0x344>
   82c06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82c08:	2b01      	cmp	r3, #1
   82c0a:	f340 824f 	ble.w	830ac <_svfprintf_r+0xe70>
   82c0e:	2301      	movs	r3, #1
   82c10:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82c12:	441c      	add	r4, r3
   82c14:	441f      	add	r7, r3
   82c16:	2f07      	cmp	r7, #7
   82c18:	9427      	str	r4, [sp, #156]	; 0x9c
   82c1a:	f8c8 6000 	str.w	r6, [r8]
   82c1e:	9726      	str	r7, [sp, #152]	; 0x98
   82c20:	f8c8 3004 	str.w	r3, [r8, #4]
   82c24:	f300 825f 	bgt.w	830e6 <_svfprintf_r+0xeaa>
   82c28:	f108 0808 	add.w	r8, r8, #8
   82c2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   82c2e:	3701      	adds	r7, #1
   82c30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   82c32:	4414      	add	r4, r2
   82c34:	2f07      	cmp	r7, #7
   82c36:	9427      	str	r4, [sp, #156]	; 0x9c
   82c38:	9726      	str	r7, [sp, #152]	; 0x98
   82c3a:	f8c8 3000 	str.w	r3, [r8]
   82c3e:	f8c8 2004 	str.w	r2, [r8, #4]
   82c42:	f300 825c 	bgt.w	830fe <_svfprintf_r+0xec2>
   82c46:	f108 0808 	add.w	r8, r8, #8
   82c4a:	a815      	add	r0, sp, #84	; 0x54
   82c4c:	c80d      	ldmia	r0, {r0, r2, r3}
   82c4e:	9914      	ldr	r1, [sp, #80]	; 0x50
   82c50:	f003 f94c 	bl	85eec <__aeabi_dcmpeq>
   82c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82c56:	2800      	cmp	r0, #0
   82c58:	f040 8141 	bne.w	82ede <_svfprintf_r+0xca2>
   82c5c:	3b01      	subs	r3, #1
   82c5e:	3701      	adds	r7, #1
   82c60:	3601      	adds	r6, #1
   82c62:	441c      	add	r4, r3
   82c64:	2f07      	cmp	r7, #7
   82c66:	f8c8 6000 	str.w	r6, [r8]
   82c6a:	9726      	str	r7, [sp, #152]	; 0x98
   82c6c:	9427      	str	r4, [sp, #156]	; 0x9c
   82c6e:	f8c8 3004 	str.w	r3, [r8, #4]
   82c72:	f300 8166 	bgt.w	82f42 <_svfprintf_r+0xd06>
   82c76:	f108 0808 	add.w	r8, r8, #8
   82c7a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   82c7c:	3701      	adds	r7, #1
   82c7e:	4414      	add	r4, r2
   82c80:	ab21      	add	r3, sp, #132	; 0x84
   82c82:	2f07      	cmp	r7, #7
   82c84:	9427      	str	r4, [sp, #156]	; 0x9c
   82c86:	9726      	str	r7, [sp, #152]	; 0x98
   82c88:	f8c8 2004 	str.w	r2, [r8, #4]
   82c8c:	f8c8 3000 	str.w	r3, [r8]
   82c90:	f77f acc4 	ble.w	8261c <_svfprintf_r+0x3e0>
   82c94:	aa25      	add	r2, sp, #148	; 0x94
   82c96:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c98:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c9a:	f002 fbeb 	bl	85474 <__ssprint_r>
   82c9e:	2800      	cmp	r0, #0
   82ca0:	f47f aba9 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82ca4:	46c8      	mov	r8, r9
   82ca6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82ca8:	e4ba      	b.n	82620 <_svfprintf_r+0x3e4>
   82caa:	aa25      	add	r2, sp, #148	; 0x94
   82cac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82cae:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cb0:	f002 fbe0 	bl	85474 <__ssprint_r>
   82cb4:	2800      	cmp	r0, #0
   82cb6:	f43f acfd 	beq.w	826b4 <_svfprintf_r+0x478>
   82cba:	f7ff bb9c 	b.w	823f6 <_svfprintf_r+0x1ba>
   82cbe:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82cc2:	2b01      	cmp	r3, #1
   82cc4:	f000 817e 	beq.w	82fc4 <_svfprintf_r+0xd88>
   82cc8:	2b02      	cmp	r3, #2
   82cca:	d171      	bne.n	82db0 <_svfprintf_r+0xb74>
   82ccc:	f8cd b01c 	str.w	fp, [sp, #28]
   82cd0:	2400      	movs	r4, #0
   82cd2:	2500      	movs	r5, #0
   82cd4:	e5d4      	b.n	82880 <_svfprintf_r+0x644>
   82cd6:	aa25      	add	r2, sp, #148	; 0x94
   82cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82cda:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cdc:	f002 fbca 	bl	85474 <__ssprint_r>
   82ce0:	2800      	cmp	r0, #0
   82ce2:	f47f ab88 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82ce6:	46c8      	mov	r8, r9
   82ce8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82cea:	e486      	b.n	825fa <_svfprintf_r+0x3be>
   82cec:	aa25      	add	r2, sp, #148	; 0x94
   82cee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82cf0:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cf2:	f002 fbbf 	bl	85474 <__ssprint_r>
   82cf6:	2800      	cmp	r0, #0
   82cf8:	f47f ab7d 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82cfc:	46c8      	mov	r8, r9
   82cfe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d00:	e429      	b.n	82556 <_svfprintf_r+0x31a>
   82d02:	2001      	movs	r0, #1
   82d04:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82d06:	4a2d      	ldr	r2, [pc, #180]	; (82dbc <_svfprintf_r+0xb80>)
   82d08:	4403      	add	r3, r0
   82d0a:	4404      	add	r4, r0
   82d0c:	2b07      	cmp	r3, #7
   82d0e:	9427      	str	r4, [sp, #156]	; 0x9c
   82d10:	9326      	str	r3, [sp, #152]	; 0x98
   82d12:	f8c8 0004 	str.w	r0, [r8, #4]
   82d16:	f8c8 2000 	str.w	r2, [r8]
   82d1a:	f340 82d8 	ble.w	832ce <_svfprintf_r+0x1092>
   82d1e:	aa25      	add	r2, sp, #148	; 0x94
   82d20:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d22:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d24:	f002 fba6 	bl	85474 <__ssprint_r>
   82d28:	2800      	cmp	r0, #0
   82d2a:	f47f ab64 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82d2e:	46c8      	mov	r8, r9
   82d30:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82d32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d34:	b929      	cbnz	r1, 82d42 <_svfprintf_r+0xb06>
   82d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82d38:	b91b      	cbnz	r3, 82d42 <_svfprintf_r+0xb06>
   82d3a:	9b07      	ldr	r3, [sp, #28]
   82d3c:	07d8      	lsls	r0, r3, #31
   82d3e:	f57f ac6f 	bpl.w	82620 <_svfprintf_r+0x3e4>
   82d42:	9819      	ldr	r0, [sp, #100]	; 0x64
   82d44:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82d46:	4602      	mov	r2, r0
   82d48:	3301      	adds	r3, #1
   82d4a:	4422      	add	r2, r4
   82d4c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   82d4e:	2b07      	cmp	r3, #7
   82d50:	9227      	str	r2, [sp, #156]	; 0x9c
   82d52:	f8c8 4000 	str.w	r4, [r8]
   82d56:	f8c8 0004 	str.w	r0, [r8, #4]
   82d5a:	9326      	str	r3, [sp, #152]	; 0x98
   82d5c:	f300 8431 	bgt.w	835c2 <_svfprintf_r+0x1386>
   82d60:	f108 0808 	add.w	r8, r8, #8
   82d64:	2900      	cmp	r1, #0
   82d66:	f2c0 8409 	blt.w	8357c <_svfprintf_r+0x1340>
   82d6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   82d6c:	3301      	adds	r3, #1
   82d6e:	188c      	adds	r4, r1, r2
   82d70:	2b07      	cmp	r3, #7
   82d72:	9427      	str	r4, [sp, #156]	; 0x9c
   82d74:	9326      	str	r3, [sp, #152]	; 0x98
   82d76:	f8c8 6000 	str.w	r6, [r8]
   82d7a:	f8c8 1004 	str.w	r1, [r8, #4]
   82d7e:	f77f ac4d 	ble.w	8261c <_svfprintf_r+0x3e0>
   82d82:	aa25      	add	r2, sp, #148	; 0x94
   82d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d86:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d88:	f002 fb74 	bl	85474 <__ssprint_r>
   82d8c:	2800      	cmp	r0, #0
   82d8e:	f47f ab32 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82d92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d94:	46c8      	mov	r8, r9
   82d96:	e443      	b.n	82620 <_svfprintf_r+0x3e4>
   82d98:	aa25      	add	r2, sp, #148	; 0x94
   82d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d9c:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d9e:	f002 fb69 	bl	85474 <__ssprint_r>
   82da2:	2800      	cmp	r0, #0
   82da4:	f47f ab27 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82da8:	46c8      	mov	r8, r9
   82daa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82dac:	f7ff bbe5 	b.w	8257a <_svfprintf_r+0x33e>
   82db0:	2400      	movs	r4, #0
   82db2:	2500      	movs	r5, #0
   82db4:	f8cd b01c 	str.w	fp, [sp, #28]
   82db8:	4649      	mov	r1, r9
   82dba:	e004      	b.n	82dc6 <_svfprintf_r+0xb8a>
   82dbc:	000863e0 	.word	0x000863e0
   82dc0:	000863f4 	.word	0x000863f4
   82dc4:	4631      	mov	r1, r6
   82dc6:	08e2      	lsrs	r2, r4, #3
   82dc8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   82dcc:	08e8      	lsrs	r0, r5, #3
   82dce:	f004 0307 	and.w	r3, r4, #7
   82dd2:	4605      	mov	r5, r0
   82dd4:	4614      	mov	r4, r2
   82dd6:	3330      	adds	r3, #48	; 0x30
   82dd8:	ea54 0205 	orrs.w	r2, r4, r5
   82ddc:	f801 3c01 	strb.w	r3, [r1, #-1]
   82de0:	f101 36ff 	add.w	r6, r1, #4294967295
   82de4:	d1ee      	bne.n	82dc4 <_svfprintf_r+0xb88>
   82de6:	9a07      	ldr	r2, [sp, #28]
   82de8:	07d2      	lsls	r2, r2, #31
   82dea:	f57f ad59 	bpl.w	828a0 <_svfprintf_r+0x664>
   82dee:	2b30      	cmp	r3, #48	; 0x30
   82df0:	f43f ad56 	beq.w	828a0 <_svfprintf_r+0x664>
   82df4:	2330      	movs	r3, #48	; 0x30
   82df6:	3902      	subs	r1, #2
   82df8:	f806 3c01 	strb.w	r3, [r6, #-1]
   82dfc:	eba9 0301 	sub.w	r3, r9, r1
   82e00:	930e      	str	r3, [sp, #56]	; 0x38
   82e02:	460e      	mov	r6, r1
   82e04:	f7ff bb36 	b.w	82474 <_svfprintf_r+0x238>
   82e08:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82e0a:	2900      	cmp	r1, #0
   82e0c:	f77f af79 	ble.w	82d02 <_svfprintf_r+0xac6>
   82e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82e12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82e14:	4293      	cmp	r3, r2
   82e16:	bfa8      	it	ge
   82e18:	4613      	movge	r3, r2
   82e1a:	2b00      	cmp	r3, #0
   82e1c:	461f      	mov	r7, r3
   82e1e:	dd0b      	ble.n	82e38 <_svfprintf_r+0xbfc>
   82e20:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e22:	443c      	add	r4, r7
   82e24:	3301      	adds	r3, #1
   82e26:	2b07      	cmp	r3, #7
   82e28:	9427      	str	r4, [sp, #156]	; 0x9c
   82e2a:	e888 00c0 	stmia.w	r8, {r6, r7}
   82e2e:	9326      	str	r3, [sp, #152]	; 0x98
   82e30:	f300 82fb 	bgt.w	8342a <_svfprintf_r+0x11ee>
   82e34:	f108 0808 	add.w	r8, r8, #8
   82e38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82e3a:	2f00      	cmp	r7, #0
   82e3c:	bfa8      	it	ge
   82e3e:	1bdb      	subge	r3, r3, r7
   82e40:	2b00      	cmp	r3, #0
   82e42:	461f      	mov	r7, r3
   82e44:	f340 80d7 	ble.w	82ff6 <_svfprintf_r+0xdba>
   82e48:	2b10      	cmp	r3, #16
   82e4a:	f340 8434 	ble.w	836b6 <_svfprintf_r+0x147a>
   82e4e:	4dba      	ldr	r5, [pc, #744]	; (83138 <_svfprintf_r+0xefc>)
   82e50:	4642      	mov	r2, r8
   82e52:	4621      	mov	r1, r4
   82e54:	46b0      	mov	r8, r6
   82e56:	f04f 0b10 	mov.w	fp, #16
   82e5a:	462e      	mov	r6, r5
   82e5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82e60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82e62:	e004      	b.n	82e6e <_svfprintf_r+0xc32>
   82e64:	3208      	adds	r2, #8
   82e66:	3f10      	subs	r7, #16
   82e68:	2f10      	cmp	r7, #16
   82e6a:	f340 80b5 	ble.w	82fd8 <_svfprintf_r+0xd9c>
   82e6e:	3301      	adds	r3, #1
   82e70:	3110      	adds	r1, #16
   82e72:	2b07      	cmp	r3, #7
   82e74:	9127      	str	r1, [sp, #156]	; 0x9c
   82e76:	9326      	str	r3, [sp, #152]	; 0x98
   82e78:	e882 0840 	stmia.w	r2, {r6, fp}
   82e7c:	ddf2      	ble.n	82e64 <_svfprintf_r+0xc28>
   82e7e:	aa25      	add	r2, sp, #148	; 0x94
   82e80:	4629      	mov	r1, r5
   82e82:	4620      	mov	r0, r4
   82e84:	f002 faf6 	bl	85474 <__ssprint_r>
   82e88:	2800      	cmp	r0, #0
   82e8a:	f47f aab4 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82e8e:	464a      	mov	r2, r9
   82e90:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e94:	e7e7      	b.n	82e66 <_svfprintf_r+0xc2a>
   82e96:	2d00      	cmp	r5, #0
   82e98:	bf08      	it	eq
   82e9a:	2c0a      	cmpeq	r4, #10
   82e9c:	f0c0 8090 	bcc.w	82fc0 <_svfprintf_r+0xd84>
   82ea0:	464e      	mov	r6, r9
   82ea2:	4620      	mov	r0, r4
   82ea4:	4629      	mov	r1, r5
   82ea6:	220a      	movs	r2, #10
   82ea8:	2300      	movs	r3, #0
   82eaa:	f003 f88f 	bl	85fcc <__aeabi_uldivmod>
   82eae:	3230      	adds	r2, #48	; 0x30
   82eb0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   82eb4:	4620      	mov	r0, r4
   82eb6:	4629      	mov	r1, r5
   82eb8:	2300      	movs	r3, #0
   82eba:	220a      	movs	r2, #10
   82ebc:	f003 f886 	bl	85fcc <__aeabi_uldivmod>
   82ec0:	4604      	mov	r4, r0
   82ec2:	460d      	mov	r5, r1
   82ec4:	ea54 0305 	orrs.w	r3, r4, r5
   82ec8:	d1eb      	bne.n	82ea2 <_svfprintf_r+0xc66>
   82eca:	eba9 0306 	sub.w	r3, r9, r6
   82ece:	930e      	str	r3, [sp, #56]	; 0x38
   82ed0:	f7ff bad0 	b.w	82474 <_svfprintf_r+0x238>
   82ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82ed6:	464e      	mov	r6, r9
   82ed8:	930e      	str	r3, [sp, #56]	; 0x38
   82eda:	f7ff bacb 	b.w	82474 <_svfprintf_r+0x238>
   82ede:	1e5e      	subs	r6, r3, #1
   82ee0:	2e00      	cmp	r6, #0
   82ee2:	f77f aeca 	ble.w	82c7a <_svfprintf_r+0xa3e>
   82ee6:	2e10      	cmp	r6, #16
   82ee8:	f340 83e3 	ble.w	836b2 <_svfprintf_r+0x1476>
   82eec:	4622      	mov	r2, r4
   82eee:	f04f 0b10 	mov.w	fp, #16
   82ef2:	4d91      	ldr	r5, [pc, #580]	; (83138 <_svfprintf_r+0xefc>)
   82ef4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82ef6:	e004      	b.n	82f02 <_svfprintf_r+0xcc6>
   82ef8:	3e10      	subs	r6, #16
   82efa:	2e10      	cmp	r6, #16
   82efc:	f108 0808 	add.w	r8, r8, #8
   82f00:	dd15      	ble.n	82f2e <_svfprintf_r+0xcf2>
   82f02:	3701      	adds	r7, #1
   82f04:	3210      	adds	r2, #16
   82f06:	2f07      	cmp	r7, #7
   82f08:	9227      	str	r2, [sp, #156]	; 0x9c
   82f0a:	9726      	str	r7, [sp, #152]	; 0x98
   82f0c:	e888 0820 	stmia.w	r8, {r5, fp}
   82f10:	ddf2      	ble.n	82ef8 <_svfprintf_r+0xcbc>
   82f12:	aa25      	add	r2, sp, #148	; 0x94
   82f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82f16:	4620      	mov	r0, r4
   82f18:	f002 faac 	bl	85474 <__ssprint_r>
   82f1c:	2800      	cmp	r0, #0
   82f1e:	f47f aa6a 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82f22:	3e10      	subs	r6, #16
   82f24:	2e10      	cmp	r6, #16
   82f26:	46c8      	mov	r8, r9
   82f28:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82f2a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82f2c:	dce9      	bgt.n	82f02 <_svfprintf_r+0xcc6>
   82f2e:	4614      	mov	r4, r2
   82f30:	3701      	adds	r7, #1
   82f32:	4434      	add	r4, r6
   82f34:	2f07      	cmp	r7, #7
   82f36:	9427      	str	r4, [sp, #156]	; 0x9c
   82f38:	9726      	str	r7, [sp, #152]	; 0x98
   82f3a:	e888 0060 	stmia.w	r8, {r5, r6}
   82f3e:	f77f ae9a 	ble.w	82c76 <_svfprintf_r+0xa3a>
   82f42:	aa25      	add	r2, sp, #148	; 0x94
   82f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82f46:	980c      	ldr	r0, [sp, #48]	; 0x30
   82f48:	f002 fa94 	bl	85474 <__ssprint_r>
   82f4c:	2800      	cmp	r0, #0
   82f4e:	f47f aa52 	bne.w	823f6 <_svfprintf_r+0x1ba>
   82f52:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82f54:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82f56:	46c8      	mov	r8, r9
   82f58:	e68f      	b.n	82c7a <_svfprintf_r+0xa3e>
   82f5a:	3204      	adds	r2, #4
   82f5c:	681c      	ldr	r4, [r3, #0]
   82f5e:	2500      	movs	r5, #0
   82f60:	2301      	movs	r3, #1
   82f62:	920f      	str	r2, [sp, #60]	; 0x3c
   82f64:	f7ff ba68 	b.w	82438 <_svfprintf_r+0x1fc>
   82f68:	681c      	ldr	r4, [r3, #0]
   82f6a:	3304      	adds	r3, #4
   82f6c:	930f      	str	r3, [sp, #60]	; 0x3c
   82f6e:	2500      	movs	r5, #0
   82f70:	e42a      	b.n	827c8 <_svfprintf_r+0x58c>
   82f72:	681c      	ldr	r4, [r3, #0]
   82f74:	3304      	adds	r3, #4
   82f76:	17e5      	asrs	r5, r4, #31
   82f78:	4622      	mov	r2, r4
   82f7a:	930f      	str	r3, [sp, #60]	; 0x3c
   82f7c:	462b      	mov	r3, r5
   82f7e:	2a00      	cmp	r2, #0
   82f80:	f173 0300 	sbcs.w	r3, r3, #0
   82f84:	f6bf ac68 	bge.w	82858 <_svfprintf_r+0x61c>
   82f88:	272d      	movs	r7, #45	; 0x2d
   82f8a:	4264      	negs	r4, r4
   82f8c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82f90:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   82f94:	2301      	movs	r3, #1
   82f96:	f7ff ba53 	b.w	82440 <_svfprintf_r+0x204>
   82f9a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82f9c:	2500      	movs	r5, #0
   82f9e:	460a      	mov	r2, r1
   82fa0:	3204      	adds	r2, #4
   82fa2:	680c      	ldr	r4, [r1, #0]
   82fa4:	920f      	str	r2, [sp, #60]	; 0x3c
   82fa6:	f7ff ba47 	b.w	82438 <_svfprintf_r+0x1fc>
   82faa:	4614      	mov	r4, r2
   82fac:	3301      	adds	r3, #1
   82fae:	4434      	add	r4, r6
   82fb0:	2b07      	cmp	r3, #7
   82fb2:	9427      	str	r4, [sp, #156]	; 0x9c
   82fb4:	9326      	str	r3, [sp, #152]	; 0x98
   82fb6:	e888 0060 	stmia.w	r8, {r5, r6}
   82fba:	f77f ab2f 	ble.w	8261c <_svfprintf_r+0x3e0>
   82fbe:	e6e0      	b.n	82d82 <_svfprintf_r+0xb46>
   82fc0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82fc4:	2301      	movs	r3, #1
   82fc6:	ae42      	add	r6, sp, #264	; 0x108
   82fc8:	3430      	adds	r4, #48	; 0x30
   82fca:	f8cd b01c 	str.w	fp, [sp, #28]
   82fce:	f806 4d41 	strb.w	r4, [r6, #-65]!
   82fd2:	930e      	str	r3, [sp, #56]	; 0x38
   82fd4:	f7ff ba4e 	b.w	82474 <_svfprintf_r+0x238>
   82fd8:	4635      	mov	r5, r6
   82fda:	460c      	mov	r4, r1
   82fdc:	4646      	mov	r6, r8
   82fde:	4690      	mov	r8, r2
   82fe0:	3301      	adds	r3, #1
   82fe2:	443c      	add	r4, r7
   82fe4:	2b07      	cmp	r3, #7
   82fe6:	9427      	str	r4, [sp, #156]	; 0x9c
   82fe8:	9326      	str	r3, [sp, #152]	; 0x98
   82fea:	e888 00a0 	stmia.w	r8, {r5, r7}
   82fee:	f300 8246 	bgt.w	8347e <_svfprintf_r+0x1242>
   82ff2:	f108 0808 	add.w	r8, r8, #8
   82ff6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   82ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82ffa:	429a      	cmp	r2, r3
   82ffc:	db45      	blt.n	8308a <_svfprintf_r+0xe4e>
   82ffe:	9b07      	ldr	r3, [sp, #28]
   83000:	07d9      	lsls	r1, r3, #31
   83002:	d442      	bmi.n	8308a <_svfprintf_r+0xe4e>
   83004:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83006:	9812      	ldr	r0, [sp, #72]	; 0x48
   83008:	1a9a      	subs	r2, r3, r2
   8300a:	1a1d      	subs	r5, r3, r0
   8300c:	4295      	cmp	r5, r2
   8300e:	bfa8      	it	ge
   83010:	4615      	movge	r5, r2
   83012:	2d00      	cmp	r5, #0
   83014:	dd0e      	ble.n	83034 <_svfprintf_r+0xdf8>
   83016:	9926      	ldr	r1, [sp, #152]	; 0x98
   83018:	4406      	add	r6, r0
   8301a:	3101      	adds	r1, #1
   8301c:	442c      	add	r4, r5
   8301e:	2907      	cmp	r1, #7
   83020:	f8c8 6000 	str.w	r6, [r8]
   83024:	9427      	str	r4, [sp, #156]	; 0x9c
   83026:	f8c8 5004 	str.w	r5, [r8, #4]
   8302a:	9126      	str	r1, [sp, #152]	; 0x98
   8302c:	f300 8216 	bgt.w	8345c <_svfprintf_r+0x1220>
   83030:	f108 0808 	add.w	r8, r8, #8
   83034:	2d00      	cmp	r5, #0
   83036:	bfb4      	ite	lt
   83038:	4616      	movlt	r6, r2
   8303a:	1b56      	subge	r6, r2, r5
   8303c:	2e00      	cmp	r6, #0
   8303e:	f77f aaef 	ble.w	82620 <_svfprintf_r+0x3e4>
   83042:	2e10      	cmp	r6, #16
   83044:	f340 82f3 	ble.w	8362e <_svfprintf_r+0x13f2>
   83048:	4622      	mov	r2, r4
   8304a:	2710      	movs	r7, #16
   8304c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8304e:	4d3a      	ldr	r5, [pc, #232]	; (83138 <_svfprintf_r+0xefc>)
   83050:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83054:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83056:	e004      	b.n	83062 <_svfprintf_r+0xe26>
   83058:	f108 0808 	add.w	r8, r8, #8
   8305c:	3e10      	subs	r6, #16
   8305e:	2e10      	cmp	r6, #16
   83060:	dda3      	ble.n	82faa <_svfprintf_r+0xd6e>
   83062:	3301      	adds	r3, #1
   83064:	3210      	adds	r2, #16
   83066:	2b07      	cmp	r3, #7
   83068:	9227      	str	r2, [sp, #156]	; 0x9c
   8306a:	9326      	str	r3, [sp, #152]	; 0x98
   8306c:	e888 00a0 	stmia.w	r8, {r5, r7}
   83070:	ddf2      	ble.n	83058 <_svfprintf_r+0xe1c>
   83072:	aa25      	add	r2, sp, #148	; 0x94
   83074:	4621      	mov	r1, r4
   83076:	4658      	mov	r0, fp
   83078:	f002 f9fc 	bl	85474 <__ssprint_r>
   8307c:	2800      	cmp	r0, #0
   8307e:	f47f a9ba 	bne.w	823f6 <_svfprintf_r+0x1ba>
   83082:	46c8      	mov	r8, r9
   83084:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83086:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83088:	e7e8      	b.n	8305c <_svfprintf_r+0xe20>
   8308a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8308c:	9819      	ldr	r0, [sp, #100]	; 0x64
   8308e:	3301      	adds	r3, #1
   83090:	991a      	ldr	r1, [sp, #104]	; 0x68
   83092:	4404      	add	r4, r0
   83094:	2b07      	cmp	r3, #7
   83096:	9427      	str	r4, [sp, #156]	; 0x9c
   83098:	f8c8 1000 	str.w	r1, [r8]
   8309c:	f8c8 0004 	str.w	r0, [r8, #4]
   830a0:	9326      	str	r3, [sp, #152]	; 0x98
   830a2:	f300 81cf 	bgt.w	83444 <_svfprintf_r+0x1208>
   830a6:	f108 0808 	add.w	r8, r8, #8
   830aa:	e7ab      	b.n	83004 <_svfprintf_r+0xdc8>
   830ac:	9b07      	ldr	r3, [sp, #28]
   830ae:	07da      	lsls	r2, r3, #31
   830b0:	f53f adad 	bmi.w	82c0e <_svfprintf_r+0x9d2>
   830b4:	2301      	movs	r3, #1
   830b6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830b8:	441c      	add	r4, r3
   830ba:	441f      	add	r7, r3
   830bc:	2f07      	cmp	r7, #7
   830be:	9427      	str	r4, [sp, #156]	; 0x9c
   830c0:	f8c8 6000 	str.w	r6, [r8]
   830c4:	9726      	str	r7, [sp, #152]	; 0x98
   830c6:	f8c8 3004 	str.w	r3, [r8, #4]
   830ca:	f77f add4 	ble.w	82c76 <_svfprintf_r+0xa3a>
   830ce:	aa25      	add	r2, sp, #148	; 0x94
   830d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830d2:	980c      	ldr	r0, [sp, #48]	; 0x30
   830d4:	f002 f9ce 	bl	85474 <__ssprint_r>
   830d8:	2800      	cmp	r0, #0
   830da:	f47f a98c 	bne.w	823f6 <_svfprintf_r+0x1ba>
   830de:	46c8      	mov	r8, r9
   830e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830e2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830e4:	e5c9      	b.n	82c7a <_svfprintf_r+0xa3e>
   830e6:	aa25      	add	r2, sp, #148	; 0x94
   830e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   830ec:	f002 f9c2 	bl	85474 <__ssprint_r>
   830f0:	2800      	cmp	r0, #0
   830f2:	f47f a980 	bne.w	823f6 <_svfprintf_r+0x1ba>
   830f6:	46c8      	mov	r8, r9
   830f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830fa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830fc:	e596      	b.n	82c2c <_svfprintf_r+0x9f0>
   830fe:	aa25      	add	r2, sp, #148	; 0x94
   83100:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83102:	980c      	ldr	r0, [sp, #48]	; 0x30
   83104:	f002 f9b6 	bl	85474 <__ssprint_r>
   83108:	2800      	cmp	r0, #0
   8310a:	f47f a974 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8310e:	46c8      	mov	r8, r9
   83110:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83112:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83114:	e599      	b.n	82c4a <_svfprintf_r+0xa0e>
   83116:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83118:	3407      	adds	r4, #7
   8311a:	f024 0407 	bic.w	r4, r4, #7
   8311e:	f104 0108 	add.w	r1, r4, #8
   83122:	e9d4 2300 	ldrd	r2, r3, [r4]
   83126:	910f      	str	r1, [sp, #60]	; 0x3c
   83128:	4614      	mov	r4, r2
   8312a:	461d      	mov	r5, r3
   8312c:	f7ff bb8f 	b.w	8284e <_svfprintf_r+0x612>
   83130:	464e      	mov	r6, r9
   83132:	f7ff b99f 	b.w	82474 <_svfprintf_r+0x238>
   83136:	bf00      	nop
   83138:	000863f4 	.word	0x000863f4
   8313c:	aa25      	add	r2, sp, #148	; 0x94
   8313e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83140:	980c      	ldr	r0, [sp, #48]	; 0x30
   83142:	f002 f997 	bl	85474 <__ssprint_r>
   83146:	2800      	cmp	r0, #0
   83148:	f47f a955 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8314c:	46c8      	mov	r8, r9
   8314e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83150:	f7ff ba16 	b.w	82580 <_svfprintf_r+0x344>
   83154:	9c15      	ldr	r4, [sp, #84]	; 0x54
   83156:	4622      	mov	r2, r4
   83158:	4620      	mov	r0, r4
   8315a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   8315c:	4623      	mov	r3, r4
   8315e:	4621      	mov	r1, r4
   83160:	f002 fef6 	bl	85f50 <__aeabi_dcmpun>
   83164:	2800      	cmp	r0, #0
   83166:	f040 8273 	bne.w	83650 <_svfprintf_r+0x1414>
   8316a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8316c:	3301      	adds	r3, #1
   8316e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83170:	f023 0320 	bic.w	r3, r3, #32
   83174:	930e      	str	r3, [sp, #56]	; 0x38
   83176:	f000 819c 	beq.w	834b2 <_svfprintf_r+0x1276>
   8317a:	2b47      	cmp	r3, #71	; 0x47
   8317c:	f000 80d6 	beq.w	8332c <_svfprintf_r+0x10f0>
   83180:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   83184:	9307      	str	r3, [sp, #28]
   83186:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83188:	1e1f      	subs	r7, r3, #0
   8318a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8318c:	9308      	str	r3, [sp, #32]
   8318e:	bfb7      	itett	lt
   83190:	463b      	movlt	r3, r7
   83192:	2300      	movge	r3, #0
   83194:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   83198:	232d      	movlt	r3, #45	; 0x2d
   8319a:	9310      	str	r3, [sp, #64]	; 0x40
   8319c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8319e:	2b66      	cmp	r3, #102	; 0x66
   831a0:	f000 8190 	beq.w	834c4 <_svfprintf_r+0x1288>
   831a4:	2b46      	cmp	r3, #70	; 0x46
   831a6:	f000 80a4 	beq.w	832f2 <_svfprintf_r+0x10b6>
   831aa:	2002      	movs	r0, #2
   831ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   831ae:	a923      	add	r1, sp, #140	; 0x8c
   831b0:	2b45      	cmp	r3, #69	; 0x45
   831b2:	bf0a      	itet	eq
   831b4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   831b6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   831b8:	1c5d      	addeq	r5, r3, #1
   831ba:	e88d 0021 	stmia.w	sp, {r0, r5}
   831be:	9104      	str	r1, [sp, #16]
   831c0:	a820      	add	r0, sp, #128	; 0x80
   831c2:	a91f      	add	r1, sp, #124	; 0x7c
   831c4:	463b      	mov	r3, r7
   831c6:	9003      	str	r0, [sp, #12]
   831c8:	9a08      	ldr	r2, [sp, #32]
   831ca:	9102      	str	r1, [sp, #8]
   831cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   831ce:	f000 fb5b 	bl	83888 <_dtoa_r>
   831d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831d4:	4606      	mov	r6, r0
   831d6:	2b67      	cmp	r3, #103	; 0x67
   831d8:	f040 81ba 	bne.w	83550 <_svfprintf_r+0x1314>
   831dc:	f01b 0f01 	tst.w	fp, #1
   831e0:	f000 8223 	beq.w	8362a <_svfprintf_r+0x13ee>
   831e4:	1974      	adds	r4, r6, r5
   831e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   831e8:	9808      	ldr	r0, [sp, #32]
   831ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   831ec:	4639      	mov	r1, r7
   831ee:	f002 fe7d 	bl	85eec <__aeabi_dcmpeq>
   831f2:	2800      	cmp	r0, #0
   831f4:	f040 8124 	bne.w	83440 <_svfprintf_r+0x1204>
   831f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   831fa:	42a3      	cmp	r3, r4
   831fc:	d206      	bcs.n	8320c <_svfprintf_r+0xfd0>
   831fe:	2130      	movs	r1, #48	; 0x30
   83200:	1c5a      	adds	r2, r3, #1
   83202:	9223      	str	r2, [sp, #140]	; 0x8c
   83204:	7019      	strb	r1, [r3, #0]
   83206:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83208:	429c      	cmp	r4, r3
   8320a:	d8f9      	bhi.n	83200 <_svfprintf_r+0xfc4>
   8320c:	1b9b      	subs	r3, r3, r6
   8320e:	9313      	str	r3, [sp, #76]	; 0x4c
   83210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83212:	2b47      	cmp	r3, #71	; 0x47
   83214:	f000 80a2 	beq.w	8335c <_svfprintf_r+0x1120>
   83218:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8321a:	2b65      	cmp	r3, #101	; 0x65
   8321c:	f340 81a7 	ble.w	8356e <_svfprintf_r+0x1332>
   83220:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83222:	2b66      	cmp	r3, #102	; 0x66
   83224:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   83226:	9312      	str	r3, [sp, #72]	; 0x48
   83228:	f000 8171 	beq.w	8350e <_svfprintf_r+0x12d2>
   8322c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8322e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   83230:	4619      	mov	r1, r3
   83232:	4291      	cmp	r1, r2
   83234:	f300 815d 	bgt.w	834f2 <_svfprintf_r+0x12b6>
   83238:	f01b 0f01 	tst.w	fp, #1
   8323c:	f040 81f0 	bne.w	83620 <_svfprintf_r+0x13e4>
   83240:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83244:	9308      	str	r3, [sp, #32]
   83246:	2367      	movs	r3, #103	; 0x67
   83248:	920e      	str	r2, [sp, #56]	; 0x38
   8324a:	9311      	str	r3, [sp, #68]	; 0x44
   8324c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8324e:	2b00      	cmp	r3, #0
   83250:	d17d      	bne.n	8334e <_svfprintf_r+0x1112>
   83252:	930a      	str	r3, [sp, #40]	; 0x28
   83254:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83258:	f7ff b914 	b.w	82484 <_svfprintf_r+0x248>
   8325c:	f024 0407 	bic.w	r4, r4, #7
   83260:	6823      	ldr	r3, [r4, #0]
   83262:	9315      	str	r3, [sp, #84]	; 0x54
   83264:	6863      	ldr	r3, [r4, #4]
   83266:	9314      	str	r3, [sp, #80]	; 0x50
   83268:	f104 0308 	add.w	r3, r4, #8
   8326c:	930f      	str	r3, [sp, #60]	; 0x3c
   8326e:	f7ff bb2f 	b.w	828d0 <_svfprintf_r+0x694>
   83272:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83274:	6813      	ldr	r3, [r2, #0]
   83276:	3204      	adds	r2, #4
   83278:	920f      	str	r2, [sp, #60]	; 0x3c
   8327a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8327c:	601a      	str	r2, [r3, #0]
   8327e:	f7ff b804 	b.w	8228a <_svfprintf_r+0x4e>
   83282:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83284:	4daf      	ldr	r5, [pc, #700]	; (83544 <_svfprintf_r+0x1308>)
   83286:	f7ff b9ad 	b.w	825e4 <_svfprintf_r+0x3a8>
   8328a:	aa25      	add	r2, sp, #148	; 0x94
   8328c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8328e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83290:	f002 f8f0 	bl	85474 <__ssprint_r>
   83294:	2800      	cmp	r0, #0
   83296:	f47f a8ae 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8329a:	46c8      	mov	r8, r9
   8329c:	e431      	b.n	82b02 <_svfprintf_r+0x8c6>
   8329e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   832a0:	4613      	mov	r3, r2
   832a2:	3304      	adds	r3, #4
   832a4:	930f      	str	r3, [sp, #60]	; 0x3c
   832a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   832a8:	6811      	ldr	r1, [r2, #0]
   832aa:	17dd      	asrs	r5, r3, #31
   832ac:	461a      	mov	r2, r3
   832ae:	462b      	mov	r3, r5
   832b0:	e9c1 2300 	strd	r2, r3, [r1]
   832b4:	f7fe bfe9 	b.w	8228a <_svfprintf_r+0x4e>
   832b8:	aa25      	add	r2, sp, #148	; 0x94
   832ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   832bc:	980c      	ldr	r0, [sp, #48]	; 0x30
   832be:	f002 f8d9 	bl	85474 <__ssprint_r>
   832c2:	2800      	cmp	r0, #0
   832c4:	f47f a897 	bne.w	823f6 <_svfprintf_r+0x1ba>
   832c8:	46c8      	mov	r8, r9
   832ca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   832cc:	e432      	b.n	82b34 <_svfprintf_r+0x8f8>
   832ce:	f108 0808 	add.w	r8, r8, #8
   832d2:	e52f      	b.n	82d34 <_svfprintf_r+0xaf8>
   832d4:	2140      	movs	r1, #64	; 0x40
   832d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   832d8:	f7fe fbd8 	bl	81a8c <_malloc_r>
   832dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   832de:	6010      	str	r0, [r2, #0]
   832e0:	6110      	str	r0, [r2, #16]
   832e2:	2800      	cmp	r0, #0
   832e4:	f000 8214 	beq.w	83710 <_svfprintf_r+0x14d4>
   832e8:	2340      	movs	r3, #64	; 0x40
   832ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   832ec:	6153      	str	r3, [r2, #20]
   832ee:	f7fe bfbc 	b.w	8226a <_svfprintf_r+0x2e>
   832f2:	2003      	movs	r0, #3
   832f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   832f6:	a923      	add	r1, sp, #140	; 0x8c
   832f8:	e88d 0011 	stmia.w	sp, {r0, r4}
   832fc:	9104      	str	r1, [sp, #16]
   832fe:	a820      	add	r0, sp, #128	; 0x80
   83300:	a91f      	add	r1, sp, #124	; 0x7c
   83302:	9003      	str	r0, [sp, #12]
   83304:	9a08      	ldr	r2, [sp, #32]
   83306:	463b      	mov	r3, r7
   83308:	9102      	str	r1, [sp, #8]
   8330a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8330c:	f000 fabc 	bl	83888 <_dtoa_r>
   83310:	4625      	mov	r5, r4
   83312:	4606      	mov	r6, r0
   83314:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83316:	1974      	adds	r4, r6, r5
   83318:	2b46      	cmp	r3, #70	; 0x46
   8331a:	f47f af64 	bne.w	831e6 <_svfprintf_r+0xfaa>
   8331e:	7833      	ldrb	r3, [r6, #0]
   83320:	2b30      	cmp	r3, #48	; 0x30
   83322:	f000 8187 	beq.w	83634 <_svfprintf_r+0x13f8>
   83326:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   83328:	442c      	add	r4, r5
   8332a:	e75c      	b.n	831e6 <_svfprintf_r+0xfaa>
   8332c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8332e:	2b00      	cmp	r3, #0
   83330:	bf08      	it	eq
   83332:	2301      	moveq	r3, #1
   83334:	930a      	str	r3, [sp, #40]	; 0x28
   83336:	e723      	b.n	83180 <_svfprintf_r+0xf44>
   83338:	4630      	mov	r0, r6
   8333a:	950a      	str	r5, [sp, #40]	; 0x28
   8333c:	f7fe ff50 	bl	821e0 <strlen>
   83340:	940f      	str	r4, [sp, #60]	; 0x3c
   83342:	900e      	str	r0, [sp, #56]	; 0x38
   83344:	f8cd b01c 	str.w	fp, [sp, #28]
   83348:	4603      	mov	r3, r0
   8334a:	f7ff b9e7 	b.w	8271c <_svfprintf_r+0x4e0>
   8334e:	272d      	movs	r7, #45	; 0x2d
   83350:	2300      	movs	r3, #0
   83352:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   83356:	930a      	str	r3, [sp, #40]	; 0x28
   83358:	f7ff b895 	b.w	82486 <_svfprintf_r+0x24a>
   8335c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8335e:	461a      	mov	r2, r3
   83360:	9312      	str	r3, [sp, #72]	; 0x48
   83362:	3303      	adds	r3, #3
   83364:	db04      	blt.n	83370 <_svfprintf_r+0x1134>
   83366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83368:	4619      	mov	r1, r3
   8336a:	4291      	cmp	r1, r2
   8336c:	f6bf af5e 	bge.w	8322c <_svfprintf_r+0xff0>
   83370:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83372:	3b02      	subs	r3, #2
   83374:	9311      	str	r3, [sp, #68]	; 0x44
   83376:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83378:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   8337c:	3b01      	subs	r3, #1
   8337e:	2b00      	cmp	r3, #0
   83380:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   83384:	bfb4      	ite	lt
   83386:	222d      	movlt	r2, #45	; 0x2d
   83388:	222b      	movge	r2, #43	; 0x2b
   8338a:	931f      	str	r3, [sp, #124]	; 0x7c
   8338c:	bfb8      	it	lt
   8338e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   83390:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   83394:	bfb8      	it	lt
   83396:	f1c3 0301 	rsblt	r3, r3, #1
   8339a:	2b09      	cmp	r3, #9
   8339c:	f340 811f 	ble.w	835de <_svfprintf_r+0x13a2>
   833a0:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   833a4:	4601      	mov	r1, r0
   833a6:	4c68      	ldr	r4, [pc, #416]	; (83548 <_svfprintf_r+0x130c>)
   833a8:	e000      	b.n	833ac <_svfprintf_r+0x1170>
   833aa:	4611      	mov	r1, r2
   833ac:	fb84 5203 	smull	r5, r2, r4, r3
   833b0:	17dd      	asrs	r5, r3, #31
   833b2:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   833b6:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   833ba:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   833be:	3230      	adds	r2, #48	; 0x30
   833c0:	2d09      	cmp	r5, #9
   833c2:	f801 2c01 	strb.w	r2, [r1, #-1]
   833c6:	462b      	mov	r3, r5
   833c8:	f101 32ff 	add.w	r2, r1, #4294967295
   833cc:	dced      	bgt.n	833aa <_svfprintf_r+0x116e>
   833ce:	3330      	adds	r3, #48	; 0x30
   833d0:	3902      	subs	r1, #2
   833d2:	b2dc      	uxtb	r4, r3
   833d4:	4288      	cmp	r0, r1
   833d6:	f802 4c01 	strb.w	r4, [r2, #-1]
   833da:	f240 8192 	bls.w	83702 <_svfprintf_r+0x14c6>
   833de:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   833e2:	4613      	mov	r3, r2
   833e4:	e001      	b.n	833ea <_svfprintf_r+0x11ae>
   833e6:	f813 4b01 	ldrb.w	r4, [r3], #1
   833ea:	4283      	cmp	r3, r0
   833ec:	f801 4b01 	strb.w	r4, [r1], #1
   833f0:	d1f9      	bne.n	833e6 <_svfprintf_r+0x11aa>
   833f2:	3301      	adds	r3, #1
   833f4:	1a9b      	subs	r3, r3, r2
   833f6:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   833fa:	4413      	add	r3, r2
   833fc:	aa21      	add	r2, sp, #132	; 0x84
   833fe:	1a9b      	subs	r3, r3, r2
   83400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   83402:	931b      	str	r3, [sp, #108]	; 0x6c
   83404:	2a01      	cmp	r2, #1
   83406:	4413      	add	r3, r2
   83408:	930e      	str	r3, [sp, #56]	; 0x38
   8340a:	f340 8148 	ble.w	8369e <_svfprintf_r+0x1462>
   8340e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83410:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83412:	4413      	add	r3, r2
   83414:	930e      	str	r3, [sp, #56]	; 0x38
   83416:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8341a:	9308      	str	r3, [sp, #32]
   8341c:	2300      	movs	r3, #0
   8341e:	9312      	str	r3, [sp, #72]	; 0x48
   83420:	e714      	b.n	8324c <_svfprintf_r+0x1010>
   83422:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83424:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83426:	f7ff b876 	b.w	82516 <_svfprintf_r+0x2da>
   8342a:	aa25      	add	r2, sp, #148	; 0x94
   8342c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8342e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83430:	f002 f820 	bl	85474 <__ssprint_r>
   83434:	2800      	cmp	r0, #0
   83436:	f47e afde 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8343a:	46c8      	mov	r8, r9
   8343c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8343e:	e4fb      	b.n	82e38 <_svfprintf_r+0xbfc>
   83440:	4623      	mov	r3, r4
   83442:	e6e3      	b.n	8320c <_svfprintf_r+0xfd0>
   83444:	aa25      	add	r2, sp, #148	; 0x94
   83446:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83448:	980c      	ldr	r0, [sp, #48]	; 0x30
   8344a:	f002 f813 	bl	85474 <__ssprint_r>
   8344e:	2800      	cmp	r0, #0
   83450:	f47e afd1 	bne.w	823f6 <_svfprintf_r+0x1ba>
   83454:	46c8      	mov	r8, r9
   83456:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83458:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8345a:	e5d3      	b.n	83004 <_svfprintf_r+0xdc8>
   8345c:	aa25      	add	r2, sp, #148	; 0x94
   8345e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83460:	980c      	ldr	r0, [sp, #48]	; 0x30
   83462:	f002 f807 	bl	85474 <__ssprint_r>
   83466:	2800      	cmp	r0, #0
   83468:	f47e afc5 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8346c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8346e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83470:	46c8      	mov	r8, r9
   83472:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83474:	1a9a      	subs	r2, r3, r2
   83476:	e5dd      	b.n	83034 <_svfprintf_r+0xdf8>
   83478:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8347a:	f7ff b8fe 	b.w	8267a <_svfprintf_r+0x43e>
   8347e:	aa25      	add	r2, sp, #148	; 0x94
   83480:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83482:	980c      	ldr	r0, [sp, #48]	; 0x30
   83484:	f001 fff6 	bl	85474 <__ssprint_r>
   83488:	2800      	cmp	r0, #0
   8348a:	f47e afb4 	bne.w	823f6 <_svfprintf_r+0x1ba>
   8348e:	46c8      	mov	r8, r9
   83490:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83492:	e5b0      	b.n	82ff6 <_svfprintf_r+0xdba>
   83494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83496:	4637      	mov	r7, r6
   83498:	2b06      	cmp	r3, #6
   8349a:	bf28      	it	cs
   8349c:	2306      	movcs	r3, #6
   8349e:	960a      	str	r6, [sp, #40]	; 0x28
   834a0:	9612      	str	r6, [sp, #72]	; 0x48
   834a2:	9308      	str	r3, [sp, #32]
   834a4:	940f      	str	r4, [sp, #60]	; 0x3c
   834a6:	f8cd b01c 	str.w	fp, [sp, #28]
   834aa:	930e      	str	r3, [sp, #56]	; 0x38
   834ac:	4e27      	ldr	r6, [pc, #156]	; (8354c <_svfprintf_r+0x1310>)
   834ae:	f7fe bfe9 	b.w	82484 <_svfprintf_r+0x248>
   834b2:	2306      	movs	r3, #6
   834b4:	930a      	str	r3, [sp, #40]	; 0x28
   834b6:	e663      	b.n	83180 <_svfprintf_r+0xf44>
   834b8:	232d      	movs	r3, #45	; 0x2d
   834ba:	461f      	mov	r7, r3
   834bc:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   834c0:	f7ff ba28 	b.w	82914 <_svfprintf_r+0x6d8>
   834c4:	2003      	movs	r0, #3
   834c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   834c8:	a923      	add	r1, sp, #140	; 0x8c
   834ca:	e88d 0011 	stmia.w	sp, {r0, r4}
   834ce:	9104      	str	r1, [sp, #16]
   834d0:	a820      	add	r0, sp, #128	; 0x80
   834d2:	a91f      	add	r1, sp, #124	; 0x7c
   834d4:	9003      	str	r0, [sp, #12]
   834d6:	9a08      	ldr	r2, [sp, #32]
   834d8:	463b      	mov	r3, r7
   834da:	9102      	str	r1, [sp, #8]
   834dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   834de:	f000 f9d3 	bl	83888 <_dtoa_r>
   834e2:	4625      	mov	r5, r4
   834e4:	4606      	mov	r6, r0
   834e6:	1904      	adds	r4, r0, r4
   834e8:	e719      	b.n	8331e <_svfprintf_r+0x10e2>
   834ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
   834ec:	4d15      	ldr	r5, [pc, #84]	; (83544 <_svfprintf_r+0x1308>)
   834ee:	f7ff bb7e 	b.w	82bee <_svfprintf_r+0x9b2>
   834f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   834f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   834f6:	4413      	add	r3, r2
   834f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   834fa:	930e      	str	r3, [sp, #56]	; 0x38
   834fc:	2a00      	cmp	r2, #0
   834fe:	f340 80c7 	ble.w	83690 <_svfprintf_r+0x1454>
   83502:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83506:	9308      	str	r3, [sp, #32]
   83508:	2367      	movs	r3, #103	; 0x67
   8350a:	9311      	str	r3, [sp, #68]	; 0x44
   8350c:	e69e      	b.n	8324c <_svfprintf_r+0x1010>
   8350e:	2b00      	cmp	r3, #0
   83510:	f340 80e1 	ble.w	836d6 <_svfprintf_r+0x149a>
   83514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83516:	2a00      	cmp	r2, #0
   83518:	f040 80b0 	bne.w	8367c <_svfprintf_r+0x1440>
   8351c:	f01b 0f01 	tst.w	fp, #1
   83520:	f040 80ac 	bne.w	8367c <_svfprintf_r+0x1440>
   83524:	9308      	str	r3, [sp, #32]
   83526:	930e      	str	r3, [sp, #56]	; 0x38
   83528:	e690      	b.n	8324c <_svfprintf_r+0x1010>
   8352a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8352c:	940f      	str	r4, [sp, #60]	; 0x3c
   8352e:	9308      	str	r3, [sp, #32]
   83530:	930e      	str	r3, [sp, #56]	; 0x38
   83532:	900a      	str	r0, [sp, #40]	; 0x28
   83534:	f8cd b01c 	str.w	fp, [sp, #28]
   83538:	9012      	str	r0, [sp, #72]	; 0x48
   8353a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8353e:	f7fe bfa1 	b.w	82484 <_svfprintf_r+0x248>
   83542:	bf00      	nop
   83544:	000863f4 	.word	0x000863f4
   83548:	66666667 	.word	0x66666667
   8354c:	000863d8 	.word	0x000863d8
   83550:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83552:	2b47      	cmp	r3, #71	; 0x47
   83554:	f47f ae46 	bne.w	831e4 <_svfprintf_r+0xfa8>
   83558:	f01b 0f01 	tst.w	fp, #1
   8355c:	f47f aeda 	bne.w	83314 <_svfprintf_r+0x10d8>
   83560:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83562:	1b9b      	subs	r3, r3, r6
   83564:	9313      	str	r3, [sp, #76]	; 0x4c
   83566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83568:	2b47      	cmp	r3, #71	; 0x47
   8356a:	f43f aef7 	beq.w	8335c <_svfprintf_r+0x1120>
   8356e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   83570:	9312      	str	r3, [sp, #72]	; 0x48
   83572:	e700      	b.n	83376 <_svfprintf_r+0x113a>
   83574:	2000      	movs	r0, #0
   83576:	900a      	str	r0, [sp, #40]	; 0x28
   83578:	f7fe bebc 	b.w	822f4 <_svfprintf_r+0xb8>
   8357c:	424f      	negs	r7, r1
   8357e:	3110      	adds	r1, #16
   83580:	da35      	bge.n	835ee <_svfprintf_r+0x13b2>
   83582:	2410      	movs	r4, #16
   83584:	4d6a      	ldr	r5, [pc, #424]	; (83730 <_svfprintf_r+0x14f4>)
   83586:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8358a:	e004      	b.n	83596 <_svfprintf_r+0x135a>
   8358c:	f108 0808 	add.w	r8, r8, #8
   83590:	3f10      	subs	r7, #16
   83592:	2f10      	cmp	r7, #16
   83594:	dd2c      	ble.n	835f0 <_svfprintf_r+0x13b4>
   83596:	3301      	adds	r3, #1
   83598:	3210      	adds	r2, #16
   8359a:	2b07      	cmp	r3, #7
   8359c:	9227      	str	r2, [sp, #156]	; 0x9c
   8359e:	9326      	str	r3, [sp, #152]	; 0x98
   835a0:	f8c8 5000 	str.w	r5, [r8]
   835a4:	f8c8 4004 	str.w	r4, [r8, #4]
   835a8:	ddf0      	ble.n	8358c <_svfprintf_r+0x1350>
   835aa:	aa25      	add	r2, sp, #148	; 0x94
   835ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   835ae:	4658      	mov	r0, fp
   835b0:	f001 ff60 	bl	85474 <__ssprint_r>
   835b4:	2800      	cmp	r0, #0
   835b6:	f47e af1e 	bne.w	823f6 <_svfprintf_r+0x1ba>
   835ba:	46c8      	mov	r8, r9
   835bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   835be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835c0:	e7e6      	b.n	83590 <_svfprintf_r+0x1354>
   835c2:	aa25      	add	r2, sp, #148	; 0x94
   835c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   835c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   835c8:	f001 ff54 	bl	85474 <__ssprint_r>
   835cc:	2800      	cmp	r0, #0
   835ce:	f47e af12 	bne.w	823f6 <_svfprintf_r+0x1ba>
   835d2:	46c8      	mov	r8, r9
   835d4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   835d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   835d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835da:	f7ff bbc3 	b.w	82d64 <_svfprintf_r+0xb28>
   835de:	2230      	movs	r2, #48	; 0x30
   835e0:	4413      	add	r3, r2
   835e2:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   835e6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   835ea:	ab22      	add	r3, sp, #136	; 0x88
   835ec:	e706      	b.n	833fc <_svfprintf_r+0x11c0>
   835ee:	4d50      	ldr	r5, [pc, #320]	; (83730 <_svfprintf_r+0x14f4>)
   835f0:	3301      	adds	r3, #1
   835f2:	443a      	add	r2, r7
   835f4:	2b07      	cmp	r3, #7
   835f6:	e888 00a0 	stmia.w	r8, {r5, r7}
   835fa:	9227      	str	r2, [sp, #156]	; 0x9c
   835fc:	9326      	str	r3, [sp, #152]	; 0x98
   835fe:	f108 0808 	add.w	r8, r8, #8
   83602:	f77f abb2 	ble.w	82d6a <_svfprintf_r+0xb2e>
   83606:	aa25      	add	r2, sp, #148	; 0x94
   83608:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8360a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8360c:	f001 ff32 	bl	85474 <__ssprint_r>
   83610:	2800      	cmp	r0, #0
   83612:	f47e aef0 	bne.w	823f6 <_svfprintf_r+0x1ba>
   83616:	46c8      	mov	r8, r9
   83618:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8361a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8361c:	f7ff bba5 	b.w	82d6a <_svfprintf_r+0xb2e>
   83620:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83622:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83624:	4413      	add	r3, r2
   83626:	930e      	str	r3, [sp, #56]	; 0x38
   83628:	e76b      	b.n	83502 <_svfprintf_r+0x12c6>
   8362a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8362c:	e5ee      	b.n	8320c <_svfprintf_r+0xfd0>
   8362e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83630:	4d3f      	ldr	r5, [pc, #252]	; (83730 <_svfprintf_r+0x14f4>)
   83632:	e4bb      	b.n	82fac <_svfprintf_r+0xd70>
   83634:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83636:	9808      	ldr	r0, [sp, #32]
   83638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8363a:	4639      	mov	r1, r7
   8363c:	f002 fc56 	bl	85eec <__aeabi_dcmpeq>
   83640:	2800      	cmp	r0, #0
   83642:	f47f ae70 	bne.w	83326 <_svfprintf_r+0x10ea>
   83646:	f1c5 0501 	rsb	r5, r5, #1
   8364a:	951f      	str	r5, [sp, #124]	; 0x7c
   8364c:	442c      	add	r4, r5
   8364e:	e5ca      	b.n	831e6 <_svfprintf_r+0xfaa>
   83650:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83652:	4e38      	ldr	r6, [pc, #224]	; (83734 <_svfprintf_r+0x14f8>)
   83654:	2b00      	cmp	r3, #0
   83656:	bfbe      	ittt	lt
   83658:	232d      	movlt	r3, #45	; 0x2d
   8365a:	461f      	movlt	r7, r3
   8365c:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   83660:	f04f 0303 	mov.w	r3, #3
   83664:	461a      	mov	r2, r3
   83666:	9308      	str	r3, [sp, #32]
   83668:	f04f 0300 	mov.w	r3, #0
   8366c:	bfa8      	it	ge
   8366e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   83672:	4619      	mov	r1, r3
   83674:	930a      	str	r3, [sp, #40]	; 0x28
   83676:	4b30      	ldr	r3, [pc, #192]	; (83738 <_svfprintf_r+0x14fc>)
   83678:	f7ff b954 	b.w	82924 <_svfprintf_r+0x6e8>
   8367c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8367e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83680:	4413      	add	r3, r2
   83682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83684:	441a      	add	r2, r3
   83686:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8368a:	920e      	str	r2, [sp, #56]	; 0x38
   8368c:	9308      	str	r3, [sp, #32]
   8368e:	e5dd      	b.n	8324c <_svfprintf_r+0x1010>
   83690:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83692:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83694:	f1c3 0301 	rsb	r3, r3, #1
   83698:	441a      	add	r2, r3
   8369a:	4613      	mov	r3, r2
   8369c:	e7c3      	b.n	83626 <_svfprintf_r+0x13ea>
   8369e:	f01b 0301 	ands.w	r3, fp, #1
   836a2:	9312      	str	r3, [sp, #72]	; 0x48
   836a4:	f47f aeb3 	bne.w	8340e <_svfprintf_r+0x11d2>
   836a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   836aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   836ae:	9308      	str	r3, [sp, #32]
   836b0:	e5cc      	b.n	8324c <_svfprintf_r+0x1010>
   836b2:	4d1f      	ldr	r5, [pc, #124]	; (83730 <_svfprintf_r+0x14f4>)
   836b4:	e43c      	b.n	82f30 <_svfprintf_r+0xcf4>
   836b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   836b8:	4d1d      	ldr	r5, [pc, #116]	; (83730 <_svfprintf_r+0x14f4>)
   836ba:	e491      	b.n	82fe0 <_svfprintf_r+0xda4>
   836bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   836be:	f89a 3001 	ldrb.w	r3, [sl, #1]
   836c2:	6828      	ldr	r0, [r5, #0]
   836c4:	46a2      	mov	sl, r4
   836c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   836ca:	900a      	str	r0, [sp, #40]	; 0x28
   836cc:	4628      	mov	r0, r5
   836ce:	3004      	adds	r0, #4
   836d0:	900f      	str	r0, [sp, #60]	; 0x3c
   836d2:	f7fe be0d 	b.w	822f0 <_svfprintf_r+0xb4>
   836d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   836d8:	b913      	cbnz	r3, 836e0 <_svfprintf_r+0x14a4>
   836da:	f01b 0f01 	tst.w	fp, #1
   836de:	d002      	beq.n	836e6 <_svfprintf_r+0x14aa>
   836e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   836e2:	3301      	adds	r3, #1
   836e4:	e7cd      	b.n	83682 <_svfprintf_r+0x1446>
   836e6:	2301      	movs	r3, #1
   836e8:	e71c      	b.n	83524 <_svfprintf_r+0x12e8>
   836ea:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836ee:	f7ff b980 	b.w	829f2 <_svfprintf_r+0x7b6>
   836f2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836f6:	f7ff b93a 	b.w	8296e <_svfprintf_r+0x732>
   836fa:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836fe:	f7ff b84f 	b.w	827a0 <_svfprintf_r+0x564>
   83702:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   83706:	e679      	b.n	833fc <_svfprintf_r+0x11c0>
   83708:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8370c:	f7ff b9b2 	b.w	82a74 <_svfprintf_r+0x838>
   83710:	f04f 32ff 	mov.w	r2, #4294967295
   83714:	230c      	movs	r3, #12
   83716:	9209      	str	r2, [sp, #36]	; 0x24
   83718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8371a:	6013      	str	r3, [r2, #0]
   8371c:	f7fe be74 	b.w	82408 <_svfprintf_r+0x1cc>
   83720:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83724:	f7ff b8c4 	b.w	828b0 <_svfprintf_r+0x674>
   83728:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8372c:	f7ff b878 	b.w	82820 <_svfprintf_r+0x5e4>
   83730:	000863f4 	.word	0x000863f4
   83734:	000863ac 	.word	0x000863ac
   83738:	000863a8 	.word	0x000863a8

0008373c <register_fini>:
   8373c:	4b02      	ldr	r3, [pc, #8]	; (83748 <register_fini+0xc>)
   8373e:	b113      	cbz	r3, 83746 <register_fini+0xa>
   83740:	4802      	ldr	r0, [pc, #8]	; (8374c <register_fini+0x10>)
   83742:	f000 b805 	b.w	83750 <atexit>
   83746:	4770      	bx	lr
   83748:	00000000 	.word	0x00000000
   8374c:	000846cd 	.word	0x000846cd

00083750 <atexit>:
   83750:	2300      	movs	r3, #0
   83752:	4601      	mov	r1, r0
   83754:	461a      	mov	r2, r3
   83756:	4618      	mov	r0, r3
   83758:	f001 bf16 	b.w	85588 <__register_exitproc>

0008375c <quorem>:
   8375c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83760:	6903      	ldr	r3, [r0, #16]
   83762:	690f      	ldr	r7, [r1, #16]
   83764:	b083      	sub	sp, #12
   83766:	429f      	cmp	r7, r3
   83768:	f300 8088 	bgt.w	8387c <quorem+0x120>
   8376c:	3f01      	subs	r7, #1
   8376e:	f101 0614 	add.w	r6, r1, #20
   83772:	f100 0a14 	add.w	sl, r0, #20
   83776:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   8377a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8377e:	3301      	adds	r3, #1
   83780:	fbb2 f8f3 	udiv	r8, r2, r3
   83784:	00bb      	lsls	r3, r7, #2
   83786:	9300      	str	r3, [sp, #0]
   83788:	eb06 0903 	add.w	r9, r6, r3
   8378c:	4453      	add	r3, sl
   8378e:	9301      	str	r3, [sp, #4]
   83790:	f1b8 0f00 	cmp.w	r8, #0
   83794:	d03b      	beq.n	8380e <quorem+0xb2>
   83796:	2300      	movs	r3, #0
   83798:	46b4      	mov	ip, r6
   8379a:	461c      	mov	r4, r3
   8379c:	46d6      	mov	lr, sl
   8379e:	f85c 2b04 	ldr.w	r2, [ip], #4
   837a2:	f8de 5000 	ldr.w	r5, [lr]
   837a6:	fa1f fb82 	uxth.w	fp, r2
   837aa:	fb08 330b 	mla	r3, r8, fp, r3
   837ae:	0c12      	lsrs	r2, r2, #16
   837b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   837b4:	fb08 bb02 	mla	fp, r8, r2, fp
   837b8:	b29a      	uxth	r2, r3
   837ba:	1aa2      	subs	r2, r4, r2
   837bc:	b2ab      	uxth	r3, r5
   837be:	fa1f f48b 	uxth.w	r4, fp
   837c2:	441a      	add	r2, r3
   837c4:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   837c8:	eb04 4422 	add.w	r4, r4, r2, asr #16
   837cc:	b292      	uxth	r2, r2
   837ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   837d2:	45e1      	cmp	r9, ip
   837d4:	f84e 2b04 	str.w	r2, [lr], #4
   837d8:	ea4f 4424 	mov.w	r4, r4, asr #16
   837dc:	ea4f 431b 	mov.w	r3, fp, lsr #16
   837e0:	d2dd      	bcs.n	8379e <quorem+0x42>
   837e2:	9b00      	ldr	r3, [sp, #0]
   837e4:	f85a 3003 	ldr.w	r3, [sl, r3]
   837e8:	b98b      	cbnz	r3, 8380e <quorem+0xb2>
   837ea:	9c01      	ldr	r4, [sp, #4]
   837ec:	1f23      	subs	r3, r4, #4
   837ee:	459a      	cmp	sl, r3
   837f0:	d20c      	bcs.n	8380c <quorem+0xb0>
   837f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   837f6:	b94b      	cbnz	r3, 8380c <quorem+0xb0>
   837f8:	f1a4 0308 	sub.w	r3, r4, #8
   837fc:	e002      	b.n	83804 <quorem+0xa8>
   837fe:	681a      	ldr	r2, [r3, #0]
   83800:	3b04      	subs	r3, #4
   83802:	b91a      	cbnz	r2, 8380c <quorem+0xb0>
   83804:	459a      	cmp	sl, r3
   83806:	f107 37ff 	add.w	r7, r7, #4294967295
   8380a:	d3f8      	bcc.n	837fe <quorem+0xa2>
   8380c:	6107      	str	r7, [r0, #16]
   8380e:	4604      	mov	r4, r0
   83810:	f001 fb7c 	bl	84f0c <__mcmp>
   83814:	2800      	cmp	r0, #0
   83816:	db2d      	blt.n	83874 <quorem+0x118>
   83818:	4655      	mov	r5, sl
   8381a:	2300      	movs	r3, #0
   8381c:	f108 0801 	add.w	r8, r8, #1
   83820:	f856 1b04 	ldr.w	r1, [r6], #4
   83824:	6828      	ldr	r0, [r5, #0]
   83826:	b28a      	uxth	r2, r1
   83828:	1a9a      	subs	r2, r3, r2
   8382a:	0c0b      	lsrs	r3, r1, #16
   8382c:	b281      	uxth	r1, r0
   8382e:	440a      	add	r2, r1
   83830:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   83834:	eb03 4322 	add.w	r3, r3, r2, asr #16
   83838:	b292      	uxth	r2, r2
   8383a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8383e:	45b1      	cmp	r9, r6
   83840:	f845 2b04 	str.w	r2, [r5], #4
   83844:	ea4f 4323 	mov.w	r3, r3, asr #16
   83848:	d2ea      	bcs.n	83820 <quorem+0xc4>
   8384a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8384e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   83852:	b97a      	cbnz	r2, 83874 <quorem+0x118>
   83854:	1f1a      	subs	r2, r3, #4
   83856:	4592      	cmp	sl, r2
   83858:	d20b      	bcs.n	83872 <quorem+0x116>
   8385a:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8385e:	b942      	cbnz	r2, 83872 <quorem+0x116>
   83860:	3b08      	subs	r3, #8
   83862:	e002      	b.n	8386a <quorem+0x10e>
   83864:	681a      	ldr	r2, [r3, #0]
   83866:	3b04      	subs	r3, #4
   83868:	b91a      	cbnz	r2, 83872 <quorem+0x116>
   8386a:	459a      	cmp	sl, r3
   8386c:	f107 37ff 	add.w	r7, r7, #4294967295
   83870:	d3f8      	bcc.n	83864 <quorem+0x108>
   83872:	6127      	str	r7, [r4, #16]
   83874:	4640      	mov	r0, r8
   83876:	b003      	add	sp, #12
   83878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8387c:	2000      	movs	r0, #0
   8387e:	b003      	add	sp, #12
   83880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83884:	0000      	movs	r0, r0
	...

00083888 <_dtoa_r>:
   83888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8388c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8388e:	b09b      	sub	sp, #108	; 0x6c
   83890:	4604      	mov	r4, r0
   83892:	4692      	mov	sl, r2
   83894:	469b      	mov	fp, r3
   83896:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   83898:	b14d      	cbz	r5, 838ae <_dtoa_r+0x26>
   8389a:	2301      	movs	r3, #1
   8389c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8389e:	4629      	mov	r1, r5
   838a0:	4093      	lsls	r3, r2
   838a2:	60ab      	str	r3, [r5, #8]
   838a4:	606a      	str	r2, [r5, #4]
   838a6:	f001 f959 	bl	84b5c <_Bfree>
   838aa:	2300      	movs	r3, #0
   838ac:	6423      	str	r3, [r4, #64]	; 0x40
   838ae:	f1bb 0f00 	cmp.w	fp, #0
   838b2:	465d      	mov	r5, fp
   838b4:	db35      	blt.n	83922 <_dtoa_r+0x9a>
   838b6:	2300      	movs	r3, #0
   838b8:	6033      	str	r3, [r6, #0]
   838ba:	4b9d      	ldr	r3, [pc, #628]	; (83b30 <_dtoa_r+0x2a8>)
   838bc:	43ab      	bics	r3, r5
   838be:	d015      	beq.n	838ec <_dtoa_r+0x64>
   838c0:	2200      	movs	r2, #0
   838c2:	2300      	movs	r3, #0
   838c4:	4650      	mov	r0, sl
   838c6:	4659      	mov	r1, fp
   838c8:	f002 fb10 	bl	85eec <__aeabi_dcmpeq>
   838cc:	4680      	mov	r8, r0
   838ce:	2800      	cmp	r0, #0
   838d0:	d02d      	beq.n	8392e <_dtoa_r+0xa6>
   838d2:	2301      	movs	r3, #1
   838d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   838d6:	6013      	str	r3, [r2, #0]
   838d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   838da:	2b00      	cmp	r3, #0
   838dc:	f000 80bd 	beq.w	83a5a <_dtoa_r+0x1d2>
   838e0:	4894      	ldr	r0, [pc, #592]	; (83b34 <_dtoa_r+0x2ac>)
   838e2:	6018      	str	r0, [r3, #0]
   838e4:	3801      	subs	r0, #1
   838e6:	b01b      	add	sp, #108	; 0x6c
   838e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838ec:	f242 730f 	movw	r3, #9999	; 0x270f
   838f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   838f2:	6013      	str	r3, [r2, #0]
   838f4:	f1ba 0f00 	cmp.w	sl, #0
   838f8:	d10d      	bne.n	83916 <_dtoa_r+0x8e>
   838fa:	f3c5 0513 	ubfx	r5, r5, #0, #20
   838fe:	b955      	cbnz	r5, 83916 <_dtoa_r+0x8e>
   83900:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83902:	488d      	ldr	r0, [pc, #564]	; (83b38 <_dtoa_r+0x2b0>)
   83904:	2b00      	cmp	r3, #0
   83906:	d0ee      	beq.n	838e6 <_dtoa_r+0x5e>
   83908:	f100 0308 	add.w	r3, r0, #8
   8390c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8390e:	6013      	str	r3, [r2, #0]
   83910:	b01b      	add	sp, #108	; 0x6c
   83912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83916:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83918:	4888      	ldr	r0, [pc, #544]	; (83b3c <_dtoa_r+0x2b4>)
   8391a:	2b00      	cmp	r3, #0
   8391c:	d0e3      	beq.n	838e6 <_dtoa_r+0x5e>
   8391e:	1cc3      	adds	r3, r0, #3
   83920:	e7f4      	b.n	8390c <_dtoa_r+0x84>
   83922:	2301      	movs	r3, #1
   83924:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   83928:	6033      	str	r3, [r6, #0]
   8392a:	46ab      	mov	fp, r5
   8392c:	e7c5      	b.n	838ba <_dtoa_r+0x32>
   8392e:	aa18      	add	r2, sp, #96	; 0x60
   83930:	ab19      	add	r3, sp, #100	; 0x64
   83932:	9201      	str	r2, [sp, #4]
   83934:	9300      	str	r3, [sp, #0]
   83936:	4652      	mov	r2, sl
   83938:	465b      	mov	r3, fp
   8393a:	4620      	mov	r0, r4
   8393c:	f001 fb90 	bl	85060 <__d2b>
   83940:	0d2b      	lsrs	r3, r5, #20
   83942:	4681      	mov	r9, r0
   83944:	d071      	beq.n	83a2a <_dtoa_r+0x1a2>
   83946:	4650      	mov	r0, sl
   83948:	f3cb 0213 	ubfx	r2, fp, #0, #20
   8394c:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   83950:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83952:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   83956:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   8395a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   8395e:	2200      	movs	r2, #0
   83960:	4b77      	ldr	r3, [pc, #476]	; (83b40 <_dtoa_r+0x2b8>)
   83962:	f001 fea7 	bl	856b4 <__aeabi_dsub>
   83966:	a36c      	add	r3, pc, #432	; (adr r3, 83b18 <_dtoa_r+0x290>)
   83968:	e9d3 2300 	ldrd	r2, r3, [r3]
   8396c:	f002 f856 	bl	85a1c <__aeabi_dmul>
   83970:	a36b      	add	r3, pc, #428	; (adr r3, 83b20 <_dtoa_r+0x298>)
   83972:	e9d3 2300 	ldrd	r2, r3, [r3]
   83976:	f001 fe9f 	bl	856b8 <__adddf3>
   8397a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   8397e:	4630      	mov	r0, r6
   83980:	f001 ffe6 	bl	85950 <__aeabi_i2d>
   83984:	a368      	add	r3, pc, #416	; (adr r3, 83b28 <_dtoa_r+0x2a0>)
   83986:	e9d3 2300 	ldrd	r2, r3, [r3]
   8398a:	f002 f847 	bl	85a1c <__aeabi_dmul>
   8398e:	4602      	mov	r2, r0
   83990:	460b      	mov	r3, r1
   83992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   83996:	f001 fe8f 	bl	856b8 <__adddf3>
   8399a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8399e:	f002 faed 	bl	85f7c <__aeabi_d2iz>
   839a2:	2200      	movs	r2, #0
   839a4:	9002      	str	r0, [sp, #8]
   839a6:	2300      	movs	r3, #0
   839a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   839ac:	f002 faa8 	bl	85f00 <__aeabi_dcmplt>
   839b0:	2800      	cmp	r0, #0
   839b2:	f040 816d 	bne.w	83c90 <_dtoa_r+0x408>
   839b6:	9d02      	ldr	r5, [sp, #8]
   839b8:	2d16      	cmp	r5, #22
   839ba:	f200 8157 	bhi.w	83c6c <_dtoa_r+0x3e4>
   839be:	4961      	ldr	r1, [pc, #388]	; (83b44 <_dtoa_r+0x2bc>)
   839c0:	4652      	mov	r2, sl
   839c2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   839c6:	465b      	mov	r3, fp
   839c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   839cc:	f002 fab6 	bl	85f3c <__aeabi_dcmpgt>
   839d0:	2800      	cmp	r0, #0
   839d2:	f000 81be 	beq.w	83d52 <_dtoa_r+0x4ca>
   839d6:	1e6b      	subs	r3, r5, #1
   839d8:	9302      	str	r3, [sp, #8]
   839da:	2300      	movs	r3, #0
   839dc:	930e      	str	r3, [sp, #56]	; 0x38
   839de:	1bbf      	subs	r7, r7, r6
   839e0:	1e7b      	subs	r3, r7, #1
   839e2:	9308      	str	r3, [sp, #32]
   839e4:	f100 814e 	bmi.w	83c84 <_dtoa_r+0x3fc>
   839e8:	2300      	movs	r3, #0
   839ea:	930a      	str	r3, [sp, #40]	; 0x28
   839ec:	9b02      	ldr	r3, [sp, #8]
   839ee:	2b00      	cmp	r3, #0
   839f0:	f2c0 813f 	blt.w	83c72 <_dtoa_r+0x3ea>
   839f4:	9a08      	ldr	r2, [sp, #32]
   839f6:	930d      	str	r3, [sp, #52]	; 0x34
   839f8:	4611      	mov	r1, r2
   839fa:	4419      	add	r1, r3
   839fc:	2300      	movs	r3, #0
   839fe:	9108      	str	r1, [sp, #32]
   83a00:	930c      	str	r3, [sp, #48]	; 0x30
   83a02:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83a04:	2b09      	cmp	r3, #9
   83a06:	d82a      	bhi.n	83a5e <_dtoa_r+0x1d6>
   83a08:	2b05      	cmp	r3, #5
   83a0a:	f340 8658 	ble.w	846be <_dtoa_r+0xe36>
   83a0e:	2500      	movs	r5, #0
   83a10:	3b04      	subs	r3, #4
   83a12:	9324      	str	r3, [sp, #144]	; 0x90
   83a14:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83a16:	3b02      	subs	r3, #2
   83a18:	2b03      	cmp	r3, #3
   83a1a:	f200 863f 	bhi.w	8469c <_dtoa_r+0xe14>
   83a1e:	e8df f013 	tbh	[pc, r3, lsl #1]
   83a22:	03ce      	.short	0x03ce
   83a24:	03d902c3 	.word	0x03d902c3
   83a28:	045b      	.short	0x045b
   83a2a:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83a2c:	9e19      	ldr	r6, [sp, #100]	; 0x64
   83a2e:	443e      	add	r6, r7
   83a30:	f206 4332 	addw	r3, r6, #1074	; 0x432
   83a34:	2b20      	cmp	r3, #32
   83a36:	f340 8187 	ble.w	83d48 <_dtoa_r+0x4c0>
   83a3a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   83a3e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   83a42:	409d      	lsls	r5, r3
   83a44:	fa2a f000 	lsr.w	r0, sl, r0
   83a48:	4328      	orrs	r0, r5
   83a4a:	f001 ff71 	bl	85930 <__aeabi_ui2d>
   83a4e:	2301      	movs	r3, #1
   83a50:	3e01      	subs	r6, #1
   83a52:	9314      	str	r3, [sp, #80]	; 0x50
   83a54:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   83a58:	e781      	b.n	8395e <_dtoa_r+0xd6>
   83a5a:	483b      	ldr	r0, [pc, #236]	; (83b48 <_dtoa_r+0x2c0>)
   83a5c:	e743      	b.n	838e6 <_dtoa_r+0x5e>
   83a5e:	2100      	movs	r1, #0
   83a60:	4620      	mov	r0, r4
   83a62:	6461      	str	r1, [r4, #68]	; 0x44
   83a64:	9125      	str	r1, [sp, #148]	; 0x94
   83a66:	f001 f853 	bl	84b10 <_Balloc>
   83a6a:	f04f 33ff 	mov.w	r3, #4294967295
   83a6e:	9307      	str	r3, [sp, #28]
   83a70:	930f      	str	r3, [sp, #60]	; 0x3c
   83a72:	2301      	movs	r3, #1
   83a74:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83a76:	9004      	str	r0, [sp, #16]
   83a78:	6420      	str	r0, [r4, #64]	; 0x40
   83a7a:	9224      	str	r2, [sp, #144]	; 0x90
   83a7c:	930b      	str	r3, [sp, #44]	; 0x2c
   83a7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83a80:	2b00      	cmp	r3, #0
   83a82:	f2c0 80d3 	blt.w	83c2c <_dtoa_r+0x3a4>
   83a86:	9a02      	ldr	r2, [sp, #8]
   83a88:	2a0e      	cmp	r2, #14
   83a8a:	f300 80cf 	bgt.w	83c2c <_dtoa_r+0x3a4>
   83a8e:	4b2d      	ldr	r3, [pc, #180]	; (83b44 <_dtoa_r+0x2bc>)
   83a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83a94:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a98:	e9cd 2308 	strd	r2, r3, [sp, #32]
   83a9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83a9e:	2b00      	cmp	r3, #0
   83aa0:	f2c0 83b4 	blt.w	8420c <_dtoa_r+0x984>
   83aa4:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   83aa8:	4650      	mov	r0, sl
   83aaa:	462a      	mov	r2, r5
   83aac:	4633      	mov	r3, r6
   83aae:	4659      	mov	r1, fp
   83ab0:	f002 f8de 	bl	85c70 <__aeabi_ddiv>
   83ab4:	f002 fa62 	bl	85f7c <__aeabi_d2iz>
   83ab8:	4680      	mov	r8, r0
   83aba:	f001 ff49 	bl	85950 <__aeabi_i2d>
   83abe:	462a      	mov	r2, r5
   83ac0:	4633      	mov	r3, r6
   83ac2:	f001 ffab 	bl	85a1c <__aeabi_dmul>
   83ac6:	4602      	mov	r2, r0
   83ac8:	460b      	mov	r3, r1
   83aca:	4650      	mov	r0, sl
   83acc:	4659      	mov	r1, fp
   83ace:	f001 fdf1 	bl	856b4 <__aeabi_dsub>
   83ad2:	9e07      	ldr	r6, [sp, #28]
   83ad4:	9f04      	ldr	r7, [sp, #16]
   83ad6:	f108 0530 	add.w	r5, r8, #48	; 0x30
   83ada:	2e01      	cmp	r6, #1
   83adc:	703d      	strb	r5, [r7, #0]
   83ade:	4602      	mov	r2, r0
   83ae0:	460b      	mov	r3, r1
   83ae2:	f107 0501 	add.w	r5, r7, #1
   83ae6:	d064      	beq.n	83bb2 <_dtoa_r+0x32a>
   83ae8:	2200      	movs	r2, #0
   83aea:	4b18      	ldr	r3, [pc, #96]	; (83b4c <_dtoa_r+0x2c4>)
   83aec:	f001 ff96 	bl	85a1c <__aeabi_dmul>
   83af0:	2200      	movs	r2, #0
   83af2:	2300      	movs	r3, #0
   83af4:	4606      	mov	r6, r0
   83af6:	460f      	mov	r7, r1
   83af8:	f002 f9f8 	bl	85eec <__aeabi_dcmpeq>
   83afc:	2800      	cmp	r0, #0
   83afe:	f040 8082 	bne.w	83c06 <_dtoa_r+0x37e>
   83b02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   83b06:	f04f 0a00 	mov.w	sl, #0
   83b0a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83b0e:	f04f 0b00 	mov.w	fp, #0
   83b12:	940b      	str	r4, [sp, #44]	; 0x2c
   83b14:	e029      	b.n	83b6a <_dtoa_r+0x2e2>
   83b16:	bf00      	nop
   83b18:	636f4361 	.word	0x636f4361
   83b1c:	3fd287a7 	.word	0x3fd287a7
   83b20:	8b60c8b3 	.word	0x8b60c8b3
   83b24:	3fc68a28 	.word	0x3fc68a28
   83b28:	509f79fb 	.word	0x509f79fb
   83b2c:	3fd34413 	.word	0x3fd34413
   83b30:	7ff00000 	.word	0x7ff00000
   83b34:	000863e1 	.word	0x000863e1
   83b38:	00086404 	.word	0x00086404
   83b3c:	00086410 	.word	0x00086410
   83b40:	3ff80000 	.word	0x3ff80000
   83b44:	00086450 	.word	0x00086450
   83b48:	000863e0 	.word	0x000863e0
   83b4c:	40240000 	.word	0x40240000
   83b50:	2200      	movs	r2, #0
   83b52:	4b81      	ldr	r3, [pc, #516]	; (83d58 <_dtoa_r+0x4d0>)
   83b54:	f001 ff62 	bl	85a1c <__aeabi_dmul>
   83b58:	4652      	mov	r2, sl
   83b5a:	465b      	mov	r3, fp
   83b5c:	4606      	mov	r6, r0
   83b5e:	460f      	mov	r7, r1
   83b60:	f002 f9c4 	bl	85eec <__aeabi_dcmpeq>
   83b64:	2800      	cmp	r0, #0
   83b66:	f040 83ba 	bne.w	842de <_dtoa_r+0xa56>
   83b6a:	4642      	mov	r2, r8
   83b6c:	464b      	mov	r3, r9
   83b6e:	4630      	mov	r0, r6
   83b70:	4639      	mov	r1, r7
   83b72:	f002 f87d 	bl	85c70 <__aeabi_ddiv>
   83b76:	f002 fa01 	bl	85f7c <__aeabi_d2iz>
   83b7a:	4604      	mov	r4, r0
   83b7c:	f001 fee8 	bl	85950 <__aeabi_i2d>
   83b80:	4642      	mov	r2, r8
   83b82:	464b      	mov	r3, r9
   83b84:	f001 ff4a 	bl	85a1c <__aeabi_dmul>
   83b88:	4602      	mov	r2, r0
   83b8a:	460b      	mov	r3, r1
   83b8c:	4630      	mov	r0, r6
   83b8e:	4639      	mov	r1, r7
   83b90:	f001 fd90 	bl	856b4 <__aeabi_dsub>
   83b94:	f104 0630 	add.w	r6, r4, #48	; 0x30
   83b98:	f805 6b01 	strb.w	r6, [r5], #1
   83b9c:	9e04      	ldr	r6, [sp, #16]
   83b9e:	9f07      	ldr	r7, [sp, #28]
   83ba0:	1bae      	subs	r6, r5, r6
   83ba2:	42be      	cmp	r6, r7
   83ba4:	4602      	mov	r2, r0
   83ba6:	460b      	mov	r3, r1
   83ba8:	d1d2      	bne.n	83b50 <_dtoa_r+0x2c8>
   83baa:	46a0      	mov	r8, r4
   83bac:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   83bb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83bb2:	4610      	mov	r0, r2
   83bb4:	4619      	mov	r1, r3
   83bb6:	f001 fd7f 	bl	856b8 <__adddf3>
   83bba:	4606      	mov	r6, r0
   83bbc:	460f      	mov	r7, r1
   83bbe:	4602      	mov	r2, r0
   83bc0:	460b      	mov	r3, r1
   83bc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83bc6:	f002 f99b 	bl	85f00 <__aeabi_dcmplt>
   83bca:	b948      	cbnz	r0, 83be0 <_dtoa_r+0x358>
   83bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83bd0:	4632      	mov	r2, r6
   83bd2:	463b      	mov	r3, r7
   83bd4:	f002 f98a 	bl	85eec <__aeabi_dcmpeq>
   83bd8:	b1a8      	cbz	r0, 83c06 <_dtoa_r+0x37e>
   83bda:	f018 0f01 	tst.w	r8, #1
   83bde:	d012      	beq.n	83c06 <_dtoa_r+0x37e>
   83be0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   83be4:	1e6b      	subs	r3, r5, #1
   83be6:	9a04      	ldr	r2, [sp, #16]
   83be8:	e004      	b.n	83bf4 <_dtoa_r+0x36c>
   83bea:	429a      	cmp	r2, r3
   83bec:	f000 8402 	beq.w	843f4 <_dtoa_r+0xb6c>
   83bf0:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   83bf4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   83bf8:	f103 0501 	add.w	r5, r3, #1
   83bfc:	d0f5      	beq.n	83bea <_dtoa_r+0x362>
   83bfe:	f108 0801 	add.w	r8, r8, #1
   83c02:	f883 8000 	strb.w	r8, [r3]
   83c06:	4649      	mov	r1, r9
   83c08:	4620      	mov	r0, r4
   83c0a:	f000 ffa7 	bl	84b5c <_Bfree>
   83c0e:	2200      	movs	r2, #0
   83c10:	9b02      	ldr	r3, [sp, #8]
   83c12:	702a      	strb	r2, [r5, #0]
   83c14:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83c16:	3301      	adds	r3, #1
   83c18:	6013      	str	r3, [r2, #0]
   83c1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83c1c:	2b00      	cmp	r3, #0
   83c1e:	f000 839f 	beq.w	84360 <_dtoa_r+0xad8>
   83c22:	9804      	ldr	r0, [sp, #16]
   83c24:	601d      	str	r5, [r3, #0]
   83c26:	b01b      	add	sp, #108	; 0x6c
   83c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83c2e:	2a00      	cmp	r2, #0
   83c30:	d03e      	beq.n	83cb0 <_dtoa_r+0x428>
   83c32:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83c34:	2a01      	cmp	r2, #1
   83c36:	f340 8311 	ble.w	8425c <_dtoa_r+0x9d4>
   83c3a:	9b07      	ldr	r3, [sp, #28]
   83c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83c3e:	1e5f      	subs	r7, r3, #1
   83c40:	42ba      	cmp	r2, r7
   83c42:	f2c0 8390 	blt.w	84366 <_dtoa_r+0xade>
   83c46:	1bd7      	subs	r7, r2, r7
   83c48:	9b07      	ldr	r3, [sp, #28]
   83c4a:	2b00      	cmp	r3, #0
   83c4c:	f2c0 848c 	blt.w	84568 <_dtoa_r+0xce0>
   83c50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83c52:	9b07      	ldr	r3, [sp, #28]
   83c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c56:	2101      	movs	r1, #1
   83c58:	441a      	add	r2, r3
   83c5a:	920a      	str	r2, [sp, #40]	; 0x28
   83c5c:	9a08      	ldr	r2, [sp, #32]
   83c5e:	4620      	mov	r0, r4
   83c60:	441a      	add	r2, r3
   83c62:	9208      	str	r2, [sp, #32]
   83c64:	f001 f816 	bl	84c94 <__i2b>
   83c68:	4606      	mov	r6, r0
   83c6a:	e023      	b.n	83cb4 <_dtoa_r+0x42c>
   83c6c:	2301      	movs	r3, #1
   83c6e:	930e      	str	r3, [sp, #56]	; 0x38
   83c70:	e6b5      	b.n	839de <_dtoa_r+0x156>
   83c72:	2300      	movs	r3, #0
   83c74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c76:	930d      	str	r3, [sp, #52]	; 0x34
   83c78:	9b02      	ldr	r3, [sp, #8]
   83c7a:	1ad2      	subs	r2, r2, r3
   83c7c:	425b      	negs	r3, r3
   83c7e:	920a      	str	r2, [sp, #40]	; 0x28
   83c80:	930c      	str	r3, [sp, #48]	; 0x30
   83c82:	e6be      	b.n	83a02 <_dtoa_r+0x17a>
   83c84:	f1c7 0301 	rsb	r3, r7, #1
   83c88:	930a      	str	r3, [sp, #40]	; 0x28
   83c8a:	2300      	movs	r3, #0
   83c8c:	9308      	str	r3, [sp, #32]
   83c8e:	e6ad      	b.n	839ec <_dtoa_r+0x164>
   83c90:	9d02      	ldr	r5, [sp, #8]
   83c92:	4628      	mov	r0, r5
   83c94:	f001 fe5c 	bl	85950 <__aeabi_i2d>
   83c98:	4602      	mov	r2, r0
   83c9a:	460b      	mov	r3, r1
   83c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83ca0:	f002 f924 	bl	85eec <__aeabi_dcmpeq>
   83ca4:	2800      	cmp	r0, #0
   83ca6:	f47f ae86 	bne.w	839b6 <_dtoa_r+0x12e>
   83caa:	1e6b      	subs	r3, r5, #1
   83cac:	9302      	str	r3, [sp, #8]
   83cae:	e682      	b.n	839b6 <_dtoa_r+0x12e>
   83cb0:	ad0a      	add	r5, sp, #40	; 0x28
   83cb2:	cde0      	ldmia	r5, {r5, r6, r7}
   83cb4:	2d00      	cmp	r5, #0
   83cb6:	dd0c      	ble.n	83cd2 <_dtoa_r+0x44a>
   83cb8:	9908      	ldr	r1, [sp, #32]
   83cba:	2900      	cmp	r1, #0
   83cbc:	460b      	mov	r3, r1
   83cbe:	dd08      	ble.n	83cd2 <_dtoa_r+0x44a>
   83cc0:	42a9      	cmp	r1, r5
   83cc2:	bfa8      	it	ge
   83cc4:	462b      	movge	r3, r5
   83cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83cc8:	1aed      	subs	r5, r5, r3
   83cca:	1ad2      	subs	r2, r2, r3
   83ccc:	1acb      	subs	r3, r1, r3
   83cce:	920a      	str	r2, [sp, #40]	; 0x28
   83cd0:	9308      	str	r3, [sp, #32]
   83cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83cd4:	b1d3      	cbz	r3, 83d0c <_dtoa_r+0x484>
   83cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83cd8:	2b00      	cmp	r3, #0
   83cda:	f000 82b8 	beq.w	8424e <_dtoa_r+0x9c6>
   83cde:	2f00      	cmp	r7, #0
   83ce0:	dd10      	ble.n	83d04 <_dtoa_r+0x47c>
   83ce2:	4631      	mov	r1, r6
   83ce4:	463a      	mov	r2, r7
   83ce6:	4620      	mov	r0, r4
   83ce8:	f001 f870 	bl	84dcc <__pow5mult>
   83cec:	464a      	mov	r2, r9
   83cee:	4601      	mov	r1, r0
   83cf0:	4606      	mov	r6, r0
   83cf2:	4620      	mov	r0, r4
   83cf4:	f000 ffd8 	bl	84ca8 <__multiply>
   83cf8:	4603      	mov	r3, r0
   83cfa:	4649      	mov	r1, r9
   83cfc:	4620      	mov	r0, r4
   83cfe:	4699      	mov	r9, r3
   83d00:	f000 ff2c 	bl	84b5c <_Bfree>
   83d04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83d06:	1bda      	subs	r2, r3, r7
   83d08:	f040 82a2 	bne.w	84250 <_dtoa_r+0x9c8>
   83d0c:	2101      	movs	r1, #1
   83d0e:	4620      	mov	r0, r4
   83d10:	f000 ffc0 	bl	84c94 <__i2b>
   83d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83d16:	4680      	mov	r8, r0
   83d18:	2b00      	cmp	r3, #0
   83d1a:	dd1f      	ble.n	83d5c <_dtoa_r+0x4d4>
   83d1c:	4601      	mov	r1, r0
   83d1e:	461a      	mov	r2, r3
   83d20:	4620      	mov	r0, r4
   83d22:	f001 f853 	bl	84dcc <__pow5mult>
   83d26:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83d28:	4680      	mov	r8, r0
   83d2a:	2b01      	cmp	r3, #1
   83d2c:	f340 8255 	ble.w	841da <_dtoa_r+0x952>
   83d30:	2300      	movs	r3, #0
   83d32:	930c      	str	r3, [sp, #48]	; 0x30
   83d34:	f8d8 3010 	ldr.w	r3, [r8, #16]
   83d38:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83d3c:	6918      	ldr	r0, [r3, #16]
   83d3e:	f000 ff59 	bl	84bf4 <__hi0bits>
   83d42:	f1c0 0020 	rsb	r0, r0, #32
   83d46:	e013      	b.n	83d70 <_dtoa_r+0x4e8>
   83d48:	f1c3 0520 	rsb	r5, r3, #32
   83d4c:	fa0a f005 	lsl.w	r0, sl, r5
   83d50:	e67b      	b.n	83a4a <_dtoa_r+0x1c2>
   83d52:	900e      	str	r0, [sp, #56]	; 0x38
   83d54:	e643      	b.n	839de <_dtoa_r+0x156>
   83d56:	bf00      	nop
   83d58:	40240000 	.word	0x40240000
   83d5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83d5e:	2b01      	cmp	r3, #1
   83d60:	f340 8285 	ble.w	8426e <_dtoa_r+0x9e6>
   83d64:	2300      	movs	r3, #0
   83d66:	930c      	str	r3, [sp, #48]	; 0x30
   83d68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83d6a:	2001      	movs	r0, #1
   83d6c:	2b00      	cmp	r3, #0
   83d6e:	d1e1      	bne.n	83d34 <_dtoa_r+0x4ac>
   83d70:	9a08      	ldr	r2, [sp, #32]
   83d72:	4410      	add	r0, r2
   83d74:	f010 001f 	ands.w	r0, r0, #31
   83d78:	f000 80a1 	beq.w	83ebe <_dtoa_r+0x636>
   83d7c:	f1c0 0320 	rsb	r3, r0, #32
   83d80:	2b04      	cmp	r3, #4
   83d82:	f340 8486 	ble.w	84692 <_dtoa_r+0xe0a>
   83d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d88:	f1c0 001c 	rsb	r0, r0, #28
   83d8c:	4403      	add	r3, r0
   83d8e:	930a      	str	r3, [sp, #40]	; 0x28
   83d90:	4613      	mov	r3, r2
   83d92:	4403      	add	r3, r0
   83d94:	4405      	add	r5, r0
   83d96:	9308      	str	r3, [sp, #32]
   83d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d9a:	2b00      	cmp	r3, #0
   83d9c:	dd05      	ble.n	83daa <_dtoa_r+0x522>
   83d9e:	4649      	mov	r1, r9
   83da0:	461a      	mov	r2, r3
   83da2:	4620      	mov	r0, r4
   83da4:	f001 f862 	bl	84e6c <__lshift>
   83da8:	4681      	mov	r9, r0
   83daa:	9b08      	ldr	r3, [sp, #32]
   83dac:	2b00      	cmp	r3, #0
   83dae:	dd05      	ble.n	83dbc <_dtoa_r+0x534>
   83db0:	4641      	mov	r1, r8
   83db2:	461a      	mov	r2, r3
   83db4:	4620      	mov	r0, r4
   83db6:	f001 f859 	bl	84e6c <__lshift>
   83dba:	4680      	mov	r8, r0
   83dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83dbe:	2b00      	cmp	r3, #0
   83dc0:	f040 8086 	bne.w	83ed0 <_dtoa_r+0x648>
   83dc4:	9b07      	ldr	r3, [sp, #28]
   83dc6:	2b00      	cmp	r3, #0
   83dc8:	f340 8264 	ble.w	84294 <_dtoa_r+0xa0c>
   83dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83dce:	2b00      	cmp	r3, #0
   83dd0:	f000 8098 	beq.w	83f04 <_dtoa_r+0x67c>
   83dd4:	2d00      	cmp	r5, #0
   83dd6:	dd05      	ble.n	83de4 <_dtoa_r+0x55c>
   83dd8:	4631      	mov	r1, r6
   83dda:	462a      	mov	r2, r5
   83ddc:	4620      	mov	r0, r4
   83dde:	f001 f845 	bl	84e6c <__lshift>
   83de2:	4606      	mov	r6, r0
   83de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83de6:	2b00      	cmp	r3, #0
   83de8:	f040 8336 	bne.w	84458 <_dtoa_r+0xbd0>
   83dec:	9608      	str	r6, [sp, #32]
   83dee:	9b07      	ldr	r3, [sp, #28]
   83df0:	9a04      	ldr	r2, [sp, #16]
   83df2:	3b01      	subs	r3, #1
   83df4:	18d3      	adds	r3, r2, r3
   83df6:	930b      	str	r3, [sp, #44]	; 0x2c
   83df8:	4617      	mov	r7, r2
   83dfa:	f00a 0301 	and.w	r3, sl, #1
   83dfe:	46c2      	mov	sl, r8
   83e00:	f8dd b020 	ldr.w	fp, [sp, #32]
   83e04:	930c      	str	r3, [sp, #48]	; 0x30
   83e06:	4651      	mov	r1, sl
   83e08:	4648      	mov	r0, r9
   83e0a:	f7ff fca7 	bl	8375c <quorem>
   83e0e:	4631      	mov	r1, r6
   83e10:	4605      	mov	r5, r0
   83e12:	4648      	mov	r0, r9
   83e14:	f001 f87a 	bl	84f0c <__mcmp>
   83e18:	465a      	mov	r2, fp
   83e1a:	9007      	str	r0, [sp, #28]
   83e1c:	4651      	mov	r1, sl
   83e1e:	4620      	mov	r0, r4
   83e20:	f001 f890 	bl	84f44 <__mdiff>
   83e24:	68c2      	ldr	r2, [r0, #12]
   83e26:	4680      	mov	r8, r0
   83e28:	f105 0330 	add.w	r3, r5, #48	; 0x30
   83e2c:	2a00      	cmp	r2, #0
   83e2e:	f040 8229 	bne.w	84284 <_dtoa_r+0x9fc>
   83e32:	4601      	mov	r1, r0
   83e34:	4648      	mov	r0, r9
   83e36:	930a      	str	r3, [sp, #40]	; 0x28
   83e38:	f001 f868 	bl	84f0c <__mcmp>
   83e3c:	4641      	mov	r1, r8
   83e3e:	9008      	str	r0, [sp, #32]
   83e40:	4620      	mov	r0, r4
   83e42:	f000 fe8b 	bl	84b5c <_Bfree>
   83e46:	9a08      	ldr	r2, [sp, #32]
   83e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e4a:	b932      	cbnz	r2, 83e5a <_dtoa_r+0x5d2>
   83e4c:	9924      	ldr	r1, [sp, #144]	; 0x90
   83e4e:	b921      	cbnz	r1, 83e5a <_dtoa_r+0x5d2>
   83e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83e52:	2a00      	cmp	r2, #0
   83e54:	f000 83ee 	beq.w	84634 <_dtoa_r+0xdac>
   83e58:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83e5a:	9907      	ldr	r1, [sp, #28]
   83e5c:	2900      	cmp	r1, #0
   83e5e:	f2c0 829f 	blt.w	843a0 <_dtoa_r+0xb18>
   83e62:	d105      	bne.n	83e70 <_dtoa_r+0x5e8>
   83e64:	9924      	ldr	r1, [sp, #144]	; 0x90
   83e66:	b919      	cbnz	r1, 83e70 <_dtoa_r+0x5e8>
   83e68:	990c      	ldr	r1, [sp, #48]	; 0x30
   83e6a:	2900      	cmp	r1, #0
   83e6c:	f000 8298 	beq.w	843a0 <_dtoa_r+0xb18>
   83e70:	2a00      	cmp	r2, #0
   83e72:	f300 8305 	bgt.w	84480 <_dtoa_r+0xbf8>
   83e76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83e78:	f107 0801 	add.w	r8, r7, #1
   83e7c:	4297      	cmp	r7, r2
   83e7e:	703b      	strb	r3, [r7, #0]
   83e80:	4645      	mov	r5, r8
   83e82:	f000 830b 	beq.w	8449c <_dtoa_r+0xc14>
   83e86:	4649      	mov	r1, r9
   83e88:	2300      	movs	r3, #0
   83e8a:	220a      	movs	r2, #10
   83e8c:	4620      	mov	r0, r4
   83e8e:	f000 fe6f 	bl	84b70 <__multadd>
   83e92:	455e      	cmp	r6, fp
   83e94:	4681      	mov	r9, r0
   83e96:	4631      	mov	r1, r6
   83e98:	f04f 0300 	mov.w	r3, #0
   83e9c:	f04f 020a 	mov.w	r2, #10
   83ea0:	4620      	mov	r0, r4
   83ea2:	f000 81e9 	beq.w	84278 <_dtoa_r+0x9f0>
   83ea6:	f000 fe63 	bl	84b70 <__multadd>
   83eaa:	4659      	mov	r1, fp
   83eac:	4606      	mov	r6, r0
   83eae:	2300      	movs	r3, #0
   83eb0:	220a      	movs	r2, #10
   83eb2:	4620      	mov	r0, r4
   83eb4:	f000 fe5c 	bl	84b70 <__multadd>
   83eb8:	4647      	mov	r7, r8
   83eba:	4683      	mov	fp, r0
   83ebc:	e7a3      	b.n	83e06 <_dtoa_r+0x57e>
   83ebe:	201c      	movs	r0, #28
   83ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83ec2:	4405      	add	r5, r0
   83ec4:	4403      	add	r3, r0
   83ec6:	930a      	str	r3, [sp, #40]	; 0x28
   83ec8:	9b08      	ldr	r3, [sp, #32]
   83eca:	4403      	add	r3, r0
   83ecc:	9308      	str	r3, [sp, #32]
   83ece:	e763      	b.n	83d98 <_dtoa_r+0x510>
   83ed0:	4641      	mov	r1, r8
   83ed2:	4648      	mov	r0, r9
   83ed4:	f001 f81a 	bl	84f0c <__mcmp>
   83ed8:	2800      	cmp	r0, #0
   83eda:	f6bf af73 	bge.w	83dc4 <_dtoa_r+0x53c>
   83ede:	9f02      	ldr	r7, [sp, #8]
   83ee0:	4649      	mov	r1, r9
   83ee2:	2300      	movs	r3, #0
   83ee4:	220a      	movs	r2, #10
   83ee6:	4620      	mov	r0, r4
   83ee8:	3f01      	subs	r7, #1
   83eea:	9702      	str	r7, [sp, #8]
   83eec:	f000 fe40 	bl	84b70 <__multadd>
   83ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83ef2:	4681      	mov	r9, r0
   83ef4:	2b00      	cmp	r3, #0
   83ef6:	f040 83b5 	bne.w	84664 <_dtoa_r+0xddc>
   83efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83efc:	2b00      	cmp	r3, #0
   83efe:	f340 83be 	ble.w	8467e <_dtoa_r+0xdf6>
   83f02:	9307      	str	r3, [sp, #28]
   83f04:	f8dd a010 	ldr.w	sl, [sp, #16]
   83f08:	9f07      	ldr	r7, [sp, #28]
   83f0a:	4655      	mov	r5, sl
   83f0c:	e006      	b.n	83f1c <_dtoa_r+0x694>
   83f0e:	4649      	mov	r1, r9
   83f10:	2300      	movs	r3, #0
   83f12:	220a      	movs	r2, #10
   83f14:	4620      	mov	r0, r4
   83f16:	f000 fe2b 	bl	84b70 <__multadd>
   83f1a:	4681      	mov	r9, r0
   83f1c:	4641      	mov	r1, r8
   83f1e:	4648      	mov	r0, r9
   83f20:	f7ff fc1c 	bl	8375c <quorem>
   83f24:	3030      	adds	r0, #48	; 0x30
   83f26:	f805 0b01 	strb.w	r0, [r5], #1
   83f2a:	eba5 030a 	sub.w	r3, r5, sl
   83f2e:	42bb      	cmp	r3, r7
   83f30:	dbed      	blt.n	83f0e <_dtoa_r+0x686>
   83f32:	9b04      	ldr	r3, [sp, #16]
   83f34:	9a07      	ldr	r2, [sp, #28]
   83f36:	4682      	mov	sl, r0
   83f38:	2a01      	cmp	r2, #1
   83f3a:	bfac      	ite	ge
   83f3c:	189b      	addge	r3, r3, r2
   83f3e:	3301      	addlt	r3, #1
   83f40:	f04f 0b00 	mov.w	fp, #0
   83f44:	461d      	mov	r5, r3
   83f46:	4649      	mov	r1, r9
   83f48:	2201      	movs	r2, #1
   83f4a:	4620      	mov	r0, r4
   83f4c:	f000 ff8e 	bl	84e6c <__lshift>
   83f50:	4641      	mov	r1, r8
   83f52:	4681      	mov	r9, r0
   83f54:	f000 ffda 	bl	84f0c <__mcmp>
   83f58:	2800      	cmp	r0, #0
   83f5a:	f340 823f 	ble.w	843dc <_dtoa_r+0xb54>
   83f5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   83f62:	1e6b      	subs	r3, r5, #1
   83f64:	9904      	ldr	r1, [sp, #16]
   83f66:	e004      	b.n	83f72 <_dtoa_r+0x6ea>
   83f68:	428b      	cmp	r3, r1
   83f6a:	f000 81ae 	beq.w	842ca <_dtoa_r+0xa42>
   83f6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   83f72:	2a39      	cmp	r2, #57	; 0x39
   83f74:	f103 0501 	add.w	r5, r3, #1
   83f78:	d0f6      	beq.n	83f68 <_dtoa_r+0x6e0>
   83f7a:	3201      	adds	r2, #1
   83f7c:	701a      	strb	r2, [r3, #0]
   83f7e:	4641      	mov	r1, r8
   83f80:	4620      	mov	r0, r4
   83f82:	f000 fdeb 	bl	84b5c <_Bfree>
   83f86:	2e00      	cmp	r6, #0
   83f88:	f43f ae3d 	beq.w	83c06 <_dtoa_r+0x37e>
   83f8c:	f1bb 0f00 	cmp.w	fp, #0
   83f90:	d005      	beq.n	83f9e <_dtoa_r+0x716>
   83f92:	45b3      	cmp	fp, r6
   83f94:	d003      	beq.n	83f9e <_dtoa_r+0x716>
   83f96:	4659      	mov	r1, fp
   83f98:	4620      	mov	r0, r4
   83f9a:	f000 fddf 	bl	84b5c <_Bfree>
   83f9e:	4631      	mov	r1, r6
   83fa0:	4620      	mov	r0, r4
   83fa2:	f000 fddb 	bl	84b5c <_Bfree>
   83fa6:	e62e      	b.n	83c06 <_dtoa_r+0x37e>
   83fa8:	2300      	movs	r3, #0
   83faa:	930b      	str	r3, [sp, #44]	; 0x2c
   83fac:	9b02      	ldr	r3, [sp, #8]
   83fae:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83fb0:	4413      	add	r3, r2
   83fb2:	930f      	str	r3, [sp, #60]	; 0x3c
   83fb4:	3301      	adds	r3, #1
   83fb6:	2b01      	cmp	r3, #1
   83fb8:	461f      	mov	r7, r3
   83fba:	461e      	mov	r6, r3
   83fbc:	bfb8      	it	lt
   83fbe:	2701      	movlt	r7, #1
   83fc0:	9307      	str	r3, [sp, #28]
   83fc2:	2100      	movs	r1, #0
   83fc4:	2f17      	cmp	r7, #23
   83fc6:	6461      	str	r1, [r4, #68]	; 0x44
   83fc8:	d90a      	bls.n	83fe0 <_dtoa_r+0x758>
   83fca:	2201      	movs	r2, #1
   83fcc:	2304      	movs	r3, #4
   83fce:	005b      	lsls	r3, r3, #1
   83fd0:	f103 0014 	add.w	r0, r3, #20
   83fd4:	4287      	cmp	r7, r0
   83fd6:	4611      	mov	r1, r2
   83fd8:	f102 0201 	add.w	r2, r2, #1
   83fdc:	d2f7      	bcs.n	83fce <_dtoa_r+0x746>
   83fde:	6461      	str	r1, [r4, #68]	; 0x44
   83fe0:	4620      	mov	r0, r4
   83fe2:	f000 fd95 	bl	84b10 <_Balloc>
   83fe6:	2e0e      	cmp	r6, #14
   83fe8:	9004      	str	r0, [sp, #16]
   83fea:	6420      	str	r0, [r4, #64]	; 0x40
   83fec:	f63f ad47 	bhi.w	83a7e <_dtoa_r+0x1f6>
   83ff0:	2d00      	cmp	r5, #0
   83ff2:	f43f ad44 	beq.w	83a7e <_dtoa_r+0x1f6>
   83ff6:	9902      	ldr	r1, [sp, #8]
   83ff8:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   83ffc:	2900      	cmp	r1, #0
   83ffe:	f340 8203 	ble.w	84408 <_dtoa_r+0xb80>
   84002:	4bb9      	ldr	r3, [pc, #740]	; (842e8 <_dtoa_r+0xa60>)
   84004:	f001 020f 	and.w	r2, r1, #15
   84008:	110d      	asrs	r5, r1, #4
   8400a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8400e:	06e9      	lsls	r1, r5, #27
   84010:	e9d3 6700 	ldrd	r6, r7, [r3]
   84014:	f140 81af 	bpl.w	84376 <_dtoa_r+0xaee>
   84018:	4bb4      	ldr	r3, [pc, #720]	; (842ec <_dtoa_r+0xa64>)
   8401a:	4650      	mov	r0, sl
   8401c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   84020:	4659      	mov	r1, fp
   84022:	f001 fe25 	bl	85c70 <__aeabi_ddiv>
   84026:	f04f 0a03 	mov.w	sl, #3
   8402a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   8402e:	f005 050f 	and.w	r5, r5, #15
   84032:	b18d      	cbz	r5, 84058 <_dtoa_r+0x7d0>
   84034:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 842ec <_dtoa_r+0xa64>
   84038:	07ea      	lsls	r2, r5, #31
   8403a:	d509      	bpl.n	84050 <_dtoa_r+0x7c8>
   8403c:	e9d8 2300 	ldrd	r2, r3, [r8]
   84040:	4630      	mov	r0, r6
   84042:	4639      	mov	r1, r7
   84044:	f001 fcea 	bl	85a1c <__aeabi_dmul>
   84048:	4606      	mov	r6, r0
   8404a:	460f      	mov	r7, r1
   8404c:	f10a 0a01 	add.w	sl, sl, #1
   84050:	106d      	asrs	r5, r5, #1
   84052:	f108 0808 	add.w	r8, r8, #8
   84056:	d1ef      	bne.n	84038 <_dtoa_r+0x7b0>
   84058:	463b      	mov	r3, r7
   8405a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8405e:	4632      	mov	r2, r6
   84060:	f001 fe06 	bl	85c70 <__aeabi_ddiv>
   84064:	4607      	mov	r7, r0
   84066:	4688      	mov	r8, r1
   84068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8406a:	b143      	cbz	r3, 8407e <_dtoa_r+0x7f6>
   8406c:	2200      	movs	r2, #0
   8406e:	4ba0      	ldr	r3, [pc, #640]	; (842f0 <_dtoa_r+0xa68>)
   84070:	4638      	mov	r0, r7
   84072:	4641      	mov	r1, r8
   84074:	f001 ff44 	bl	85f00 <__aeabi_dcmplt>
   84078:	2800      	cmp	r0, #0
   8407a:	f040 8287 	bne.w	8458c <_dtoa_r+0xd04>
   8407e:	4650      	mov	r0, sl
   84080:	f001 fc66 	bl	85950 <__aeabi_i2d>
   84084:	463a      	mov	r2, r7
   84086:	4643      	mov	r3, r8
   84088:	f001 fcc8 	bl	85a1c <__aeabi_dmul>
   8408c:	4b99      	ldr	r3, [pc, #612]	; (842f4 <_dtoa_r+0xa6c>)
   8408e:	2200      	movs	r2, #0
   84090:	f001 fb12 	bl	856b8 <__adddf3>
   84094:	9b07      	ldr	r3, [sp, #28]
   84096:	4605      	mov	r5, r0
   84098:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8409c:	2b00      	cmp	r3, #0
   8409e:	f000 813f 	beq.w	84320 <_dtoa_r+0xa98>
   840a2:	9b02      	ldr	r3, [sp, #8]
   840a4:	9315      	str	r3, [sp, #84]	; 0x54
   840a6:	9b07      	ldr	r3, [sp, #28]
   840a8:	9312      	str	r3, [sp, #72]	; 0x48
   840aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   840ac:	2b00      	cmp	r3, #0
   840ae:	f000 81fb 	beq.w	844a8 <_dtoa_r+0xc20>
   840b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   840b4:	4b8c      	ldr	r3, [pc, #560]	; (842e8 <_dtoa_r+0xa60>)
   840b6:	2000      	movs	r0, #0
   840b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   840bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   840c0:	498d      	ldr	r1, [pc, #564]	; (842f8 <_dtoa_r+0xa70>)
   840c2:	f001 fdd5 	bl	85c70 <__aeabi_ddiv>
   840c6:	462a      	mov	r2, r5
   840c8:	4633      	mov	r3, r6
   840ca:	f001 faf3 	bl	856b4 <__aeabi_dsub>
   840ce:	4682      	mov	sl, r0
   840d0:	468b      	mov	fp, r1
   840d2:	4638      	mov	r0, r7
   840d4:	4641      	mov	r1, r8
   840d6:	f001 ff51 	bl	85f7c <__aeabi_d2iz>
   840da:	4605      	mov	r5, r0
   840dc:	f001 fc38 	bl	85950 <__aeabi_i2d>
   840e0:	4602      	mov	r2, r0
   840e2:	460b      	mov	r3, r1
   840e4:	4638      	mov	r0, r7
   840e6:	4641      	mov	r1, r8
   840e8:	f001 fae4 	bl	856b4 <__aeabi_dsub>
   840ec:	3530      	adds	r5, #48	; 0x30
   840ee:	fa5f f885 	uxtb.w	r8, r5
   840f2:	9d04      	ldr	r5, [sp, #16]
   840f4:	4606      	mov	r6, r0
   840f6:	460f      	mov	r7, r1
   840f8:	f885 8000 	strb.w	r8, [r5]
   840fc:	4602      	mov	r2, r0
   840fe:	460b      	mov	r3, r1
   84100:	4650      	mov	r0, sl
   84102:	4659      	mov	r1, fp
   84104:	3501      	adds	r5, #1
   84106:	f001 ff19 	bl	85f3c <__aeabi_dcmpgt>
   8410a:	2800      	cmp	r0, #0
   8410c:	d154      	bne.n	841b8 <_dtoa_r+0x930>
   8410e:	4632      	mov	r2, r6
   84110:	463b      	mov	r3, r7
   84112:	2000      	movs	r0, #0
   84114:	4976      	ldr	r1, [pc, #472]	; (842f0 <_dtoa_r+0xa68>)
   84116:	f001 facd 	bl	856b4 <__aeabi_dsub>
   8411a:	4602      	mov	r2, r0
   8411c:	460b      	mov	r3, r1
   8411e:	4650      	mov	r0, sl
   84120:	4659      	mov	r1, fp
   84122:	f001 ff0b 	bl	85f3c <__aeabi_dcmpgt>
   84126:	2800      	cmp	r0, #0
   84128:	f040 8270 	bne.w	8460c <_dtoa_r+0xd84>
   8412c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8412e:	2a01      	cmp	r2, #1
   84130:	f000 8112 	beq.w	84358 <_dtoa_r+0xad0>
   84134:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84136:	9a04      	ldr	r2, [sp, #16]
   84138:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   8413c:	4413      	add	r3, r2
   8413e:	4699      	mov	r9, r3
   84140:	e00f      	b.n	84162 <_dtoa_r+0x8da>
   84142:	4632      	mov	r2, r6
   84144:	463b      	mov	r3, r7
   84146:	2000      	movs	r0, #0
   84148:	4969      	ldr	r1, [pc, #420]	; (842f0 <_dtoa_r+0xa68>)
   8414a:	f001 fab3 	bl	856b4 <__aeabi_dsub>
   8414e:	4652      	mov	r2, sl
   84150:	465b      	mov	r3, fp
   84152:	f001 fed5 	bl	85f00 <__aeabi_dcmplt>
   84156:	2800      	cmp	r0, #0
   84158:	f040 8256 	bne.w	84608 <_dtoa_r+0xd80>
   8415c:	454d      	cmp	r5, r9
   8415e:	f000 80f9 	beq.w	84354 <_dtoa_r+0xacc>
   84162:	4650      	mov	r0, sl
   84164:	4659      	mov	r1, fp
   84166:	2200      	movs	r2, #0
   84168:	4b64      	ldr	r3, [pc, #400]	; (842fc <_dtoa_r+0xa74>)
   8416a:	f001 fc57 	bl	85a1c <__aeabi_dmul>
   8416e:	2200      	movs	r2, #0
   84170:	4b62      	ldr	r3, [pc, #392]	; (842fc <_dtoa_r+0xa74>)
   84172:	4682      	mov	sl, r0
   84174:	468b      	mov	fp, r1
   84176:	4630      	mov	r0, r6
   84178:	4639      	mov	r1, r7
   8417a:	f001 fc4f 	bl	85a1c <__aeabi_dmul>
   8417e:	460f      	mov	r7, r1
   84180:	4606      	mov	r6, r0
   84182:	f001 fefb 	bl	85f7c <__aeabi_d2iz>
   84186:	4680      	mov	r8, r0
   84188:	f001 fbe2 	bl	85950 <__aeabi_i2d>
   8418c:	4602      	mov	r2, r0
   8418e:	460b      	mov	r3, r1
   84190:	4630      	mov	r0, r6
   84192:	4639      	mov	r1, r7
   84194:	f001 fa8e 	bl	856b4 <__aeabi_dsub>
   84198:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8419c:	fa5f f888 	uxtb.w	r8, r8
   841a0:	f805 8b01 	strb.w	r8, [r5], #1
   841a4:	4652      	mov	r2, sl
   841a6:	465b      	mov	r3, fp
   841a8:	4606      	mov	r6, r0
   841aa:	460f      	mov	r7, r1
   841ac:	f001 fea8 	bl	85f00 <__aeabi_dcmplt>
   841b0:	2800      	cmp	r0, #0
   841b2:	d0c6      	beq.n	84142 <_dtoa_r+0x8ba>
   841b4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   841b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   841ba:	9302      	str	r3, [sp, #8]
   841bc:	e523      	b.n	83c06 <_dtoa_r+0x37e>
   841be:	2300      	movs	r3, #0
   841c0:	930b      	str	r3, [sp, #44]	; 0x2c
   841c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   841c4:	2b00      	cmp	r3, #0
   841c6:	f340 80dd 	ble.w	84384 <_dtoa_r+0xafc>
   841ca:	461f      	mov	r7, r3
   841cc:	461e      	mov	r6, r3
   841ce:	930f      	str	r3, [sp, #60]	; 0x3c
   841d0:	9307      	str	r3, [sp, #28]
   841d2:	e6f6      	b.n	83fc2 <_dtoa_r+0x73a>
   841d4:	2301      	movs	r3, #1
   841d6:	930b      	str	r3, [sp, #44]	; 0x2c
   841d8:	e7f3      	b.n	841c2 <_dtoa_r+0x93a>
   841da:	f1ba 0f00 	cmp.w	sl, #0
   841de:	f47f ada7 	bne.w	83d30 <_dtoa_r+0x4a8>
   841e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   841e6:	2b00      	cmp	r3, #0
   841e8:	f47f adbc 	bne.w	83d64 <_dtoa_r+0x4dc>
   841ec:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   841f0:	0d3f      	lsrs	r7, r7, #20
   841f2:	053f      	lsls	r7, r7, #20
   841f4:	2f00      	cmp	r7, #0
   841f6:	f000 820d 	beq.w	84614 <_dtoa_r+0xd8c>
   841fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   841fc:	3301      	adds	r3, #1
   841fe:	930a      	str	r3, [sp, #40]	; 0x28
   84200:	9b08      	ldr	r3, [sp, #32]
   84202:	3301      	adds	r3, #1
   84204:	9308      	str	r3, [sp, #32]
   84206:	2301      	movs	r3, #1
   84208:	930c      	str	r3, [sp, #48]	; 0x30
   8420a:	e5ad      	b.n	83d68 <_dtoa_r+0x4e0>
   8420c:	9b07      	ldr	r3, [sp, #28]
   8420e:	2b00      	cmp	r3, #0
   84210:	f73f ac48 	bgt.w	83aa4 <_dtoa_r+0x21c>
   84214:	f040 8222 	bne.w	8465c <_dtoa_r+0xdd4>
   84218:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8421c:	2200      	movs	r2, #0
   8421e:	4b38      	ldr	r3, [pc, #224]	; (84300 <_dtoa_r+0xa78>)
   84220:	f001 fbfc 	bl	85a1c <__aeabi_dmul>
   84224:	4652      	mov	r2, sl
   84226:	465b      	mov	r3, fp
   84228:	f001 fe7e 	bl	85f28 <__aeabi_dcmpge>
   8422c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   84230:	4646      	mov	r6, r8
   84232:	2800      	cmp	r0, #0
   84234:	d041      	beq.n	842ba <_dtoa_r+0xa32>
   84236:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84238:	9d04      	ldr	r5, [sp, #16]
   8423a:	43db      	mvns	r3, r3
   8423c:	9302      	str	r3, [sp, #8]
   8423e:	4641      	mov	r1, r8
   84240:	4620      	mov	r0, r4
   84242:	f000 fc8b 	bl	84b5c <_Bfree>
   84246:	2e00      	cmp	r6, #0
   84248:	f43f acdd 	beq.w	83c06 <_dtoa_r+0x37e>
   8424c:	e6a7      	b.n	83f9e <_dtoa_r+0x716>
   8424e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84250:	4649      	mov	r1, r9
   84252:	4620      	mov	r0, r4
   84254:	f000 fdba 	bl	84dcc <__pow5mult>
   84258:	4681      	mov	r9, r0
   8425a:	e557      	b.n	83d0c <_dtoa_r+0x484>
   8425c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   8425e:	2a00      	cmp	r2, #0
   84260:	f000 8188 	beq.w	84574 <_dtoa_r+0xcec>
   84264:	f203 4333 	addw	r3, r3, #1075	; 0x433
   84268:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8426a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8426c:	e4f2      	b.n	83c54 <_dtoa_r+0x3cc>
   8426e:	f1ba 0f00 	cmp.w	sl, #0
   84272:	f47f ad77 	bne.w	83d64 <_dtoa_r+0x4dc>
   84276:	e7b4      	b.n	841e2 <_dtoa_r+0x95a>
   84278:	f000 fc7a 	bl	84b70 <__multadd>
   8427c:	4647      	mov	r7, r8
   8427e:	4606      	mov	r6, r0
   84280:	4683      	mov	fp, r0
   84282:	e5c0      	b.n	83e06 <_dtoa_r+0x57e>
   84284:	4601      	mov	r1, r0
   84286:	4620      	mov	r0, r4
   84288:	9308      	str	r3, [sp, #32]
   8428a:	f000 fc67 	bl	84b5c <_Bfree>
   8428e:	2201      	movs	r2, #1
   84290:	9b08      	ldr	r3, [sp, #32]
   84292:	e5e2      	b.n	83e5a <_dtoa_r+0x5d2>
   84294:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84296:	2b02      	cmp	r3, #2
   84298:	f77f ad98 	ble.w	83dcc <_dtoa_r+0x544>
   8429c:	9b07      	ldr	r3, [sp, #28]
   8429e:	2b00      	cmp	r3, #0
   842a0:	d1c9      	bne.n	84236 <_dtoa_r+0x9ae>
   842a2:	4641      	mov	r1, r8
   842a4:	2205      	movs	r2, #5
   842a6:	4620      	mov	r0, r4
   842a8:	f000 fc62 	bl	84b70 <__multadd>
   842ac:	4601      	mov	r1, r0
   842ae:	4680      	mov	r8, r0
   842b0:	4648      	mov	r0, r9
   842b2:	f000 fe2b 	bl	84f0c <__mcmp>
   842b6:	2800      	cmp	r0, #0
   842b8:	ddbd      	ble.n	84236 <_dtoa_r+0x9ae>
   842ba:	2331      	movs	r3, #49	; 0x31
   842bc:	9a02      	ldr	r2, [sp, #8]
   842be:	9904      	ldr	r1, [sp, #16]
   842c0:	3201      	adds	r2, #1
   842c2:	9202      	str	r2, [sp, #8]
   842c4:	700b      	strb	r3, [r1, #0]
   842c6:	1c4d      	adds	r5, r1, #1
   842c8:	e7b9      	b.n	8423e <_dtoa_r+0x9b6>
   842ca:	2331      	movs	r3, #49	; 0x31
   842cc:	9a02      	ldr	r2, [sp, #8]
   842ce:	3201      	adds	r2, #1
   842d0:	9202      	str	r2, [sp, #8]
   842d2:	9a04      	ldr	r2, [sp, #16]
   842d4:	7013      	strb	r3, [r2, #0]
   842d6:	e652      	b.n	83f7e <_dtoa_r+0x6f6>
   842d8:	2301      	movs	r3, #1
   842da:	930b      	str	r3, [sp, #44]	; 0x2c
   842dc:	e666      	b.n	83fac <_dtoa_r+0x724>
   842de:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   842e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   842e4:	e48f      	b.n	83c06 <_dtoa_r+0x37e>
   842e6:	bf00      	nop
   842e8:	00086450 	.word	0x00086450
   842ec:	00086428 	.word	0x00086428
   842f0:	3ff00000 	.word	0x3ff00000
   842f4:	401c0000 	.word	0x401c0000
   842f8:	3fe00000 	.word	0x3fe00000
   842fc:	40240000 	.word	0x40240000
   84300:	40140000 	.word	0x40140000
   84304:	4650      	mov	r0, sl
   84306:	f001 fb23 	bl	85950 <__aeabi_i2d>
   8430a:	463a      	mov	r2, r7
   8430c:	4643      	mov	r3, r8
   8430e:	f001 fb85 	bl	85a1c <__aeabi_dmul>
   84312:	2200      	movs	r2, #0
   84314:	4bc1      	ldr	r3, [pc, #772]	; (8461c <_dtoa_r+0xd94>)
   84316:	f001 f9cf 	bl	856b8 <__adddf3>
   8431a:	4605      	mov	r5, r0
   8431c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   84320:	4641      	mov	r1, r8
   84322:	2200      	movs	r2, #0
   84324:	4bbe      	ldr	r3, [pc, #760]	; (84620 <_dtoa_r+0xd98>)
   84326:	4638      	mov	r0, r7
   84328:	f001 f9c4 	bl	856b4 <__aeabi_dsub>
   8432c:	462a      	mov	r2, r5
   8432e:	4633      	mov	r3, r6
   84330:	4682      	mov	sl, r0
   84332:	468b      	mov	fp, r1
   84334:	f001 fe02 	bl	85f3c <__aeabi_dcmpgt>
   84338:	4680      	mov	r8, r0
   8433a:	2800      	cmp	r0, #0
   8433c:	f040 8110 	bne.w	84560 <_dtoa_r+0xcd8>
   84340:	462a      	mov	r2, r5
   84342:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   84346:	4650      	mov	r0, sl
   84348:	4659      	mov	r1, fp
   8434a:	f001 fdd9 	bl	85f00 <__aeabi_dcmplt>
   8434e:	b118      	cbz	r0, 84358 <_dtoa_r+0xad0>
   84350:	4646      	mov	r6, r8
   84352:	e770      	b.n	84236 <_dtoa_r+0x9ae>
   84354:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84358:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   8435c:	f7ff bb8f 	b.w	83a7e <_dtoa_r+0x1f6>
   84360:	9804      	ldr	r0, [sp, #16]
   84362:	f7ff bac0 	b.w	838e6 <_dtoa_r+0x5e>
   84366:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8436a:	1afb      	subs	r3, r7, r3
   8436c:	441a      	add	r2, r3
   8436e:	970c      	str	r7, [sp, #48]	; 0x30
   84370:	920d      	str	r2, [sp, #52]	; 0x34
   84372:	2700      	movs	r7, #0
   84374:	e468      	b.n	83c48 <_dtoa_r+0x3c0>
   84376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8437a:	f04f 0a02 	mov.w	sl, #2
   8437e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   84382:	e656      	b.n	84032 <_dtoa_r+0x7aa>
   84384:	2100      	movs	r1, #0
   84386:	2301      	movs	r3, #1
   84388:	4620      	mov	r0, r4
   8438a:	6461      	str	r1, [r4, #68]	; 0x44
   8438c:	9325      	str	r3, [sp, #148]	; 0x94
   8438e:	f000 fbbf 	bl	84b10 <_Balloc>
   84392:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84394:	9004      	str	r0, [sp, #16]
   84396:	9307      	str	r3, [sp, #28]
   84398:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8439a:	6420      	str	r0, [r4, #64]	; 0x40
   8439c:	930f      	str	r3, [sp, #60]	; 0x3c
   8439e:	e627      	b.n	83ff0 <_dtoa_r+0x768>
   843a0:	2a00      	cmp	r2, #0
   843a2:	46d0      	mov	r8, sl
   843a4:	f8cd b020 	str.w	fp, [sp, #32]
   843a8:	469a      	mov	sl, r3
   843aa:	dd11      	ble.n	843d0 <_dtoa_r+0xb48>
   843ac:	4649      	mov	r1, r9
   843ae:	2201      	movs	r2, #1
   843b0:	4620      	mov	r0, r4
   843b2:	f000 fd5b 	bl	84e6c <__lshift>
   843b6:	4641      	mov	r1, r8
   843b8:	4681      	mov	r9, r0
   843ba:	f000 fda7 	bl	84f0c <__mcmp>
   843be:	2800      	cmp	r0, #0
   843c0:	f340 8145 	ble.w	8464e <_dtoa_r+0xdc6>
   843c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   843c8:	f000 8105 	beq.w	845d6 <_dtoa_r+0xd4e>
   843cc:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   843d0:	46b3      	mov	fp, r6
   843d2:	f887 a000 	strb.w	sl, [r7]
   843d6:	1c7d      	adds	r5, r7, #1
   843d8:	9e08      	ldr	r6, [sp, #32]
   843da:	e5d0      	b.n	83f7e <_dtoa_r+0x6f6>
   843dc:	d104      	bne.n	843e8 <_dtoa_r+0xb60>
   843de:	f01a 0f01 	tst.w	sl, #1
   843e2:	d001      	beq.n	843e8 <_dtoa_r+0xb60>
   843e4:	e5bb      	b.n	83f5e <_dtoa_r+0x6d6>
   843e6:	4615      	mov	r5, r2
   843e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   843ec:	1e6a      	subs	r2, r5, #1
   843ee:	2b30      	cmp	r3, #48	; 0x30
   843f0:	d0f9      	beq.n	843e6 <_dtoa_r+0xb5e>
   843f2:	e5c4      	b.n	83f7e <_dtoa_r+0x6f6>
   843f4:	2230      	movs	r2, #48	; 0x30
   843f6:	9904      	ldr	r1, [sp, #16]
   843f8:	700a      	strb	r2, [r1, #0]
   843fa:	9a02      	ldr	r2, [sp, #8]
   843fc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84400:	3201      	adds	r2, #1
   84402:	9202      	str	r2, [sp, #8]
   84404:	f7ff bbfb 	b.w	83bfe <_dtoa_r+0x376>
   84408:	f000 80bb 	beq.w	84582 <_dtoa_r+0xcfa>
   8440c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   84410:	9b02      	ldr	r3, [sp, #8]
   84412:	f04f 0a02 	mov.w	sl, #2
   84416:	425d      	negs	r5, r3
   84418:	4b82      	ldr	r3, [pc, #520]	; (84624 <_dtoa_r+0xd9c>)
   8441a:	f005 020f 	and.w	r2, r5, #15
   8441e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84422:	e9d3 2300 	ldrd	r2, r3, [r3]
   84426:	f001 faf9 	bl	85a1c <__aeabi_dmul>
   8442a:	112d      	asrs	r5, r5, #4
   8442c:	4607      	mov	r7, r0
   8442e:	4688      	mov	r8, r1
   84430:	f43f ae1a 	beq.w	84068 <_dtoa_r+0x7e0>
   84434:	4e7c      	ldr	r6, [pc, #496]	; (84628 <_dtoa_r+0xda0>)
   84436:	07eb      	lsls	r3, r5, #31
   84438:	d509      	bpl.n	8444e <_dtoa_r+0xbc6>
   8443a:	e9d6 2300 	ldrd	r2, r3, [r6]
   8443e:	4638      	mov	r0, r7
   84440:	4641      	mov	r1, r8
   84442:	f001 faeb 	bl	85a1c <__aeabi_dmul>
   84446:	4607      	mov	r7, r0
   84448:	4688      	mov	r8, r1
   8444a:	f10a 0a01 	add.w	sl, sl, #1
   8444e:	106d      	asrs	r5, r5, #1
   84450:	f106 0608 	add.w	r6, r6, #8
   84454:	d1ef      	bne.n	84436 <_dtoa_r+0xbae>
   84456:	e607      	b.n	84068 <_dtoa_r+0x7e0>
   84458:	6871      	ldr	r1, [r6, #4]
   8445a:	4620      	mov	r0, r4
   8445c:	f000 fb58 	bl	84b10 <_Balloc>
   84460:	4605      	mov	r5, r0
   84462:	6933      	ldr	r3, [r6, #16]
   84464:	f106 010c 	add.w	r1, r6, #12
   84468:	3302      	adds	r3, #2
   8446a:	009a      	lsls	r2, r3, #2
   8446c:	300c      	adds	r0, #12
   8446e:	f7fd fdaf 	bl	81fd0 <memcpy>
   84472:	4629      	mov	r1, r5
   84474:	2201      	movs	r2, #1
   84476:	4620      	mov	r0, r4
   84478:	f000 fcf8 	bl	84e6c <__lshift>
   8447c:	9008      	str	r0, [sp, #32]
   8447e:	e4b6      	b.n	83dee <_dtoa_r+0x566>
   84480:	2b39      	cmp	r3, #57	; 0x39
   84482:	f8cd b020 	str.w	fp, [sp, #32]
   84486:	46d0      	mov	r8, sl
   84488:	f000 80a5 	beq.w	845d6 <_dtoa_r+0xd4e>
   8448c:	f103 0a01 	add.w	sl, r3, #1
   84490:	46b3      	mov	fp, r6
   84492:	f887 a000 	strb.w	sl, [r7]
   84496:	1c7d      	adds	r5, r7, #1
   84498:	9e08      	ldr	r6, [sp, #32]
   8449a:	e570      	b.n	83f7e <_dtoa_r+0x6f6>
   8449c:	465a      	mov	r2, fp
   8449e:	46d0      	mov	r8, sl
   844a0:	46b3      	mov	fp, r6
   844a2:	469a      	mov	sl, r3
   844a4:	4616      	mov	r6, r2
   844a6:	e54e      	b.n	83f46 <_dtoa_r+0x6be>
   844a8:	9812      	ldr	r0, [sp, #72]	; 0x48
   844aa:	495e      	ldr	r1, [pc, #376]	; (84624 <_dtoa_r+0xd9c>)
   844ac:	462a      	mov	r2, r5
   844ae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   844b2:	4633      	mov	r3, r6
   844b4:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   844b8:	f001 fab0 	bl	85a1c <__aeabi_dmul>
   844bc:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   844c0:	4638      	mov	r0, r7
   844c2:	4641      	mov	r1, r8
   844c4:	f001 fd5a 	bl	85f7c <__aeabi_d2iz>
   844c8:	4605      	mov	r5, r0
   844ca:	f001 fa41 	bl	85950 <__aeabi_i2d>
   844ce:	4602      	mov	r2, r0
   844d0:	460b      	mov	r3, r1
   844d2:	4638      	mov	r0, r7
   844d4:	4641      	mov	r1, r8
   844d6:	f001 f8ed 	bl	856b4 <__aeabi_dsub>
   844da:	4606      	mov	r6, r0
   844dc:	9812      	ldr	r0, [sp, #72]	; 0x48
   844de:	9a04      	ldr	r2, [sp, #16]
   844e0:	3530      	adds	r5, #48	; 0x30
   844e2:	2801      	cmp	r0, #1
   844e4:	7015      	strb	r5, [r2, #0]
   844e6:	460f      	mov	r7, r1
   844e8:	f102 0501 	add.w	r5, r2, #1
   844ec:	d026      	beq.n	8453c <_dtoa_r+0xcb4>
   844ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   844f0:	9a04      	ldr	r2, [sp, #16]
   844f2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   844f6:	4413      	add	r3, r2
   844f8:	f04f 0a00 	mov.w	sl, #0
   844fc:	4699      	mov	r9, r3
   844fe:	f8df b130 	ldr.w	fp, [pc, #304]	; 84630 <_dtoa_r+0xda8>
   84502:	4652      	mov	r2, sl
   84504:	465b      	mov	r3, fp
   84506:	4630      	mov	r0, r6
   84508:	4639      	mov	r1, r7
   8450a:	f001 fa87 	bl	85a1c <__aeabi_dmul>
   8450e:	460f      	mov	r7, r1
   84510:	4606      	mov	r6, r0
   84512:	f001 fd33 	bl	85f7c <__aeabi_d2iz>
   84516:	4680      	mov	r8, r0
   84518:	f001 fa1a 	bl	85950 <__aeabi_i2d>
   8451c:	4602      	mov	r2, r0
   8451e:	460b      	mov	r3, r1
   84520:	4630      	mov	r0, r6
   84522:	4639      	mov	r1, r7
   84524:	f001 f8c6 	bl	856b4 <__aeabi_dsub>
   84528:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8452c:	f805 8b01 	strb.w	r8, [r5], #1
   84530:	454d      	cmp	r5, r9
   84532:	4606      	mov	r6, r0
   84534:	460f      	mov	r7, r1
   84536:	d1e4      	bne.n	84502 <_dtoa_r+0xc7a>
   84538:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8453c:	2200      	movs	r2, #0
   8453e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   84542:	4b3a      	ldr	r3, [pc, #232]	; (8462c <_dtoa_r+0xda4>)
   84544:	f001 f8b8 	bl	856b8 <__adddf3>
   84548:	4632      	mov	r2, r6
   8454a:	463b      	mov	r3, r7
   8454c:	f001 fcd8 	bl	85f00 <__aeabi_dcmplt>
   84550:	2800      	cmp	r0, #0
   84552:	d046      	beq.n	845e2 <_dtoa_r+0xd5a>
   84554:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84556:	9302      	str	r3, [sp, #8]
   84558:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   8455c:	f7ff bb42 	b.w	83be4 <_dtoa_r+0x35c>
   84560:	f04f 0800 	mov.w	r8, #0
   84564:	4646      	mov	r6, r8
   84566:	e6a8      	b.n	842ba <_dtoa_r+0xa32>
   84568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8456a:	9a07      	ldr	r2, [sp, #28]
   8456c:	1a9d      	subs	r5, r3, r2
   8456e:	2300      	movs	r3, #0
   84570:	f7ff bb70 	b.w	83c54 <_dtoa_r+0x3cc>
   84574:	9b18      	ldr	r3, [sp, #96]	; 0x60
   84576:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84578:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8457c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8457e:	f7ff bb69 	b.w	83c54 <_dtoa_r+0x3cc>
   84582:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   84586:	f04f 0a02 	mov.w	sl, #2
   8458a:	e56d      	b.n	84068 <_dtoa_r+0x7e0>
   8458c:	9b07      	ldr	r3, [sp, #28]
   8458e:	2b00      	cmp	r3, #0
   84590:	f43f aeb8 	beq.w	84304 <_dtoa_r+0xa7c>
   84594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84596:	2b00      	cmp	r3, #0
   84598:	f77f aede 	ble.w	84358 <_dtoa_r+0xad0>
   8459c:	2200      	movs	r2, #0
   8459e:	4b24      	ldr	r3, [pc, #144]	; (84630 <_dtoa_r+0xda8>)
   845a0:	4638      	mov	r0, r7
   845a2:	4641      	mov	r1, r8
   845a4:	f001 fa3a 	bl	85a1c <__aeabi_dmul>
   845a8:	4607      	mov	r7, r0
   845aa:	4688      	mov	r8, r1
   845ac:	f10a 0001 	add.w	r0, sl, #1
   845b0:	f001 f9ce 	bl	85950 <__aeabi_i2d>
   845b4:	463a      	mov	r2, r7
   845b6:	4643      	mov	r3, r8
   845b8:	f001 fa30 	bl	85a1c <__aeabi_dmul>
   845bc:	2200      	movs	r2, #0
   845be:	4b17      	ldr	r3, [pc, #92]	; (8461c <_dtoa_r+0xd94>)
   845c0:	f001 f87a 	bl	856b8 <__adddf3>
   845c4:	9a02      	ldr	r2, [sp, #8]
   845c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   845c8:	3a01      	subs	r2, #1
   845ca:	4605      	mov	r5, r0
   845cc:	9215      	str	r2, [sp, #84]	; 0x54
   845ce:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   845d2:	9312      	str	r3, [sp, #72]	; 0x48
   845d4:	e569      	b.n	840aa <_dtoa_r+0x822>
   845d6:	2239      	movs	r2, #57	; 0x39
   845d8:	46b3      	mov	fp, r6
   845da:	703a      	strb	r2, [r7, #0]
   845dc:	9e08      	ldr	r6, [sp, #32]
   845de:	1c7d      	adds	r5, r7, #1
   845e0:	e4bf      	b.n	83f62 <_dtoa_r+0x6da>
   845e2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   845e6:	2000      	movs	r0, #0
   845e8:	4910      	ldr	r1, [pc, #64]	; (8462c <_dtoa_r+0xda4>)
   845ea:	f001 f863 	bl	856b4 <__aeabi_dsub>
   845ee:	4632      	mov	r2, r6
   845f0:	463b      	mov	r3, r7
   845f2:	f001 fca3 	bl	85f3c <__aeabi_dcmpgt>
   845f6:	b908      	cbnz	r0, 845fc <_dtoa_r+0xd74>
   845f8:	e6ae      	b.n	84358 <_dtoa_r+0xad0>
   845fa:	4615      	mov	r5, r2
   845fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   84600:	1e6a      	subs	r2, r5, #1
   84602:	2b30      	cmp	r3, #48	; 0x30
   84604:	d0f9      	beq.n	845fa <_dtoa_r+0xd72>
   84606:	e5d7      	b.n	841b8 <_dtoa_r+0x930>
   84608:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8460c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8460e:	9302      	str	r3, [sp, #8]
   84610:	f7ff bae8 	b.w	83be4 <_dtoa_r+0x35c>
   84614:	970c      	str	r7, [sp, #48]	; 0x30
   84616:	f7ff bba7 	b.w	83d68 <_dtoa_r+0x4e0>
   8461a:	bf00      	nop
   8461c:	401c0000 	.word	0x401c0000
   84620:	40140000 	.word	0x40140000
   84624:	00086450 	.word	0x00086450
   84628:	00086428 	.word	0x00086428
   8462c:	3fe00000 	.word	0x3fe00000
   84630:	40240000 	.word	0x40240000
   84634:	2b39      	cmp	r3, #57	; 0x39
   84636:	f8cd b020 	str.w	fp, [sp, #32]
   8463a:	46d0      	mov	r8, sl
   8463c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84640:	469a      	mov	sl, r3
   84642:	d0c8      	beq.n	845d6 <_dtoa_r+0xd4e>
   84644:	f1bb 0f00 	cmp.w	fp, #0
   84648:	f73f aec0 	bgt.w	843cc <_dtoa_r+0xb44>
   8464c:	e6c0      	b.n	843d0 <_dtoa_r+0xb48>
   8464e:	f47f aebf 	bne.w	843d0 <_dtoa_r+0xb48>
   84652:	f01a 0f01 	tst.w	sl, #1
   84656:	f43f aebb 	beq.w	843d0 <_dtoa_r+0xb48>
   8465a:	e6b3      	b.n	843c4 <_dtoa_r+0xb3c>
   8465c:	f04f 0800 	mov.w	r8, #0
   84660:	4646      	mov	r6, r8
   84662:	e5e8      	b.n	84236 <_dtoa_r+0x9ae>
   84664:	4631      	mov	r1, r6
   84666:	2300      	movs	r3, #0
   84668:	220a      	movs	r2, #10
   8466a:	4620      	mov	r0, r4
   8466c:	f000 fa80 	bl	84b70 <__multadd>
   84670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84672:	4606      	mov	r6, r0
   84674:	2b00      	cmp	r3, #0
   84676:	dd07      	ble.n	84688 <_dtoa_r+0xe00>
   84678:	9307      	str	r3, [sp, #28]
   8467a:	f7ff bbab 	b.w	83dd4 <_dtoa_r+0x54c>
   8467e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84680:	2b02      	cmp	r3, #2
   84682:	dc1f      	bgt.n	846c4 <_dtoa_r+0xe3c>
   84684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84686:	e43c      	b.n	83f02 <_dtoa_r+0x67a>
   84688:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8468a:	2b02      	cmp	r3, #2
   8468c:	dc1a      	bgt.n	846c4 <_dtoa_r+0xe3c>
   8468e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84690:	e7f2      	b.n	84678 <_dtoa_r+0xdf0>
   84692:	f43f ab81 	beq.w	83d98 <_dtoa_r+0x510>
   84696:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8469a:	e411      	b.n	83ec0 <_dtoa_r+0x638>
   8469c:	2500      	movs	r5, #0
   8469e:	4620      	mov	r0, r4
   846a0:	6465      	str	r5, [r4, #68]	; 0x44
   846a2:	4629      	mov	r1, r5
   846a4:	f000 fa34 	bl	84b10 <_Balloc>
   846a8:	f04f 33ff 	mov.w	r3, #4294967295
   846ac:	9307      	str	r3, [sp, #28]
   846ae:	930f      	str	r3, [sp, #60]	; 0x3c
   846b0:	2301      	movs	r3, #1
   846b2:	9004      	str	r0, [sp, #16]
   846b4:	9525      	str	r5, [sp, #148]	; 0x94
   846b6:	6420      	str	r0, [r4, #64]	; 0x40
   846b8:	930b      	str	r3, [sp, #44]	; 0x2c
   846ba:	f7ff b9e0 	b.w	83a7e <_dtoa_r+0x1f6>
   846be:	2501      	movs	r5, #1
   846c0:	f7ff b9a8 	b.w	83a14 <_dtoa_r+0x18c>
   846c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   846c6:	9307      	str	r3, [sp, #28]
   846c8:	e5e8      	b.n	8429c <_dtoa_r+0xa14>
   846ca:	bf00      	nop

000846cc <__libc_fini_array>:
   846cc:	b538      	push	{r3, r4, r5, lr}
   846ce:	4c0a      	ldr	r4, [pc, #40]	; (846f8 <__libc_fini_array+0x2c>)
   846d0:	4d0a      	ldr	r5, [pc, #40]	; (846fc <__libc_fini_array+0x30>)
   846d2:	1b64      	subs	r4, r4, r5
   846d4:	10a4      	asrs	r4, r4, #2
   846d6:	d00a      	beq.n	846ee <__libc_fini_array+0x22>
   846d8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   846dc:	3b01      	subs	r3, #1
   846de:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   846e2:	3c01      	subs	r4, #1
   846e4:	f855 3904 	ldr.w	r3, [r5], #-4
   846e8:	4798      	blx	r3
   846ea:	2c00      	cmp	r4, #0
   846ec:	d1f9      	bne.n	846e2 <__libc_fini_array+0x16>
   846ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   846f2:	f001 bfa3 	b.w	8663c <_fini>
   846f6:	bf00      	nop
   846f8:	0008664c 	.word	0x0008664c
   846fc:	00086648 	.word	0x00086648

00084700 <_malloc_trim_r>:
   84700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84702:	460c      	mov	r4, r1
   84704:	4f23      	ldr	r7, [pc, #140]	; (84794 <_malloc_trim_r+0x94>)
   84706:	4606      	mov	r6, r0
   84708:	f7fd fd26 	bl	82158 <__malloc_lock>
   8470c:	68bb      	ldr	r3, [r7, #8]
   8470e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   84712:	685d      	ldr	r5, [r3, #4]
   84714:	310f      	adds	r1, #15
   84716:	f025 0503 	bic.w	r5, r5, #3
   8471a:	4429      	add	r1, r5
   8471c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84720:	f021 010f 	bic.w	r1, r1, #15
   84724:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84728:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8472c:	db07      	blt.n	8473e <_malloc_trim_r+0x3e>
   8472e:	2100      	movs	r1, #0
   84730:	4630      	mov	r0, r6
   84732:	f7fd fd1d 	bl	82170 <_sbrk_r>
   84736:	68bb      	ldr	r3, [r7, #8]
   84738:	442b      	add	r3, r5
   8473a:	4298      	cmp	r0, r3
   8473c:	d004      	beq.n	84748 <_malloc_trim_r+0x48>
   8473e:	4630      	mov	r0, r6
   84740:	f7fd fd10 	bl	82164 <__malloc_unlock>
   84744:	2000      	movs	r0, #0
   84746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84748:	4261      	negs	r1, r4
   8474a:	4630      	mov	r0, r6
   8474c:	f7fd fd10 	bl	82170 <_sbrk_r>
   84750:	3001      	adds	r0, #1
   84752:	d00d      	beq.n	84770 <_malloc_trim_r+0x70>
   84754:	4b10      	ldr	r3, [pc, #64]	; (84798 <_malloc_trim_r+0x98>)
   84756:	68ba      	ldr	r2, [r7, #8]
   84758:	6819      	ldr	r1, [r3, #0]
   8475a:	1b2d      	subs	r5, r5, r4
   8475c:	f045 0501 	orr.w	r5, r5, #1
   84760:	4630      	mov	r0, r6
   84762:	1b09      	subs	r1, r1, r4
   84764:	6055      	str	r5, [r2, #4]
   84766:	6019      	str	r1, [r3, #0]
   84768:	f7fd fcfc 	bl	82164 <__malloc_unlock>
   8476c:	2001      	movs	r0, #1
   8476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84770:	2100      	movs	r1, #0
   84772:	4630      	mov	r0, r6
   84774:	f7fd fcfc 	bl	82170 <_sbrk_r>
   84778:	68ba      	ldr	r2, [r7, #8]
   8477a:	1a83      	subs	r3, r0, r2
   8477c:	2b0f      	cmp	r3, #15
   8477e:	ddde      	ble.n	8473e <_malloc_trim_r+0x3e>
   84780:	4c06      	ldr	r4, [pc, #24]	; (8479c <_malloc_trim_r+0x9c>)
   84782:	4905      	ldr	r1, [pc, #20]	; (84798 <_malloc_trim_r+0x98>)
   84784:	6824      	ldr	r4, [r4, #0]
   84786:	f043 0301 	orr.w	r3, r3, #1
   8478a:	1b00      	subs	r0, r0, r4
   8478c:	6053      	str	r3, [r2, #4]
   8478e:	6008      	str	r0, [r1, #0]
   84790:	e7d5      	b.n	8473e <_malloc_trim_r+0x3e>
   84792:	bf00      	nop
   84794:	20070930 	.word	0x20070930
   84798:	2007104c 	.word	0x2007104c
   8479c:	20070d38 	.word	0x20070d38

000847a0 <_free_r>:
   847a0:	2900      	cmp	r1, #0
   847a2:	d044      	beq.n	8482e <_free_r+0x8e>
   847a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847a8:	460d      	mov	r5, r1
   847aa:	4680      	mov	r8, r0
   847ac:	f7fd fcd4 	bl	82158 <__malloc_lock>
   847b0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   847b4:	4969      	ldr	r1, [pc, #420]	; (8495c <_free_r+0x1bc>)
   847b6:	f1a5 0408 	sub.w	r4, r5, #8
   847ba:	f027 0301 	bic.w	r3, r7, #1
   847be:	18e2      	adds	r2, r4, r3
   847c0:	688e      	ldr	r6, [r1, #8]
   847c2:	6850      	ldr	r0, [r2, #4]
   847c4:	42b2      	cmp	r2, r6
   847c6:	f020 0003 	bic.w	r0, r0, #3
   847ca:	d05e      	beq.n	8488a <_free_r+0xea>
   847cc:	07fe      	lsls	r6, r7, #31
   847ce:	6050      	str	r0, [r2, #4]
   847d0:	d40b      	bmi.n	847ea <_free_r+0x4a>
   847d2:	f855 7c08 	ldr.w	r7, [r5, #-8]
   847d6:	f101 0e08 	add.w	lr, r1, #8
   847da:	1be4      	subs	r4, r4, r7
   847dc:	68a5      	ldr	r5, [r4, #8]
   847de:	443b      	add	r3, r7
   847e0:	4575      	cmp	r5, lr
   847e2:	d06d      	beq.n	848c0 <_free_r+0x120>
   847e4:	68e7      	ldr	r7, [r4, #12]
   847e6:	60ef      	str	r7, [r5, #12]
   847e8:	60bd      	str	r5, [r7, #8]
   847ea:	1815      	adds	r5, r2, r0
   847ec:	686d      	ldr	r5, [r5, #4]
   847ee:	07ed      	lsls	r5, r5, #31
   847f0:	d53e      	bpl.n	84870 <_free_r+0xd0>
   847f2:	f043 0201 	orr.w	r2, r3, #1
   847f6:	6062      	str	r2, [r4, #4]
   847f8:	50e3      	str	r3, [r4, r3]
   847fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   847fe:	d217      	bcs.n	84830 <_free_r+0x90>
   84800:	2201      	movs	r2, #1
   84802:	08db      	lsrs	r3, r3, #3
   84804:	1098      	asrs	r0, r3, #2
   84806:	684d      	ldr	r5, [r1, #4]
   84808:	4413      	add	r3, r2
   8480a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8480e:	4082      	lsls	r2, r0
   84810:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   84814:	432a      	orrs	r2, r5
   84816:	3808      	subs	r0, #8
   84818:	60e0      	str	r0, [r4, #12]
   8481a:	60a7      	str	r7, [r4, #8]
   8481c:	604a      	str	r2, [r1, #4]
   8481e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   84822:	60fc      	str	r4, [r7, #12]
   84824:	4640      	mov	r0, r8
   84826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8482a:	f7fd bc9b 	b.w	82164 <__malloc_unlock>
   8482e:	4770      	bx	lr
   84830:	0a5a      	lsrs	r2, r3, #9
   84832:	2a04      	cmp	r2, #4
   84834:	d852      	bhi.n	848dc <_free_r+0x13c>
   84836:	099a      	lsrs	r2, r3, #6
   84838:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8483c:	00ff      	lsls	r7, r7, #3
   8483e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   84842:	19c8      	adds	r0, r1, r7
   84844:	59ca      	ldr	r2, [r1, r7]
   84846:	3808      	subs	r0, #8
   84848:	4290      	cmp	r0, r2
   8484a:	d04f      	beq.n	848ec <_free_r+0x14c>
   8484c:	6851      	ldr	r1, [r2, #4]
   8484e:	f021 0103 	bic.w	r1, r1, #3
   84852:	428b      	cmp	r3, r1
   84854:	d232      	bcs.n	848bc <_free_r+0x11c>
   84856:	6892      	ldr	r2, [r2, #8]
   84858:	4290      	cmp	r0, r2
   8485a:	d1f7      	bne.n	8484c <_free_r+0xac>
   8485c:	68c3      	ldr	r3, [r0, #12]
   8485e:	60a0      	str	r0, [r4, #8]
   84860:	60e3      	str	r3, [r4, #12]
   84862:	609c      	str	r4, [r3, #8]
   84864:	60c4      	str	r4, [r0, #12]
   84866:	4640      	mov	r0, r8
   84868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8486c:	f7fd bc7a 	b.w	82164 <__malloc_unlock>
   84870:	6895      	ldr	r5, [r2, #8]
   84872:	4f3b      	ldr	r7, [pc, #236]	; (84960 <_free_r+0x1c0>)
   84874:	4403      	add	r3, r0
   84876:	42bd      	cmp	r5, r7
   84878:	d040      	beq.n	848fc <_free_r+0x15c>
   8487a:	68d0      	ldr	r0, [r2, #12]
   8487c:	f043 0201 	orr.w	r2, r3, #1
   84880:	60e8      	str	r0, [r5, #12]
   84882:	6085      	str	r5, [r0, #8]
   84884:	6062      	str	r2, [r4, #4]
   84886:	50e3      	str	r3, [r4, r3]
   84888:	e7b7      	b.n	847fa <_free_r+0x5a>
   8488a:	07ff      	lsls	r7, r7, #31
   8488c:	4403      	add	r3, r0
   8488e:	d407      	bmi.n	848a0 <_free_r+0x100>
   84890:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84894:	1b64      	subs	r4, r4, r5
   84896:	68e2      	ldr	r2, [r4, #12]
   84898:	68a0      	ldr	r0, [r4, #8]
   8489a:	442b      	add	r3, r5
   8489c:	60c2      	str	r2, [r0, #12]
   8489e:	6090      	str	r0, [r2, #8]
   848a0:	4a30      	ldr	r2, [pc, #192]	; (84964 <_free_r+0x1c4>)
   848a2:	f043 0001 	orr.w	r0, r3, #1
   848a6:	6812      	ldr	r2, [r2, #0]
   848a8:	6060      	str	r0, [r4, #4]
   848aa:	4293      	cmp	r3, r2
   848ac:	608c      	str	r4, [r1, #8]
   848ae:	d3b9      	bcc.n	84824 <_free_r+0x84>
   848b0:	4b2d      	ldr	r3, [pc, #180]	; (84968 <_free_r+0x1c8>)
   848b2:	4640      	mov	r0, r8
   848b4:	6819      	ldr	r1, [r3, #0]
   848b6:	f7ff ff23 	bl	84700 <_malloc_trim_r>
   848ba:	e7b3      	b.n	84824 <_free_r+0x84>
   848bc:	4610      	mov	r0, r2
   848be:	e7cd      	b.n	8485c <_free_r+0xbc>
   848c0:	1811      	adds	r1, r2, r0
   848c2:	6849      	ldr	r1, [r1, #4]
   848c4:	07c9      	lsls	r1, r1, #31
   848c6:	d444      	bmi.n	84952 <_free_r+0x1b2>
   848c8:	6891      	ldr	r1, [r2, #8]
   848ca:	4403      	add	r3, r0
   848cc:	68d2      	ldr	r2, [r2, #12]
   848ce:	f043 0001 	orr.w	r0, r3, #1
   848d2:	60ca      	str	r2, [r1, #12]
   848d4:	6091      	str	r1, [r2, #8]
   848d6:	6060      	str	r0, [r4, #4]
   848d8:	50e3      	str	r3, [r4, r3]
   848da:	e7a3      	b.n	84824 <_free_r+0x84>
   848dc:	2a14      	cmp	r2, #20
   848de:	d816      	bhi.n	8490e <_free_r+0x16e>
   848e0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   848e4:	00ff      	lsls	r7, r7, #3
   848e6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   848ea:	e7aa      	b.n	84842 <_free_r+0xa2>
   848ec:	2301      	movs	r3, #1
   848ee:	10aa      	asrs	r2, r5, #2
   848f0:	684d      	ldr	r5, [r1, #4]
   848f2:	4093      	lsls	r3, r2
   848f4:	432b      	orrs	r3, r5
   848f6:	604b      	str	r3, [r1, #4]
   848f8:	4603      	mov	r3, r0
   848fa:	e7b0      	b.n	8485e <_free_r+0xbe>
   848fc:	f043 0201 	orr.w	r2, r3, #1
   84900:	614c      	str	r4, [r1, #20]
   84902:	610c      	str	r4, [r1, #16]
   84904:	60e5      	str	r5, [r4, #12]
   84906:	60a5      	str	r5, [r4, #8]
   84908:	6062      	str	r2, [r4, #4]
   8490a:	50e3      	str	r3, [r4, r3]
   8490c:	e78a      	b.n	84824 <_free_r+0x84>
   8490e:	2a54      	cmp	r2, #84	; 0x54
   84910:	d806      	bhi.n	84920 <_free_r+0x180>
   84912:	0b1a      	lsrs	r2, r3, #12
   84914:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84918:	00ff      	lsls	r7, r7, #3
   8491a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8491e:	e790      	b.n	84842 <_free_r+0xa2>
   84920:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84924:	d806      	bhi.n	84934 <_free_r+0x194>
   84926:	0bda      	lsrs	r2, r3, #15
   84928:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8492c:	00ff      	lsls	r7, r7, #3
   8492e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84932:	e786      	b.n	84842 <_free_r+0xa2>
   84934:	f240 5054 	movw	r0, #1364	; 0x554
   84938:	4282      	cmp	r2, r0
   8493a:	d806      	bhi.n	8494a <_free_r+0x1aa>
   8493c:	0c9a      	lsrs	r2, r3, #18
   8493e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84942:	00ff      	lsls	r7, r7, #3
   84944:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84948:	e77b      	b.n	84842 <_free_r+0xa2>
   8494a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8494e:	257e      	movs	r5, #126	; 0x7e
   84950:	e777      	b.n	84842 <_free_r+0xa2>
   84952:	f043 0101 	orr.w	r1, r3, #1
   84956:	6061      	str	r1, [r4, #4]
   84958:	6013      	str	r3, [r2, #0]
   8495a:	e763      	b.n	84824 <_free_r+0x84>
   8495c:	20070930 	.word	0x20070930
   84960:	20070938 	.word	0x20070938
   84964:	20070d3c 	.word	0x20070d3c
   84968:	2007107c 	.word	0x2007107c

0008496c <_localeconv_r>:
   8496c:	4a04      	ldr	r2, [pc, #16]	; (84980 <_localeconv_r+0x14>)
   8496e:	4b05      	ldr	r3, [pc, #20]	; (84984 <_localeconv_r+0x18>)
   84970:	6812      	ldr	r2, [r2, #0]
   84972:	6b50      	ldr	r0, [r2, #52]	; 0x34
   84974:	2800      	cmp	r0, #0
   84976:	bf08      	it	eq
   84978:	4618      	moveq	r0, r3
   8497a:	30f0      	adds	r0, #240	; 0xf0
   8497c:	4770      	bx	lr
   8497e:	bf00      	nop
   84980:	20070504 	.word	0x20070504
   84984:	20070d44 	.word	0x20070d44

00084988 <__retarget_lock_acquire_recursive>:
   84988:	4770      	bx	lr
   8498a:	bf00      	nop

0008498c <__retarget_lock_release_recursive>:
   8498c:	4770      	bx	lr
   8498e:	bf00      	nop

00084990 <__ascii_mbtowc>:
   84990:	b082      	sub	sp, #8
   84992:	b149      	cbz	r1, 849a8 <__ascii_mbtowc+0x18>
   84994:	b15a      	cbz	r2, 849ae <__ascii_mbtowc+0x1e>
   84996:	b16b      	cbz	r3, 849b4 <__ascii_mbtowc+0x24>
   84998:	7813      	ldrb	r3, [r2, #0]
   8499a:	600b      	str	r3, [r1, #0]
   8499c:	7812      	ldrb	r2, [r2, #0]
   8499e:	1c10      	adds	r0, r2, #0
   849a0:	bf18      	it	ne
   849a2:	2001      	movne	r0, #1
   849a4:	b002      	add	sp, #8
   849a6:	4770      	bx	lr
   849a8:	a901      	add	r1, sp, #4
   849aa:	2a00      	cmp	r2, #0
   849ac:	d1f3      	bne.n	84996 <__ascii_mbtowc+0x6>
   849ae:	4610      	mov	r0, r2
   849b0:	b002      	add	sp, #8
   849b2:	4770      	bx	lr
   849b4:	f06f 0001 	mvn.w	r0, #1
   849b8:	e7f4      	b.n	849a4 <__ascii_mbtowc+0x14>
   849ba:	bf00      	nop

000849bc <memchr>:
   849bc:	0783      	lsls	r3, r0, #30
   849be:	b470      	push	{r4, r5, r6}
   849c0:	b2cd      	uxtb	r5, r1
   849c2:	d03d      	beq.n	84a40 <memchr+0x84>
   849c4:	1e54      	subs	r4, r2, #1
   849c6:	b30a      	cbz	r2, 84a0c <memchr+0x50>
   849c8:	7803      	ldrb	r3, [r0, #0]
   849ca:	42ab      	cmp	r3, r5
   849cc:	d01f      	beq.n	84a0e <memchr+0x52>
   849ce:	1c43      	adds	r3, r0, #1
   849d0:	e005      	b.n	849de <memchr+0x22>
   849d2:	f114 34ff 	adds.w	r4, r4, #4294967295
   849d6:	d319      	bcc.n	84a0c <memchr+0x50>
   849d8:	7802      	ldrb	r2, [r0, #0]
   849da:	42aa      	cmp	r2, r5
   849dc:	d017      	beq.n	84a0e <memchr+0x52>
   849de:	f013 0f03 	tst.w	r3, #3
   849e2:	4618      	mov	r0, r3
   849e4:	f103 0301 	add.w	r3, r3, #1
   849e8:	d1f3      	bne.n	849d2 <memchr+0x16>
   849ea:	2c03      	cmp	r4, #3
   849ec:	d811      	bhi.n	84a12 <memchr+0x56>
   849ee:	b34c      	cbz	r4, 84a44 <memchr+0x88>
   849f0:	7803      	ldrb	r3, [r0, #0]
   849f2:	42ab      	cmp	r3, r5
   849f4:	d00b      	beq.n	84a0e <memchr+0x52>
   849f6:	4404      	add	r4, r0
   849f8:	1c43      	adds	r3, r0, #1
   849fa:	e002      	b.n	84a02 <memchr+0x46>
   849fc:	7802      	ldrb	r2, [r0, #0]
   849fe:	42aa      	cmp	r2, r5
   84a00:	d005      	beq.n	84a0e <memchr+0x52>
   84a02:	429c      	cmp	r4, r3
   84a04:	4618      	mov	r0, r3
   84a06:	f103 0301 	add.w	r3, r3, #1
   84a0a:	d1f7      	bne.n	849fc <memchr+0x40>
   84a0c:	2000      	movs	r0, #0
   84a0e:	bc70      	pop	{r4, r5, r6}
   84a10:	4770      	bx	lr
   84a12:	0209      	lsls	r1, r1, #8
   84a14:	b289      	uxth	r1, r1
   84a16:	4329      	orrs	r1, r5
   84a18:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84a1c:	6803      	ldr	r3, [r0, #0]
   84a1e:	4606      	mov	r6, r0
   84a20:	404b      	eors	r3, r1
   84a22:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84a26:	ea22 0303 	bic.w	r3, r2, r3
   84a2a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84a2e:	f100 0004 	add.w	r0, r0, #4
   84a32:	d103      	bne.n	84a3c <memchr+0x80>
   84a34:	3c04      	subs	r4, #4
   84a36:	2c03      	cmp	r4, #3
   84a38:	d8f0      	bhi.n	84a1c <memchr+0x60>
   84a3a:	e7d8      	b.n	849ee <memchr+0x32>
   84a3c:	4630      	mov	r0, r6
   84a3e:	e7d7      	b.n	849f0 <memchr+0x34>
   84a40:	4614      	mov	r4, r2
   84a42:	e7d2      	b.n	849ea <memchr+0x2e>
   84a44:	4620      	mov	r0, r4
   84a46:	e7e2      	b.n	84a0e <memchr+0x52>

00084a48 <memmove>:
   84a48:	4288      	cmp	r0, r1
   84a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
   84a4c:	d90d      	bls.n	84a6a <memmove+0x22>
   84a4e:	188b      	adds	r3, r1, r2
   84a50:	4298      	cmp	r0, r3
   84a52:	d20a      	bcs.n	84a6a <memmove+0x22>
   84a54:	1884      	adds	r4, r0, r2
   84a56:	2a00      	cmp	r2, #0
   84a58:	d051      	beq.n	84afe <memmove+0xb6>
   84a5a:	4622      	mov	r2, r4
   84a5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84a60:	4299      	cmp	r1, r3
   84a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84a66:	d1f9      	bne.n	84a5c <memmove+0x14>
   84a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84a6a:	2a0f      	cmp	r2, #15
   84a6c:	d948      	bls.n	84b00 <memmove+0xb8>
   84a6e:	ea41 0300 	orr.w	r3, r1, r0
   84a72:	079b      	lsls	r3, r3, #30
   84a74:	d146      	bne.n	84b04 <memmove+0xbc>
   84a76:	4615      	mov	r5, r2
   84a78:	f100 0410 	add.w	r4, r0, #16
   84a7c:	f101 0310 	add.w	r3, r1, #16
   84a80:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84a84:	3d10      	subs	r5, #16
   84a86:	f844 6c10 	str.w	r6, [r4, #-16]
   84a8a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84a8e:	2d0f      	cmp	r5, #15
   84a90:	f844 6c0c 	str.w	r6, [r4, #-12]
   84a94:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84a98:	f104 0410 	add.w	r4, r4, #16
   84a9c:	f844 6c18 	str.w	r6, [r4, #-24]
   84aa0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84aa4:	f103 0310 	add.w	r3, r3, #16
   84aa8:	f844 6c14 	str.w	r6, [r4, #-20]
   84aac:	d8e8      	bhi.n	84a80 <memmove+0x38>
   84aae:	f1a2 0310 	sub.w	r3, r2, #16
   84ab2:	f023 030f 	bic.w	r3, r3, #15
   84ab6:	f002 0e0f 	and.w	lr, r2, #15
   84aba:	3310      	adds	r3, #16
   84abc:	f1be 0f03 	cmp.w	lr, #3
   84ac0:	4419      	add	r1, r3
   84ac2:	4403      	add	r3, r0
   84ac4:	d921      	bls.n	84b0a <memmove+0xc2>
   84ac6:	460e      	mov	r6, r1
   84ac8:	4674      	mov	r4, lr
   84aca:	1f1d      	subs	r5, r3, #4
   84acc:	f856 7b04 	ldr.w	r7, [r6], #4
   84ad0:	3c04      	subs	r4, #4
   84ad2:	2c03      	cmp	r4, #3
   84ad4:	f845 7f04 	str.w	r7, [r5, #4]!
   84ad8:	d8f8      	bhi.n	84acc <memmove+0x84>
   84ada:	f1ae 0404 	sub.w	r4, lr, #4
   84ade:	f024 0403 	bic.w	r4, r4, #3
   84ae2:	3404      	adds	r4, #4
   84ae4:	4421      	add	r1, r4
   84ae6:	4423      	add	r3, r4
   84ae8:	f002 0203 	and.w	r2, r2, #3
   84aec:	b162      	cbz	r2, 84b08 <memmove+0xc0>
   84aee:	3b01      	subs	r3, #1
   84af0:	440a      	add	r2, r1
   84af2:	f811 4b01 	ldrb.w	r4, [r1], #1
   84af6:	428a      	cmp	r2, r1
   84af8:	f803 4f01 	strb.w	r4, [r3, #1]!
   84afc:	d1f9      	bne.n	84af2 <memmove+0xaa>
   84afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84b00:	4603      	mov	r3, r0
   84b02:	e7f3      	b.n	84aec <memmove+0xa4>
   84b04:	4603      	mov	r3, r0
   84b06:	e7f2      	b.n	84aee <memmove+0xa6>
   84b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84b0a:	4672      	mov	r2, lr
   84b0c:	e7ee      	b.n	84aec <memmove+0xa4>
   84b0e:	bf00      	nop

00084b10 <_Balloc>:
   84b10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84b12:	b570      	push	{r4, r5, r6, lr}
   84b14:	4605      	mov	r5, r0
   84b16:	460c      	mov	r4, r1
   84b18:	b14b      	cbz	r3, 84b2e <_Balloc+0x1e>
   84b1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   84b1e:	b180      	cbz	r0, 84b42 <_Balloc+0x32>
   84b20:	6802      	ldr	r2, [r0, #0]
   84b22:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   84b26:	2300      	movs	r3, #0
   84b28:	6103      	str	r3, [r0, #16]
   84b2a:	60c3      	str	r3, [r0, #12]
   84b2c:	bd70      	pop	{r4, r5, r6, pc}
   84b2e:	2221      	movs	r2, #33	; 0x21
   84b30:	2104      	movs	r1, #4
   84b32:	f000 fd8b 	bl	8564c <_calloc_r>
   84b36:	64e8      	str	r0, [r5, #76]	; 0x4c
   84b38:	4603      	mov	r3, r0
   84b3a:	2800      	cmp	r0, #0
   84b3c:	d1ed      	bne.n	84b1a <_Balloc+0xa>
   84b3e:	2000      	movs	r0, #0
   84b40:	bd70      	pop	{r4, r5, r6, pc}
   84b42:	2101      	movs	r1, #1
   84b44:	fa01 f604 	lsl.w	r6, r1, r4
   84b48:	1d72      	adds	r2, r6, #5
   84b4a:	4628      	mov	r0, r5
   84b4c:	0092      	lsls	r2, r2, #2
   84b4e:	f000 fd7d 	bl	8564c <_calloc_r>
   84b52:	2800      	cmp	r0, #0
   84b54:	d0f3      	beq.n	84b3e <_Balloc+0x2e>
   84b56:	6044      	str	r4, [r0, #4]
   84b58:	6086      	str	r6, [r0, #8]
   84b5a:	e7e4      	b.n	84b26 <_Balloc+0x16>

00084b5c <_Bfree>:
   84b5c:	b131      	cbz	r1, 84b6c <_Bfree+0x10>
   84b5e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84b60:	684a      	ldr	r2, [r1, #4]
   84b62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   84b66:	6008      	str	r0, [r1, #0]
   84b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   84b6c:	4770      	bx	lr
   84b6e:	bf00      	nop

00084b70 <__multadd>:
   84b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   84b72:	460c      	mov	r4, r1
   84b74:	4605      	mov	r5, r0
   84b76:	f04f 0e00 	mov.w	lr, #0
   84b7a:	690e      	ldr	r6, [r1, #16]
   84b7c:	b083      	sub	sp, #12
   84b7e:	f101 0714 	add.w	r7, r1, #20
   84b82:	6838      	ldr	r0, [r7, #0]
   84b84:	f10e 0e01 	add.w	lr, lr, #1
   84b88:	b281      	uxth	r1, r0
   84b8a:	fb02 3301 	mla	r3, r2, r1, r3
   84b8e:	0c01      	lsrs	r1, r0, #16
   84b90:	0c18      	lsrs	r0, r3, #16
   84b92:	fb02 0101 	mla	r1, r2, r1, r0
   84b96:	b29b      	uxth	r3, r3
   84b98:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   84b9c:	4576      	cmp	r6, lr
   84b9e:	f847 3b04 	str.w	r3, [r7], #4
   84ba2:	ea4f 4311 	mov.w	r3, r1, lsr #16
   84ba6:	dcec      	bgt.n	84b82 <__multadd+0x12>
   84ba8:	b13b      	cbz	r3, 84bba <__multadd+0x4a>
   84baa:	68a2      	ldr	r2, [r4, #8]
   84bac:	4296      	cmp	r6, r2
   84bae:	da07      	bge.n	84bc0 <__multadd+0x50>
   84bb0:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   84bb4:	3601      	adds	r6, #1
   84bb6:	6153      	str	r3, [r2, #20]
   84bb8:	6126      	str	r6, [r4, #16]
   84bba:	4620      	mov	r0, r4
   84bbc:	b003      	add	sp, #12
   84bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84bc0:	6861      	ldr	r1, [r4, #4]
   84bc2:	4628      	mov	r0, r5
   84bc4:	3101      	adds	r1, #1
   84bc6:	9301      	str	r3, [sp, #4]
   84bc8:	f7ff ffa2 	bl	84b10 <_Balloc>
   84bcc:	4607      	mov	r7, r0
   84bce:	6922      	ldr	r2, [r4, #16]
   84bd0:	f104 010c 	add.w	r1, r4, #12
   84bd4:	3202      	adds	r2, #2
   84bd6:	0092      	lsls	r2, r2, #2
   84bd8:	300c      	adds	r0, #12
   84bda:	f7fd f9f9 	bl	81fd0 <memcpy>
   84bde:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   84be0:	6861      	ldr	r1, [r4, #4]
   84be2:	9b01      	ldr	r3, [sp, #4]
   84be4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   84be8:	6020      	str	r0, [r4, #0]
   84bea:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   84bee:	463c      	mov	r4, r7
   84bf0:	e7de      	b.n	84bb0 <__multadd+0x40>
   84bf2:	bf00      	nop

00084bf4 <__hi0bits>:
   84bf4:	0c02      	lsrs	r2, r0, #16
   84bf6:	0412      	lsls	r2, r2, #16
   84bf8:	4603      	mov	r3, r0
   84bfa:	b9b2      	cbnz	r2, 84c2a <__hi0bits+0x36>
   84bfc:	0403      	lsls	r3, r0, #16
   84bfe:	2010      	movs	r0, #16
   84c00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   84c04:	bf04      	itt	eq
   84c06:	021b      	lsleq	r3, r3, #8
   84c08:	3008      	addeq	r0, #8
   84c0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   84c0e:	bf04      	itt	eq
   84c10:	011b      	lsleq	r3, r3, #4
   84c12:	3004      	addeq	r0, #4
   84c14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   84c18:	bf04      	itt	eq
   84c1a:	009b      	lsleq	r3, r3, #2
   84c1c:	3002      	addeq	r0, #2
   84c1e:	2b00      	cmp	r3, #0
   84c20:	db02      	blt.n	84c28 <__hi0bits+0x34>
   84c22:	005b      	lsls	r3, r3, #1
   84c24:	d403      	bmi.n	84c2e <__hi0bits+0x3a>
   84c26:	2020      	movs	r0, #32
   84c28:	4770      	bx	lr
   84c2a:	2000      	movs	r0, #0
   84c2c:	e7e8      	b.n	84c00 <__hi0bits+0xc>
   84c2e:	3001      	adds	r0, #1
   84c30:	4770      	bx	lr
   84c32:	bf00      	nop

00084c34 <__lo0bits>:
   84c34:	6803      	ldr	r3, [r0, #0]
   84c36:	4601      	mov	r1, r0
   84c38:	f013 0207 	ands.w	r2, r3, #7
   84c3c:	d007      	beq.n	84c4e <__lo0bits+0x1a>
   84c3e:	07da      	lsls	r2, r3, #31
   84c40:	d421      	bmi.n	84c86 <__lo0bits+0x52>
   84c42:	0798      	lsls	r0, r3, #30
   84c44:	d421      	bmi.n	84c8a <__lo0bits+0x56>
   84c46:	089b      	lsrs	r3, r3, #2
   84c48:	600b      	str	r3, [r1, #0]
   84c4a:	2002      	movs	r0, #2
   84c4c:	4770      	bx	lr
   84c4e:	b298      	uxth	r0, r3
   84c50:	b198      	cbz	r0, 84c7a <__lo0bits+0x46>
   84c52:	4610      	mov	r0, r2
   84c54:	f013 0fff 	tst.w	r3, #255	; 0xff
   84c58:	bf04      	itt	eq
   84c5a:	0a1b      	lsreq	r3, r3, #8
   84c5c:	3008      	addeq	r0, #8
   84c5e:	071a      	lsls	r2, r3, #28
   84c60:	bf04      	itt	eq
   84c62:	091b      	lsreq	r3, r3, #4
   84c64:	3004      	addeq	r0, #4
   84c66:	079a      	lsls	r2, r3, #30
   84c68:	bf04      	itt	eq
   84c6a:	089b      	lsreq	r3, r3, #2
   84c6c:	3002      	addeq	r0, #2
   84c6e:	07da      	lsls	r2, r3, #31
   84c70:	d407      	bmi.n	84c82 <__lo0bits+0x4e>
   84c72:	085b      	lsrs	r3, r3, #1
   84c74:	d104      	bne.n	84c80 <__lo0bits+0x4c>
   84c76:	2020      	movs	r0, #32
   84c78:	4770      	bx	lr
   84c7a:	0c1b      	lsrs	r3, r3, #16
   84c7c:	2010      	movs	r0, #16
   84c7e:	e7e9      	b.n	84c54 <__lo0bits+0x20>
   84c80:	3001      	adds	r0, #1
   84c82:	600b      	str	r3, [r1, #0]
   84c84:	4770      	bx	lr
   84c86:	2000      	movs	r0, #0
   84c88:	4770      	bx	lr
   84c8a:	085b      	lsrs	r3, r3, #1
   84c8c:	600b      	str	r3, [r1, #0]
   84c8e:	2001      	movs	r0, #1
   84c90:	4770      	bx	lr
   84c92:	bf00      	nop

00084c94 <__i2b>:
   84c94:	b510      	push	{r4, lr}
   84c96:	460c      	mov	r4, r1
   84c98:	2101      	movs	r1, #1
   84c9a:	f7ff ff39 	bl	84b10 <_Balloc>
   84c9e:	2201      	movs	r2, #1
   84ca0:	6144      	str	r4, [r0, #20]
   84ca2:	6102      	str	r2, [r0, #16]
   84ca4:	bd10      	pop	{r4, pc}
   84ca6:	bf00      	nop

00084ca8 <__multiply>:
   84ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84cac:	690c      	ldr	r4, [r1, #16]
   84cae:	6915      	ldr	r5, [r2, #16]
   84cb0:	b083      	sub	sp, #12
   84cb2:	42ac      	cmp	r4, r5
   84cb4:	468b      	mov	fp, r1
   84cb6:	4616      	mov	r6, r2
   84cb8:	da04      	bge.n	84cc4 <__multiply+0x1c>
   84cba:	4622      	mov	r2, r4
   84cbc:	46b3      	mov	fp, r6
   84cbe:	462c      	mov	r4, r5
   84cc0:	460e      	mov	r6, r1
   84cc2:	4615      	mov	r5, r2
   84cc4:	f8db 3008 	ldr.w	r3, [fp, #8]
   84cc8:	eb04 0805 	add.w	r8, r4, r5
   84ccc:	f8db 1004 	ldr.w	r1, [fp, #4]
   84cd0:	4598      	cmp	r8, r3
   84cd2:	bfc8      	it	gt
   84cd4:	3101      	addgt	r1, #1
   84cd6:	f7ff ff1b 	bl	84b10 <_Balloc>
   84cda:	f100 0914 	add.w	r9, r0, #20
   84cde:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   84ce2:	45d1      	cmp	r9, sl
   84ce4:	9000      	str	r0, [sp, #0]
   84ce6:	d205      	bcs.n	84cf4 <__multiply+0x4c>
   84ce8:	464b      	mov	r3, r9
   84cea:	2100      	movs	r1, #0
   84cec:	f843 1b04 	str.w	r1, [r3], #4
   84cf0:	459a      	cmp	sl, r3
   84cf2:	d8fb      	bhi.n	84cec <__multiply+0x44>
   84cf4:	f106 0c14 	add.w	ip, r6, #20
   84cf8:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   84cfc:	f10b 0b14 	add.w	fp, fp, #20
   84d00:	459c      	cmp	ip, r3
   84d02:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   84d06:	d24b      	bcs.n	84da0 <__multiply+0xf8>
   84d08:	f8cd a004 	str.w	sl, [sp, #4]
   84d0c:	469a      	mov	sl, r3
   84d0e:	f8dc 5000 	ldr.w	r5, [ip]
   84d12:	b2af      	uxth	r7, r5
   84d14:	b1e7      	cbz	r7, 84d50 <__multiply+0xa8>
   84d16:	464d      	mov	r5, r9
   84d18:	465e      	mov	r6, fp
   84d1a:	2100      	movs	r1, #0
   84d1c:	f856 2b04 	ldr.w	r2, [r6], #4
   84d20:	6828      	ldr	r0, [r5, #0]
   84d22:	b293      	uxth	r3, r2
   84d24:	b284      	uxth	r4, r0
   84d26:	0c12      	lsrs	r2, r2, #16
   84d28:	fb07 4303 	mla	r3, r7, r3, r4
   84d2c:	0c00      	lsrs	r0, r0, #16
   84d2e:	fb07 0202 	mla	r2, r7, r2, r0
   84d32:	440b      	add	r3, r1
   84d34:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   84d38:	b29b      	uxth	r3, r3
   84d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   84d3e:	45b6      	cmp	lr, r6
   84d40:	f845 3b04 	str.w	r3, [r5], #4
   84d44:	ea4f 4111 	mov.w	r1, r1, lsr #16
   84d48:	d8e8      	bhi.n	84d1c <__multiply+0x74>
   84d4a:	6029      	str	r1, [r5, #0]
   84d4c:	f8dc 5000 	ldr.w	r5, [ip]
   84d50:	0c2d      	lsrs	r5, r5, #16
   84d52:	d01d      	beq.n	84d90 <__multiply+0xe8>
   84d54:	f8d9 3000 	ldr.w	r3, [r9]
   84d58:	4648      	mov	r0, r9
   84d5a:	461c      	mov	r4, r3
   84d5c:	4659      	mov	r1, fp
   84d5e:	2200      	movs	r2, #0
   84d60:	880e      	ldrh	r6, [r1, #0]
   84d62:	0c24      	lsrs	r4, r4, #16
   84d64:	fb05 4406 	mla	r4, r5, r6, r4
   84d68:	b29b      	uxth	r3, r3
   84d6a:	4422      	add	r2, r4
   84d6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   84d70:	f840 3b04 	str.w	r3, [r0], #4
   84d74:	f851 3b04 	ldr.w	r3, [r1], #4
   84d78:	6804      	ldr	r4, [r0, #0]
   84d7a:	0c1b      	lsrs	r3, r3, #16
   84d7c:	b2a6      	uxth	r6, r4
   84d7e:	fb05 6303 	mla	r3, r5, r3, r6
   84d82:	458e      	cmp	lr, r1
   84d84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   84d88:	ea4f 4213 	mov.w	r2, r3, lsr #16
   84d8c:	d8e8      	bhi.n	84d60 <__multiply+0xb8>
   84d8e:	6003      	str	r3, [r0, #0]
   84d90:	f10c 0c04 	add.w	ip, ip, #4
   84d94:	45e2      	cmp	sl, ip
   84d96:	f109 0904 	add.w	r9, r9, #4
   84d9a:	d8b8      	bhi.n	84d0e <__multiply+0x66>
   84d9c:	f8dd a004 	ldr.w	sl, [sp, #4]
   84da0:	f1b8 0f00 	cmp.w	r8, #0
   84da4:	dd0b      	ble.n	84dbe <__multiply+0x116>
   84da6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   84daa:	f1aa 0a04 	sub.w	sl, sl, #4
   84dae:	b11b      	cbz	r3, 84db8 <__multiply+0x110>
   84db0:	e005      	b.n	84dbe <__multiply+0x116>
   84db2:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   84db6:	b913      	cbnz	r3, 84dbe <__multiply+0x116>
   84db8:	f1b8 0801 	subs.w	r8, r8, #1
   84dbc:	d1f9      	bne.n	84db2 <__multiply+0x10a>
   84dbe:	9800      	ldr	r0, [sp, #0]
   84dc0:	f8c0 8010 	str.w	r8, [r0, #16]
   84dc4:	b003      	add	sp, #12
   84dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84dca:	bf00      	nop

00084dcc <__pow5mult>:
   84dcc:	f012 0303 	ands.w	r3, r2, #3
   84dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84dd4:	4614      	mov	r4, r2
   84dd6:	4607      	mov	r7, r0
   84dd8:	d12e      	bne.n	84e38 <__pow5mult+0x6c>
   84dda:	460d      	mov	r5, r1
   84ddc:	10a4      	asrs	r4, r4, #2
   84dde:	d01c      	beq.n	84e1a <__pow5mult+0x4e>
   84de0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   84de2:	b396      	cbz	r6, 84e4a <__pow5mult+0x7e>
   84de4:	07e3      	lsls	r3, r4, #31
   84de6:	f04f 0800 	mov.w	r8, #0
   84dea:	d406      	bmi.n	84dfa <__pow5mult+0x2e>
   84dec:	1064      	asrs	r4, r4, #1
   84dee:	d014      	beq.n	84e1a <__pow5mult+0x4e>
   84df0:	6830      	ldr	r0, [r6, #0]
   84df2:	b1a8      	cbz	r0, 84e20 <__pow5mult+0x54>
   84df4:	4606      	mov	r6, r0
   84df6:	07e3      	lsls	r3, r4, #31
   84df8:	d5f8      	bpl.n	84dec <__pow5mult+0x20>
   84dfa:	4632      	mov	r2, r6
   84dfc:	4629      	mov	r1, r5
   84dfe:	4638      	mov	r0, r7
   84e00:	f7ff ff52 	bl	84ca8 <__multiply>
   84e04:	b1b5      	cbz	r5, 84e34 <__pow5mult+0x68>
   84e06:	686a      	ldr	r2, [r5, #4]
   84e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   84e0a:	1064      	asrs	r4, r4, #1
   84e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   84e10:	6029      	str	r1, [r5, #0]
   84e12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   84e16:	4605      	mov	r5, r0
   84e18:	d1ea      	bne.n	84df0 <__pow5mult+0x24>
   84e1a:	4628      	mov	r0, r5
   84e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e20:	4632      	mov	r2, r6
   84e22:	4631      	mov	r1, r6
   84e24:	4638      	mov	r0, r7
   84e26:	f7ff ff3f 	bl	84ca8 <__multiply>
   84e2a:	6030      	str	r0, [r6, #0]
   84e2c:	f8c0 8000 	str.w	r8, [r0]
   84e30:	4606      	mov	r6, r0
   84e32:	e7e0      	b.n	84df6 <__pow5mult+0x2a>
   84e34:	4605      	mov	r5, r0
   84e36:	e7d9      	b.n	84dec <__pow5mult+0x20>
   84e38:	4a0b      	ldr	r2, [pc, #44]	; (84e68 <__pow5mult+0x9c>)
   84e3a:	3b01      	subs	r3, #1
   84e3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   84e40:	2300      	movs	r3, #0
   84e42:	f7ff fe95 	bl	84b70 <__multadd>
   84e46:	4605      	mov	r5, r0
   84e48:	e7c8      	b.n	84ddc <__pow5mult+0x10>
   84e4a:	2101      	movs	r1, #1
   84e4c:	4638      	mov	r0, r7
   84e4e:	f7ff fe5f 	bl	84b10 <_Balloc>
   84e52:	f240 2171 	movw	r1, #625	; 0x271
   84e56:	2201      	movs	r2, #1
   84e58:	2300      	movs	r3, #0
   84e5a:	6141      	str	r1, [r0, #20]
   84e5c:	6102      	str	r2, [r0, #16]
   84e5e:	4606      	mov	r6, r0
   84e60:	64b8      	str	r0, [r7, #72]	; 0x48
   84e62:	6003      	str	r3, [r0, #0]
   84e64:	e7be      	b.n	84de4 <__pow5mult+0x18>
   84e66:	bf00      	nop
   84e68:	00086518 	.word	0x00086518

00084e6c <__lshift>:
   84e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84e70:	690b      	ldr	r3, [r1, #16]
   84e72:	1154      	asrs	r4, r2, #5
   84e74:	eb04 0803 	add.w	r8, r4, r3
   84e78:	688b      	ldr	r3, [r1, #8]
   84e7a:	f108 0501 	add.w	r5, r8, #1
   84e7e:	429d      	cmp	r5, r3
   84e80:	460e      	mov	r6, r1
   84e82:	4691      	mov	r9, r2
   84e84:	4607      	mov	r7, r0
   84e86:	6849      	ldr	r1, [r1, #4]
   84e88:	dd04      	ble.n	84e94 <__lshift+0x28>
   84e8a:	005b      	lsls	r3, r3, #1
   84e8c:	429d      	cmp	r5, r3
   84e8e:	f101 0101 	add.w	r1, r1, #1
   84e92:	dcfa      	bgt.n	84e8a <__lshift+0x1e>
   84e94:	4638      	mov	r0, r7
   84e96:	f7ff fe3b 	bl	84b10 <_Balloc>
   84e9a:	2c00      	cmp	r4, #0
   84e9c:	f100 0314 	add.w	r3, r0, #20
   84ea0:	dd06      	ble.n	84eb0 <__lshift+0x44>
   84ea2:	2100      	movs	r1, #0
   84ea4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   84ea8:	f843 1b04 	str.w	r1, [r3], #4
   84eac:	429a      	cmp	r2, r3
   84eae:	d1fb      	bne.n	84ea8 <__lshift+0x3c>
   84eb0:	6934      	ldr	r4, [r6, #16]
   84eb2:	f106 0114 	add.w	r1, r6, #20
   84eb6:	f019 091f 	ands.w	r9, r9, #31
   84eba:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   84ebe:	d01d      	beq.n	84efc <__lshift+0x90>
   84ec0:	2200      	movs	r2, #0
   84ec2:	f1c9 0c20 	rsb	ip, r9, #32
   84ec6:	680c      	ldr	r4, [r1, #0]
   84ec8:	fa04 f409 	lsl.w	r4, r4, r9
   84ecc:	4314      	orrs	r4, r2
   84ece:	f843 4b04 	str.w	r4, [r3], #4
   84ed2:	f851 2b04 	ldr.w	r2, [r1], #4
   84ed6:	458e      	cmp	lr, r1
   84ed8:	fa22 f20c 	lsr.w	r2, r2, ip
   84edc:	d8f3      	bhi.n	84ec6 <__lshift+0x5a>
   84ede:	601a      	str	r2, [r3, #0]
   84ee0:	b10a      	cbz	r2, 84ee6 <__lshift+0x7a>
   84ee2:	f108 0502 	add.w	r5, r8, #2
   84ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   84ee8:	6872      	ldr	r2, [r6, #4]
   84eea:	3d01      	subs	r5, #1
   84eec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   84ef0:	6105      	str	r5, [r0, #16]
   84ef2:	6031      	str	r1, [r6, #0]
   84ef4:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   84ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84efc:	3b04      	subs	r3, #4
   84efe:	f851 2b04 	ldr.w	r2, [r1], #4
   84f02:	458e      	cmp	lr, r1
   84f04:	f843 2f04 	str.w	r2, [r3, #4]!
   84f08:	d8f9      	bhi.n	84efe <__lshift+0x92>
   84f0a:	e7ec      	b.n	84ee6 <__lshift+0x7a>

00084f0c <__mcmp>:
   84f0c:	b430      	push	{r4, r5}
   84f0e:	690b      	ldr	r3, [r1, #16]
   84f10:	4605      	mov	r5, r0
   84f12:	6900      	ldr	r0, [r0, #16]
   84f14:	1ac0      	subs	r0, r0, r3
   84f16:	d10f      	bne.n	84f38 <__mcmp+0x2c>
   84f18:	009b      	lsls	r3, r3, #2
   84f1a:	3514      	adds	r5, #20
   84f1c:	3114      	adds	r1, #20
   84f1e:	4419      	add	r1, r3
   84f20:	442b      	add	r3, r5
   84f22:	e001      	b.n	84f28 <__mcmp+0x1c>
   84f24:	429d      	cmp	r5, r3
   84f26:	d207      	bcs.n	84f38 <__mcmp+0x2c>
   84f28:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   84f2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   84f30:	4294      	cmp	r4, r2
   84f32:	d0f7      	beq.n	84f24 <__mcmp+0x18>
   84f34:	d302      	bcc.n	84f3c <__mcmp+0x30>
   84f36:	2001      	movs	r0, #1
   84f38:	bc30      	pop	{r4, r5}
   84f3a:	4770      	bx	lr
   84f3c:	f04f 30ff 	mov.w	r0, #4294967295
   84f40:	e7fa      	b.n	84f38 <__mcmp+0x2c>
   84f42:	bf00      	nop

00084f44 <__mdiff>:
   84f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f48:	690c      	ldr	r4, [r1, #16]
   84f4a:	4689      	mov	r9, r1
   84f4c:	6911      	ldr	r1, [r2, #16]
   84f4e:	4692      	mov	sl, r2
   84f50:	1a64      	subs	r4, r4, r1
   84f52:	2c00      	cmp	r4, #0
   84f54:	d117      	bne.n	84f86 <__mdiff+0x42>
   84f56:	0089      	lsls	r1, r1, #2
   84f58:	f109 0714 	add.w	r7, r9, #20
   84f5c:	f102 0614 	add.w	r6, r2, #20
   84f60:	187b      	adds	r3, r7, r1
   84f62:	4431      	add	r1, r6
   84f64:	e001      	b.n	84f6a <__mdiff+0x26>
   84f66:	429f      	cmp	r7, r3
   84f68:	d265      	bcs.n	85036 <__mdiff+0xf2>
   84f6a:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   84f6e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   84f72:	4295      	cmp	r5, r2
   84f74:	d0f7      	beq.n	84f66 <__mdiff+0x22>
   84f76:	d267      	bcs.n	85048 <__mdiff+0x104>
   84f78:	464b      	mov	r3, r9
   84f7a:	46bb      	mov	fp, r7
   84f7c:	46d1      	mov	r9, sl
   84f7e:	4637      	mov	r7, r6
   84f80:	469a      	mov	sl, r3
   84f82:	2401      	movs	r4, #1
   84f84:	e005      	b.n	84f92 <__mdiff+0x4e>
   84f86:	db61      	blt.n	8504c <__mdiff+0x108>
   84f88:	2400      	movs	r4, #0
   84f8a:	f109 0714 	add.w	r7, r9, #20
   84f8e:	f10a 0b14 	add.w	fp, sl, #20
   84f92:	f8d9 1004 	ldr.w	r1, [r9, #4]
   84f96:	f7ff fdbb 	bl	84b10 <_Balloc>
   84f9a:	465d      	mov	r5, fp
   84f9c:	f04f 0800 	mov.w	r8, #0
   84fa0:	f8d9 e010 	ldr.w	lr, [r9, #16]
   84fa4:	f8da 3010 	ldr.w	r3, [sl, #16]
   84fa8:	463e      	mov	r6, r7
   84faa:	60c4      	str	r4, [r0, #12]
   84fac:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   84fb0:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   84fb4:	f100 0414 	add.w	r4, r0, #20
   84fb8:	f856 9b04 	ldr.w	r9, [r6], #4
   84fbc:	f855 2b04 	ldr.w	r2, [r5], #4
   84fc0:	fa1f f389 	uxth.w	r3, r9
   84fc4:	4443      	add	r3, r8
   84fc6:	fa1f f882 	uxth.w	r8, r2
   84fca:	0c12      	lsrs	r2, r2, #16
   84fcc:	eba3 0308 	sub.w	r3, r3, r8
   84fd0:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   84fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   84fd8:	b29b      	uxth	r3, r3
   84fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   84fde:	45ac      	cmp	ip, r5
   84fe0:	f844 3b04 	str.w	r3, [r4], #4
   84fe4:	ea4f 4822 	mov.w	r8, r2, asr #16
   84fe8:	d8e6      	bhi.n	84fb8 <__mdiff+0x74>
   84fea:	42b7      	cmp	r7, r6
   84fec:	d917      	bls.n	8501e <__mdiff+0xda>
   84fee:	46a4      	mov	ip, r4
   84ff0:	4635      	mov	r5, r6
   84ff2:	f855 3b04 	ldr.w	r3, [r5], #4
   84ff6:	b299      	uxth	r1, r3
   84ff8:	4441      	add	r1, r8
   84ffa:	140a      	asrs	r2, r1, #16
   84ffc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   85000:	b289      	uxth	r1, r1
   85002:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   85006:	42af      	cmp	r7, r5
   85008:	f84c 3b04 	str.w	r3, [ip], #4
   8500c:	ea4f 4822 	mov.w	r8, r2, asr #16
   85010:	d8ef      	bhi.n	84ff2 <__mdiff+0xae>
   85012:	43f6      	mvns	r6, r6
   85014:	4437      	add	r7, r6
   85016:	f027 0703 	bic.w	r7, r7, #3
   8501a:	3704      	adds	r7, #4
   8501c:	443c      	add	r4, r7
   8501e:	3c04      	subs	r4, #4
   85020:	b92b      	cbnz	r3, 8502e <__mdiff+0xea>
   85022:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   85026:	f10e 3eff 	add.w	lr, lr, #4294967295
   8502a:	2b00      	cmp	r3, #0
   8502c:	d0f9      	beq.n	85022 <__mdiff+0xde>
   8502e:	f8c0 e010 	str.w	lr, [r0, #16]
   85032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85036:	2100      	movs	r1, #0
   85038:	f7ff fd6a 	bl	84b10 <_Balloc>
   8503c:	2201      	movs	r2, #1
   8503e:	2300      	movs	r3, #0
   85040:	6102      	str	r2, [r0, #16]
   85042:	6143      	str	r3, [r0, #20]
   85044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85048:	46b3      	mov	fp, r6
   8504a:	e7a2      	b.n	84f92 <__mdiff+0x4e>
   8504c:	464b      	mov	r3, r9
   8504e:	f109 0b14 	add.w	fp, r9, #20
   85052:	f102 0714 	add.w	r7, r2, #20
   85056:	4691      	mov	r9, r2
   85058:	2401      	movs	r4, #1
   8505a:	469a      	mov	sl, r3
   8505c:	e799      	b.n	84f92 <__mdiff+0x4e>
   8505e:	bf00      	nop

00085060 <__d2b>:
   85060:	b5f0      	push	{r4, r5, r6, r7, lr}
   85062:	2101      	movs	r1, #1
   85064:	b083      	sub	sp, #12
   85066:	461c      	mov	r4, r3
   85068:	f3c3 550a 	ubfx	r5, r3, #20, #11
   8506c:	4616      	mov	r6, r2
   8506e:	f7ff fd4f 	bl	84b10 <_Balloc>
   85072:	f3c4 0413 	ubfx	r4, r4, #0, #20
   85076:	4607      	mov	r7, r0
   85078:	b10d      	cbz	r5, 8507e <__d2b+0x1e>
   8507a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8507e:	9401      	str	r4, [sp, #4]
   85080:	b306      	cbz	r6, 850c4 <__d2b+0x64>
   85082:	a802      	add	r0, sp, #8
   85084:	f840 6d08 	str.w	r6, [r0, #-8]!
   85088:	f7ff fdd4 	bl	84c34 <__lo0bits>
   8508c:	2800      	cmp	r0, #0
   8508e:	d130      	bne.n	850f2 <__d2b+0x92>
   85090:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85094:	617a      	str	r2, [r7, #20]
   85096:	2b00      	cmp	r3, #0
   85098:	bf0c      	ite	eq
   8509a:	2101      	moveq	r1, #1
   8509c:	2102      	movne	r1, #2
   8509e:	61bb      	str	r3, [r7, #24]
   850a0:	6139      	str	r1, [r7, #16]
   850a2:	b9d5      	cbnz	r5, 850da <__d2b+0x7a>
   850a4:	9a08      	ldr	r2, [sp, #32]
   850a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   850aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   850ae:	6010      	str	r0, [r2, #0]
   850b0:	6918      	ldr	r0, [r3, #16]
   850b2:	f7ff fd9f 	bl	84bf4 <__hi0bits>
   850b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   850b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   850bc:	6018      	str	r0, [r3, #0]
   850be:	4638      	mov	r0, r7
   850c0:	b003      	add	sp, #12
   850c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850c4:	a801      	add	r0, sp, #4
   850c6:	f7ff fdb5 	bl	84c34 <__lo0bits>
   850ca:	2201      	movs	r2, #1
   850cc:	9b01      	ldr	r3, [sp, #4]
   850ce:	4611      	mov	r1, r2
   850d0:	3020      	adds	r0, #32
   850d2:	613a      	str	r2, [r7, #16]
   850d4:	617b      	str	r3, [r7, #20]
   850d6:	2d00      	cmp	r5, #0
   850d8:	d0e4      	beq.n	850a4 <__d2b+0x44>
   850da:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   850de:	9a08      	ldr	r2, [sp, #32]
   850e0:	4403      	add	r3, r0
   850e2:	6013      	str	r3, [r2, #0]
   850e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   850e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   850ea:	6018      	str	r0, [r3, #0]
   850ec:	4638      	mov	r0, r7
   850ee:	b003      	add	sp, #12
   850f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850f2:	9b01      	ldr	r3, [sp, #4]
   850f4:	f1c0 0220 	rsb	r2, r0, #32
   850f8:	9900      	ldr	r1, [sp, #0]
   850fa:	fa03 f202 	lsl.w	r2, r3, r2
   850fe:	430a      	orrs	r2, r1
   85100:	40c3      	lsrs	r3, r0
   85102:	9301      	str	r3, [sp, #4]
   85104:	617a      	str	r2, [r7, #20]
   85106:	e7c6      	b.n	85096 <__d2b+0x36>

00085108 <_realloc_r>:
   85108:	2900      	cmp	r1, #0
   8510a:	f000 8094 	beq.w	85236 <_realloc_r+0x12e>
   8510e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85112:	460c      	mov	r4, r1
   85114:	4615      	mov	r5, r2
   85116:	b083      	sub	sp, #12
   85118:	4680      	mov	r8, r0
   8511a:	f105 060b 	add.w	r6, r5, #11
   8511e:	f7fd f81b 	bl	82158 <__malloc_lock>
   85122:	f854 ec04 	ldr.w	lr, [r4, #-4]
   85126:	2e16      	cmp	r6, #22
   85128:	f02e 0703 	bic.w	r7, lr, #3
   8512c:	f1a4 0908 	sub.w	r9, r4, #8
   85130:	d83c      	bhi.n	851ac <_realloc_r+0xa4>
   85132:	2210      	movs	r2, #16
   85134:	4616      	mov	r6, r2
   85136:	42b5      	cmp	r5, r6
   85138:	d83d      	bhi.n	851b6 <_realloc_r+0xae>
   8513a:	4297      	cmp	r7, r2
   8513c:	da43      	bge.n	851c6 <_realloc_r+0xbe>
   8513e:	4bc6      	ldr	r3, [pc, #792]	; (85458 <_realloc_r+0x350>)
   85140:	eb09 0007 	add.w	r0, r9, r7
   85144:	6899      	ldr	r1, [r3, #8]
   85146:	4288      	cmp	r0, r1
   85148:	f000 80c3 	beq.w	852d2 <_realloc_r+0x1ca>
   8514c:	6843      	ldr	r3, [r0, #4]
   8514e:	f023 0101 	bic.w	r1, r3, #1
   85152:	4401      	add	r1, r0
   85154:	6849      	ldr	r1, [r1, #4]
   85156:	07c9      	lsls	r1, r1, #31
   85158:	d54d      	bpl.n	851f6 <_realloc_r+0xee>
   8515a:	f01e 0f01 	tst.w	lr, #1
   8515e:	f000 809b 	beq.w	85298 <_realloc_r+0x190>
   85162:	4629      	mov	r1, r5
   85164:	4640      	mov	r0, r8
   85166:	f7fc fc91 	bl	81a8c <_malloc_r>
   8516a:	4605      	mov	r5, r0
   8516c:	2800      	cmp	r0, #0
   8516e:	d03b      	beq.n	851e8 <_realloc_r+0xe0>
   85170:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85174:	f1a0 0208 	sub.w	r2, r0, #8
   85178:	f023 0301 	bic.w	r3, r3, #1
   8517c:	444b      	add	r3, r9
   8517e:	429a      	cmp	r2, r3
   85180:	f000 812b 	beq.w	853da <_realloc_r+0x2d2>
   85184:	1f3a      	subs	r2, r7, #4
   85186:	2a24      	cmp	r2, #36	; 0x24
   85188:	f200 8118 	bhi.w	853bc <_realloc_r+0x2b4>
   8518c:	2a13      	cmp	r2, #19
   8518e:	f200 80eb 	bhi.w	85368 <_realloc_r+0x260>
   85192:	4603      	mov	r3, r0
   85194:	4622      	mov	r2, r4
   85196:	6811      	ldr	r1, [r2, #0]
   85198:	6019      	str	r1, [r3, #0]
   8519a:	6851      	ldr	r1, [r2, #4]
   8519c:	6059      	str	r1, [r3, #4]
   8519e:	6892      	ldr	r2, [r2, #8]
   851a0:	609a      	str	r2, [r3, #8]
   851a2:	4621      	mov	r1, r4
   851a4:	4640      	mov	r0, r8
   851a6:	f7ff fafb 	bl	847a0 <_free_r>
   851aa:	e01d      	b.n	851e8 <_realloc_r+0xe0>
   851ac:	f026 0607 	bic.w	r6, r6, #7
   851b0:	2e00      	cmp	r6, #0
   851b2:	4632      	mov	r2, r6
   851b4:	dabf      	bge.n	85136 <_realloc_r+0x2e>
   851b6:	2500      	movs	r5, #0
   851b8:	230c      	movs	r3, #12
   851ba:	4628      	mov	r0, r5
   851bc:	f8c8 3000 	str.w	r3, [r8]
   851c0:	b003      	add	sp, #12
   851c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851c6:	4625      	mov	r5, r4
   851c8:	1bbb      	subs	r3, r7, r6
   851ca:	2b0f      	cmp	r3, #15
   851cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   851d0:	d81d      	bhi.n	8520e <_realloc_r+0x106>
   851d2:	f002 0201 	and.w	r2, r2, #1
   851d6:	433a      	orrs	r2, r7
   851d8:	eb09 0107 	add.w	r1, r9, r7
   851dc:	f8c9 2004 	str.w	r2, [r9, #4]
   851e0:	684b      	ldr	r3, [r1, #4]
   851e2:	f043 0301 	orr.w	r3, r3, #1
   851e6:	604b      	str	r3, [r1, #4]
   851e8:	4640      	mov	r0, r8
   851ea:	f7fc ffbb 	bl	82164 <__malloc_unlock>
   851ee:	4628      	mov	r0, r5
   851f0:	b003      	add	sp, #12
   851f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851f6:	f023 0303 	bic.w	r3, r3, #3
   851fa:	18f9      	adds	r1, r7, r3
   851fc:	4291      	cmp	r1, r2
   851fe:	db1d      	blt.n	8523c <_realloc_r+0x134>
   85200:	68c3      	ldr	r3, [r0, #12]
   85202:	6882      	ldr	r2, [r0, #8]
   85204:	4625      	mov	r5, r4
   85206:	60d3      	str	r3, [r2, #12]
   85208:	460f      	mov	r7, r1
   8520a:	609a      	str	r2, [r3, #8]
   8520c:	e7dc      	b.n	851c8 <_realloc_r+0xc0>
   8520e:	f002 0201 	and.w	r2, r2, #1
   85212:	eb09 0106 	add.w	r1, r9, r6
   85216:	f043 0301 	orr.w	r3, r3, #1
   8521a:	4332      	orrs	r2, r6
   8521c:	f8c9 2004 	str.w	r2, [r9, #4]
   85220:	444f      	add	r7, r9
   85222:	604b      	str	r3, [r1, #4]
   85224:	687b      	ldr	r3, [r7, #4]
   85226:	3108      	adds	r1, #8
   85228:	f043 0301 	orr.w	r3, r3, #1
   8522c:	607b      	str	r3, [r7, #4]
   8522e:	4640      	mov	r0, r8
   85230:	f7ff fab6 	bl	847a0 <_free_r>
   85234:	e7d8      	b.n	851e8 <_realloc_r+0xe0>
   85236:	4611      	mov	r1, r2
   85238:	f7fc bc28 	b.w	81a8c <_malloc_r>
   8523c:	f01e 0f01 	tst.w	lr, #1
   85240:	d18f      	bne.n	85162 <_realloc_r+0x5a>
   85242:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85246:	eba9 0a01 	sub.w	sl, r9, r1
   8524a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8524e:	f021 0103 	bic.w	r1, r1, #3
   85252:	440b      	add	r3, r1
   85254:	443b      	add	r3, r7
   85256:	4293      	cmp	r3, r2
   85258:	db26      	blt.n	852a8 <_realloc_r+0x1a0>
   8525a:	4655      	mov	r5, sl
   8525c:	68c1      	ldr	r1, [r0, #12]
   8525e:	6880      	ldr	r0, [r0, #8]
   85260:	1f3a      	subs	r2, r7, #4
   85262:	60c1      	str	r1, [r0, #12]
   85264:	6088      	str	r0, [r1, #8]
   85266:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8526a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8526e:	2a24      	cmp	r2, #36	; 0x24
   85270:	60c1      	str	r1, [r0, #12]
   85272:	6088      	str	r0, [r1, #8]
   85274:	d826      	bhi.n	852c4 <_realloc_r+0x1bc>
   85276:	2a13      	cmp	r2, #19
   85278:	f240 8081 	bls.w	8537e <_realloc_r+0x276>
   8527c:	6821      	ldr	r1, [r4, #0]
   8527e:	2a1b      	cmp	r2, #27
   85280:	f8ca 1008 	str.w	r1, [sl, #8]
   85284:	6861      	ldr	r1, [r4, #4]
   85286:	f8ca 100c 	str.w	r1, [sl, #12]
   8528a:	f200 80ad 	bhi.w	853e8 <_realloc_r+0x2e0>
   8528e:	f104 0008 	add.w	r0, r4, #8
   85292:	f10a 0210 	add.w	r2, sl, #16
   85296:	e074      	b.n	85382 <_realloc_r+0x27a>
   85298:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8529c:	eba9 0a03 	sub.w	sl, r9, r3
   852a0:	f8da 1004 	ldr.w	r1, [sl, #4]
   852a4:	f021 0103 	bic.w	r1, r1, #3
   852a8:	187b      	adds	r3, r7, r1
   852aa:	4293      	cmp	r3, r2
   852ac:	f6ff af59 	blt.w	85162 <_realloc_r+0x5a>
   852b0:	4655      	mov	r5, sl
   852b2:	f8da 100c 	ldr.w	r1, [sl, #12]
   852b6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   852ba:	1f3a      	subs	r2, r7, #4
   852bc:	2a24      	cmp	r2, #36	; 0x24
   852be:	60c1      	str	r1, [r0, #12]
   852c0:	6088      	str	r0, [r1, #8]
   852c2:	d9d8      	bls.n	85276 <_realloc_r+0x16e>
   852c4:	4621      	mov	r1, r4
   852c6:	4628      	mov	r0, r5
   852c8:	461f      	mov	r7, r3
   852ca:	46d1      	mov	r9, sl
   852cc:	f7ff fbbc 	bl	84a48 <memmove>
   852d0:	e77a      	b.n	851c8 <_realloc_r+0xc0>
   852d2:	6841      	ldr	r1, [r0, #4]
   852d4:	f106 0010 	add.w	r0, r6, #16
   852d8:	f021 0b03 	bic.w	fp, r1, #3
   852dc:	44bb      	add	fp, r7
   852de:	4583      	cmp	fp, r0
   852e0:	da58      	bge.n	85394 <_realloc_r+0x28c>
   852e2:	f01e 0f01 	tst.w	lr, #1
   852e6:	f47f af3c 	bne.w	85162 <_realloc_r+0x5a>
   852ea:	f854 1c08 	ldr.w	r1, [r4, #-8]
   852ee:	eba9 0a01 	sub.w	sl, r9, r1
   852f2:	f8da 1004 	ldr.w	r1, [sl, #4]
   852f6:	f021 0103 	bic.w	r1, r1, #3
   852fa:	448b      	add	fp, r1
   852fc:	4558      	cmp	r0, fp
   852fe:	dcd3      	bgt.n	852a8 <_realloc_r+0x1a0>
   85300:	4655      	mov	r5, sl
   85302:	f8da 100c 	ldr.w	r1, [sl, #12]
   85306:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8530a:	1f3a      	subs	r2, r7, #4
   8530c:	2a24      	cmp	r2, #36	; 0x24
   8530e:	60c1      	str	r1, [r0, #12]
   85310:	6088      	str	r0, [r1, #8]
   85312:	f200 808d 	bhi.w	85430 <_realloc_r+0x328>
   85316:	2a13      	cmp	r2, #19
   85318:	f240 8087 	bls.w	8542a <_realloc_r+0x322>
   8531c:	6821      	ldr	r1, [r4, #0]
   8531e:	2a1b      	cmp	r2, #27
   85320:	f8ca 1008 	str.w	r1, [sl, #8]
   85324:	6861      	ldr	r1, [r4, #4]
   85326:	f8ca 100c 	str.w	r1, [sl, #12]
   8532a:	f200 8088 	bhi.w	8543e <_realloc_r+0x336>
   8532e:	f104 0108 	add.w	r1, r4, #8
   85332:	f10a 0210 	add.w	r2, sl, #16
   85336:	6808      	ldr	r0, [r1, #0]
   85338:	6010      	str	r0, [r2, #0]
   8533a:	6848      	ldr	r0, [r1, #4]
   8533c:	6050      	str	r0, [r2, #4]
   8533e:	6889      	ldr	r1, [r1, #8]
   85340:	6091      	str	r1, [r2, #8]
   85342:	ebab 0206 	sub.w	r2, fp, r6
   85346:	eb0a 0106 	add.w	r1, sl, r6
   8534a:	f042 0201 	orr.w	r2, r2, #1
   8534e:	6099      	str	r1, [r3, #8]
   85350:	604a      	str	r2, [r1, #4]
   85352:	f8da 3004 	ldr.w	r3, [sl, #4]
   85356:	4640      	mov	r0, r8
   85358:	f003 0301 	and.w	r3, r3, #1
   8535c:	431e      	orrs	r6, r3
   8535e:	f8ca 6004 	str.w	r6, [sl, #4]
   85362:	f7fc feff 	bl	82164 <__malloc_unlock>
   85366:	e742      	b.n	851ee <_realloc_r+0xe6>
   85368:	6823      	ldr	r3, [r4, #0]
   8536a:	2a1b      	cmp	r2, #27
   8536c:	6003      	str	r3, [r0, #0]
   8536e:	6863      	ldr	r3, [r4, #4]
   85370:	6043      	str	r3, [r0, #4]
   85372:	d827      	bhi.n	853c4 <_realloc_r+0x2bc>
   85374:	f100 0308 	add.w	r3, r0, #8
   85378:	f104 0208 	add.w	r2, r4, #8
   8537c:	e70b      	b.n	85196 <_realloc_r+0x8e>
   8537e:	4620      	mov	r0, r4
   85380:	462a      	mov	r2, r5
   85382:	6801      	ldr	r1, [r0, #0]
   85384:	461f      	mov	r7, r3
   85386:	6011      	str	r1, [r2, #0]
   85388:	6841      	ldr	r1, [r0, #4]
   8538a:	46d1      	mov	r9, sl
   8538c:	6051      	str	r1, [r2, #4]
   8538e:	6883      	ldr	r3, [r0, #8]
   85390:	6093      	str	r3, [r2, #8]
   85392:	e719      	b.n	851c8 <_realloc_r+0xc0>
   85394:	ebab 0b06 	sub.w	fp, fp, r6
   85398:	eb09 0106 	add.w	r1, r9, r6
   8539c:	f04b 0201 	orr.w	r2, fp, #1
   853a0:	6099      	str	r1, [r3, #8]
   853a2:	604a      	str	r2, [r1, #4]
   853a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   853a8:	4640      	mov	r0, r8
   853aa:	f003 0301 	and.w	r3, r3, #1
   853ae:	431e      	orrs	r6, r3
   853b0:	f844 6c04 	str.w	r6, [r4, #-4]
   853b4:	f7fc fed6 	bl	82164 <__malloc_unlock>
   853b8:	4625      	mov	r5, r4
   853ba:	e718      	b.n	851ee <_realloc_r+0xe6>
   853bc:	4621      	mov	r1, r4
   853be:	f7ff fb43 	bl	84a48 <memmove>
   853c2:	e6ee      	b.n	851a2 <_realloc_r+0x9a>
   853c4:	68a3      	ldr	r3, [r4, #8]
   853c6:	2a24      	cmp	r2, #36	; 0x24
   853c8:	6083      	str	r3, [r0, #8]
   853ca:	68e3      	ldr	r3, [r4, #12]
   853cc:	60c3      	str	r3, [r0, #12]
   853ce:	d018      	beq.n	85402 <_realloc_r+0x2fa>
   853d0:	f100 0310 	add.w	r3, r0, #16
   853d4:	f104 0210 	add.w	r2, r4, #16
   853d8:	e6dd      	b.n	85196 <_realloc_r+0x8e>
   853da:	f850 3c04 	ldr.w	r3, [r0, #-4]
   853de:	4625      	mov	r5, r4
   853e0:	f023 0303 	bic.w	r3, r3, #3
   853e4:	441f      	add	r7, r3
   853e6:	e6ef      	b.n	851c8 <_realloc_r+0xc0>
   853e8:	68a1      	ldr	r1, [r4, #8]
   853ea:	2a24      	cmp	r2, #36	; 0x24
   853ec:	f8ca 1010 	str.w	r1, [sl, #16]
   853f0:	68e1      	ldr	r1, [r4, #12]
   853f2:	f8ca 1014 	str.w	r1, [sl, #20]
   853f6:	d00d      	beq.n	85414 <_realloc_r+0x30c>
   853f8:	f104 0010 	add.w	r0, r4, #16
   853fc:	f10a 0218 	add.w	r2, sl, #24
   85400:	e7bf      	b.n	85382 <_realloc_r+0x27a>
   85402:	6922      	ldr	r2, [r4, #16]
   85404:	f100 0318 	add.w	r3, r0, #24
   85408:	6102      	str	r2, [r0, #16]
   8540a:	6961      	ldr	r1, [r4, #20]
   8540c:	f104 0218 	add.w	r2, r4, #24
   85410:	6141      	str	r1, [r0, #20]
   85412:	e6c0      	b.n	85196 <_realloc_r+0x8e>
   85414:	6922      	ldr	r2, [r4, #16]
   85416:	f104 0018 	add.w	r0, r4, #24
   8541a:	f8ca 2018 	str.w	r2, [sl, #24]
   8541e:	6961      	ldr	r1, [r4, #20]
   85420:	f10a 0220 	add.w	r2, sl, #32
   85424:	f8ca 101c 	str.w	r1, [sl, #28]
   85428:	e7ab      	b.n	85382 <_realloc_r+0x27a>
   8542a:	4621      	mov	r1, r4
   8542c:	462a      	mov	r2, r5
   8542e:	e782      	b.n	85336 <_realloc_r+0x22e>
   85430:	4621      	mov	r1, r4
   85432:	4628      	mov	r0, r5
   85434:	9301      	str	r3, [sp, #4]
   85436:	f7ff fb07 	bl	84a48 <memmove>
   8543a:	9b01      	ldr	r3, [sp, #4]
   8543c:	e781      	b.n	85342 <_realloc_r+0x23a>
   8543e:	68a1      	ldr	r1, [r4, #8]
   85440:	2a24      	cmp	r2, #36	; 0x24
   85442:	f8ca 1010 	str.w	r1, [sl, #16]
   85446:	68e1      	ldr	r1, [r4, #12]
   85448:	f8ca 1014 	str.w	r1, [sl, #20]
   8544c:	d006      	beq.n	8545c <_realloc_r+0x354>
   8544e:	f104 0110 	add.w	r1, r4, #16
   85452:	f10a 0218 	add.w	r2, sl, #24
   85456:	e76e      	b.n	85336 <_realloc_r+0x22e>
   85458:	20070930 	.word	0x20070930
   8545c:	6922      	ldr	r2, [r4, #16]
   8545e:	f104 0118 	add.w	r1, r4, #24
   85462:	f8ca 2018 	str.w	r2, [sl, #24]
   85466:	6960      	ldr	r0, [r4, #20]
   85468:	f10a 0220 	add.w	r2, sl, #32
   8546c:	f8ca 001c 	str.w	r0, [sl, #28]
   85470:	e761      	b.n	85336 <_realloc_r+0x22e>
   85472:	bf00      	nop

00085474 <__ssprint_r>:
   85474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85478:	6893      	ldr	r3, [r2, #8]
   8547a:	b083      	sub	sp, #12
   8547c:	4690      	mov	r8, r2
   8547e:	2b00      	cmp	r3, #0
   85480:	d070      	beq.n	85564 <__ssprint_r+0xf0>
   85482:	4682      	mov	sl, r0
   85484:	460c      	mov	r4, r1
   85486:	6817      	ldr	r7, [r2, #0]
   85488:	688d      	ldr	r5, [r1, #8]
   8548a:	6808      	ldr	r0, [r1, #0]
   8548c:	e042      	b.n	85514 <__ssprint_r+0xa0>
   8548e:	89a3      	ldrh	r3, [r4, #12]
   85490:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85494:	d02e      	beq.n	854f4 <__ssprint_r+0x80>
   85496:	6965      	ldr	r5, [r4, #20]
   85498:	6921      	ldr	r1, [r4, #16]
   8549a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8549e:	eba0 0b01 	sub.w	fp, r0, r1
   854a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   854a6:	f10b 0001 	add.w	r0, fp, #1
   854aa:	106d      	asrs	r5, r5, #1
   854ac:	4430      	add	r0, r6
   854ae:	42a8      	cmp	r0, r5
   854b0:	462a      	mov	r2, r5
   854b2:	bf84      	itt	hi
   854b4:	4605      	movhi	r5, r0
   854b6:	462a      	movhi	r2, r5
   854b8:	055b      	lsls	r3, r3, #21
   854ba:	d538      	bpl.n	8552e <__ssprint_r+0xba>
   854bc:	4611      	mov	r1, r2
   854be:	4650      	mov	r0, sl
   854c0:	f7fc fae4 	bl	81a8c <_malloc_r>
   854c4:	2800      	cmp	r0, #0
   854c6:	d03c      	beq.n	85542 <__ssprint_r+0xce>
   854c8:	465a      	mov	r2, fp
   854ca:	6921      	ldr	r1, [r4, #16]
   854cc:	9001      	str	r0, [sp, #4]
   854ce:	f7fc fd7f 	bl	81fd0 <memcpy>
   854d2:	89a2      	ldrh	r2, [r4, #12]
   854d4:	9b01      	ldr	r3, [sp, #4]
   854d6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   854da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   854de:	81a2      	strh	r2, [r4, #12]
   854e0:	eba5 020b 	sub.w	r2, r5, fp
   854e4:	eb03 000b 	add.w	r0, r3, fp
   854e8:	6165      	str	r5, [r4, #20]
   854ea:	46b3      	mov	fp, r6
   854ec:	4635      	mov	r5, r6
   854ee:	6123      	str	r3, [r4, #16]
   854f0:	6020      	str	r0, [r4, #0]
   854f2:	60a2      	str	r2, [r4, #8]
   854f4:	465a      	mov	r2, fp
   854f6:	4649      	mov	r1, r9
   854f8:	f7ff faa6 	bl	84a48 <memmove>
   854fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   85500:	68a2      	ldr	r2, [r4, #8]
   85502:	6820      	ldr	r0, [r4, #0]
   85504:	1b55      	subs	r5, r2, r5
   85506:	4458      	add	r0, fp
   85508:	1b9e      	subs	r6, r3, r6
   8550a:	60a5      	str	r5, [r4, #8]
   8550c:	6020      	str	r0, [r4, #0]
   8550e:	f8c8 6008 	str.w	r6, [r8, #8]
   85512:	b33e      	cbz	r6, 85564 <__ssprint_r+0xf0>
   85514:	687e      	ldr	r6, [r7, #4]
   85516:	463b      	mov	r3, r7
   85518:	3708      	adds	r7, #8
   8551a:	2e00      	cmp	r6, #0
   8551c:	d0fa      	beq.n	85514 <__ssprint_r+0xa0>
   8551e:	42ae      	cmp	r6, r5
   85520:	f8d3 9000 	ldr.w	r9, [r3]
   85524:	46ab      	mov	fp, r5
   85526:	d2b2      	bcs.n	8548e <__ssprint_r+0x1a>
   85528:	4635      	mov	r5, r6
   8552a:	46b3      	mov	fp, r6
   8552c:	e7e2      	b.n	854f4 <__ssprint_r+0x80>
   8552e:	4650      	mov	r0, sl
   85530:	f7ff fdea 	bl	85108 <_realloc_r>
   85534:	4603      	mov	r3, r0
   85536:	2800      	cmp	r0, #0
   85538:	d1d2      	bne.n	854e0 <__ssprint_r+0x6c>
   8553a:	6921      	ldr	r1, [r4, #16]
   8553c:	4650      	mov	r0, sl
   8553e:	f7ff f92f 	bl	847a0 <_free_r>
   85542:	230c      	movs	r3, #12
   85544:	2200      	movs	r2, #0
   85546:	f04f 30ff 	mov.w	r0, #4294967295
   8554a:	f8ca 3000 	str.w	r3, [sl]
   8554e:	89a3      	ldrh	r3, [r4, #12]
   85550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85554:	81a3      	strh	r3, [r4, #12]
   85556:	f8c8 2008 	str.w	r2, [r8, #8]
   8555a:	f8c8 2004 	str.w	r2, [r8, #4]
   8555e:	b003      	add	sp, #12
   85560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85564:	2000      	movs	r0, #0
   85566:	f8c8 0004 	str.w	r0, [r8, #4]
   8556a:	b003      	add	sp, #12
   8556c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085570 <__ascii_wctomb>:
   85570:	b119      	cbz	r1, 8557a <__ascii_wctomb+0xa>
   85572:	2aff      	cmp	r2, #255	; 0xff
   85574:	d803      	bhi.n	8557e <__ascii_wctomb+0xe>
   85576:	700a      	strb	r2, [r1, #0]
   85578:	2101      	movs	r1, #1
   8557a:	4608      	mov	r0, r1
   8557c:	4770      	bx	lr
   8557e:	238a      	movs	r3, #138	; 0x8a
   85580:	f04f 31ff 	mov.w	r1, #4294967295
   85584:	6003      	str	r3, [r0, #0]
   85586:	e7f8      	b.n	8557a <__ascii_wctomb+0xa>

00085588 <__register_exitproc>:
   85588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8558c:	4d2c      	ldr	r5, [pc, #176]	; (85640 <__register_exitproc+0xb8>)
   8558e:	4606      	mov	r6, r0
   85590:	6828      	ldr	r0, [r5, #0]
   85592:	4698      	mov	r8, r3
   85594:	460f      	mov	r7, r1
   85596:	4691      	mov	r9, r2
   85598:	f7ff f9f6 	bl	84988 <__retarget_lock_acquire_recursive>
   8559c:	4b29      	ldr	r3, [pc, #164]	; (85644 <__register_exitproc+0xbc>)
   8559e:	681c      	ldr	r4, [r3, #0]
   855a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   855a4:	2b00      	cmp	r3, #0
   855a6:	d03e      	beq.n	85626 <__register_exitproc+0x9e>
   855a8:	685a      	ldr	r2, [r3, #4]
   855aa:	2a1f      	cmp	r2, #31
   855ac:	dc1c      	bgt.n	855e8 <__register_exitproc+0x60>
   855ae:	f102 0e01 	add.w	lr, r2, #1
   855b2:	b176      	cbz	r6, 855d2 <__register_exitproc+0x4a>
   855b4:	2101      	movs	r1, #1
   855b6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   855ba:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   855be:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   855c2:	4091      	lsls	r1, r2
   855c4:	4308      	orrs	r0, r1
   855c6:	2e02      	cmp	r6, #2
   855c8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   855cc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   855d0:	d023      	beq.n	8561a <__register_exitproc+0x92>
   855d2:	3202      	adds	r2, #2
   855d4:	f8c3 e004 	str.w	lr, [r3, #4]
   855d8:	6828      	ldr	r0, [r5, #0]
   855da:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   855de:	f7ff f9d5 	bl	8498c <__retarget_lock_release_recursive>
   855e2:	2000      	movs	r0, #0
   855e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   855e8:	4b17      	ldr	r3, [pc, #92]	; (85648 <__register_exitproc+0xc0>)
   855ea:	b30b      	cbz	r3, 85630 <__register_exitproc+0xa8>
   855ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   855f0:	f7fc fa44 	bl	81a7c <malloc>
   855f4:	4603      	mov	r3, r0
   855f6:	b1d8      	cbz	r0, 85630 <__register_exitproc+0xa8>
   855f8:	2000      	movs	r0, #0
   855fa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   855fe:	f04f 0e01 	mov.w	lr, #1
   85602:	6058      	str	r0, [r3, #4]
   85604:	6019      	str	r1, [r3, #0]
   85606:	4602      	mov	r2, r0
   85608:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8560c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85610:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85614:	2e00      	cmp	r6, #0
   85616:	d0dc      	beq.n	855d2 <__register_exitproc+0x4a>
   85618:	e7cc      	b.n	855b4 <__register_exitproc+0x2c>
   8561a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8561e:	4301      	orrs	r1, r0
   85620:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85624:	e7d5      	b.n	855d2 <__register_exitproc+0x4a>
   85626:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8562a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8562e:	e7bb      	b.n	855a8 <__register_exitproc+0x20>
   85630:	6828      	ldr	r0, [r5, #0]
   85632:	f7ff f9ab 	bl	8498c <__retarget_lock_release_recursive>
   85636:	f04f 30ff 	mov.w	r0, #4294967295
   8563a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8563e:	bf00      	nop
   85640:	20070d40 	.word	0x20070d40
   85644:	0008639c 	.word	0x0008639c
   85648:	00081a7d 	.word	0x00081a7d

0008564c <_calloc_r>:
   8564c:	b510      	push	{r4, lr}
   8564e:	fb02 f101 	mul.w	r1, r2, r1
   85652:	f7fc fa1b 	bl	81a8c <_malloc_r>
   85656:	4604      	mov	r4, r0
   85658:	b1d8      	cbz	r0, 85692 <_calloc_r+0x46>
   8565a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8565e:	f022 0203 	bic.w	r2, r2, #3
   85662:	3a04      	subs	r2, #4
   85664:	2a24      	cmp	r2, #36	; 0x24
   85666:	d818      	bhi.n	8569a <_calloc_r+0x4e>
   85668:	2a13      	cmp	r2, #19
   8566a:	d914      	bls.n	85696 <_calloc_r+0x4a>
   8566c:	2300      	movs	r3, #0
   8566e:	2a1b      	cmp	r2, #27
   85670:	6003      	str	r3, [r0, #0]
   85672:	6043      	str	r3, [r0, #4]
   85674:	d916      	bls.n	856a4 <_calloc_r+0x58>
   85676:	2a24      	cmp	r2, #36	; 0x24
   85678:	6083      	str	r3, [r0, #8]
   8567a:	60c3      	str	r3, [r0, #12]
   8567c:	bf11      	iteee	ne
   8567e:	f100 0210 	addne.w	r2, r0, #16
   85682:	6103      	streq	r3, [r0, #16]
   85684:	6143      	streq	r3, [r0, #20]
   85686:	f100 0218 	addeq.w	r2, r0, #24
   8568a:	2300      	movs	r3, #0
   8568c:	6013      	str	r3, [r2, #0]
   8568e:	6053      	str	r3, [r2, #4]
   85690:	6093      	str	r3, [r2, #8]
   85692:	4620      	mov	r0, r4
   85694:	bd10      	pop	{r4, pc}
   85696:	4602      	mov	r2, r0
   85698:	e7f7      	b.n	8568a <_calloc_r+0x3e>
   8569a:	2100      	movs	r1, #0
   8569c:	f7fc fd0e 	bl	820bc <memset>
   856a0:	4620      	mov	r0, r4
   856a2:	bd10      	pop	{r4, pc}
   856a4:	f100 0208 	add.w	r2, r0, #8
   856a8:	e7ef      	b.n	8568a <_calloc_r+0x3e>
   856aa:	bf00      	nop

000856ac <__aeabi_drsub>:
   856ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   856b0:	e002      	b.n	856b8 <__adddf3>
   856b2:	bf00      	nop

000856b4 <__aeabi_dsub>:
   856b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000856b8 <__adddf3>:
   856b8:	b530      	push	{r4, r5, lr}
   856ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   856be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   856c2:	ea94 0f05 	teq	r4, r5
   856c6:	bf08      	it	eq
   856c8:	ea90 0f02 	teqeq	r0, r2
   856cc:	bf1f      	itttt	ne
   856ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   856d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   856d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   856da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   856de:	f000 80e2 	beq.w	858a6 <__adddf3+0x1ee>
   856e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   856e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   856ea:	bfb8      	it	lt
   856ec:	426d      	neglt	r5, r5
   856ee:	dd0c      	ble.n	8570a <__adddf3+0x52>
   856f0:	442c      	add	r4, r5
   856f2:	ea80 0202 	eor.w	r2, r0, r2
   856f6:	ea81 0303 	eor.w	r3, r1, r3
   856fa:	ea82 0000 	eor.w	r0, r2, r0
   856fe:	ea83 0101 	eor.w	r1, r3, r1
   85702:	ea80 0202 	eor.w	r2, r0, r2
   85706:	ea81 0303 	eor.w	r3, r1, r3
   8570a:	2d36      	cmp	r5, #54	; 0x36
   8570c:	bf88      	it	hi
   8570e:	bd30      	pophi	{r4, r5, pc}
   85710:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85714:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85718:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8571c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85720:	d002      	beq.n	85728 <__adddf3+0x70>
   85722:	4240      	negs	r0, r0
   85724:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85728:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8572c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85730:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   85734:	d002      	beq.n	8573c <__adddf3+0x84>
   85736:	4252      	negs	r2, r2
   85738:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8573c:	ea94 0f05 	teq	r4, r5
   85740:	f000 80a7 	beq.w	85892 <__adddf3+0x1da>
   85744:	f1a4 0401 	sub.w	r4, r4, #1
   85748:	f1d5 0e20 	rsbs	lr, r5, #32
   8574c:	db0d      	blt.n	8576a <__adddf3+0xb2>
   8574e:	fa02 fc0e 	lsl.w	ip, r2, lr
   85752:	fa22 f205 	lsr.w	r2, r2, r5
   85756:	1880      	adds	r0, r0, r2
   85758:	f141 0100 	adc.w	r1, r1, #0
   8575c:	fa03 f20e 	lsl.w	r2, r3, lr
   85760:	1880      	adds	r0, r0, r2
   85762:	fa43 f305 	asr.w	r3, r3, r5
   85766:	4159      	adcs	r1, r3
   85768:	e00e      	b.n	85788 <__adddf3+0xd0>
   8576a:	f1a5 0520 	sub.w	r5, r5, #32
   8576e:	f10e 0e20 	add.w	lr, lr, #32
   85772:	2a01      	cmp	r2, #1
   85774:	fa03 fc0e 	lsl.w	ip, r3, lr
   85778:	bf28      	it	cs
   8577a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8577e:	fa43 f305 	asr.w	r3, r3, r5
   85782:	18c0      	adds	r0, r0, r3
   85784:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   85788:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8578c:	d507      	bpl.n	8579e <__adddf3+0xe6>
   8578e:	f04f 0e00 	mov.w	lr, #0
   85792:	f1dc 0c00 	rsbs	ip, ip, #0
   85796:	eb7e 0000 	sbcs.w	r0, lr, r0
   8579a:	eb6e 0101 	sbc.w	r1, lr, r1
   8579e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   857a2:	d31b      	bcc.n	857dc <__adddf3+0x124>
   857a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   857a8:	d30c      	bcc.n	857c4 <__adddf3+0x10c>
   857aa:	0849      	lsrs	r1, r1, #1
   857ac:	ea5f 0030 	movs.w	r0, r0, rrx
   857b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   857b4:	f104 0401 	add.w	r4, r4, #1
   857b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   857bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   857c0:	f080 809a 	bcs.w	858f8 <__adddf3+0x240>
   857c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   857c8:	bf08      	it	eq
   857ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   857ce:	f150 0000 	adcs.w	r0, r0, #0
   857d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   857d6:	ea41 0105 	orr.w	r1, r1, r5
   857da:	bd30      	pop	{r4, r5, pc}
   857dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   857e0:	4140      	adcs	r0, r0
   857e2:	eb41 0101 	adc.w	r1, r1, r1
   857e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   857ea:	f1a4 0401 	sub.w	r4, r4, #1
   857ee:	d1e9      	bne.n	857c4 <__adddf3+0x10c>
   857f0:	f091 0f00 	teq	r1, #0
   857f4:	bf04      	itt	eq
   857f6:	4601      	moveq	r1, r0
   857f8:	2000      	moveq	r0, #0
   857fa:	fab1 f381 	clz	r3, r1
   857fe:	bf08      	it	eq
   85800:	3320      	addeq	r3, #32
   85802:	f1a3 030b 	sub.w	r3, r3, #11
   85806:	f1b3 0220 	subs.w	r2, r3, #32
   8580a:	da0c      	bge.n	85826 <__adddf3+0x16e>
   8580c:	320c      	adds	r2, #12
   8580e:	dd08      	ble.n	85822 <__adddf3+0x16a>
   85810:	f102 0c14 	add.w	ip, r2, #20
   85814:	f1c2 020c 	rsb	r2, r2, #12
   85818:	fa01 f00c 	lsl.w	r0, r1, ip
   8581c:	fa21 f102 	lsr.w	r1, r1, r2
   85820:	e00c      	b.n	8583c <__adddf3+0x184>
   85822:	f102 0214 	add.w	r2, r2, #20
   85826:	bfd8      	it	le
   85828:	f1c2 0c20 	rsble	ip, r2, #32
   8582c:	fa01 f102 	lsl.w	r1, r1, r2
   85830:	fa20 fc0c 	lsr.w	ip, r0, ip
   85834:	bfdc      	itt	le
   85836:	ea41 010c 	orrle.w	r1, r1, ip
   8583a:	4090      	lslle	r0, r2
   8583c:	1ae4      	subs	r4, r4, r3
   8583e:	bfa2      	ittt	ge
   85840:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   85844:	4329      	orrge	r1, r5
   85846:	bd30      	popge	{r4, r5, pc}
   85848:	ea6f 0404 	mvn.w	r4, r4
   8584c:	3c1f      	subs	r4, #31
   8584e:	da1c      	bge.n	8588a <__adddf3+0x1d2>
   85850:	340c      	adds	r4, #12
   85852:	dc0e      	bgt.n	85872 <__adddf3+0x1ba>
   85854:	f104 0414 	add.w	r4, r4, #20
   85858:	f1c4 0220 	rsb	r2, r4, #32
   8585c:	fa20 f004 	lsr.w	r0, r0, r4
   85860:	fa01 f302 	lsl.w	r3, r1, r2
   85864:	ea40 0003 	orr.w	r0, r0, r3
   85868:	fa21 f304 	lsr.w	r3, r1, r4
   8586c:	ea45 0103 	orr.w	r1, r5, r3
   85870:	bd30      	pop	{r4, r5, pc}
   85872:	f1c4 040c 	rsb	r4, r4, #12
   85876:	f1c4 0220 	rsb	r2, r4, #32
   8587a:	fa20 f002 	lsr.w	r0, r0, r2
   8587e:	fa01 f304 	lsl.w	r3, r1, r4
   85882:	ea40 0003 	orr.w	r0, r0, r3
   85886:	4629      	mov	r1, r5
   85888:	bd30      	pop	{r4, r5, pc}
   8588a:	fa21 f004 	lsr.w	r0, r1, r4
   8588e:	4629      	mov	r1, r5
   85890:	bd30      	pop	{r4, r5, pc}
   85892:	f094 0f00 	teq	r4, #0
   85896:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8589a:	bf06      	itte	eq
   8589c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   858a0:	3401      	addeq	r4, #1
   858a2:	3d01      	subne	r5, #1
   858a4:	e74e      	b.n	85744 <__adddf3+0x8c>
   858a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   858aa:	bf18      	it	ne
   858ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   858b0:	d029      	beq.n	85906 <__adddf3+0x24e>
   858b2:	ea94 0f05 	teq	r4, r5
   858b6:	bf08      	it	eq
   858b8:	ea90 0f02 	teqeq	r0, r2
   858bc:	d005      	beq.n	858ca <__adddf3+0x212>
   858be:	ea54 0c00 	orrs.w	ip, r4, r0
   858c2:	bf04      	itt	eq
   858c4:	4619      	moveq	r1, r3
   858c6:	4610      	moveq	r0, r2
   858c8:	bd30      	pop	{r4, r5, pc}
   858ca:	ea91 0f03 	teq	r1, r3
   858ce:	bf1e      	ittt	ne
   858d0:	2100      	movne	r1, #0
   858d2:	2000      	movne	r0, #0
   858d4:	bd30      	popne	{r4, r5, pc}
   858d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   858da:	d105      	bne.n	858e8 <__adddf3+0x230>
   858dc:	0040      	lsls	r0, r0, #1
   858de:	4149      	adcs	r1, r1
   858e0:	bf28      	it	cs
   858e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   858e6:	bd30      	pop	{r4, r5, pc}
   858e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   858ec:	bf3c      	itt	cc
   858ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   858f2:	bd30      	popcc	{r4, r5, pc}
   858f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   858f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   858fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85900:	f04f 0000 	mov.w	r0, #0
   85904:	bd30      	pop	{r4, r5, pc}
   85906:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8590a:	bf1a      	itte	ne
   8590c:	4619      	movne	r1, r3
   8590e:	4610      	movne	r0, r2
   85910:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   85914:	bf1c      	itt	ne
   85916:	460b      	movne	r3, r1
   85918:	4602      	movne	r2, r0
   8591a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8591e:	bf06      	itte	eq
   85920:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   85924:	ea91 0f03 	teqeq	r1, r3
   85928:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8592c:	bd30      	pop	{r4, r5, pc}
   8592e:	bf00      	nop

00085930 <__aeabi_ui2d>:
   85930:	f090 0f00 	teq	r0, #0
   85934:	bf04      	itt	eq
   85936:	2100      	moveq	r1, #0
   85938:	4770      	bxeq	lr
   8593a:	b530      	push	{r4, r5, lr}
   8593c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85940:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85944:	f04f 0500 	mov.w	r5, #0
   85948:	f04f 0100 	mov.w	r1, #0
   8594c:	e750      	b.n	857f0 <__adddf3+0x138>
   8594e:	bf00      	nop

00085950 <__aeabi_i2d>:
   85950:	f090 0f00 	teq	r0, #0
   85954:	bf04      	itt	eq
   85956:	2100      	moveq	r1, #0
   85958:	4770      	bxeq	lr
   8595a:	b530      	push	{r4, r5, lr}
   8595c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85960:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85964:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   85968:	bf48      	it	mi
   8596a:	4240      	negmi	r0, r0
   8596c:	f04f 0100 	mov.w	r1, #0
   85970:	e73e      	b.n	857f0 <__adddf3+0x138>
   85972:	bf00      	nop

00085974 <__aeabi_f2d>:
   85974:	0042      	lsls	r2, r0, #1
   85976:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8597a:	ea4f 0131 	mov.w	r1, r1, rrx
   8597e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   85982:	bf1f      	itttt	ne
   85984:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   85988:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8598c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   85990:	4770      	bxne	lr
   85992:	f092 0f00 	teq	r2, #0
   85996:	bf14      	ite	ne
   85998:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8599c:	4770      	bxeq	lr
   8599e:	b530      	push	{r4, r5, lr}
   859a0:	f44f 7460 	mov.w	r4, #896	; 0x380
   859a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   859a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   859ac:	e720      	b.n	857f0 <__adddf3+0x138>
   859ae:	bf00      	nop

000859b0 <__aeabi_ul2d>:
   859b0:	ea50 0201 	orrs.w	r2, r0, r1
   859b4:	bf08      	it	eq
   859b6:	4770      	bxeq	lr
   859b8:	b530      	push	{r4, r5, lr}
   859ba:	f04f 0500 	mov.w	r5, #0
   859be:	e00a      	b.n	859d6 <__aeabi_l2d+0x16>

000859c0 <__aeabi_l2d>:
   859c0:	ea50 0201 	orrs.w	r2, r0, r1
   859c4:	bf08      	it	eq
   859c6:	4770      	bxeq	lr
   859c8:	b530      	push	{r4, r5, lr}
   859ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   859ce:	d502      	bpl.n	859d6 <__aeabi_l2d+0x16>
   859d0:	4240      	negs	r0, r0
   859d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   859d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   859da:	f104 0432 	add.w	r4, r4, #50	; 0x32
   859de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   859e2:	f43f aedc 	beq.w	8579e <__adddf3+0xe6>
   859e6:	f04f 0203 	mov.w	r2, #3
   859ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   859ee:	bf18      	it	ne
   859f0:	3203      	addne	r2, #3
   859f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   859f6:	bf18      	it	ne
   859f8:	3203      	addne	r2, #3
   859fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   859fe:	f1c2 0320 	rsb	r3, r2, #32
   85a02:	fa00 fc03 	lsl.w	ip, r0, r3
   85a06:	fa20 f002 	lsr.w	r0, r0, r2
   85a0a:	fa01 fe03 	lsl.w	lr, r1, r3
   85a0e:	ea40 000e 	orr.w	r0, r0, lr
   85a12:	fa21 f102 	lsr.w	r1, r1, r2
   85a16:	4414      	add	r4, r2
   85a18:	e6c1      	b.n	8579e <__adddf3+0xe6>
   85a1a:	bf00      	nop

00085a1c <__aeabi_dmul>:
   85a1c:	b570      	push	{r4, r5, r6, lr}
   85a1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85a22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   85a26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   85a2a:	bf1d      	ittte	ne
   85a2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   85a30:	ea94 0f0c 	teqne	r4, ip
   85a34:	ea95 0f0c 	teqne	r5, ip
   85a38:	f000 f8de 	bleq	85bf8 <__aeabi_dmul+0x1dc>
   85a3c:	442c      	add	r4, r5
   85a3e:	ea81 0603 	eor.w	r6, r1, r3
   85a42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   85a46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   85a4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   85a4e:	bf18      	it	ne
   85a50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   85a54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   85a5c:	d038      	beq.n	85ad0 <__aeabi_dmul+0xb4>
   85a5e:	fba0 ce02 	umull	ip, lr, r0, r2
   85a62:	f04f 0500 	mov.w	r5, #0
   85a66:	fbe1 e502 	umlal	lr, r5, r1, r2
   85a6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   85a6e:	fbe0 e503 	umlal	lr, r5, r0, r3
   85a72:	f04f 0600 	mov.w	r6, #0
   85a76:	fbe1 5603 	umlal	r5, r6, r1, r3
   85a7a:	f09c 0f00 	teq	ip, #0
   85a7e:	bf18      	it	ne
   85a80:	f04e 0e01 	orrne.w	lr, lr, #1
   85a84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   85a88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   85a8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   85a90:	d204      	bcs.n	85a9c <__aeabi_dmul+0x80>
   85a92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   85a96:	416d      	adcs	r5, r5
   85a98:	eb46 0606 	adc.w	r6, r6, r6
   85a9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   85aa0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   85aa4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   85aa8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   85aac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   85ab0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   85ab4:	bf88      	it	hi
   85ab6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   85aba:	d81e      	bhi.n	85afa <__aeabi_dmul+0xde>
   85abc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   85ac0:	bf08      	it	eq
   85ac2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   85ac6:	f150 0000 	adcs.w	r0, r0, #0
   85aca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85ace:	bd70      	pop	{r4, r5, r6, pc}
   85ad0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   85ad4:	ea46 0101 	orr.w	r1, r6, r1
   85ad8:	ea40 0002 	orr.w	r0, r0, r2
   85adc:	ea81 0103 	eor.w	r1, r1, r3
   85ae0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   85ae4:	bfc2      	ittt	gt
   85ae6:	ebd4 050c 	rsbsgt	r5, r4, ip
   85aea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85aee:	bd70      	popgt	{r4, r5, r6, pc}
   85af0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85af4:	f04f 0e00 	mov.w	lr, #0
   85af8:	3c01      	subs	r4, #1
   85afa:	f300 80ab 	bgt.w	85c54 <__aeabi_dmul+0x238>
   85afe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   85b02:	bfde      	ittt	le
   85b04:	2000      	movle	r0, #0
   85b06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   85b0a:	bd70      	pople	{r4, r5, r6, pc}
   85b0c:	f1c4 0400 	rsb	r4, r4, #0
   85b10:	3c20      	subs	r4, #32
   85b12:	da35      	bge.n	85b80 <__aeabi_dmul+0x164>
   85b14:	340c      	adds	r4, #12
   85b16:	dc1b      	bgt.n	85b50 <__aeabi_dmul+0x134>
   85b18:	f104 0414 	add.w	r4, r4, #20
   85b1c:	f1c4 0520 	rsb	r5, r4, #32
   85b20:	fa00 f305 	lsl.w	r3, r0, r5
   85b24:	fa20 f004 	lsr.w	r0, r0, r4
   85b28:	fa01 f205 	lsl.w	r2, r1, r5
   85b2c:	ea40 0002 	orr.w	r0, r0, r2
   85b30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   85b34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85b38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   85b3c:	fa21 f604 	lsr.w	r6, r1, r4
   85b40:	eb42 0106 	adc.w	r1, r2, r6
   85b44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85b48:	bf08      	it	eq
   85b4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85b4e:	bd70      	pop	{r4, r5, r6, pc}
   85b50:	f1c4 040c 	rsb	r4, r4, #12
   85b54:	f1c4 0520 	rsb	r5, r4, #32
   85b58:	fa00 f304 	lsl.w	r3, r0, r4
   85b5c:	fa20 f005 	lsr.w	r0, r0, r5
   85b60:	fa01 f204 	lsl.w	r2, r1, r4
   85b64:	ea40 0002 	orr.w	r0, r0, r2
   85b68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85b6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   85b70:	f141 0100 	adc.w	r1, r1, #0
   85b74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85b78:	bf08      	it	eq
   85b7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85b7e:	bd70      	pop	{r4, r5, r6, pc}
   85b80:	f1c4 0520 	rsb	r5, r4, #32
   85b84:	fa00 f205 	lsl.w	r2, r0, r5
   85b88:	ea4e 0e02 	orr.w	lr, lr, r2
   85b8c:	fa20 f304 	lsr.w	r3, r0, r4
   85b90:	fa01 f205 	lsl.w	r2, r1, r5
   85b94:	ea43 0302 	orr.w	r3, r3, r2
   85b98:	fa21 f004 	lsr.w	r0, r1, r4
   85b9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85ba0:	fa21 f204 	lsr.w	r2, r1, r4
   85ba4:	ea20 0002 	bic.w	r0, r0, r2
   85ba8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   85bac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85bb0:	bf08      	it	eq
   85bb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85bb6:	bd70      	pop	{r4, r5, r6, pc}
   85bb8:	f094 0f00 	teq	r4, #0
   85bbc:	d10f      	bne.n	85bde <__aeabi_dmul+0x1c2>
   85bbe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   85bc2:	0040      	lsls	r0, r0, #1
   85bc4:	eb41 0101 	adc.w	r1, r1, r1
   85bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85bcc:	bf08      	it	eq
   85bce:	3c01      	subeq	r4, #1
   85bd0:	d0f7      	beq.n	85bc2 <__aeabi_dmul+0x1a6>
   85bd2:	ea41 0106 	orr.w	r1, r1, r6
   85bd6:	f095 0f00 	teq	r5, #0
   85bda:	bf18      	it	ne
   85bdc:	4770      	bxne	lr
   85bde:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   85be2:	0052      	lsls	r2, r2, #1
   85be4:	eb43 0303 	adc.w	r3, r3, r3
   85be8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   85bec:	bf08      	it	eq
   85bee:	3d01      	subeq	r5, #1
   85bf0:	d0f7      	beq.n	85be2 <__aeabi_dmul+0x1c6>
   85bf2:	ea43 0306 	orr.w	r3, r3, r6
   85bf6:	4770      	bx	lr
   85bf8:	ea94 0f0c 	teq	r4, ip
   85bfc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   85c00:	bf18      	it	ne
   85c02:	ea95 0f0c 	teqne	r5, ip
   85c06:	d00c      	beq.n	85c22 <__aeabi_dmul+0x206>
   85c08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85c0c:	bf18      	it	ne
   85c0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85c12:	d1d1      	bne.n	85bb8 <__aeabi_dmul+0x19c>
   85c14:	ea81 0103 	eor.w	r1, r1, r3
   85c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85c1c:	f04f 0000 	mov.w	r0, #0
   85c20:	bd70      	pop	{r4, r5, r6, pc}
   85c22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85c26:	bf06      	itte	eq
   85c28:	4610      	moveq	r0, r2
   85c2a:	4619      	moveq	r1, r3
   85c2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85c30:	d019      	beq.n	85c66 <__aeabi_dmul+0x24a>
   85c32:	ea94 0f0c 	teq	r4, ip
   85c36:	d102      	bne.n	85c3e <__aeabi_dmul+0x222>
   85c38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   85c3c:	d113      	bne.n	85c66 <__aeabi_dmul+0x24a>
   85c3e:	ea95 0f0c 	teq	r5, ip
   85c42:	d105      	bne.n	85c50 <__aeabi_dmul+0x234>
   85c44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   85c48:	bf1c      	itt	ne
   85c4a:	4610      	movne	r0, r2
   85c4c:	4619      	movne	r1, r3
   85c4e:	d10a      	bne.n	85c66 <__aeabi_dmul+0x24a>
   85c50:	ea81 0103 	eor.w	r1, r1, r3
   85c54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85c58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   85c5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85c60:	f04f 0000 	mov.w	r0, #0
   85c64:	bd70      	pop	{r4, r5, r6, pc}
   85c66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   85c6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   85c6e:	bd70      	pop	{r4, r5, r6, pc}

00085c70 <__aeabi_ddiv>:
   85c70:	b570      	push	{r4, r5, r6, lr}
   85c72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85c76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   85c7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   85c7e:	bf1d      	ittte	ne
   85c80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   85c84:	ea94 0f0c 	teqne	r4, ip
   85c88:	ea95 0f0c 	teqne	r5, ip
   85c8c:	f000 f8a7 	bleq	85dde <__aeabi_ddiv+0x16e>
   85c90:	eba4 0405 	sub.w	r4, r4, r5
   85c94:	ea81 0e03 	eor.w	lr, r1, r3
   85c98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   85c9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85ca0:	f000 8088 	beq.w	85db4 <__aeabi_ddiv+0x144>
   85ca4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85ca8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   85cac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   85cb0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   85cb4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   85cb8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   85cbc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   85cc0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   85cc4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   85cc8:	429d      	cmp	r5, r3
   85cca:	bf08      	it	eq
   85ccc:	4296      	cmpeq	r6, r2
   85cce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   85cd2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   85cd6:	d202      	bcs.n	85cde <__aeabi_ddiv+0x6e>
   85cd8:	085b      	lsrs	r3, r3, #1
   85cda:	ea4f 0232 	mov.w	r2, r2, rrx
   85cde:	1ab6      	subs	r6, r6, r2
   85ce0:	eb65 0503 	sbc.w	r5, r5, r3
   85ce4:	085b      	lsrs	r3, r3, #1
   85ce6:	ea4f 0232 	mov.w	r2, r2, rrx
   85cea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   85cee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   85cf2:	ebb6 0e02 	subs.w	lr, r6, r2
   85cf6:	eb75 0e03 	sbcs.w	lr, r5, r3
   85cfa:	bf22      	ittt	cs
   85cfc:	1ab6      	subcs	r6, r6, r2
   85cfe:	4675      	movcs	r5, lr
   85d00:	ea40 000c 	orrcs.w	r0, r0, ip
   85d04:	085b      	lsrs	r3, r3, #1
   85d06:	ea4f 0232 	mov.w	r2, r2, rrx
   85d0a:	ebb6 0e02 	subs.w	lr, r6, r2
   85d0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   85d12:	bf22      	ittt	cs
   85d14:	1ab6      	subcs	r6, r6, r2
   85d16:	4675      	movcs	r5, lr
   85d18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   85d1c:	085b      	lsrs	r3, r3, #1
   85d1e:	ea4f 0232 	mov.w	r2, r2, rrx
   85d22:	ebb6 0e02 	subs.w	lr, r6, r2
   85d26:	eb75 0e03 	sbcs.w	lr, r5, r3
   85d2a:	bf22      	ittt	cs
   85d2c:	1ab6      	subcs	r6, r6, r2
   85d2e:	4675      	movcs	r5, lr
   85d30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   85d34:	085b      	lsrs	r3, r3, #1
   85d36:	ea4f 0232 	mov.w	r2, r2, rrx
   85d3a:	ebb6 0e02 	subs.w	lr, r6, r2
   85d3e:	eb75 0e03 	sbcs.w	lr, r5, r3
   85d42:	bf22      	ittt	cs
   85d44:	1ab6      	subcs	r6, r6, r2
   85d46:	4675      	movcs	r5, lr
   85d48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   85d4c:	ea55 0e06 	orrs.w	lr, r5, r6
   85d50:	d018      	beq.n	85d84 <__aeabi_ddiv+0x114>
   85d52:	ea4f 1505 	mov.w	r5, r5, lsl #4
   85d56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   85d5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   85d5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   85d62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   85d66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   85d6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   85d6e:	d1c0      	bne.n	85cf2 <__aeabi_ddiv+0x82>
   85d70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85d74:	d10b      	bne.n	85d8e <__aeabi_ddiv+0x11e>
   85d76:	ea41 0100 	orr.w	r1, r1, r0
   85d7a:	f04f 0000 	mov.w	r0, #0
   85d7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   85d82:	e7b6      	b.n	85cf2 <__aeabi_ddiv+0x82>
   85d84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85d88:	bf04      	itt	eq
   85d8a:	4301      	orreq	r1, r0
   85d8c:	2000      	moveq	r0, #0
   85d8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   85d92:	bf88      	it	hi
   85d94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   85d98:	f63f aeaf 	bhi.w	85afa <__aeabi_dmul+0xde>
   85d9c:	ebb5 0c03 	subs.w	ip, r5, r3
   85da0:	bf04      	itt	eq
   85da2:	ebb6 0c02 	subseq.w	ip, r6, r2
   85da6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85daa:	f150 0000 	adcs.w	r0, r0, #0
   85dae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85db2:	bd70      	pop	{r4, r5, r6, pc}
   85db4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   85db8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   85dbc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   85dc0:	bfc2      	ittt	gt
   85dc2:	ebd4 050c 	rsbsgt	r5, r4, ip
   85dc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85dca:	bd70      	popgt	{r4, r5, r6, pc}
   85dcc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85dd0:	f04f 0e00 	mov.w	lr, #0
   85dd4:	3c01      	subs	r4, #1
   85dd6:	e690      	b.n	85afa <__aeabi_dmul+0xde>
   85dd8:	ea45 0e06 	orr.w	lr, r5, r6
   85ddc:	e68d      	b.n	85afa <__aeabi_dmul+0xde>
   85dde:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   85de2:	ea94 0f0c 	teq	r4, ip
   85de6:	bf08      	it	eq
   85de8:	ea95 0f0c 	teqeq	r5, ip
   85dec:	f43f af3b 	beq.w	85c66 <__aeabi_dmul+0x24a>
   85df0:	ea94 0f0c 	teq	r4, ip
   85df4:	d10a      	bne.n	85e0c <__aeabi_ddiv+0x19c>
   85df6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85dfa:	f47f af34 	bne.w	85c66 <__aeabi_dmul+0x24a>
   85dfe:	ea95 0f0c 	teq	r5, ip
   85e02:	f47f af25 	bne.w	85c50 <__aeabi_dmul+0x234>
   85e06:	4610      	mov	r0, r2
   85e08:	4619      	mov	r1, r3
   85e0a:	e72c      	b.n	85c66 <__aeabi_dmul+0x24a>
   85e0c:	ea95 0f0c 	teq	r5, ip
   85e10:	d106      	bne.n	85e20 <__aeabi_ddiv+0x1b0>
   85e12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   85e16:	f43f aefd 	beq.w	85c14 <__aeabi_dmul+0x1f8>
   85e1a:	4610      	mov	r0, r2
   85e1c:	4619      	mov	r1, r3
   85e1e:	e722      	b.n	85c66 <__aeabi_dmul+0x24a>
   85e20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85e24:	bf18      	it	ne
   85e26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85e2a:	f47f aec5 	bne.w	85bb8 <__aeabi_dmul+0x19c>
   85e2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   85e32:	f47f af0d 	bne.w	85c50 <__aeabi_dmul+0x234>
   85e36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   85e3a:	f47f aeeb 	bne.w	85c14 <__aeabi_dmul+0x1f8>
   85e3e:	e712      	b.n	85c66 <__aeabi_dmul+0x24a>

00085e40 <__gedf2>:
   85e40:	f04f 3cff 	mov.w	ip, #4294967295
   85e44:	e006      	b.n	85e54 <__cmpdf2+0x4>
   85e46:	bf00      	nop

00085e48 <__ledf2>:
   85e48:	f04f 0c01 	mov.w	ip, #1
   85e4c:	e002      	b.n	85e54 <__cmpdf2+0x4>
   85e4e:	bf00      	nop

00085e50 <__cmpdf2>:
   85e50:	f04f 0c01 	mov.w	ip, #1
   85e54:	f84d cd04 	str.w	ip, [sp, #-4]!
   85e58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   85e5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85e60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   85e64:	bf18      	it	ne
   85e66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   85e6a:	d01b      	beq.n	85ea4 <__cmpdf2+0x54>
   85e6c:	b001      	add	sp, #4
   85e6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   85e72:	bf0c      	ite	eq
   85e74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   85e78:	ea91 0f03 	teqne	r1, r3
   85e7c:	bf02      	ittt	eq
   85e7e:	ea90 0f02 	teqeq	r0, r2
   85e82:	2000      	moveq	r0, #0
   85e84:	4770      	bxeq	lr
   85e86:	f110 0f00 	cmn.w	r0, #0
   85e8a:	ea91 0f03 	teq	r1, r3
   85e8e:	bf58      	it	pl
   85e90:	4299      	cmppl	r1, r3
   85e92:	bf08      	it	eq
   85e94:	4290      	cmpeq	r0, r2
   85e96:	bf2c      	ite	cs
   85e98:	17d8      	asrcs	r0, r3, #31
   85e9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   85e9e:	f040 0001 	orr.w	r0, r0, #1
   85ea2:	4770      	bx	lr
   85ea4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   85ea8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85eac:	d102      	bne.n	85eb4 <__cmpdf2+0x64>
   85eae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   85eb2:	d107      	bne.n	85ec4 <__cmpdf2+0x74>
   85eb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   85eb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85ebc:	d1d6      	bne.n	85e6c <__cmpdf2+0x1c>
   85ebe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   85ec2:	d0d3      	beq.n	85e6c <__cmpdf2+0x1c>
   85ec4:	f85d 0b04 	ldr.w	r0, [sp], #4
   85ec8:	4770      	bx	lr
   85eca:	bf00      	nop

00085ecc <__aeabi_cdrcmple>:
   85ecc:	4684      	mov	ip, r0
   85ece:	4610      	mov	r0, r2
   85ed0:	4662      	mov	r2, ip
   85ed2:	468c      	mov	ip, r1
   85ed4:	4619      	mov	r1, r3
   85ed6:	4663      	mov	r3, ip
   85ed8:	e000      	b.n	85edc <__aeabi_cdcmpeq>
   85eda:	bf00      	nop

00085edc <__aeabi_cdcmpeq>:
   85edc:	b501      	push	{r0, lr}
   85ede:	f7ff ffb7 	bl	85e50 <__cmpdf2>
   85ee2:	2800      	cmp	r0, #0
   85ee4:	bf48      	it	mi
   85ee6:	f110 0f00 	cmnmi.w	r0, #0
   85eea:	bd01      	pop	{r0, pc}

00085eec <__aeabi_dcmpeq>:
   85eec:	f84d ed08 	str.w	lr, [sp, #-8]!
   85ef0:	f7ff fff4 	bl	85edc <__aeabi_cdcmpeq>
   85ef4:	bf0c      	ite	eq
   85ef6:	2001      	moveq	r0, #1
   85ef8:	2000      	movne	r0, #0
   85efa:	f85d fb08 	ldr.w	pc, [sp], #8
   85efe:	bf00      	nop

00085f00 <__aeabi_dcmplt>:
   85f00:	f84d ed08 	str.w	lr, [sp, #-8]!
   85f04:	f7ff ffea 	bl	85edc <__aeabi_cdcmpeq>
   85f08:	bf34      	ite	cc
   85f0a:	2001      	movcc	r0, #1
   85f0c:	2000      	movcs	r0, #0
   85f0e:	f85d fb08 	ldr.w	pc, [sp], #8
   85f12:	bf00      	nop

00085f14 <__aeabi_dcmple>:
   85f14:	f84d ed08 	str.w	lr, [sp, #-8]!
   85f18:	f7ff ffe0 	bl	85edc <__aeabi_cdcmpeq>
   85f1c:	bf94      	ite	ls
   85f1e:	2001      	movls	r0, #1
   85f20:	2000      	movhi	r0, #0
   85f22:	f85d fb08 	ldr.w	pc, [sp], #8
   85f26:	bf00      	nop

00085f28 <__aeabi_dcmpge>:
   85f28:	f84d ed08 	str.w	lr, [sp, #-8]!
   85f2c:	f7ff ffce 	bl	85ecc <__aeabi_cdrcmple>
   85f30:	bf94      	ite	ls
   85f32:	2001      	movls	r0, #1
   85f34:	2000      	movhi	r0, #0
   85f36:	f85d fb08 	ldr.w	pc, [sp], #8
   85f3a:	bf00      	nop

00085f3c <__aeabi_dcmpgt>:
   85f3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   85f40:	f7ff ffc4 	bl	85ecc <__aeabi_cdrcmple>
   85f44:	bf34      	ite	cc
   85f46:	2001      	movcc	r0, #1
   85f48:	2000      	movcs	r0, #0
   85f4a:	f85d fb08 	ldr.w	pc, [sp], #8
   85f4e:	bf00      	nop

00085f50 <__aeabi_dcmpun>:
   85f50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   85f54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85f58:	d102      	bne.n	85f60 <__aeabi_dcmpun+0x10>
   85f5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   85f5e:	d10a      	bne.n	85f76 <__aeabi_dcmpun+0x26>
   85f60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   85f64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85f68:	d102      	bne.n	85f70 <__aeabi_dcmpun+0x20>
   85f6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   85f6e:	d102      	bne.n	85f76 <__aeabi_dcmpun+0x26>
   85f70:	f04f 0000 	mov.w	r0, #0
   85f74:	4770      	bx	lr
   85f76:	f04f 0001 	mov.w	r0, #1
   85f7a:	4770      	bx	lr

00085f7c <__aeabi_d2iz>:
   85f7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   85f80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   85f84:	d215      	bcs.n	85fb2 <__aeabi_d2iz+0x36>
   85f86:	d511      	bpl.n	85fac <__aeabi_d2iz+0x30>
   85f88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   85f8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   85f90:	d912      	bls.n	85fb8 <__aeabi_d2iz+0x3c>
   85f92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   85f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   85f9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   85f9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85fa2:	fa23 f002 	lsr.w	r0, r3, r2
   85fa6:	bf18      	it	ne
   85fa8:	4240      	negne	r0, r0
   85faa:	4770      	bx	lr
   85fac:	f04f 0000 	mov.w	r0, #0
   85fb0:	4770      	bx	lr
   85fb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   85fb6:	d105      	bne.n	85fc4 <__aeabi_d2iz+0x48>
   85fb8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   85fbc:	bf08      	it	eq
   85fbe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   85fc2:	4770      	bx	lr
   85fc4:	f04f 0000 	mov.w	r0, #0
   85fc8:	4770      	bx	lr
   85fca:	bf00      	nop

00085fcc <__aeabi_uldivmod>:
   85fcc:	b953      	cbnz	r3, 85fe4 <__aeabi_uldivmod+0x18>
   85fce:	b94a      	cbnz	r2, 85fe4 <__aeabi_uldivmod+0x18>
   85fd0:	2900      	cmp	r1, #0
   85fd2:	bf08      	it	eq
   85fd4:	2800      	cmpeq	r0, #0
   85fd6:	bf1c      	itt	ne
   85fd8:	f04f 31ff 	movne.w	r1, #4294967295
   85fdc:	f04f 30ff 	movne.w	r0, #4294967295
   85fe0:	f000 b97a 	b.w	862d8 <__aeabi_idiv0>
   85fe4:	f1ad 0c08 	sub.w	ip, sp, #8
   85fe8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85fec:	f000 f806 	bl	85ffc <__udivmoddi4>
   85ff0:	f8dd e004 	ldr.w	lr, [sp, #4]
   85ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85ff8:	b004      	add	sp, #16
   85ffa:	4770      	bx	lr

00085ffc <__udivmoddi4>:
   85ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86000:	468c      	mov	ip, r1
   86002:	460e      	mov	r6, r1
   86004:	4604      	mov	r4, r0
   86006:	9d08      	ldr	r5, [sp, #32]
   86008:	2b00      	cmp	r3, #0
   8600a:	d150      	bne.n	860ae <__udivmoddi4+0xb2>
   8600c:	428a      	cmp	r2, r1
   8600e:	4617      	mov	r7, r2
   86010:	d96c      	bls.n	860ec <__udivmoddi4+0xf0>
   86012:	fab2 fe82 	clz	lr, r2
   86016:	f1be 0f00 	cmp.w	lr, #0
   8601a:	d00b      	beq.n	86034 <__udivmoddi4+0x38>
   8601c:	f1ce 0c20 	rsb	ip, lr, #32
   86020:	fa01 f60e 	lsl.w	r6, r1, lr
   86024:	fa20 fc0c 	lsr.w	ip, r0, ip
   86028:	fa02 f70e 	lsl.w	r7, r2, lr
   8602c:	ea4c 0c06 	orr.w	ip, ip, r6
   86030:	fa00 f40e 	lsl.w	r4, r0, lr
   86034:	0c3a      	lsrs	r2, r7, #16
   86036:	fbbc f9f2 	udiv	r9, ip, r2
   8603a:	b2bb      	uxth	r3, r7
   8603c:	fb02 cc19 	mls	ip, r2, r9, ip
   86040:	fb09 fa03 	mul.w	sl, r9, r3
   86044:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86048:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8604c:	45b2      	cmp	sl, r6
   8604e:	d90a      	bls.n	86066 <__udivmoddi4+0x6a>
   86050:	19f6      	adds	r6, r6, r7
   86052:	f109 31ff 	add.w	r1, r9, #4294967295
   86056:	f080 8125 	bcs.w	862a4 <__udivmoddi4+0x2a8>
   8605a:	45b2      	cmp	sl, r6
   8605c:	f240 8122 	bls.w	862a4 <__udivmoddi4+0x2a8>
   86060:	f1a9 0902 	sub.w	r9, r9, #2
   86064:	443e      	add	r6, r7
   86066:	eba6 060a 	sub.w	r6, r6, sl
   8606a:	fbb6 f0f2 	udiv	r0, r6, r2
   8606e:	fb02 6610 	mls	r6, r2, r0, r6
   86072:	fb00 f303 	mul.w	r3, r0, r3
   86076:	b2a4      	uxth	r4, r4
   86078:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8607c:	42a3      	cmp	r3, r4
   8607e:	d909      	bls.n	86094 <__udivmoddi4+0x98>
   86080:	19e4      	adds	r4, r4, r7
   86082:	f100 32ff 	add.w	r2, r0, #4294967295
   86086:	f080 810b 	bcs.w	862a0 <__udivmoddi4+0x2a4>
   8608a:	42a3      	cmp	r3, r4
   8608c:	f240 8108 	bls.w	862a0 <__udivmoddi4+0x2a4>
   86090:	3802      	subs	r0, #2
   86092:	443c      	add	r4, r7
   86094:	2100      	movs	r1, #0
   86096:	1ae4      	subs	r4, r4, r3
   86098:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8609c:	2d00      	cmp	r5, #0
   8609e:	d062      	beq.n	86166 <__udivmoddi4+0x16a>
   860a0:	2300      	movs	r3, #0
   860a2:	fa24 f40e 	lsr.w	r4, r4, lr
   860a6:	602c      	str	r4, [r5, #0]
   860a8:	606b      	str	r3, [r5, #4]
   860aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   860ae:	428b      	cmp	r3, r1
   860b0:	d907      	bls.n	860c2 <__udivmoddi4+0xc6>
   860b2:	2d00      	cmp	r5, #0
   860b4:	d055      	beq.n	86162 <__udivmoddi4+0x166>
   860b6:	2100      	movs	r1, #0
   860b8:	e885 0041 	stmia.w	r5, {r0, r6}
   860bc:	4608      	mov	r0, r1
   860be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   860c2:	fab3 f183 	clz	r1, r3
   860c6:	2900      	cmp	r1, #0
   860c8:	f040 808f 	bne.w	861ea <__udivmoddi4+0x1ee>
   860cc:	42b3      	cmp	r3, r6
   860ce:	d302      	bcc.n	860d6 <__udivmoddi4+0xda>
   860d0:	4282      	cmp	r2, r0
   860d2:	f200 80fc 	bhi.w	862ce <__udivmoddi4+0x2d2>
   860d6:	1a84      	subs	r4, r0, r2
   860d8:	eb66 0603 	sbc.w	r6, r6, r3
   860dc:	2001      	movs	r0, #1
   860de:	46b4      	mov	ip, r6
   860e0:	2d00      	cmp	r5, #0
   860e2:	d040      	beq.n	86166 <__udivmoddi4+0x16a>
   860e4:	e885 1010 	stmia.w	r5, {r4, ip}
   860e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   860ec:	b912      	cbnz	r2, 860f4 <__udivmoddi4+0xf8>
   860ee:	2701      	movs	r7, #1
   860f0:	fbb7 f7f2 	udiv	r7, r7, r2
   860f4:	fab7 fe87 	clz	lr, r7
   860f8:	f1be 0f00 	cmp.w	lr, #0
   860fc:	d135      	bne.n	8616a <__udivmoddi4+0x16e>
   860fe:	2101      	movs	r1, #1
   86100:	1bf6      	subs	r6, r6, r7
   86102:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86106:	fa1f f887 	uxth.w	r8, r7
   8610a:	fbb6 f2fc 	udiv	r2, r6, ip
   8610e:	fb0c 6612 	mls	r6, ip, r2, r6
   86112:	fb08 f002 	mul.w	r0, r8, r2
   86116:	0c23      	lsrs	r3, r4, #16
   86118:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8611c:	42b0      	cmp	r0, r6
   8611e:	d907      	bls.n	86130 <__udivmoddi4+0x134>
   86120:	19f6      	adds	r6, r6, r7
   86122:	f102 33ff 	add.w	r3, r2, #4294967295
   86126:	d202      	bcs.n	8612e <__udivmoddi4+0x132>
   86128:	42b0      	cmp	r0, r6
   8612a:	f200 80d2 	bhi.w	862d2 <__udivmoddi4+0x2d6>
   8612e:	461a      	mov	r2, r3
   86130:	1a36      	subs	r6, r6, r0
   86132:	fbb6 f0fc 	udiv	r0, r6, ip
   86136:	fb0c 6610 	mls	r6, ip, r0, r6
   8613a:	fb08 f800 	mul.w	r8, r8, r0
   8613e:	b2a3      	uxth	r3, r4
   86140:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   86144:	45a0      	cmp	r8, r4
   86146:	d907      	bls.n	86158 <__udivmoddi4+0x15c>
   86148:	19e4      	adds	r4, r4, r7
   8614a:	f100 33ff 	add.w	r3, r0, #4294967295
   8614e:	d202      	bcs.n	86156 <__udivmoddi4+0x15a>
   86150:	45a0      	cmp	r8, r4
   86152:	f200 80b9 	bhi.w	862c8 <__udivmoddi4+0x2cc>
   86156:	4618      	mov	r0, r3
   86158:	eba4 0408 	sub.w	r4, r4, r8
   8615c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86160:	e79c      	b.n	8609c <__udivmoddi4+0xa0>
   86162:	4629      	mov	r1, r5
   86164:	4628      	mov	r0, r5
   86166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8616a:	fa07 f70e 	lsl.w	r7, r7, lr
   8616e:	f1ce 0320 	rsb	r3, lr, #32
   86172:	fa26 f203 	lsr.w	r2, r6, r3
   86176:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8617a:	fbb2 f1fc 	udiv	r1, r2, ip
   8617e:	fa1f f887 	uxth.w	r8, r7
   86182:	fb0c 2211 	mls	r2, ip, r1, r2
   86186:	fa06 f60e 	lsl.w	r6, r6, lr
   8618a:	fa20 f303 	lsr.w	r3, r0, r3
   8618e:	fb01 f908 	mul.w	r9, r1, r8
   86192:	4333      	orrs	r3, r6
   86194:	0c1e      	lsrs	r6, r3, #16
   86196:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8619a:	45b1      	cmp	r9, r6
   8619c:	fa00 f40e 	lsl.w	r4, r0, lr
   861a0:	d909      	bls.n	861b6 <__udivmoddi4+0x1ba>
   861a2:	19f6      	adds	r6, r6, r7
   861a4:	f101 32ff 	add.w	r2, r1, #4294967295
   861a8:	f080 808c 	bcs.w	862c4 <__udivmoddi4+0x2c8>
   861ac:	45b1      	cmp	r9, r6
   861ae:	f240 8089 	bls.w	862c4 <__udivmoddi4+0x2c8>
   861b2:	3902      	subs	r1, #2
   861b4:	443e      	add	r6, r7
   861b6:	eba6 0609 	sub.w	r6, r6, r9
   861ba:	fbb6 f0fc 	udiv	r0, r6, ip
   861be:	fb0c 6210 	mls	r2, ip, r0, r6
   861c2:	fb00 f908 	mul.w	r9, r0, r8
   861c6:	b29e      	uxth	r6, r3
   861c8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   861cc:	45b1      	cmp	r9, r6
   861ce:	d907      	bls.n	861e0 <__udivmoddi4+0x1e4>
   861d0:	19f6      	adds	r6, r6, r7
   861d2:	f100 33ff 	add.w	r3, r0, #4294967295
   861d6:	d271      	bcs.n	862bc <__udivmoddi4+0x2c0>
   861d8:	45b1      	cmp	r9, r6
   861da:	d96f      	bls.n	862bc <__udivmoddi4+0x2c0>
   861dc:	3802      	subs	r0, #2
   861de:	443e      	add	r6, r7
   861e0:	eba6 0609 	sub.w	r6, r6, r9
   861e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   861e8:	e78f      	b.n	8610a <__udivmoddi4+0x10e>
   861ea:	f1c1 0720 	rsb	r7, r1, #32
   861ee:	fa22 f807 	lsr.w	r8, r2, r7
   861f2:	408b      	lsls	r3, r1
   861f4:	ea48 0303 	orr.w	r3, r8, r3
   861f8:	fa26 f407 	lsr.w	r4, r6, r7
   861fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86200:	fbb4 f9fe 	udiv	r9, r4, lr
   86204:	fa1f fc83 	uxth.w	ip, r3
   86208:	fb0e 4419 	mls	r4, lr, r9, r4
   8620c:	408e      	lsls	r6, r1
   8620e:	fa20 f807 	lsr.w	r8, r0, r7
   86212:	fb09 fa0c 	mul.w	sl, r9, ip
   86216:	ea48 0806 	orr.w	r8, r8, r6
   8621a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8621e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   86222:	45a2      	cmp	sl, r4
   86224:	fa02 f201 	lsl.w	r2, r2, r1
   86228:	fa00 f601 	lsl.w	r6, r0, r1
   8622c:	d908      	bls.n	86240 <__udivmoddi4+0x244>
   8622e:	18e4      	adds	r4, r4, r3
   86230:	f109 30ff 	add.w	r0, r9, #4294967295
   86234:	d244      	bcs.n	862c0 <__udivmoddi4+0x2c4>
   86236:	45a2      	cmp	sl, r4
   86238:	d942      	bls.n	862c0 <__udivmoddi4+0x2c4>
   8623a:	f1a9 0902 	sub.w	r9, r9, #2
   8623e:	441c      	add	r4, r3
   86240:	eba4 040a 	sub.w	r4, r4, sl
   86244:	fbb4 f0fe 	udiv	r0, r4, lr
   86248:	fb0e 4410 	mls	r4, lr, r0, r4
   8624c:	fb00 fc0c 	mul.w	ip, r0, ip
   86250:	fa1f f888 	uxth.w	r8, r8
   86254:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86258:	45a4      	cmp	ip, r4
   8625a:	d907      	bls.n	8626c <__udivmoddi4+0x270>
   8625c:	18e4      	adds	r4, r4, r3
   8625e:	f100 3eff 	add.w	lr, r0, #4294967295
   86262:	d229      	bcs.n	862b8 <__udivmoddi4+0x2bc>
   86264:	45a4      	cmp	ip, r4
   86266:	d927      	bls.n	862b8 <__udivmoddi4+0x2bc>
   86268:	3802      	subs	r0, #2
   8626a:	441c      	add	r4, r3
   8626c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86270:	fba0 8902 	umull	r8, r9, r0, r2
   86274:	eba4 0c0c 	sub.w	ip, r4, ip
   86278:	45cc      	cmp	ip, r9
   8627a:	46c2      	mov	sl, r8
   8627c:	46ce      	mov	lr, r9
   8627e:	d315      	bcc.n	862ac <__udivmoddi4+0x2b0>
   86280:	d012      	beq.n	862a8 <__udivmoddi4+0x2ac>
   86282:	b155      	cbz	r5, 8629a <__udivmoddi4+0x29e>
   86284:	ebb6 030a 	subs.w	r3, r6, sl
   86288:	eb6c 060e 	sbc.w	r6, ip, lr
   8628c:	fa06 f707 	lsl.w	r7, r6, r7
   86290:	40cb      	lsrs	r3, r1
   86292:	431f      	orrs	r7, r3
   86294:	40ce      	lsrs	r6, r1
   86296:	602f      	str	r7, [r5, #0]
   86298:	606e      	str	r6, [r5, #4]
   8629a:	2100      	movs	r1, #0
   8629c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   862a0:	4610      	mov	r0, r2
   862a2:	e6f7      	b.n	86094 <__udivmoddi4+0x98>
   862a4:	4689      	mov	r9, r1
   862a6:	e6de      	b.n	86066 <__udivmoddi4+0x6a>
   862a8:	4546      	cmp	r6, r8
   862aa:	d2ea      	bcs.n	86282 <__udivmoddi4+0x286>
   862ac:	ebb8 0a02 	subs.w	sl, r8, r2
   862b0:	eb69 0e03 	sbc.w	lr, r9, r3
   862b4:	3801      	subs	r0, #1
   862b6:	e7e4      	b.n	86282 <__udivmoddi4+0x286>
   862b8:	4670      	mov	r0, lr
   862ba:	e7d7      	b.n	8626c <__udivmoddi4+0x270>
   862bc:	4618      	mov	r0, r3
   862be:	e78f      	b.n	861e0 <__udivmoddi4+0x1e4>
   862c0:	4681      	mov	r9, r0
   862c2:	e7bd      	b.n	86240 <__udivmoddi4+0x244>
   862c4:	4611      	mov	r1, r2
   862c6:	e776      	b.n	861b6 <__udivmoddi4+0x1ba>
   862c8:	3802      	subs	r0, #2
   862ca:	443c      	add	r4, r7
   862cc:	e744      	b.n	86158 <__udivmoddi4+0x15c>
   862ce:	4608      	mov	r0, r1
   862d0:	e706      	b.n	860e0 <__udivmoddi4+0xe4>
   862d2:	3a02      	subs	r2, #2
   862d4:	443e      	add	r6, r7
   862d6:	e72b      	b.n	86130 <__udivmoddi4+0x134>

000862d8 <__aeabi_idiv0>:
   862d8:	4770      	bx	lr
   862da:	bf00      	nop
   862dc:	74697257 	.word	0x74697257
   862e0:	20676e69 	.word	0x20676e69
   862e4:	66206f74 	.word	0x66206f74
   862e8:	6873616c 	.word	0x6873616c
   862ec:	0000000a 	.word	0x0000000a
   862f0:	20646142 	.word	0x20646142
   862f4:	6f6c6e75 	.word	0x6f6c6e75
   862f8:	000a6b63 	.word	0x000a6b63
   862fc:	20646142 	.word	0x20646142
   86300:	74697277 	.word	0x74697277
   86304:	00000a65 	.word	0x00000a65
   86308:	20646142 	.word	0x20646142
   8630c:	6b636f6c 	.word	0x6b636f6c
   86310:	0000000a 	.word	0x0000000a
   86314:	6f727245 	.word	0x6f727245
   86318:	000a3372 	.word	0x000a3372
   8631c:	646e6553 	.word	0x646e6553
   86320:	20465220 	.word	0x20465220
   86324:	0000000a 	.word	0x0000000a

00086328 <pipe0>:
   86328:	00f000f0 00f000f0 000000f1 64616572     ............read
   86338:	67657220 20752520 206c6176 25207525      reg %u val %u %
   86348:	75252075 20752520 000a7525 64616572     u %u %u %u..read
   86358:	67657220 20752520 206c6176 0a207525      reg %u val %u .
   86368:	00000000 6f727245 000a3272 6f727245     ....Error2..Erro
   86378:	00000a72 74697257 6f742065 616c6620     r...Write to fla
   86388:	000a6873 74617453 68632065 65676e61     sh..State change
   86398:	0000000a                                ....

0008639c <_global_impure_ptr>:
   8639c:	20070508 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   863ac:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   863bc:	46454443 00000000 33323130 37363534     CDEF....01234567
   863cc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   863dc:	0000296c 00000030                       l)..0...

000863e4 <blanks.7223>:
   863e4:	20202020 20202020 20202020 20202020                     

000863f4 <zeroes.7224>:
   863f4:	30303030 30303030 30303030 30303030     0000000000000000
   86404:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   86414:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   86424:	00000000                                ....

00086428 <__mprec_bigtens>:
   86428:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   86438:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   86448:	7f73bf3c 75154fdd                       <.s..O.u

00086450 <__mprec_tens>:
   86450:	00000000 3ff00000 00000000 40240000     .......?......$@
   86460:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   86470:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   86480:	00000000 412e8480 00000000 416312d0     .......A......cA
   86490:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   864a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   864b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   864c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   864d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   864e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   864f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   86500:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   86510:	79d99db4 44ea7843                       ...yCx.D

00086518 <p05.6055>:
   86518:	00000005 00000019 0000007d              ........}...

00086524 <_ctype_>:
   86524:	20202000 20202020 28282020 20282828     .         ((((( 
   86534:	20202020 20202020 20202020 20202020                     
   86544:	10108820 10101010 10101010 10101010      ...............
   86554:	04040410 04040404 10040404 10101010     ................
   86564:	41411010 41414141 01010101 01010101     ..AAAAAA........
   86574:	01010101 01010101 01010101 10101010     ................
   86584:	42421010 42424242 02020202 02020202     ..BBBBBB........
   86594:	02020202 02020202 02020202 10101010     ................
   865a4:	00000020 00000000 00000000 00000000      ...............
	...

00086628 <_init>:
   86628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8662a:	bf00      	nop
   8662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8662e:	bc08      	pop	{r3}
   86630:	469e      	mov	lr, r3
   86632:	4770      	bx	lr

00086634 <__init_array_start>:
   86634:	0008373d 	.word	0x0008373d

00086638 <__frame_dummy_init_array_entry>:
   86638:	00080119                                ....

0008663c <_fini>:
   8663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8663e:	bf00      	nop
   86640:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86642:	bc08      	pop	{r3}
   86644:	469e      	mov	lr, r3
   86646:	4770      	bx	lr

00086648 <__fini_array_start>:
   86648:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b470      	push	{r4, r5, r6}
20070002:	b083      	sub	sp, #12
20070004:	9e06      	ldr	r6, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070006:	4d1b      	ldr	r5, [pc, #108]	; (20070074 <efc_perform_read_sequence+0x74>)
20070008:	42a8      	cmp	r0, r5
2007000a:	bf0c      	ite	eq
2007000c:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
20070010:	f44f 2540 	movne.w	r5, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070014:	b35b      	cbz	r3, 2007006e <efc_perform_read_sequence+0x6e>
20070016:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070018:	6803      	ldr	r3, [r0, #0]
2007001a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2007001e:	6003      	str	r3, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070020:	b2c9      	uxtb	r1, r1
20070022:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070026:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070028:	6883      	ldr	r3, [r0, #8]
2007002a:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007002c:	9b01      	ldr	r3, [sp, #4]
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d1f9      	bne.n	20070028 <efc_perform_read_sequence+0x28>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070034:	b14e      	cbz	r6, 2007004a <efc_perform_read_sequence+0x4a>
20070036:	4629      	mov	r1, r5
20070038:	1f23      	subs	r3, r4, #4
2007003a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007003e:	f851 4b04 	ldr.w	r4, [r1], #4
20070042:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070046:	42a9      	cmp	r1, r5
20070048:	d1f9      	bne.n	2007003e <efc_perform_read_sequence+0x3e>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007004a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2007004c:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20070050:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070052:	6883      	ldr	r3, [r0, #8]
20070054:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070056:	9b01      	ldr	r3, [sp, #4]
20070058:	f013 0f01 	tst.w	r3, #1
2007005c:	d0f9      	beq.n	20070052 <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007005e:	6803      	ldr	r3, [r0, #0]
20070060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070064:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070066:	2000      	movs	r0, #0
}
20070068:	b003      	add	sp, #12
2007006a:	bc70      	pop	{r4, r5, r6}
2007006c:	4770      	bx	lr
		return EFC_RC_INVALID;
2007006e:	2002      	movs	r0, #2
20070070:	e7fa      	b.n	20070068 <efc_perform_read_sequence+0x68>
20070072:	bf00      	nop
20070074:	400e0a00 	.word	0x400e0a00

20070078 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070078:	6001      	str	r1, [r0, #0]
2007007a:	4770      	bx	lr

2007007c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007007c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007007e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20070080:	6883      	ldr	r3, [r0, #8]
20070082:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070084:	9b01      	ldr	r3, [sp, #4]
20070086:	f013 0f01 	tst.w	r3, #1
2007008a:	d0f9      	beq.n	20070080 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2007008c:	9801      	ldr	r0, [sp, #4]
}
2007008e:	f000 0006 	and.w	r0, r0, #6
20070092:	b002      	add	sp, #8
20070094:	4770      	bx	lr
20070096:	bf00      	nop

20070098 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070098:	f44f 6380 	mov.w	r3, #1024	; 0x400
2007009c:	4a20      	ldr	r2, [pc, #128]	; (20070120 <SystemInit+0x88>)
2007009e:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700a4:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700a6:	4b1f      	ldr	r3, [pc, #124]	; (20070124 <SystemInit+0x8c>)
200700a8:	6a1b      	ldr	r3, [r3, #32]
200700aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700ae:	d107      	bne.n	200700c0 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700b0:	4a1d      	ldr	r2, [pc, #116]	; (20070128 <SystemInit+0x90>)
200700b2:	4b1c      	ldr	r3, [pc, #112]	; (20070124 <SystemInit+0x8c>)
200700b4:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700b6:	461a      	mov	r2, r3
200700b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ba:	f013 0f01 	tst.w	r3, #1
200700be:	d0fb      	beq.n	200700b8 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c0:	4a1a      	ldr	r2, [pc, #104]	; (2007012c <SystemInit+0x94>)
200700c2:	4b18      	ldr	r3, [pc, #96]	; (20070124 <SystemInit+0x8c>)
200700c4:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700c6:	461a      	mov	r2, r3
200700c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700ce:	d0fb      	beq.n	200700c8 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700d0:	4a14      	ldr	r2, [pc, #80]	; (20070124 <SystemInit+0x8c>)
200700d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700d4:	f023 0303 	bic.w	r3, r3, #3
200700d8:	f043 0301 	orr.w	r3, r3, #1
200700dc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700de:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700e0:	f013 0f08 	tst.w	r3, #8
200700e4:	d0fb      	beq.n	200700de <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700e6:	4a12      	ldr	r2, [pc, #72]	; (20070130 <SystemInit+0x98>)
200700e8:	4b0e      	ldr	r3, [pc, #56]	; (20070124 <SystemInit+0x8c>)
200700ea:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700ec:	461a      	mov	r2, r3
200700ee:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700f0:	f013 0f02 	tst.w	r3, #2
200700f4:	d0fb      	beq.n	200700ee <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200700f6:	2211      	movs	r2, #17
200700f8:	4b0a      	ldr	r3, [pc, #40]	; (20070124 <SystemInit+0x8c>)
200700fa:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700fc:	461a      	mov	r2, r3
200700fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070100:	f013 0f08 	tst.w	r3, #8
20070104:	d0fb      	beq.n	200700fe <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070106:	2212      	movs	r2, #18
20070108:	4b06      	ldr	r3, [pc, #24]	; (20070124 <SystemInit+0x8c>)
2007010a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007010c:	461a      	mov	r2, r3
2007010e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070110:	f013 0f08 	tst.w	r3, #8
20070114:	d0fb      	beq.n	2007010e <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070116:	4a07      	ldr	r2, [pc, #28]	; (20070134 <SystemInit+0x9c>)
20070118:	4b07      	ldr	r3, [pc, #28]	; (20070138 <SystemInit+0xa0>)
2007011a:	601a      	str	r2, [r3, #0]
2007011c:	4770      	bx	lr
2007011e:	bf00      	nop
20070120:	400e0a00 	.word	0x400e0a00
20070124:	400e0600 	.word	0x400e0600
20070128:	00370809 	.word	0x00370809
2007012c:	01370809 	.word	0x01370809
20070130:	200d3f01 	.word	0x200d3f01
20070134:	0501bd00 	.word	0x0501bd00
20070138:	200704f4 	.word	0x200704f4

2007013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007013c:	4b1b      	ldr	r3, [pc, #108]	; (200701ac <system_init_flash+0x70>)
2007013e:	4298      	cmp	r0, r3
20070140:	d915      	bls.n	2007016e <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20070142:	4b1b      	ldr	r3, [pc, #108]	; (200701b0 <system_init_flash+0x74>)
20070144:	4298      	cmp	r0, r3
20070146:	d919      	bls.n	2007017c <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070148:	4b1a      	ldr	r3, [pc, #104]	; (200701b4 <system_init_flash+0x78>)
2007014a:	4298      	cmp	r0, r3
2007014c:	d91e      	bls.n	2007018c <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2007014e:	4b1a      	ldr	r3, [pc, #104]	; (200701b8 <system_init_flash+0x7c>)
20070150:	4298      	cmp	r0, r3
20070152:	d923      	bls.n	2007019c <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070154:	4b19      	ldr	r3, [pc, #100]	; (200701bc <system_init_flash+0x80>)
20070156:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070158:	bf94      	ite	ls
2007015a:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070162:	4a17      	ldr	r2, [pc, #92]	; (200701c0 <system_init_flash+0x84>)
20070164:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070166:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007016a:	6013      	str	r3, [r2, #0]
2007016c:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2007016e:	2300      	movs	r3, #0
20070170:	4a13      	ldr	r2, [pc, #76]	; (200701c0 <system_init_flash+0x84>)
20070172:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070174:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070178:	6013      	str	r3, [r2, #0]
2007017a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
2007017c:	f44f 7380 	mov.w	r3, #256	; 0x100
20070180:	4a0f      	ldr	r2, [pc, #60]	; (200701c0 <system_init_flash+0x84>)
20070182:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070184:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070188:	6013      	str	r3, [r2, #0]
2007018a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
2007018c:	f44f 7300 	mov.w	r3, #512	; 0x200
20070190:	4a0b      	ldr	r2, [pc, #44]	; (200701c0 <system_init_flash+0x84>)
20070192:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070194:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070198:	6013      	str	r3, [r2, #0]
2007019a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007019c:	f44f 7340 	mov.w	r3, #768	; 0x300
200701a0:	4a07      	ldr	r2, [pc, #28]	; (200701c0 <system_init_flash+0x84>)
200701a2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701a4:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701a8:	6013      	str	r3, [r2, #0]
200701aa:	4770      	bx	lr
200701ac:	0121eabf 	.word	0x0121eabf
200701b0:	02faf07f 	.word	0x02faf07f
200701b4:	03d08fff 	.word	0x03d08fff
200701b8:	04c4b3ff 	.word	0x04c4b3ff
200701bc:	055d4a7f 	.word	0x055d4a7f
200701c0:	400e0a00 	.word	0x400e0a00

200701c4 <ADC_Handler>:

__no_inline
RAMFUNC
ISR(ADC_Handler)
{	
	if(ADC->ADC_ISR & ADC_IER_ENDRX)
200701c4:	4b94      	ldr	r3, [pc, #592]	; (20070418 <ADC_Handler+0x254>)
200701c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200701c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
200701cc:	d100      	bne.n	200701d0 <ADC_Handler+0xc>
200701ce:	4770      	bx	lr
{	
200701d0:	b570      	push	{r4, r5, r6, lr}
		//float Inp;
		//pio_set_pin_high(LED2_GPIO); //for real time debug	
		uint32_t OutDataToDAC0;
		uint32_t OutDataToDAC1;
		uint32_t Energy;
		pio_set_pin_high(PIO_PA7_IDX);
200701d2:	2007      	movs	r0, #7
200701d4:	4b91      	ldr	r3, [pc, #580]	; (2007041c <ADC_Handler+0x258>)
200701d6:	4798      	blx	r3
		
		ADC->ADC_RNPR =  (uint32_t)ADCC_GlobalRawData;
200701d8:	4b91      	ldr	r3, [pc, #580]	; (20070420 <ADC_Handler+0x25c>)
200701da:	4a8f      	ldr	r2, [pc, #572]	; (20070418 <ADC_Handler+0x254>)
200701dc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
		ADC->ADC_RNCR = ADC_NUM_CHANNELS;
200701e0:	2103      	movs	r1, #3
200701e2:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
		Data = ADCC_GlobalRawData[0] - MAX_ADC/2;;
200701e6:	8819      	ldrh	r1, [r3, #0]
200701e8:	f5a1 6100 	sub.w	r1, r1, #2048	; 0x800
200701ec:	4c8d      	ldr	r4, [pc, #564]	; (20070424 <ADC_Handler+0x260>)
200701ee:	6021      	str	r1, [r4, #0]
		//Data = ADC->ADC_CDR[0]-MAX_ADC/2;
		
		
		Energy = FIFO2_Insert(&WaveArray, Data);
200701f0:	488d      	ldr	r0, [pc, #564]	; (20070428 <ADC_Handler+0x264>)
200701f2:	4b8e      	ldr	r3, [pc, #568]	; (2007042c <ADC_Handler+0x268>)
200701f4:	4798      	blx	r3

void FIFO_Init(XFifo* Fifo );

inline void FIFO_Insert(XFifo* Fifo, int32_t input)
{
	Fifo->Data[Fifo->WriteInx] = input;
200701f6:	4a8e      	ldr	r2, [pc, #568]	; (20070430 <ADC_Handler+0x26c>)
200701f8:	6813      	ldr	r3, [r2, #0]
200701fa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
200701fe:	6824      	ldr	r4, [r4, #0]
20070200:	60cc      	str	r4, [r1, #12]
	Fifo->WriteInx = Fifo->WriteInx + 1;
20070202:	3301      	adds	r3, #1
20070204:	6013      	str	r3, [r2, #0]
	if(Fifo->WriteInx == 3)
20070206:	2b03      	cmp	r3, #3
20070208:	d007      	beq.n	2007021a <ADC_Handler+0x56>


inline int32_t FIFO_Filter(XFifo* Fifo)
{
	int32_t Xn,Xnp,Xnpp;	
	switch(Fifo->WriteInx)
2007020a:	b14b      	cbz	r3, 20070220 <ADC_Handler+0x5c>
2007020c:	2b01      	cmp	r3, #1
2007020e:	d014      	beq.n	2007023a <ADC_Handler+0x76>
		Xn = Fifo->Data[0];
		Xnp = Fifo->Data[2];
		Xnpp = Fifo->Data[1];
		break;
		default: // 2
		Xn = Fifo->Data[1];
20070210:	4b87      	ldr	r3, [pc, #540]	; (20070430 <ADC_Handler+0x26c>)
20070212:	6919      	ldr	r1, [r3, #16]
		Xnp = Fifo->Data[0];
20070214:	68dc      	ldr	r4, [r3, #12]
		Xnpp = Fifo->Data[2];
20070216:	695b      	ldr	r3, [r3, #20]
20070218:	e006      	b.n	20070228 <ADC_Handler+0x64>
		Fifo->WriteInx = 0;
2007021a:	2200      	movs	r2, #0
2007021c:	4b84      	ldr	r3, [pc, #528]	; (20070430 <ADC_Handler+0x26c>)
2007021e:	601a      	str	r2, [r3, #0]
		Xn = Fifo->Data[2];
20070220:	4b83      	ldr	r3, [pc, #524]	; (20070430 <ADC_Handler+0x26c>)
20070222:	6959      	ldr	r1, [r3, #20]
		Xnp = Fifo->Data[1];
20070224:	691c      	ldr	r4, [r3, #16]
		Xnpp = Fifo->Data[0];
20070226:	68db      	ldr	r3, [r3, #12]
	switch(Fifo->WriteIndxY)
20070228:	4a81      	ldr	r2, [pc, #516]	; (20070430 <ADC_Handler+0x26c>)
2007022a:	6892      	ldr	r2, [r2, #8]
2007022c:	b152      	cbz	r2, 20070244 <ADC_Handler+0x80>
2007022e:	2a01      	cmp	r2, #1
20070230:	d034      	beq.n	2007029c <ADC_Handler+0xd8>
		Yp = Fifo->FilterY[1];
20070232:	4d7f      	ldr	r5, [pc, #508]	; (20070430 <ADC_Handler+0x26c>)
20070234:	69ee      	ldr	r6, [r5, #28]
		Ypp = Fifo->FilterY[0];
20070236:	69ad      	ldr	r5, [r5, #24]
20070238:	e007      	b.n	2007024a <ADC_Handler+0x86>
		Xn = Fifo->Data[0];
2007023a:	4b7d      	ldr	r3, [pc, #500]	; (20070430 <ADC_Handler+0x26c>)
2007023c:	68d9      	ldr	r1, [r3, #12]
		Xnp = Fifo->Data[2];
2007023e:	695c      	ldr	r4, [r3, #20]
		Xnpp = Fifo->Data[1];
20070240:	691b      	ldr	r3, [r3, #16]
20070242:	e7f1      	b.n	20070228 <ADC_Handler+0x64>
		Yp = Fifo->FilterY[2];
20070244:	4d7a      	ldr	r5, [pc, #488]	; (20070430 <ADC_Handler+0x26c>)
20070246:	6a2e      	ldr	r6, [r5, #32]
		Ypp = Fifo->FilterY[1];
20070248:	69ed      	ldr	r5, [r5, #28]
	Out = (Xn*BETA_MUL2_Q - 2*BETA_MUL2_Q*Xnp + BETA_MUL2_Q*Xnpp + Fifo->BetaMul2Q*Yp - Ypp*BETA_MUL2_Q)*(Fifo->BetaSQRTInvQ); // The second order filter HPF*/
2007024a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
2007024e:	4419      	add	r1, r3
20070250:	4c77      	ldr	r4, [pc, #476]	; (20070430 <ADC_Handler+0x26c>)
20070252:	6b63      	ldr	r3, [r4, #52]	; 0x34
20070254:	fb03 f306 	mul.w	r3, r3, r6
20070258:	eb03 1301 	add.w	r3, r3, r1, lsl #4
2007025c:	eba3 1305 	sub.w	r3, r3, r5, lsl #4
20070260:	6ba1      	ldr	r1, [r4, #56]	; 0x38
20070262:	fb01 f303 	mul.w	r3, r1, r3
	Fifo->FilterY[Fifo->WriteIndxY] = input;
20070266:	1d91      	adds	r1, r2, #6
	FIFO_YInsert(Fifo, (Out>>(4+13)) );
20070268:	145d      	asrs	r5, r3, #17
	Fifo->FilterY[Fifo->WriteIndxY] = input;
2007026a:	f844 5021 	str.w	r5, [r4, r1, lsl #2]
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
2007026e:	3201      	adds	r2, #1
	if(Fifo->WriteIndxY == 3)
20070270:	2a03      	cmp	r2, #3
20070272:	d017      	beq.n	200702a4 <ADC_Handler+0xe0>
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
20070274:	60a2      	str	r2, [r4, #8]
		FIFO_Insert(&Fifo,Data);
		OutData = FIFO_Filter(&Fifo);
		OutData = abs(OutData);
20070276:	2b00      	cmp	r3, #0
20070278:	bfb8      	it	lt
2007027a:	425b      	neglt	r3, r3
2007027c:	4a6d      	ldr	r2, [pc, #436]	; (20070434 <ADC_Handler+0x270>)
2007027e:	6013      	str	r3, [r2, #0]
		//SoundSum = FIFO2_Insert(&Fifo2p1, OutData);		
		//FIFO2_Insert(&fifoDebug,SoundSum);
		switch(FilterState)		
20070280:	4a6d      	ldr	r2, [pc, #436]	; (20070438 <ADC_Handler+0x274>)
20070282:	6812      	ldr	r2, [r2, #0]
20070284:	2a06      	cmp	r2, #6
20070286:	f200 80fa 	bhi.w	2007047e <ADC_Handler+0x2ba>
2007028a:	e8df f012 	tbh	[pc, r2, lsl #1]
2007028e:	000f      	.short	0x000f
20070290:	00580031 	.word	0x00580031
20070294:	00b00074 	.word	0x00b00074
20070298:	010e00ed 	.word	0x010e00ed
		Yp = Fifo->FilterY[0];
2007029c:	4d64      	ldr	r5, [pc, #400]	; (20070430 <ADC_Handler+0x26c>)
2007029e:	69ae      	ldr	r6, [r5, #24]
		Ypp = Fifo->FilterY[2];
200702a0:	6a2d      	ldr	r5, [r5, #32]
200702a2:	e7d2      	b.n	2007024a <ADC_Handler+0x86>
		Fifo->WriteIndxY = 0;
200702a4:	2100      	movs	r1, #0
200702a6:	4a62      	ldr	r2, [pc, #392]	; (20070430 <ADC_Handler+0x26c>)
200702a8:	6091      	str	r1, [r2, #8]
200702aa:	e7e4      	b.n	20070276 <ADC_Handler+0xb2>
		{
			case 0:
				SecondDetVal = 0;
200702ac:	2200      	movs	r2, #0
200702ae:	4963      	ldr	r1, [pc, #396]	; (2007043c <ADC_Handler+0x278>)
200702b0:	600a      	str	r2, [r1, #0]
				FirstDetVal = 0;
200702b2:	4963      	ldr	r1, [pc, #396]	; (20070440 <ADC_Handler+0x27c>)
200702b4:	600a      	str	r2, [r1, #0]
				MaxEnergy = 0;
200702b6:	4963      	ldr	r1, [pc, #396]	; (20070444 <ADC_Handler+0x280>)
200702b8:	600a      	str	r2, [r1, #0]
				if(OutData>MaxAllowedFirstVal)
200702ba:	4a63      	ldr	r2, [pc, #396]	; (20070448 <ADC_Handler+0x284>)
200702bc:	6812      	ldr	r2, [r2, #0]
200702be:	4293      	cmp	r3, r2
200702c0:	d906      	bls.n	200702d0 <ADC_Handler+0x10c>
				{
					FilterState = 5;
200702c2:	2205      	movs	r2, #5
200702c4:	4b5c      	ldr	r3, [pc, #368]	; (20070438 <ADC_Handler+0x274>)
200702c6:	601a      	str	r2, [r3, #0]
					delay = 0;
200702c8:	2200      	movs	r2, #0
200702ca:	4b60      	ldr	r3, [pc, #384]	; (2007044c <ADC_Handler+0x288>)
200702cc:	601a      	str	r2, [r3, #0]
200702ce:	e0d6      	b.n	2007047e <ADC_Handler+0x2ba>
				}
				else if(OutData>Threshold)
200702d0:	4a5f      	ldr	r2, [pc, #380]	; (20070450 <ADC_Handler+0x28c>)
200702d2:	6812      	ldr	r2, [r2, #0]
200702d4:	4293      	cmp	r3, r2
200702d6:	f240 80d2 	bls.w	2007047e <ADC_Handler+0x2ba>
				{
					//Det_flag = 1;
					//adc_disable_interrupt(ADC,ADC_IER_EOC0);;
					FirstDetVal = OutData;
200702da:	4a59      	ldr	r2, [pc, #356]	; (20070440 <ADC_Handler+0x27c>)
200702dc:	6013      	str	r3, [r2, #0]
					MaxEnergy = Energy;
200702de:	4b59      	ldr	r3, [pc, #356]	; (20070444 <ADC_Handler+0x280>)
200702e0:	6018      	str	r0, [r3, #0]
					FilterState = 1;
200702e2:	2201      	movs	r2, #1
200702e4:	4b54      	ldr	r3, [pc, #336]	; (20070438 <ADC_Handler+0x274>)
200702e6:	601a      	str	r2, [r3, #0]
					delay = 0;					
200702e8:	2200      	movs	r2, #0
200702ea:	4b58      	ldr	r3, [pc, #352]	; (2007044c <ADC_Handler+0x288>)
200702ec:	601a      	str	r2, [r3, #0]
200702ee:	e0c6      	b.n	2007047e <ADC_Handler+0x2ba>
				}	
			break;
			
			case 1:
				if(OutData>MaxAllowedFirstVal)
200702f0:	4a55      	ldr	r2, [pc, #340]	; (20070448 <ADC_Handler+0x284>)
200702f2:	6812      	ldr	r2, [r2, #0]
200702f4:	4293      	cmp	r3, r2
200702f6:	d90d      	bls.n	20070314 <ADC_Handler+0x150>
				{
					FilterState = 5;
200702f8:	2205      	movs	r2, #5
200702fa:	4b4f      	ldr	r3, [pc, #316]	; (20070438 <ADC_Handler+0x274>)
200702fc:	601a      	str	r2, [r3, #0]
					delay = 0;
200702fe:	2200      	movs	r2, #0
20070300:	4b52      	ldr	r3, [pc, #328]	; (2007044c <ADC_Handler+0x288>)
20070302:	601a      	str	r2, [r3, #0]
					{
						FilterState = 2;
						delay = 0;
					}
				}
				if(Energy > MaxEnergy)
20070304:	4b4f      	ldr	r3, [pc, #316]	; (20070444 <ADC_Handler+0x280>)
20070306:	681b      	ldr	r3, [r3, #0]
20070308:	4298      	cmp	r0, r3
2007030a:	f240 80b8 	bls.w	2007047e <ADC_Handler+0x2ba>
					MaxEnergy = Energy;
2007030e:	4b4d      	ldr	r3, [pc, #308]	; (20070444 <ADC_Handler+0x280>)
20070310:	6018      	str	r0, [r3, #0]
20070312:	e0b4      	b.n	2007047e <ADC_Handler+0x2ba>
					if(FirstDetVal<(OutData))
20070314:	4a4a      	ldr	r2, [pc, #296]	; (20070440 <ADC_Handler+0x27c>)
20070316:	6812      	ldr	r2, [r2, #0]
20070318:	4293      	cmp	r3, r2
						FirstDetVal	= OutData; // finding the max FirstDetVal					
2007031a:	bfc4      	itt	gt
2007031c:	4a48      	ldrgt	r2, [pc, #288]	; (20070440 <ADC_Handler+0x27c>)
2007031e:	6013      	strgt	r3, [r2, #0]
					delay++;
20070320:	4a4a      	ldr	r2, [pc, #296]	; (2007044c <ADC_Handler+0x288>)
20070322:	6813      	ldr	r3, [r2, #0]
20070324:	3301      	adds	r3, #1
20070326:	6013      	str	r3, [r2, #0]
					if(delay>=2600)
20070328:	f640 2227 	movw	r2, #2599	; 0xa27
2007032c:	4293      	cmp	r3, r2
2007032e:	d9e9      	bls.n	20070304 <ADC_Handler+0x140>
						FilterState = 2;
20070330:	2202      	movs	r2, #2
20070332:	4b41      	ldr	r3, [pc, #260]	; (20070438 <ADC_Handler+0x274>)
20070334:	601a      	str	r2, [r3, #0]
						delay = 0;
20070336:	2200      	movs	r2, #0
20070338:	4b44      	ldr	r3, [pc, #272]	; (2007044c <ADC_Handler+0x288>)
2007033a:	601a      	str	r2, [r3, #0]
2007033c:	e7e2      	b.n	20070304 <ADC_Handler+0x140>
			break;
				
			case 2:
				if(OutData>FirstDetVal)
2007033e:	4a40      	ldr	r2, [pc, #256]	; (20070440 <ADC_Handler+0x27c>)
20070340:	6812      	ldr	r2, [r2, #0]
20070342:	4293      	cmp	r3, r2
20070344:	dd06      	ble.n	20070354 <ADC_Handler+0x190>
				{
					FilterState = 5;
20070346:	2205      	movs	r2, #5
20070348:	4b3b      	ldr	r3, [pc, #236]	; (20070438 <ADC_Handler+0x274>)
2007034a:	601a      	str	r2, [r3, #0]
					delay = 0;
2007034c:	2200      	movs	r2, #0
2007034e:	4b3f      	ldr	r3, [pc, #252]	; (2007044c <ADC_Handler+0x288>)
20070350:	601a      	str	r2, [r3, #0]
20070352:	e094      	b.n	2007047e <ADC_Handler+0x2ba>
				}				
				else if(delay<9000)
20070354:	4b3d      	ldr	r3, [pc, #244]	; (2007044c <ADC_Handler+0x288>)
20070356:	681b      	ldr	r3, [r3, #0]
20070358:	f242 3227 	movw	r2, #8999	; 0x2327
2007035c:	4293      	cmp	r3, r2
2007035e:	d803      	bhi.n	20070368 <ADC_Handler+0x1a4>
				{
					delay++;
20070360:	3301      	adds	r3, #1
20070362:	4a3a      	ldr	r2, [pc, #232]	; (2007044c <ADC_Handler+0x288>)
20070364:	6013      	str	r3, [r2, #0]
20070366:	e08a      	b.n	2007047e <ADC_Handler+0x2ba>
				}
				else
				{
					FilterState = 3;
20070368:	2203      	movs	r2, #3
2007036a:	4b33      	ldr	r3, [pc, #204]	; (20070438 <ADC_Handler+0x274>)
2007036c:	601a      	str	r2, [r3, #0]
					delay = 0;
2007036e:	2200      	movs	r2, #0
20070370:	4b36      	ldr	r3, [pc, #216]	; (2007044c <ADC_Handler+0x288>)
20070372:	601a      	str	r2, [r3, #0]
20070374:	e083      	b.n	2007047e <ADC_Handler+0x2ba>
				}				
			break;
			
			case 3:
				if(delay<10000)
20070376:	4a35      	ldr	r2, [pc, #212]	; (2007044c <ADC_Handler+0x288>)
20070378:	6812      	ldr	r2, [r2, #0]
2007037a:	f242 710f 	movw	r1, #9999	; 0x270f
2007037e:	428a      	cmp	r2, r1
20070380:	d809      	bhi.n	20070396 <ADC_Handler+0x1d2>
				{
					delay++;
20070382:	3201      	adds	r2, #1
20070384:	4931      	ldr	r1, [pc, #196]	; (2007044c <ADC_Handler+0x288>)
20070386:	600a      	str	r2, [r1, #0]
					if(SecondDetVal<OutData)					
20070388:	4a2c      	ldr	r2, [pc, #176]	; (2007043c <ADC_Handler+0x278>)
2007038a:	6812      	ldr	r2, [r2, #0]
2007038c:	4293      	cmp	r3, r2
2007038e:	dd76      	ble.n	2007047e <ADC_Handler+0x2ba>
						SecondDetVal = OutData;
20070390:	4a2a      	ldr	r2, [pc, #168]	; (2007043c <ADC_Handler+0x278>)
20070392:	6013      	str	r3, [r2, #0]
20070394:	e073      	b.n	2007047e <ADC_Handler+0x2ba>
				}
				else
				{
					if( ((SecondDetVal/5)<=(FirstDetVal/2)) && ((SecondDetVal/126)>=(FirstDetVal/100)) )  //last working value = 1.25
20070396:	4b29      	ldr	r3, [pc, #164]	; (2007043c <ADC_Handler+0x278>)
20070398:	681b      	ldr	r3, [r3, #0]
2007039a:	4a29      	ldr	r2, [pc, #164]	; (20070440 <ADC_Handler+0x27c>)
2007039c:	6812      	ldr	r2, [r2, #0]
2007039e:	482d      	ldr	r0, [pc, #180]	; (20070454 <ADC_Handler+0x290>)
200703a0:	fb80 1003 	smull	r1, r0, r0, r3
200703a4:	17d9      	asrs	r1, r3, #31
200703a6:	ebc1 0160 	rsb	r1, r1, r0, asr #1
200703aa:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
200703ae:	ebb1 0f60 	cmp.w	r1, r0, asr #1
200703b2:	dc15      	bgt.n	200703e0 <ADC_Handler+0x21c>
200703b4:	4928      	ldr	r1, [pc, #160]	; (20070458 <ADC_Handler+0x294>)
200703b6:	fb81 0103 	smull	r0, r1, r1, r3
200703ba:	4419      	add	r1, r3
200703bc:	17db      	asrs	r3, r3, #31
200703be:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
200703c2:	4926      	ldr	r1, [pc, #152]	; (2007045c <ADC_Handler+0x298>)
200703c4:	fb81 0102 	smull	r0, r1, r1, r2
200703c8:	17d2      	asrs	r2, r2, #31
200703ca:	ebc2 1261 	rsb	r2, r2, r1, asr #5
200703ce:	4293      	cmp	r3, r2
200703d0:	db06      	blt.n	200703e0 <ADC_Handler+0x21c>
					{
						FilterState = 4;
200703d2:	2204      	movs	r2, #4
200703d4:	4b18      	ldr	r3, [pc, #96]	; (20070438 <ADC_Handler+0x274>)
200703d6:	601a      	str	r2, [r3, #0]
						delay = 0;
200703d8:	2200      	movs	r2, #0
200703da:	4b1c      	ldr	r3, [pc, #112]	; (2007044c <ADC_Handler+0x288>)
200703dc:	601a      	str	r2, [r3, #0]
200703de:	e04e      	b.n	2007047e <ADC_Handler+0x2ba>
					}
					else
					{
						FilterState = 5;
200703e0:	2205      	movs	r2, #5
200703e2:	4b15      	ldr	r3, [pc, #84]	; (20070438 <ADC_Handler+0x274>)
200703e4:	601a      	str	r2, [r3, #0]
						delay = 0;
200703e6:	2200      	movs	r2, #0
200703e8:	4b18      	ldr	r3, [pc, #96]	; (2007044c <ADC_Handler+0x288>)
200703ea:	601a      	str	r2, [r3, #0]
200703ec:	e047      	b.n	2007047e <ADC_Handler+0x2ba>
					}
				}				
			break;
			
			case 4:
				if(delay<250)
200703ee:	4b17      	ldr	r3, [pc, #92]	; (2007044c <ADC_Handler+0x288>)
200703f0:	681b      	ldr	r3, [r3, #0]
200703f2:	2bf9      	cmp	r3, #249	; 0xf9
200703f4:	d803      	bhi.n	200703fe <ADC_Handler+0x23a>
				{
					delay++;					
200703f6:	3301      	adds	r3, #1
200703f8:	4a14      	ldr	r2, [pc, #80]	; (2007044c <ADC_Handler+0x288>)
200703fa:	6013      	str	r3, [r2, #0]
200703fc:	e03f      	b.n	2007047e <ADC_Handler+0x2ba>
				}
				else
				{
					Det_flag = 1;
200703fe:	2101      	movs	r1, #1
20070400:	4b17      	ldr	r3, [pc, #92]	; (20070460 <ADC_Handler+0x29c>)
20070402:	6019      	str	r1, [r3, #0]
					FilterState = 6;
20070404:	2206      	movs	r2, #6
20070406:	4b0c      	ldr	r3, [pc, #48]	; (20070438 <ADC_Handler+0x274>)
20070408:	601a      	str	r2, [r3, #0]
					delay = 0;
2007040a:	2200      	movs	r2, #0
2007040c:	4b0f      	ldr	r3, [pc, #60]	; (2007044c <ADC_Handler+0x288>)
2007040e:	601a      	str	r2, [r3, #0]
					adc_disable_interrupt(ADC,ADC_IER_EOC0);
20070410:	4801      	ldr	r0, [pc, #4]	; (20070418 <ADC_Handler+0x254>)
20070412:	4b14      	ldr	r3, [pc, #80]	; (20070464 <ADC_Handler+0x2a0>)
20070414:	4798      	blx	r3
20070416:	e032      	b.n	2007047e <ADC_Handler+0x2ba>
20070418:	400c0000 	.word	0x400c0000
2007041c:	000811fb 	.word	0x000811fb
20070420:	20071080 	.word	0x20071080
20070424:	200710b4 	.word	0x200710b4
20070428:	2007108c 	.word	0x2007108c
2007042c:	000802e9 	.word	0x000802e9
20070430:	200710cc 	.word	0x200710cc
20070434:	20071048 	.word	0x20071048
20070438:	200704f8 	.word	0x200704f8
2007043c:	200710c4 	.word	0x200710c4
20070440:	200710bc 	.word	0x200710bc
20070444:	200710c8 	.word	0x200710c8
20070448:	200704fc 	.word	0x200704fc
2007044c:	200710c0 	.word	0x200710c0
20070450:	20070500 	.word	0x20070500
20070454:	66666667 	.word	0x66666667
20070458:	82082083 	.word	0x82082083
2007045c:	51eb851f 	.word	0x51eb851f
20070460:	20071044 	.word	0x20071044
20070464:	000801eb 	.word	0x000801eb
				}				
			break;
			
			case 5: // Noise state
				if(delay<150000) //3 seconds hold off due noise
20070468:	4b19      	ldr	r3, [pc, #100]	; (200704d0 <ADC_Handler+0x30c>)
2007046a:	681b      	ldr	r3, [r3, #0]
2007046c:	4a19      	ldr	r2, [pc, #100]	; (200704d4 <ADC_Handler+0x310>)
2007046e:	4293      	cmp	r3, r2
				{					
					delay++;
20070470:	bf91      	iteee	ls
20070472:	3301      	addls	r3, #1
				}
				else
				{					
					FilterState = 0;
20070474:	2300      	movhi	r3, #0
20070476:	4a18      	ldrhi	r2, [pc, #96]	; (200704d8 <ADC_Handler+0x314>)
20070478:	6013      	strhi	r3, [r2, #0]
					delay = 0;
2007047a:	4a15      	ldr	r2, [pc, #84]	; (200704d0 <ADC_Handler+0x30c>)
2007047c:	6013      	str	r3, [r2, #0]
				break;
			default:break;
			
		}	
		//pio_set_pin_low(LED2_GPIO);// for real time debug
		if(!pio_get_pin_value(PIO_PA15_IDX))
2007047e:	200f      	movs	r0, #15
20070480:	4b16      	ldr	r3, [pc, #88]	; (200704dc <ADC_Handler+0x318>)
20070482:	4798      	blx	r3
20070484:	b9f0      	cbnz	r0, 200704c4 <ADC_Handler+0x300>
		{
			OutDataToDAC0  = (FirstDetVal>>9)&0xfff;			
20070486:	4b16      	ldr	r3, [pc, #88]	; (200704e0 <ADC_Handler+0x31c>)
20070488:	6818      	ldr	r0, [r3, #0]
2007048a:	f3c0 204b 	ubfx	r0, r0, #9, #12
			//OutDataToDAC1  = ((SecondDetVal>>9)&0xfff)|(1<<12);			
			OutDataToDAC1 = ((MaxEnergy >> 18)&0xfff)|(1<<12);
2007048e:	4b15      	ldr	r3, [pc, #84]	; (200704e4 <ADC_Handler+0x320>)
20070490:	681c      	ldr	r4, [r3, #0]
20070492:	f3c4 448b 	ubfx	r4, r4, #18, #12
20070496:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		{
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
			//OutDataToDAC1  = ((MAX_SIGNAL)<<(17-9))|(1<<12);
			OutDataToDAC1  = (1<<(28-18))|(1<<12);
		}
		DAC3X8E_write(OutDataToDAC0);
2007049a:	4d13      	ldr	r5, [pc, #76]	; (200704e8 <ADC_Handler+0x324>)
2007049c:	47a8      	blx	r5
		DAC3X8E_write(OutDataToDAC1);
2007049e:	4620      	mov	r0, r4
200704a0:	47a8      	blx	r5
		pio_set_pin_low(PIO_PA7_IDX);
200704a2:	2007      	movs	r0, #7
200704a4:	4b11      	ldr	r3, [pc, #68]	; (200704ec <ADC_Handler+0x328>)
200704a6:	4798      	blx	r3
200704a8:	bd70      	pop	{r4, r5, r6, pc}
				if(delay<50000) //1 seconds to stable the filter
200704aa:	4b09      	ldr	r3, [pc, #36]	; (200704d0 <ADC_Handler+0x30c>)
200704ac:	681b      	ldr	r3, [r3, #0]
200704ae:	f24c 324f 	movw	r2, #49999	; 0xc34f
200704b2:	4293      	cmp	r3, r2
					delay++;
200704b4:	bf91      	iteee	ls
200704b6:	3301      	addls	r3, #1
					FilterState = 0;
200704b8:	2300      	movhi	r3, #0
200704ba:	4a07      	ldrhi	r2, [pc, #28]	; (200704d8 <ADC_Handler+0x314>)
200704bc:	6013      	strhi	r3, [r2, #0]
					delay = 0;
200704be:	4a04      	ldr	r2, [pc, #16]	; (200704d0 <ADC_Handler+0x30c>)
200704c0:	6013      	str	r3, [r2, #0]
200704c2:	e7dc      	b.n	2007047e <ADC_Handler+0x2ba>
			OutDataToDAC1  = (1<<(28-18))|(1<<12);
200704c4:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
200704c8:	f44f 6010 	mov.w	r0, #2304	; 0x900
200704cc:	e7e5      	b.n	2007049a <ADC_Handler+0x2d6>
200704ce:	bf00      	nop
200704d0:	200710c0 	.word	0x200710c0
200704d4:	000249ef 	.word	0x000249ef
200704d8:	200704f8 	.word	0x200704f8
200704dc:	000811df 	.word	0x000811df
200704e0:	200710bc 	.word	0x200710bc
200704e4:	200710c8 	.word	0x200710c8
200704e8:	000803a5 	.word	0x000803a5
200704ec:	00081215 	.word	0x00081215

200704f0 <g_interrupt_enabled>:
200704f0:	00000001                                ....

200704f4 <SystemCoreClock>:
200704f4:	003d0900                                ..=.

200704f8 <FilterState>:
200704f8:	00000006                                ....

200704fc <MaxAllowedFirstVal>:
200704fc:	ffffffff                                ....

20070500 <Threshold>:
20070500:	00000fa0                                ....

20070504 <_impure_ptr>:
20070504:	20070508                                ... 

20070508 <impure_data>:
20070508:	00000000 200707f4 2007085c 200708c4     ....... \.. ... 
	...
200705b0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200705c0:	0005deec 0000000b 00000000 00000000     ................
	...

20070930 <__malloc_av_>:
	...
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 
20070ae8:	20070ae0 20070ae0 20070ae8 20070ae8     ... ... ... ... 
20070af8:	20070af0 20070af0 20070af8 20070af8     ... ... ... ... 
20070b08:	20070b00 20070b00 20070b08 20070b08     ... ... ... ... 
20070b18:	20070b10 20070b10 20070b18 20070b18     ... ... ... ... 
20070b28:	20070b20 20070b20 20070b28 20070b28      ..  .. (.. (.. 
20070b38:	20070b30 20070b30 20070b38 20070b38     0.. 0.. 8.. 8.. 
20070b48:	20070b40 20070b40 20070b48 20070b48     @.. @.. H.. H.. 
20070b58:	20070b50 20070b50 20070b58 20070b58     P.. P.. X.. X.. 
20070b68:	20070b60 20070b60 20070b68 20070b68     `.. `.. h.. h.. 
20070b78:	20070b70 20070b70 20070b78 20070b78     p.. p.. x.. x.. 
20070b88:	20070b80 20070b80 20070b88 20070b88     ... ... ... ... 
20070b98:	20070b90 20070b90 20070b98 20070b98     ... ... ... ... 
20070ba8:	20070ba0 20070ba0 20070ba8 20070ba8     ... ... ... ... 
20070bb8:	20070bb0 20070bb0 20070bb8 20070bb8     ... ... ... ... 
20070bc8:	20070bc0 20070bc0 20070bc8 20070bc8     ... ... ... ... 
20070bd8:	20070bd0 20070bd0 20070bd8 20070bd8     ... ... ... ... 
20070be8:	20070be0 20070be0 20070be8 20070be8     ... ... ... ... 
20070bf8:	20070bf0 20070bf0 20070bf8 20070bf8     ... ... ... ... 
20070c08:	20070c00 20070c00 20070c08 20070c08     ... ... ... ... 
20070c18:	20070c10 20070c10 20070c18 20070c18     ... ... ... ... 
20070c28:	20070c20 20070c20 20070c28 20070c28      ..  .. (.. (.. 
20070c38:	20070c30 20070c30 20070c38 20070c38     0.. 0.. 8.. 8.. 
20070c48:	20070c40 20070c40 20070c48 20070c48     @.. @.. H.. H.. 
20070c58:	20070c50 20070c50 20070c58 20070c58     P.. P.. X.. X.. 
20070c68:	20070c60 20070c60 20070c68 20070c68     `.. `.. h.. h.. 
20070c78:	20070c70 20070c70 20070c78 20070c78     p.. p.. x.. x.. 
20070c88:	20070c80 20070c80 20070c88 20070c88     ... ... ... ... 
20070c98:	20070c90 20070c90 20070c98 20070c98     ... ... ... ... 
20070ca8:	20070ca0 20070ca0 20070ca8 20070ca8     ... ... ... ... 
20070cb8:	20070cb0 20070cb0 20070cb8 20070cb8     ... ... ... ... 
20070cc8:	20070cc0 20070cc0 20070cc8 20070cc8     ... ... ... ... 
20070cd8:	20070cd0 20070cd0 20070cd8 20070cd8     ... ... ... ... 
20070ce8:	20070ce0 20070ce0 20070ce8 20070ce8     ... ... ... ... 
20070cf8:	20070cf0 20070cf0 20070cf8 20070cf8     ... ... ... ... 
20070d08:	20070d00 20070d00 20070d08 20070d08     ... ... ... ... 
20070d18:	20070d10 20070d10 20070d18 20070d18     ... ... ... ... 
20070d28:	20070d20 20070d20 20070d28 20070d28      ..  .. (.. (.. 

20070d38 <__malloc_sbrk_base>:
20070d38:	ffffffff                                ....

20070d3c <__malloc_trim_threshold>:
20070d3c:	00020000                                ....

20070d40 <__atexit_recursive_mutex>:
20070d40:	20071118                                ... 

20070d44 <__global_locale>:
20070d44:	00000043 00000000 00000000 00000000     C...............
	...
20070d64:	00000043 00000000 00000000 00000000     C...............
	...
20070d84:	00000043 00000000 00000000 00000000     C...............
	...
20070da4:	00000043 00000000 00000000 00000000     C...............
	...
20070dc4:	00000043 00000000 00000000 00000000     C...............
	...
20070de4:	00000043 00000000 00000000 00000000     C...............
	...
20070e04:	00000043 00000000 00000000 00000000     C...............
	...
20070e24:	00085571 00084991 00000000 00086524     qU...I......$e..
20070e34:	00086420 00086368 00086368 00086368      d..hc..hc..hc..
20070e44:	00086368 00086368 00086368 00086368     hc..hc..hc..hc..
20070e54:	00086368 00086368 ffffffff ffffffff     hc..hc..........
20070e64:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070e8c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
