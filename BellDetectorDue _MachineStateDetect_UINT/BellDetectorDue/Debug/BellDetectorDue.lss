
BellDetectorDue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006b4c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086b4c  00086b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000f70  20070000  00086b54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000268  20070f70  00087ac4  00020f70  2**2
                  ALLOC
  4 .stack        00002000  200711d8  00087d2c  00020f70  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020f70  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020f99  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019c6e  00000000  00000000  00020ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003e5e  00000000  00000000  0003ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004eed  00000000  00000000  0003eabe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a58  00000000  00000000  000439ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000990  00000000  00000000  00044403  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b15b  00000000  00000000  00044d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012563  00000000  00000000  0005feee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000661e9  00000000  00000000  00072451  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002348  00000000  00000000  000d863c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	d8 31 07 20 c5 14 08 00 c1 14 08 00 c1 14 08 00     .1. ............
   80010:	c1 14 08 00 c1 14 08 00 c1 14 08 00 00 00 00 00     ................
	...
   8002c:	c1 14 08 00 c1 14 08 00 00 00 00 00 c1 14 08 00     ................
   8003c:	c1 14 08 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................
   8004c:	c1 14 08 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................
   8005c:	c1 14 08 00 c1 14 08 00 c1 14 08 00 00 00 00 00     ................
   8006c:	69 13 08 00 7d 13 08 00 91 13 08 00 a5 13 08 00     i...}...........
	...
   80084:	c1 14 08 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................
   80094:	c1 14 08 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................
   800a4:	00 00 00 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................
   800b4:	c1 14 08 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................
   800c4:	c1 14 08 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................
   800d4:	c5 01 07 20 c1 14 08 00 c1 14 08 00 c1 14 08 00     ... ............
   800e4:	c1 14 08 00 c1 14 08 00 c1 14 08 00 c1 14 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070f70 	.word	0x20070f70
   80110:	00000000 	.word	0x00000000
   80114:	00086b54 	.word	0x00086b54

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00086b54 	.word	0x00086b54
   80154:	20070f74 	.word	0x20070f74
   80158:	00086b54 	.word	0x00086b54
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80162:	2401      	movs	r4, #1
   80164:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80166:	2400      	movs	r4, #0
   80168:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8016a:	f240 2502 	movw	r5, #514	; 0x202
   8016e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80172:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80176:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8017a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8017c:	0052      	lsls	r2, r2, #1
   8017e:	fbb1 f2f2 	udiv	r2, r1, r2
   80182:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80184:	0212      	lsls	r2, r2, #8
   80186:	b292      	uxth	r2, r2
   80188:	432b      	orrs	r3, r5
   8018a:	431a      	orrs	r2, r3
   8018c:	6042      	str	r2, [r0, #4]
	return 0;
}
   8018e:	4620      	mov	r0, r4
   80190:	bc30      	pop	{r4, r5}
   80192:	4770      	bx	lr

00080194 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80194:	6843      	ldr	r3, [r0, #4]
   80196:	f023 0310 	bic.w	r3, r3, #16
   8019a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8019c:	6843      	ldr	r3, [r0, #4]
   8019e:	4319      	orrs	r1, r3
   801a0:	6041      	str	r1, [r0, #4]
   801a2:	4770      	bx	lr

000801a4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801a4:	6843      	ldr	r3, [r0, #4]
   801a6:	01d2      	lsls	r2, r2, #7
   801a8:	b2d2      	uxtb	r2, r2
   801aa:	4319      	orrs	r1, r3
   801ac:	430a      	orrs	r2, r1
   801ae:	6042      	str	r2, [r0, #4]
   801b0:	4770      	bx	lr

000801b2 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801b2:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801b4:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   801b6:	0609      	lsls	r1, r1, #24
   801b8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801bc:	4321      	orrs	r1, r4
   801be:	430a      	orrs	r2, r1
   801c0:	0719      	lsls	r1, r3, #28
   801c2:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   801c6:	4311      	orrs	r1, r2
   801c8:	6041      	str	r1, [r0, #4]
}
   801ca:	bc10      	pop	{r4}
   801cc:	4770      	bx	lr

000801ce <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   801ce:	2302      	movs	r3, #2
   801d0:	6003      	str	r3, [r0, #0]
   801d2:	4770      	bx	lr

000801d4 <adc_reset>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_reset(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_SWRST;
   801d4:	2301      	movs	r3, #1
   801d6:	6003      	str	r3, [r0, #0]
   801d8:	4770      	bx	lr

000801da <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   801da:	2301      	movs	r3, #1
   801dc:	fa03 f101 	lsl.w	r1, r3, r1
   801e0:	6101      	str	r1, [r0, #16]
   801e2:	4770      	bx	lr

000801e4 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
   801e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801e8:	6143      	str	r3, [r0, #20]
   801ea:	4770      	bx	lr

000801ec <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   801ec:	6241      	str	r1, [r0, #36]	; 0x24
   801ee:	4770      	bx	lr

000801f0 <adc_disable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IDR = ul_source;
   801f0:	6281      	str	r1, [r0, #40]	; 0x28
   801f2:	4770      	bx	lr

000801f4 <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   801f4:	6800      	ldr	r0, [r0, #0]
}
   801f6:	f3c0 2003 	ubfx	r0, r0, #8, #4
   801fa:	4770      	bx	lr

000801fc <efc_init>:
{
   801fc:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   801fe:	0212      	lsls	r2, r2, #8
   80200:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   80204:	4311      	orrs	r1, r2
   80206:	4b02      	ldr	r3, [pc, #8]	; (80210 <efc_init+0x14>)
   80208:	4798      	blx	r3
}
   8020a:	2000      	movs	r0, #0
   8020c:	bd08      	pop	{r3, pc}
   8020e:	bf00      	nop
   80210:	20070079 	.word	0x20070079

00080214 <efc_set_wait_state>:
{
   80214:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   80216:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   80218:	0209      	lsls	r1, r1, #8
   8021a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   8021e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   80222:	4319      	orrs	r1, r3
   80224:	4b01      	ldr	r3, [pc, #4]	; (8022c <efc_set_wait_state+0x18>)
   80226:	4798      	blx	r3
   80228:	bd08      	pop	{r3, pc}
   8022a:	bf00      	nop
   8022c:	20070079 	.word	0x20070079

00080230 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80230:	f1a1 030e 	sub.w	r3, r1, #14
   80234:	2b01      	cmp	r3, #1
   80236:	d802      	bhi.n	8023e <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   80238:	f04f 30ff 	mov.w	r0, #4294967295
   8023c:	4770      	bx	lr
{
   8023e:	b510      	push	{r4, lr}
   80240:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80242:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80246:	fab3 f383 	clz	r3, r3
   8024a:	095b      	lsrs	r3, r3, #5
   8024c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8024e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80250:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80254:	2400      	movs	r4, #0
   80256:	4b0b      	ldr	r3, [pc, #44]	; (80284 <efc_perform_command+0x54>)
   80258:	701c      	strb	r4, [r3, #0]
	return flags;
   8025a:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8025c:	0212      	lsls	r2, r2, #8
   8025e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   80262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   80266:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   8026a:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   8026c:	4311      	orrs	r1, r2
   8026e:	4b06      	ldr	r3, [pc, #24]	; (80288 <efc_perform_command+0x58>)
   80270:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80272:	b12c      	cbz	r4, 80280 <efc_perform_command+0x50>
		cpu_irq_enable();
   80274:	2201      	movs	r2, #1
   80276:	4b03      	ldr	r3, [pc, #12]	; (80284 <efc_perform_command+0x54>)
   80278:	701a      	strb	r2, [r3, #0]
   8027a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8027e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   80280:	b002      	add	sp, #8
   80282:	bd10      	pop	{r4, pc}
   80284:	200705ac 	.word	0x200705ac
   80288:	2007007d 	.word	0x2007007d

0008028c <FIFO_Init>:

int32_t AlphaQ,BetaQ,BetaSQrtQ,BetaMul2Q,BetaSQRTInvQ;

void FIFO_Init(XFifo* Fifo1 )
{
	Fifo1->WriteInx = 0;
   8028c:	2300      	movs	r3, #0
   8028e:	6003      	str	r3, [r0, #0]
	Fifo1->ReadInx = 0;
   80290:	6043      	str	r3, [r0, #4]
	Fifo1->Data[0] = 0;
   80292:	60c3      	str	r3, [r0, #12]
	Fifo1->Data[1] = 0;
   80294:	6103      	str	r3, [r0, #16]
	Fifo1->Data[2] = 0;
   80296:	6143      	str	r3, [r0, #20]
	Fifo1->FilterY[0] = 0;
   80298:	6183      	str	r3, [r0, #24]
	Fifo1->FilterY[1] = 0;
   8029a:	61c3      	str	r3, [r0, #28]
	Fifo1->FilterY[2] = 0;
   8029c:	6203      	str	r3, [r0, #32]
	Fifo1->WriteIndxY = 0;
   8029e:	6083      	str	r3, [r0, #8]
	
	Fifo1->AlphaQ = (int32_t)(ALPHA * BETA_MUL2_Q);
   802a0:	6283      	str	r3, [r0, #40]	; 0x28
	Fifo1->BetaQ =  (int32_t)(BETA * BETA_MUL2_Q);
   802a2:	2369      	movs	r3, #105	; 0x69
   802a4:	62c3      	str	r3, [r0, #44]	; 0x2c
	Fifo1->BetaSQrtQ = (int32_t)(BETA_SQRT * BETA_MUL2_Q);
   802a6:	f240 23b6 	movw	r3, #694	; 0x2b6
   802aa:	6303      	str	r3, [r0, #48]	; 0x30
	Fifo1->BetaMul2Q =  (int32_t)(BETA_MUL2 * BETA_MUL2_Q);
   802ac:	23d2      	movs	r3, #210	; 0xd2
   802ae:	6343      	str	r3, [r0, #52]	; 0x34
	Fifo1->BetaSQRTInvQ =  (int32_t)(BETA_SQRT_INV * BETA_SQRT_INV_Q);
   802b0:	23bd      	movs	r3, #189	; 0xbd
   802b2:	6383      	str	r3, [r0, #56]	; 0x38
   802b4:	4770      	bx	lr
	...

000802b8 <DAC3X8E_Init>:
#include "DAC3X8E.h"
#include "sam3x8e.h"
#include "pmc.h"

void DAC3X8E_Init()
{
   802b8:	b508      	push	{r3, lr}
	uint32_t mr;
	pmc_enable_periph_clk(ID_DACC);
   802ba:	2026      	movs	r0, #38	; 0x26
   802bc:	4b15      	ldr	r3, [pc, #84]	; (80314 <DAC3X8E_Init+0x5c>)
   802be:	4798      	blx	r3
	
	//disable write protect
	DACC->DACC_CDR = 0;
   802c0:	4b15      	ldr	r3, [pc, #84]	; (80318 <DAC3X8E_Init+0x60>)
   802c2:	2200      	movs	r2, #0
   802c4:	621a      	str	r2, [r3, #32]
	// Set trigger mode 1
	mr = DACC->DACC_MR & (~(DACC_MR_TRGSEL_Msk));
   802c6:	685a      	ldr	r2, [r3, #4]
   802c8:	f022 020e 	bic.w	r2, r2, #14
	DACC->DACC_MR = mr | DACC_MR_TRGEN_EN | DACC_MR_TRGSEL(1);
   802cc:	f042 0203 	orr.w	r2, r2, #3
   802d0:	605a      	str	r2, [r3, #4]
	
	// Set transfer mode 0 - half word mode
	DACC->DACC_MR &= (~DACC_MR_WORD_WORD);
   802d2:	685a      	ldr	r2, [r3, #4]
   802d4:	f022 0210 	bic.w	r2, r2, #16
   802d8:	605a      	str	r2, [r3, #4]
	//Set flexible mode
	DACC->DACC_MR |= DACC_MR_TAG;
   802da:	685a      	ldr	r2, [r3, #4]
   802dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   802e0:	605a      	str	r2, [r3, #4]
	// set timing
	mr = DACC->DACC_MR & (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
   802e2:	6859      	ldr	r1, [r3, #4]
	mr |= DACC_MR_REFRESH(1);
	mr &= ~DACC_MR_MAXS;
	mr |= (DACC_MR_STARTUP_Msk & ((3) << DACC_MR_STARTUP_Pos));
   802e4:	4a0d      	ldr	r2, [pc, #52]	; (8031c <DAC3X8E_Init+0x64>)
   802e6:	400a      	ands	r2, r1
   802e8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
   802ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	DACC->DACC_MR = mr;
   802f0:	605a      	str	r2, [r3, #4]
	//set power save off
	DACC->DACC_MR &= (~DACC_MR_SLEEP);
   802f2:	685a      	ldr	r2, [r3, #4]
   802f4:	f022 0220 	bic.w	r2, r2, #32
   802f8:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR |= DACC_MR_FASTWKUP;
   802fa:	685a      	ldr	r2, [r3, #4]
   802fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80300:	605a      	str	r2, [r3, #4]
	//disable INT
	DACC->DACC_IDR = 0xf;
   80302:	220f      	movs	r2, #15
   80304:	629a      	str	r2, [r3, #40]	; 0x28
	//enable ch0 and ch1
	DACC->DACC_CHER = DACC_CHER_CH0 << 0;
   80306:	2201      	movs	r2, #1
   80308:	611a      	str	r2, [r3, #16]
	DACC->DACC_CHER = DACC_CHER_CH0 << 1;
   8030a:	2102      	movs	r1, #2
   8030c:	6119      	str	r1, [r3, #16]
	//enable write protect
	DACC->DACC_CDR = 1;
   8030e:	621a      	str	r2, [r3, #32]
   80310:	bd08      	pop	{r3, pc}
   80312:	bf00      	nop
   80314:	000814a1 	.word	0x000814a1
   80318:	400c8000 	.word	0x400c8000
   8031c:	c0df00ff 	.word	0xc0df00ff

00080320 <DAC3X8E_write>:
	
	
}
void DAC3X8E_write(uint32_t ul_data)
{
	DACC->DACC_CDR = ul_data;
   80320:	4b01      	ldr	r3, [pc, #4]	; (80328 <DAC3X8E_write+0x8>)
   80322:	6218      	str	r0, [r3, #32]
   80324:	4770      	bx	lr
   80326:	bf00      	nop
   80328:	400c8000 	.word	0x400c8000

0008032c <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   8032c:	b430      	push	{r4, r5}
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

	if (ul_addr >= IFLASH1_ADDR) {
   8032e:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
   80332:	d30d      	bcc.n	80350 <translate_address+0x24>
		p_efc = EFC1;
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   80334:	f5a1 2440 	sub.w	r4, r1, #786432	; 0xc0000
   80338:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   8033c:	b2c9      	uxtb	r1, r1
		p_efc = EFC1;
   8033e:	4d08      	ldr	r5, [pc, #32]	; (80360 <translate_address+0x34>)
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
	}

	/* Store values */
	if (pp_efc) {
   80340:	b100      	cbz	r0, 80344 <translate_address+0x18>
		*pp_efc = p_efc;
   80342:	6005      	str	r5, [r0, #0]
	}

	if (pus_page) {
   80344:	b102      	cbz	r2, 80348 <translate_address+0x1c>
		*pus_page = us_page;
   80346:	8014      	strh	r4, [r2, #0]
	}

	if (pus_offset) {
   80348:	b103      	cbz	r3, 8034c <translate_address+0x20>
		*pus_offset = us_offset;
   8034a:	8019      	strh	r1, [r3, #0]
	}
}
   8034c:	bc30      	pop	{r4, r5}
   8034e:	4770      	bx	lr
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   80350:	f5a1 2400 	sub.w	r4, r1, #524288	; 0x80000
   80354:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80358:	b2c9      	uxtb	r1, r1
		p_efc = EFC0;
   8035a:	4d02      	ldr	r5, [pc, #8]	; (80364 <translate_address+0x38>)
   8035c:	e7f0      	b.n	80340 <translate_address+0x14>
   8035e:	bf00      	nop
   80360:	400e0c00 	.word	0x400e0c00
   80364:	400e0a00 	.word	0x400e0a00

00080368 <FLASH_Init>:



uint32_t FLASH_Init()
{
   80368:	b508      	push	{r3, lr}
	return efc_init(EFC1,EEFC_FMR_FAM,6);
   8036a:	2206      	movs	r2, #6
   8036c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80370:	4801      	ldr	r0, [pc, #4]	; (80378 <FLASH_Init+0x10>)
   80372:	4b02      	ldr	r3, [pc, #8]	; (8037c <FLASH_Init+0x14>)
   80374:	4798      	blx	r3
}
   80376:	bd08      	pop	{r3, pc}
   80378:	400e0c00 	.word	0x400e0c00
   8037c:	000801fd 	.word	0x000801fd

00080380 <ReadCalibFromFlash>:

Byte* ReadCalibFromFlash()
{
	return (FLASH_START+4);
}
   80380:	4800      	ldr	r0, [pc, #0]	; (80384 <ReadCalibFromFlash+0x4>)
   80382:	4770      	bx	lr
   80384:	000c0004 	.word	0x000c0004

00080388 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80388:	b530      	push	{r4, r5, lr}
   8038a:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   8038c:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   80390:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   80394:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   80398:	ea6f 3484 	mvn.w	r4, r4, lsl #14
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
   8039c:	b102      	cbz	r2, 803a0 <flash_lock+0x18>
		*pul_actual_start = ul_actual_start;
   8039e:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
   803a0:	b103      	cbz	r3, 803a4 <flash_lock+0x1c>
		*pul_actual_end = ul_actual_end;
   803a2:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   803a4:	2300      	movs	r3, #0
   803a6:	f10d 0202 	add.w	r2, sp, #2
   803aa:	4601      	mov	r1, r0
   803ac:	a801      	add	r0, sp, #4
   803ae:	4d11      	ldr	r5, [pc, #68]	; (803f4 <flash_lock+0x6c>)
   803b0:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   803b2:	2300      	movs	r3, #0
   803b4:	466a      	mov	r2, sp
   803b6:	4621      	mov	r1, r4
   803b8:	4618      	mov	r0, r3
   803ba:	47a8      	blx	r5

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   803bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   803c0:	f8bd 3000 	ldrh.w	r3, [sp]
   803c4:	4293      	cmp	r3, r2
   803c6:	d913      	bls.n	803f0 <flash_lock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   803c8:	2508      	movs	r5, #8
   803ca:	4c0b      	ldr	r4, [pc, #44]	; (803f8 <flash_lock+0x70>)
   803cc:	4629      	mov	r1, r5
   803ce:	9801      	ldr	r0, [sp, #4]
   803d0:	47a0      	blx	r4

		if (ul_error) {
   803d2:	4601      	mov	r1, r0
   803d4:	b948      	cbnz	r0, 803ea <flash_lock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   803d6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   803da:	3240      	adds	r2, #64	; 0x40
   803dc:	b292      	uxth	r2, r2
   803de:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   803e2:	f8bd 3000 	ldrh.w	r3, [sp]
   803e6:	4293      	cmp	r3, r2
   803e8:	d8f0      	bhi.n	803cc <flash_lock+0x44>
	}

	return FLASH_RC_OK;
}
   803ea:	4608      	mov	r0, r1
   803ec:	b003      	add	sp, #12
   803ee:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   803f0:	2100      	movs	r1, #0
   803f2:	e7fa      	b.n	803ea <flash_lock+0x62>
   803f4:	0008032d 	.word	0x0008032d
   803f8:	00080231 	.word	0x00080231

000803fc <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   803fc:	b530      	push	{r4, r5, lr}
   803fe:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80400:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   80404:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   80408:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   8040c:	ea6f 3484 	mvn.w	r4, r4, lsl #14
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
   80410:	b102      	cbz	r2, 80414 <flash_unlock+0x18>
		*pul_actual_start = ul_actual_start;
   80412:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
   80414:	b103      	cbz	r3, 80418 <flash_unlock+0x1c>
		*pul_actual_end = ul_actual_end;
   80416:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80418:	2300      	movs	r3, #0
   8041a:	f10d 0202 	add.w	r2, sp, #2
   8041e:	4601      	mov	r1, r0
   80420:	a801      	add	r0, sp, #4
   80422:	4d11      	ldr	r5, [pc, #68]	; (80468 <flash_unlock+0x6c>)
   80424:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80426:	2300      	movs	r3, #0
   80428:	466a      	mov	r2, sp
   8042a:	4621      	mov	r1, r4
   8042c:	4618      	mov	r0, r3
   8042e:	47a8      	blx	r5

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80430:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   80434:	f8bd 3000 	ldrh.w	r3, [sp]
   80438:	4293      	cmp	r3, r2
   8043a:	d913      	bls.n	80464 <flash_unlock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   8043c:	2509      	movs	r5, #9
   8043e:	4c0b      	ldr	r4, [pc, #44]	; (8046c <flash_unlock+0x70>)
   80440:	4629      	mov	r1, r5
   80442:	9801      	ldr	r0, [sp, #4]
   80444:	47a0      	blx	r4
				us_start_page);
		if (ul_error) {
   80446:	4601      	mov	r1, r0
   80448:	b948      	cbnz	r0, 8045e <flash_unlock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   8044a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   8044e:	3240      	adds	r2, #64	; 0x40
   80450:	b292      	uxth	r2, r2
   80452:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   80456:	f8bd 3000 	ldrh.w	r3, [sp]
   8045a:	4293      	cmp	r3, r2
   8045c:	d8f0      	bhi.n	80440 <flash_unlock+0x44>
	}

	return FLASH_RC_OK;
}
   8045e:	4608      	mov	r0, r1
   80460:	b003      	add	sp, #12
   80462:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   80464:	2100      	movs	r1, #0
   80466:	e7fa      	b.n	8045e <flash_unlock+0x62>
   80468:	0008032d 	.word	0x0008032d
   8046c:	00080231 	.word	0x00080231

00080470 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80474:	b087      	sub	sp, #28
   80476:	9101      	str	r1, [sp, #4]
   80478:	4692      	mov	sl, r2
   8047a:	9302      	str	r3, [sp, #8]
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   8047c:	ab04      	add	r3, sp, #16
   8047e:	f10d 0212 	add.w	r2, sp, #18
   80482:	4601      	mov	r1, r0
   80484:	a805      	add	r0, sp, #20
   80486:	4c31      	ldr	r4, [pc, #196]	; (8054c <flash_write+0xdc>)
   80488:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   8048a:	9805      	ldr	r0, [sp, #20]
   8048c:	4b30      	ldr	r3, [pc, #192]	; (80550 <flash_write+0xe0>)
   8048e:	4798      	blx	r3
   80490:	9003      	str	r0, [sp, #12]
	efc_set_wait_state(p_efc, 6);
   80492:	2106      	movs	r1, #6
   80494:	9805      	ldr	r0, [sp, #20]
   80496:	4b2f      	ldr	r3, [pc, #188]	; (80554 <flash_write+0xe4>)
   80498:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   8049a:	f1ba 0f00 	cmp.w	sl, #0
   8049e:	d04d      	beq.n	8053c <flash_write+0xcc>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   804a0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8055c <flash_write+0xec>
   804a4:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80560 <flash_write+0xf0>
   804a8:	f109 05fc 	add.w	r5, r9, #252	; 0xfc
   804ac:	e015      	b.n	804da <flash_write+0x6a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   804ae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   804b2:	2101      	movs	r1, #1
   804b4:	9805      	ldr	r0, [sp, #20]
   804b6:	4b28      	ldr	r3, [pc, #160]	; (80558 <flash_write+0xe8>)
   804b8:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
   804ba:	2800      	cmp	r0, #0
   804bc:	d143      	bne.n	80546 <flash_write+0xd6>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   804be:	9b01      	ldr	r3, [sp, #4]
   804c0:	443b      	add	r3, r7
   804c2:	9301      	str	r3, [sp, #4]
		ul_size -= writeSize;
		us_page++;
   804c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   804c8:	3301      	adds	r3, #1
   804ca:	f8ad 3012 	strh.w	r3, [sp, #18]
		us_offset = 0;
   804ce:	2300      	movs	r3, #0
   804d0:	f8ad 3010 	strh.w	r3, [sp, #16]
	while (ul_size > 0) {
   804d4:	ebba 0a07 	subs.w	sl, sl, r7
   804d8:	d030      	beq.n	8053c <flash_write+0xcc>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   804da:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   804de:	f5c6 7880 	rsb	r8, r6, #256	; 0x100
   804e2:	4647      	mov	r7, r8
   804e4:	45d0      	cmp	r8, sl
   804e6:	bf28      	it	cs
   804e8:	4657      	movcs	r7, sl
	ul_addr = IFLASH1_ADDR + us_page * IFLASH0_PAGE_SIZE + us_offset;
   804ea:	f8bd 4012 	ldrh.w	r4, [sp, #18]
   804ee:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
   804f2:	0224      	lsls	r4, r4, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   804f4:	4632      	mov	r2, r6
   804f6:	4621      	mov	r1, r4
   804f8:	4648      	mov	r0, r9
   804fa:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   804fc:	463a      	mov	r2, r7
   804fe:	9901      	ldr	r1, [sp, #4]
   80500:	eb09 0006 	add.w	r0, r9, r6
   80504:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset + writeSize,
   80506:	19f0      	adds	r0, r6, r7
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   80508:	eba8 0207 	sub.w	r2, r8, r7
				(void *)(ul_page_addr + us_offset + writeSize),
   8050c:	1931      	adds	r1, r6, r4
		memcpy(puc_page_buffer + us_offset + writeSize,
   8050e:	b292      	uxth	r2, r2
   80510:	4439      	add	r1, r7
   80512:	4448      	add	r0, r9
   80514:	47d8      	blx	fp
   80516:	f1a9 0304 	sub.w	r3, r9, #4
   8051a:	3c04      	subs	r4, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   8051c:	f853 2f04 	ldr.w	r2, [r3, #4]!
   80520:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80524:	42ab      	cmp	r3, r5
   80526:	d1f9      	bne.n	8051c <flash_write+0xac>
		if (ul_erase_flag) {
   80528:	9b02      	ldr	r3, [sp, #8]
   8052a:	2b00      	cmp	r3, #0
   8052c:	d0bf      	beq.n	804ae <flash_write+0x3e>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   8052e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   80532:	2103      	movs	r1, #3
   80534:	9805      	ldr	r0, [sp, #20]
   80536:	4b08      	ldr	r3, [pc, #32]	; (80558 <flash_write+0xe8>)
   80538:	4798      	blx	r3
   8053a:	e7be      	b.n	804ba <flash_write+0x4a>
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   8053c:	9903      	ldr	r1, [sp, #12]
   8053e:	9805      	ldr	r0, [sp, #20]
   80540:	4b04      	ldr	r3, [pc, #16]	; (80554 <flash_write+0xe4>)
   80542:	4798      	blx	r3

	return FLASH_RC_OK;
   80544:	2000      	movs	r0, #0
}
   80546:	b007      	add	sp, #28
   80548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8054c:	0008032d 	.word	0x0008032d
   80550:	000801f5 	.word	0x000801f5
   80554:	00080215 	.word	0x00080215
   80558:	00080231 	.word	0x00080231
   8055c:	20070f8c 	.word	0x20070f8c
   80560:	00081f91 	.word	0x00081f91

00080564 <WriteCalibToFlash>:
{
   80564:	b538      	push	{r3, r4, r5, lr}
   80566:	4604      	mov	r4, r0
	PrintLn("Writing to flash\n");
   80568:	4812      	ldr	r0, [pc, #72]	; (805b4 <WriteCalibToFlash+0x50>)
   8056a:	4b13      	ldr	r3, [pc, #76]	; (805b8 <WriteCalibToFlash+0x54>)
   8056c:	4798      	blx	r3
	if(flash_unlock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   8056e:	2300      	movs	r3, #0
   80570:	461a      	mov	r2, r3
   80572:	4912      	ldr	r1, [pc, #72]	; (805bc <WriteCalibToFlash+0x58>)
   80574:	4812      	ldr	r0, [pc, #72]	; (805c0 <WriteCalibToFlash+0x5c>)
   80576:	4d13      	ldr	r5, [pc, #76]	; (805c4 <WriteCalibToFlash+0x60>)
   80578:	47a8      	blx	r5
   8057a:	b970      	cbnz	r0, 8059a <WriteCalibToFlash+0x36>
	if(flash_write((uint32_t)FLASH_START+4, Calib, sizeof(uint32_t), 1) != FLASH_RC_OK)
   8057c:	2301      	movs	r3, #1
   8057e:	2204      	movs	r2, #4
   80580:	4621      	mov	r1, r4
   80582:	480f      	ldr	r0, [pc, #60]	; (805c0 <WriteCalibToFlash+0x5c>)
   80584:	4c10      	ldr	r4, [pc, #64]	; (805c8 <WriteCalibToFlash+0x64>)
   80586:	47a0      	blx	r4
   80588:	b958      	cbnz	r0, 805a2 <WriteCalibToFlash+0x3e>
	if(flash_lock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   8058a:	2300      	movs	r3, #0
   8058c:	461a      	mov	r2, r3
   8058e:	490b      	ldr	r1, [pc, #44]	; (805bc <WriteCalibToFlash+0x58>)
   80590:	480b      	ldr	r0, [pc, #44]	; (805c0 <WriteCalibToFlash+0x5c>)
   80592:	4c0e      	ldr	r4, [pc, #56]	; (805cc <WriteCalibToFlash+0x68>)
   80594:	47a0      	blx	r4
   80596:	b940      	cbnz	r0, 805aa <WriteCalibToFlash+0x46>
   80598:	bd38      	pop	{r3, r4, r5, pc}
		PrintLn("Bad unlock\n");
   8059a:	480d      	ldr	r0, [pc, #52]	; (805d0 <WriteCalibToFlash+0x6c>)
   8059c:	4b06      	ldr	r3, [pc, #24]	; (805b8 <WriteCalibToFlash+0x54>)
   8059e:	4798      	blx	r3
   805a0:	e7ec      	b.n	8057c <WriteCalibToFlash+0x18>
		PrintLn("Bad write\n");
   805a2:	480c      	ldr	r0, [pc, #48]	; (805d4 <WriteCalibToFlash+0x70>)
   805a4:	4b04      	ldr	r3, [pc, #16]	; (805b8 <WriteCalibToFlash+0x54>)
   805a6:	4798      	blx	r3
   805a8:	e7ef      	b.n	8058a <WriteCalibToFlash+0x26>
		PrintLn("Bad lock\n");
   805aa:	480b      	ldr	r0, [pc, #44]	; (805d8 <WriteCalibToFlash+0x74>)
   805ac:	4b02      	ldr	r3, [pc, #8]	; (805b8 <WriteCalibToFlash+0x54>)
   805ae:	4798      	blx	r3
}
   805b0:	e7f2      	b.n	80598 <WriteCalibToFlash+0x34>
   805b2:	bf00      	nop
   805b4:	000867dc 	.word	0x000867dc
   805b8:	000805dd 	.word	0x000805dd
   805bc:	000c0003 	.word	0x000c0003
   805c0:	000c0004 	.word	0x000c0004
   805c4:	000803fd 	.word	0x000803fd
   805c8:	00080471 	.word	0x00080471
   805cc:	00080389 	.word	0x00080389
   805d0:	000867f0 	.word	0x000867f0
   805d4:	000867fc 	.word	0x000867fc
   805d8:	00086808 	.word	0x00086808

000805dc <PrintLn>:

#include "Prints.h"
#include <asf.h>

void PrintLn(const char *str)
{
   805dc:	4770      	bx	lr
	...

000805e0 <writeByte_register>:

// When writing 0x1234 to SPI only 0x34 will be written

// In multi-byte registers read or write to the MSBit of the LSByte first.
void writeByte_register(uint8_t reg, uint8_t value)
{
   805e0:	b500      	push	{lr}
   805e2:	b083      	sub	sp, #12
	//uint8_t Test;
	//char out_str2[30] = {0};
	uint16_t Cmd[2];
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   805e4:	f000 001f 	and.w	r0, r0, #31
   805e8:	f040 0020 	orr.w	r0, r0, #32
   805ec:	f8ad 0004 	strh.w	r0, [sp, #4]
	Cmd[1] = value;
   805f0:	f8ad 1006 	strh.w	r1, [sp, #6]
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   805f4:	4a06      	ldr	r2, [pc, #24]	; (80610 <writeByte_register+0x30>)
   805f6:	2102      	movs	r1, #2
   805f8:	a801      	add	r0, sp, #4
   805fa:	4b06      	ldr	r3, [pc, #24]	; (80614 <writeByte_register+0x34>)
   805fc:	4798      	blx	r3
   805fe:	b110      	cbz	r0, 80606 <writeByte_register+0x26>
	}
	#endif*/
	
	//sprintf(out_str2,"Reg %u is %u write data %u\n", reg,Test,value);
	//PrintLn(out_str2);
}
   80600:	b003      	add	sp, #12
   80602:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   80606:	4804      	ldr	r0, [pc, #16]	; (80618 <writeByte_register+0x38>)
   80608:	4b04      	ldr	r3, [pc, #16]	; (8061c <writeByte_register+0x3c>)
   8060a:	4798      	blx	r3
}
   8060c:	e7f8      	b.n	80600 <writeByte_register+0x20>
   8060e:	bf00      	nop
   80610:	2007108c 	.word	0x2007108c
   80614:	00080dad 	.word	0x00080dad
   80618:	00086874 	.word	0x00086874
   8061c:	000805dd 	.word	0x000805dd

00080620 <writeBuf_register>:

void writeBuf_register(uint8_t reg, const uint16_t* Buf, int Len)
{
   80620:	b530      	push	{r4, r5, lr}
   80622:	b085      	sub	sp, #20
	int i;
	uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   80624:	f000 001f 	and.w	r0, r0, #31
   80628:	f040 0020 	orr.w	r0, r0, #32
   8062c:	f8ad 0004 	strh.w	r0, [sp, #4]
	for(i=0;i<Len;i++)
   80630:	1e15      	subs	r5, r2, #0
   80632:	dd0a      	ble.n	8064a <writeBuf_register+0x2a>
   80634:	460b      	mov	r3, r1
   80636:	f10d 0206 	add.w	r2, sp, #6
   8063a:	eb01 0445 	add.w	r4, r1, r5, lsl #1
		Cmd[i+1] = Buf[i];	
   8063e:	f833 0b02 	ldrh.w	r0, [r3], #2
   80642:	f822 0b02 	strh.w	r0, [r2], #2
	for(i=0;i<Len;i++)
   80646:	42a3      	cmp	r3, r4
   80648:	d1f9      	bne.n	8063e <writeBuf_register+0x1e>
	
	if(!SPIC_Write(Cmd, Len+1, &StatusRegister))
   8064a:	4a06      	ldr	r2, [pc, #24]	; (80664 <writeBuf_register+0x44>)
   8064c:	1c69      	adds	r1, r5, #1
   8064e:	a801      	add	r0, sp, #4
   80650:	4b05      	ldr	r3, [pc, #20]	; (80668 <writeBuf_register+0x48>)
   80652:	4798      	blx	r3
   80654:	b108      	cbz	r0, 8065a <writeBuf_register+0x3a>
		PrintLn("Error2\n");
	
}
   80656:	b005      	add	sp, #20
   80658:	bd30      	pop	{r4, r5, pc}
		PrintLn("Error2\n");
   8065a:	4804      	ldr	r0, [pc, #16]	; (8066c <writeBuf_register+0x4c>)
   8065c:	4b04      	ldr	r3, [pc, #16]	; (80670 <writeBuf_register+0x50>)
   8065e:	4798      	blx	r3
}
   80660:	e7f9      	b.n	80656 <writeBuf_register+0x36>
   80662:	bf00      	nop
   80664:	2007108c 	.word	0x2007108c
   80668:	00080dad 	.word	0x00080dad
   8066c:	0008686c 	.word	0x0008686c
   80670:	000805dd 	.word	0x000805dd

00080674 <readByte_register>:

uint8_t readByte_register(uint8_t reg)
{
   80674:	b530      	push	{r4, r5, lr}
   80676:	b08b      	sub	sp, #44	; 0x2c
   80678:	4604      	mov	r4, r0
	uint16_t Resp;
	uint16_t Cmd[2];
	char out_str[30] = {0};
   8067a:	221e      	movs	r2, #30
   8067c:	2100      	movs	r1, #0
   8067e:	4668      	mov	r0, sp
   80680:	4b0d      	ldr	r3, [pc, #52]	; (806b8 <readByte_register+0x44>)
   80682:	4798      	blx	r3
		
	Cmd[0] = R_REGISTER| (REGISTER_MASK & reg);
   80684:	f004 031f 	and.w	r3, r4, #31
   80688:	f8ad 3020 	strh.w	r3, [sp, #32]
	Cmd[1] = 0;
   8068c:	2300      	movs	r3, #0
   8068e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	SPIC_Read(Cmd, 2, &StatusRegister,&Resp);
   80692:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   80696:	4a09      	ldr	r2, [pc, #36]	; (806bc <readByte_register+0x48>)
   80698:	2102      	movs	r1, #2
   8069a:	a808      	add	r0, sp, #32
   8069c:	4d08      	ldr	r5, [pc, #32]	; (806c0 <readByte_register+0x4c>)
   8069e:	47a8      	blx	r5
	
	sprintf(out_str,"read reg %u val %u \n", reg,Resp);
   806a0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   806a4:	4622      	mov	r2, r4
   806a6:	4907      	ldr	r1, [pc, #28]	; (806c4 <readByte_register+0x50>)
   806a8:	4668      	mov	r0, sp
   806aa:	4c07      	ldr	r4, [pc, #28]	; (806c8 <readByte_register+0x54>)
   806ac:	47a0      	blx	r4
	//PrintLn(out_str);
	return (uint8_t)(Resp);
}
   806ae:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   806b2:	b00b      	add	sp, #44	; 0x2c
   806b4:	bd30      	pop	{r4, r5, pc}
   806b6:	bf00      	nop
   806b8:	0008207d 	.word	0x0008207d
   806bc:	2007108c 	.word	0x2007108c
   806c0:	00080e69 	.word	0x00080e69
   806c4:	00086854 	.word	0x00086854
   806c8:	00082119 	.word	0x00082119

000806cc <readBuf_register>:

void readBuf_register(uint8_t reg, uint16_t* Resp)
{
   806cc:	b570      	push	{r4, r5, r6, lr}
   806ce:	b090      	sub	sp, #64	; 0x40
   806d0:	4605      	mov	r5, r0
   806d2:	460c      	mov	r4, r1
	int i;
	uint16_t Cmd[6];
	char out_str[30] = {0};
   806d4:	221e      	movs	r2, #30
   806d6:	2100      	movs	r1, #0
   806d8:	a805      	add	r0, sp, #20
   806da:	4b13      	ldr	r3, [pc, #76]	; (80728 <readBuf_register+0x5c>)
   806dc:	4798      	blx	r3
	//uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = R_REGISTER | (REGISTER_MASK & reg);
   806de:	f005 031f 	and.w	r3, r5, #31
   806e2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	for(i=0;i<5;i++)
		Cmd[i+1] = 0;
   806e6:	2300      	movs	r3, #0
   806e8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   806ec:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   806f0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   806f4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   806f8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	
	SPIC_Read(Cmd, 6, &StatusRegister, Resp);
   806fc:	4623      	mov	r3, r4
   806fe:	4a0b      	ldr	r2, [pc, #44]	; (8072c <readBuf_register+0x60>)
   80700:	2106      	movs	r1, #6
   80702:	a80d      	add	r0, sp, #52	; 0x34
   80704:	4e0a      	ldr	r6, [pc, #40]	; (80730 <readBuf_register+0x64>)
   80706:	47b0      	blx	r6
	sprintf(out_str,"read reg %u val %u %u %u %u %u\n", reg,Resp[0],Resp[1],Resp[2],Resp[3],Resp[4]);
   80708:	8823      	ldrh	r3, [r4, #0]
   8070a:	8922      	ldrh	r2, [r4, #8]
   8070c:	9203      	str	r2, [sp, #12]
   8070e:	88e2      	ldrh	r2, [r4, #6]
   80710:	9202      	str	r2, [sp, #8]
   80712:	88a2      	ldrh	r2, [r4, #4]
   80714:	9201      	str	r2, [sp, #4]
   80716:	8862      	ldrh	r2, [r4, #2]
   80718:	9200      	str	r2, [sp, #0]
   8071a:	462a      	mov	r2, r5
   8071c:	4905      	ldr	r1, [pc, #20]	; (80734 <readBuf_register+0x68>)
   8071e:	a805      	add	r0, sp, #20
   80720:	4c05      	ldr	r4, [pc, #20]	; (80738 <readBuf_register+0x6c>)
   80722:	47a0      	blx	r4
	//PrintLn(out_str);
}
   80724:	b010      	add	sp, #64	; 0x40
   80726:	bd70      	pop	{r4, r5, r6, pc}
   80728:	0008207d 	.word	0x0008207d
   8072c:	2007108c 	.word	0x2007108c
   80730:	00080e69 	.word	0x00080e69
   80734:	00086834 	.word	0x00086834
   80738:	00082119 	.word	0x00082119

0008073c <RF_ActiveUp>:

void RF_ActiveUp()
{
   8073c:	b508      	push	{r3, lr}
	pio_set_pin_high(LED1_GPIO);
   8073e:	2055      	movs	r0, #85	; 0x55
   80740:	4b01      	ldr	r3, [pc, #4]	; (80748 <RF_ActiveUp+0xc>)
   80742:	4798      	blx	r3
   80744:	bd08      	pop	{r3, pc}
   80746:	bf00      	nop
   80748:	00081177 	.word	0x00081177

0008074c <RF_DisActive>:
}

void RF_DisActive()
{
   8074c:	b508      	push	{r3, lr}
	pio_set_pin_low(LED1_GPIO);
   8074e:	2055      	movs	r0, #85	; 0x55
   80750:	4b01      	ldr	r3, [pc, #4]	; (80758 <RF_DisActive+0xc>)
   80752:	4798      	blx	r3
   80754:	bd08      	pop	{r3, pc}
   80756:	bf00      	nop
   80758:	00081191 	.word	0x00081191

0008075c <RF_PowerUpTXmode>:
}

void RF_PowerUpTXmode()
{
   8075c:	b510      	push	{r4, lr}
	int i;
	writeByte_register(CONFIG,(readByte_register(CONFIG)) | ((1<<PWR_UP) & ~_BV(PRIM_RX)) );
   8075e:	2000      	movs	r0, #0
   80760:	4c06      	ldr	r4, [pc, #24]	; (8077c <RF_PowerUpTXmode+0x20>)
   80762:	47a0      	blx	r4
   80764:	f040 0102 	orr.w	r1, r0, #2
   80768:	b2c9      	uxtb	r1, r1
   8076a:	2000      	movs	r0, #0
   8076c:	4b04      	ldr	r3, [pc, #16]	; (80780 <RF_PowerUpTXmode+0x24>)
   8076e:	4798      	blx	r3
	readByte_register(CONFIG);
   80770:	2000      	movs	r0, #0
   80772:	47a0      	blx	r4
   80774:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   80776:	3b01      	subs	r3, #1
   80778:	d1fd      	bne.n	80776 <RF_PowerUpTXmode+0x1a>
		__NOP;
}
   8077a:	bd10      	pop	{r4, pc}
   8077c:	00080675 	.word	0x00080675
   80780:	000805e1 	.word	0x000805e1

00080784 <RF_SetPALevel>:

void RF_SetPALevel(rf24_pa_dbm_e level)
{
   80784:	b510      	push	{r4, lr}
   80786:	4604      	mov	r4, r0
	uint8_t setup = readByte_register(RF_SETUP) ;
   80788:	2006      	movs	r0, #6
   8078a:	4b0c      	ldr	r3, [pc, #48]	; (807bc <RF_SetPALevel+0x38>)
   8078c:	4798      	blx	r3
   8078e:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	setup |= (1<<RF_PWR_LOW);
	setup &= ~(1<<RF_PWR_HIGH);

	// switch uses RAM (evil!)
	if ( level == RF24_PA_MAX )
   80792:	2c03      	cmp	r4, #3
   80794:	d00b      	beq.n	807ae <RF_SetPALevel+0x2a>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_HIGH )
   80796:	2c02      	cmp	r4, #2
   80798:	d00c      	beq.n	807b4 <RF_SetPALevel+0x30>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_LOW )
   8079a:	2c04      	cmp	r4, #4
	setup &= ~(1<<RF_PWR_HIGH);
   8079c:	bf14      	ite	ne
   8079e:	f040 0102 	orrne.w	r1, r0, #2
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   807a2:	f040 0106 	orreq.w	r1, r0, #6
	}

	writeByte_register( RF_SETUP, setup ) ;
   807a6:	2006      	movs	r0, #6
   807a8:	4b05      	ldr	r3, [pc, #20]	; (807c0 <RF_SetPALevel+0x3c>)
   807aa:	4798      	blx	r3
   807ac:	bd10      	pop	{r4, pc}
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   807ae:	f040 0106 	orr.w	r1, r0, #6
   807b2:	e7f8      	b.n	807a6 <RF_SetPALevel+0x22>
		setup |= _BV(RF_PWR_HIGH) ;
   807b4:	f040 0106 	orr.w	r1, r0, #6
   807b8:	e7f5      	b.n	807a6 <RF_SetPALevel+0x22>
   807ba:	bf00      	nop
   807bc:	00080675 	.word	0x00080675
   807c0:	000805e1 	.word	0x000805e1

000807c4 <RF_setDataRate>:
}


bool RF_setDataRate(rf24_datarate_e speed)
{
   807c4:	b510      	push	{r4, lr}
   807c6:	4604      	mov	r4, r0
	bool result = false;
	uint8_t setup = readByte_register(RF_SETUP) ;
   807c8:	2006      	movs	r0, #6
   807ca:	4b09      	ldr	r3, [pc, #36]	; (807f0 <RF_setDataRate+0x2c>)
   807cc:	4798      	blx	r3

	// HIGH and LOW '00' is 1Mbs - our default
	//wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   807ce:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
   807d2:	2c02      	cmp	r4, #2
   807d4:	d008      	beq.n	807e8 <RF_setDataRate+0x24>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
   807d6:	2c01      	cmp	r4, #1
		{
			//wide_band = true ;
			setup |= _BV(RF_DR_HIGH);
   807d8:	bf08      	it	eq
   807da:	f041 0108 	orreq.w	r1, r1, #8
		{
			// 1Mbs
			//wide_band = false ;
		}
	}
	writeByte_register(RF_SETUP,setup);
   807de:	2006      	movs	r0, #6
   807e0:	4b04      	ldr	r3, [pc, #16]	; (807f4 <RF_setDataRate+0x30>)
   807e2:	4798      	blx	r3
	//	sprintf(out_str2,"Daniel %u setup %u \n", setup2,setup);
		//PrintLn(out_str2);
	}
	#endif*/
	return result;
}
   807e4:	2000      	movs	r0, #0
   807e6:	bd10      	pop	{r4, pc}
		setup |= _BV( RF_DR_LOW ) ;
   807e8:	f041 0120 	orr.w	r1, r1, #32
   807ec:	e7f7      	b.n	807de <RF_setDataRate+0x1a>
   807ee:	bf00      	nop
   807f0:	00080675 	.word	0x00080675
   807f4:	000805e1 	.word	0x000805e1

000807f8 <RF_setCRCLength>:

void RF_setCRCLength(rf24_crclength_e length)
{
   807f8:	b510      	push	{r4, lr}
   807fa:	4604      	mov	r4, r0
	uint8_t config = readByte_register(CONFIG) & ~( _BV(CRCO) | _BV(EN_CRC)) ;
   807fc:	2000      	movs	r0, #0
   807fe:	4b07      	ldr	r3, [pc, #28]	; (8081c <RF_setCRCLength+0x24>)
   80800:	4798      	blx	r3
   80802:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	
	// switch uses RAM (evil!)
	if ( length == RF24_CRC_DISABLED )
   80806:	b12c      	cbz	r4, 80814 <RF_setCRCLength+0x1c>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
   80808:	2c01      	cmp	r4, #1
	{
		config |= _BV(EN_CRC);
   8080a:	bf0c      	ite	eq
   8080c:	f041 0108 	orreq.w	r1, r1, #8
	}
	else
	{
		config |= _BV(EN_CRC);
		config |= _BV( CRCO );
   80810:	f041 010c 	orrne.w	r1, r1, #12
	}
	writeByte_register( CONFIG, config ) ;
   80814:	2000      	movs	r0, #0
   80816:	4b02      	ldr	r3, [pc, #8]	; (80820 <RF_setCRCLength+0x28>)
   80818:	4798      	blx	r3
   8081a:	bd10      	pop	{r4, pc}
   8081c:	00080675 	.word	0x00080675
   80820:	000805e1 	.word	0x000805e1

00080824 <RF_setChannel>:
}


void RF_setChannel(uint8_t channel)
{
   80824:	b508      	push	{r3, lr}
	//const uint8_t max_channel = 127;
	uint8_t RF_CH2;
	
	writeByte_register(RF_CH,channel);
   80826:	4601      	mov	r1, r0
   80828:	2005      	movs	r0, #5
   8082a:	4b03      	ldr	r3, [pc, #12]	; (80838 <RF_setChannel+0x14>)
   8082c:	4798      	blx	r3
	// Verify our result
	if ( (RF_CH2=readByte_register(RF_CH)) == channel )
   8082e:	2005      	movs	r0, #5
   80830:	4b02      	ldr	r3, [pc, #8]	; (8083c <RF_setChannel+0x18>)
   80832:	4798      	blx	r3
   80834:	bd08      	pop	{r3, pc}
   80836:	bf00      	nop
   80838:	000805e1 	.word	0x000805e1
   8083c:	00080675 	.word	0x00080675

00080840 <flush_rx>:
	//	PrintLn(out_str2);
	}
	
}
void flush_rx(void)
{
   80840:	b500      	push	{lr}
   80842:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_RX;
   80844:	a802      	add	r0, sp, #8
   80846:	23e2      	movs	r3, #226	; 0xe2
   80848:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   8084c:	4a05      	ldr	r2, [pc, #20]	; (80864 <flush_rx+0x24>)
   8084e:	2101      	movs	r1, #1
   80850:	4b05      	ldr	r3, [pc, #20]	; (80868 <flush_rx+0x28>)
   80852:	4798      	blx	r3
   80854:	b110      	cbz	r0, 8085c <flush_rx+0x1c>
		PrintLn("Error\n");
}
   80856:	b003      	add	sp, #12
   80858:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   8085c:	4803      	ldr	r0, [pc, #12]	; (8086c <flush_rx+0x2c>)
   8085e:	4b04      	ldr	r3, [pc, #16]	; (80870 <flush_rx+0x30>)
   80860:	4798      	blx	r3
}
   80862:	e7f8      	b.n	80856 <flush_rx+0x16>
   80864:	2007108c 	.word	0x2007108c
   80868:	00080dad 	.word	0x00080dad
   8086c:	00086874 	.word	0x00086874
   80870:	000805dd 	.word	0x000805dd

00080874 <flush_tx>:

/****************************************************************************/

void flush_tx(void)
{
   80874:	b500      	push	{lr}
   80876:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_TX;
   80878:	a802      	add	r0, sp, #8
   8087a:	23e1      	movs	r3, #225	; 0xe1
   8087c:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   80880:	4a05      	ldr	r2, [pc, #20]	; (80898 <flush_tx+0x24>)
   80882:	2101      	movs	r1, #1
   80884:	4b05      	ldr	r3, [pc, #20]	; (8089c <flush_tx+0x28>)
   80886:	4798      	blx	r3
   80888:	b110      	cbz	r0, 80890 <flush_tx+0x1c>
		PrintLn("Error\n");
}
   8088a:	b003      	add	sp, #12
   8088c:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   80890:	4803      	ldr	r0, [pc, #12]	; (808a0 <flush_tx+0x2c>)
   80892:	4b04      	ldr	r3, [pc, #16]	; (808a4 <flush_tx+0x30>)
   80894:	4798      	blx	r3
}
   80896:	e7f8      	b.n	8088a <flush_tx+0x16>
   80898:	2007108c 	.word	0x2007108c
   8089c:	00080dad 	.word	0x00080dad
   808a0:	00086874 	.word	0x00086874
   808a4:	000805dd 	.word	0x000805dd

000808a8 <RF_OpenWritePipe>:

void RF_OpenWritePipe()
{
   808a8:	b508      	push	{r3, lr}
	writeBuf_register(TX_ADDR, pipe0, 5);
   808aa:	2205      	movs	r2, #5
   808ac:	4902      	ldr	r1, [pc, #8]	; (808b8 <RF_OpenWritePipe+0x10>)
   808ae:	2010      	movs	r0, #16
   808b0:	4b02      	ldr	r3, [pc, #8]	; (808bc <RF_OpenWritePipe+0x14>)
   808b2:	4798      	blx	r3
   808b4:	bd08      	pop	{r3, pc}
   808b6:	bf00      	nop
   808b8:	00086828 	.word	0x00086828
   808bc:	00080621 	.word	0x00080621

000808c0 <RF_InitTX>:
}

void RF_InitTX()
{
   808c0:	b510      	push	{r4, lr}
   808c2:	b084      	sub	sp, #16
	uint16_t Response[5]= {0,0,0,0,0};
   808c4:	2300      	movs	r3, #0
   808c6:	9301      	str	r3, [sp, #4]
   808c8:	9302      	str	r3, [sp, #8]
   808ca:	f8ad 300c 	strh.w	r3, [sp, #12]
	int i;
	RF_DisActive();
   808ce:	4b1a      	ldr	r3, [pc, #104]	; (80938 <RF_InitTX+0x78>)
   808d0:	4798      	blx	r3
   808d2:	23ff      	movs	r3, #255	; 0xff
	//little delay
	for(i=0;i<0xff;i++)
   808d4:	3b01      	subs	r3, #1
   808d6:	d1fd      	bne.n	808d4 <RF_InitTX+0x14>
		__NOP;
	
	
	// Disable auto-retransmit
	writeByte_register(SETUP_RETR,(0b0100 << ARD) | (0 << ARC));
   808d8:	2140      	movs	r1, #64	; 0x40
   808da:	2004      	movs	r0, #4
   808dc:	4b17      	ldr	r3, [pc, #92]	; (8093c <RF_InitTX+0x7c>)
   808de:	4798      	blx	r3
	// You can configure the RF24 when power-down , stand-by or RX,TX mode
	RF_SetPALevel(RF24_PA_MAX);
   808e0:	2003      	movs	r0, #3
   808e2:	4b17      	ldr	r3, [pc, #92]	; (80940 <RF_InitTX+0x80>)
   808e4:	4798      	blx	r3
	if(!RF_setDataRate(RF24_250KBPS))
   808e6:	2002      	movs	r0, #2
   808e8:	4b16      	ldr	r3, [pc, #88]	; (80944 <RF_InitTX+0x84>)
   808ea:	4798      	blx	r3
   808ec:	b1f8      	cbz	r0, 8092e <RF_InitTX+0x6e>
		PrintLn("Error3\n");
	// Initialize no CRC
	RF_setCRCLength(RF24_CRC_DISABLED);
   808ee:	2000      	movs	r0, #0
   808f0:	4b15      	ldr	r3, [pc, #84]	; (80948 <RF_InitTX+0x88>)
   808f2:	4798      	blx	r3
	// Disable dynamic payloads, to match dynamic_payloads_enabled setting
	writeByte_register(DYNPD,0);
   808f4:	2100      	movs	r1, #0
   808f6:	201c      	movs	r0, #28
   808f8:	4c10      	ldr	r4, [pc, #64]	; (8093c <RF_InitTX+0x7c>)
   808fa:	47a0      	blx	r4
	// Reset current status
	// Notice reset and flush is the last thing we do
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   808fc:	2170      	movs	r1, #112	; 0x70
   808fe:	2007      	movs	r0, #7
   80900:	47a0      	blx	r4
	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	RF_setChannel(76);
   80902:	204c      	movs	r0, #76	; 0x4c
   80904:	4b11      	ldr	r3, [pc, #68]	; (8094c <RF_InitTX+0x8c>)
   80906:	4798      	blx	r3
	// NO_ACK Mode
	writeByte_register(EN_AA, 0);
   80908:	2100      	movs	r1, #0
   8090a:	2001      	movs	r0, #1
   8090c:	47a0      	blx	r4
	// Flush buffers
	flush_rx();
   8090e:	4b10      	ldr	r3, [pc, #64]	; (80950 <RF_InitTX+0x90>)
   80910:	4798      	blx	r3
	flush_tx();
   80912:	4b10      	ldr	r3, [pc, #64]	; (80954 <RF_InitTX+0x94>)
   80914:	4798      	blx	r3
	// Route the packet to PTX address at pipe0
	RF_OpenWritePipe();
   80916:	4b10      	ldr	r3, [pc, #64]	; (80958 <RF_InitTX+0x98>)
   80918:	4798      	blx	r3
	RF_PowerUpTXmode();
   8091a:	4b10      	ldr	r3, [pc, #64]	; (8095c <RF_InitTX+0x9c>)
   8091c:	4798      	blx	r3
	
	RF_ActiveUp();
   8091e:	4b10      	ldr	r3, [pc, #64]	; (80960 <RF_InitTX+0xa0>)
   80920:	4798      	blx	r3
	readByte_register(RF_CH);
	readByte_register(SETUP_RETR);
	readByte_register(DYNPD);
	readByte_register(STATUS);
	readByte_register(EN_AA);*/
	readBuf_register(TX_ADDR,Response);
   80922:	a901      	add	r1, sp, #4
   80924:	2010      	movs	r0, #16
   80926:	4b0f      	ldr	r3, [pc, #60]	; (80964 <RF_InitTX+0xa4>)
   80928:	4798      	blx	r3
	
}
   8092a:	b004      	add	sp, #16
   8092c:	bd10      	pop	{r4, pc}
		PrintLn("Error3\n");
   8092e:	480e      	ldr	r0, [pc, #56]	; (80968 <RF_InitTX+0xa8>)
   80930:	4b0e      	ldr	r3, [pc, #56]	; (8096c <RF_InitTX+0xac>)
   80932:	4798      	blx	r3
   80934:	e7db      	b.n	808ee <RF_InitTX+0x2e>
   80936:	bf00      	nop
   80938:	0008074d 	.word	0x0008074d
   8093c:	000805e1 	.word	0x000805e1
   80940:	00080785 	.word	0x00080785
   80944:	000807c5 	.word	0x000807c5
   80948:	000807f9 	.word	0x000807f9
   8094c:	00080825 	.word	0x00080825
   80950:	00080841 	.word	0x00080841
   80954:	00080875 	.word	0x00080875
   80958:	000808a9 	.word	0x000808a9
   8095c:	0008075d 	.word	0x0008075d
   80960:	0008073d 	.word	0x0008073d
   80964:	000806cd 	.word	0x000806cd
   80968:	00086814 	.word	0x00086814
   8096c:	000805dd 	.word	0x000805dd

00080970 <RF_SendBell>:


void RF_SendBell(uint16_t CmdID)
{
   80970:	b510      	push	{r4, lr}
   80972:	b082      	sub	sp, #8
   80974:	4604      	mov	r4, r0
	uint16_t Cmd[2];
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   80976:	2170      	movs	r1, #112	; 0x70
   80978:	2007      	movs	r0, #7
   8097a:	4b0e      	ldr	r3, [pc, #56]	; (809b4 <RF_SendBell+0x44>)
   8097c:	4798      	blx	r3
	Cmd[0] = W_TX_PAYLOAD;
   8097e:	23a0      	movs	r3, #160	; 0xa0
   80980:	f8ad 3004 	strh.w	r3, [sp, #4]
	Cmd[1] = CmdID;
   80984:	f8ad 4006 	strh.w	r4, [sp, #6]
	Timer_Sleep(10);
   80988:	200a      	movs	r0, #10
   8098a:	4b0b      	ldr	r3, [pc, #44]	; (809b8 <RF_SendBell+0x48>)
   8098c:	4798      	blx	r3
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   8098e:	4a0b      	ldr	r2, [pc, #44]	; (809bc <RF_SendBell+0x4c>)
   80990:	2102      	movs	r1, #2
   80992:	a801      	add	r0, sp, #4
   80994:	4b0a      	ldr	r3, [pc, #40]	; (809c0 <RF_SendBell+0x50>)
   80996:	4798      	blx	r3
   80998:	b138      	cbz	r0, 809aa <RF_SendBell+0x3a>
		PrintLn("Error\n");
	Timer_Sleep(10);
   8099a:	200a      	movs	r0, #10
   8099c:	4b06      	ldr	r3, [pc, #24]	; (809b8 <RF_SendBell+0x48>)
   8099e:	4798      	blx	r3
	PrintLn("Send RF \n");
   809a0:	4808      	ldr	r0, [pc, #32]	; (809c4 <RF_SendBell+0x54>)
   809a2:	4b09      	ldr	r3, [pc, #36]	; (809c8 <RF_SendBell+0x58>)
   809a4:	4798      	blx	r3
   809a6:	b002      	add	sp, #8
   809a8:	bd10      	pop	{r4, pc}
		PrintLn("Error\n");
   809aa:	4808      	ldr	r0, [pc, #32]	; (809cc <RF_SendBell+0x5c>)
   809ac:	4b06      	ldr	r3, [pc, #24]	; (809c8 <RF_SendBell+0x58>)
   809ae:	4798      	blx	r3
   809b0:	e7f3      	b.n	8099a <RF_SendBell+0x2a>
   809b2:	bf00      	nop
   809b4:	000805e1 	.word	0x000805e1
   809b8:	00080fa5 	.word	0x00080fa5
   809bc:	2007108c 	.word	0x2007108c
   809c0:	00080dad 	.word	0x00080dad
   809c4:	0008681c 	.word	0x0008681c
   809c8:	000805dd 	.word	0x000805dd
   809cc:	00086874 	.word	0x00086874

000809d0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   809d0:	6843      	ldr	r3, [r0, #4]
   809d2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   809d6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   809d8:	6843      	ldr	r3, [r0, #4]
   809da:	0409      	lsls	r1, r1, #16
   809dc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   809e0:	4319      	orrs	r1, r3
   809e2:	6041      	str	r1, [r0, #4]
   809e4:	4770      	bx	lr

000809e6 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   809e6:	6843      	ldr	r3, [r0, #4]
   809e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   809ec:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   809ee:	6843      	ldr	r3, [r0, #4]
   809f0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   809f4:	6041      	str	r1, [r0, #4]
   809f6:	4770      	bx	lr

000809f8 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   809f8:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   809fa:	f643 2399 	movw	r3, #15001	; 0x3a99
   809fe:	6904      	ldr	r4, [r0, #16]
   80a00:	f014 0f01 	tst.w	r4, #1
   80a04:	d103      	bne.n	80a0e <spi_read+0x16>
		if (!timeout--) {
   80a06:	3b01      	subs	r3, #1
   80a08:	d1f9      	bne.n	809fe <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   80a0a:	2001      	movs	r0, #1
   80a0c:	e009      	b.n	80a22 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   80a0e:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80a10:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80a12:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80a16:	bf1c      	itt	ne
   80a18:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   80a1c:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80a1e:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   80a20:	2000      	movs	r0, #0
}
   80a22:	bc10      	pop	{r4}
   80a24:	4770      	bx	lr

00080a26 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80a26:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80a28:	f643 2499 	movw	r4, #15001	; 0x3a99
   80a2c:	6905      	ldr	r5, [r0, #16]
   80a2e:	f015 0f02 	tst.w	r5, #2
   80a32:	d103      	bne.n	80a3c <spi_write+0x16>
		if (!timeout--) {
   80a34:	3c01      	subs	r4, #1
   80a36:	d1f9      	bne.n	80a2c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   80a38:	2001      	movs	r0, #1
   80a3a:	e00c      	b.n	80a56 <spi_write+0x30>
   80a3c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   80a3e:	f014 0f02 	tst.w	r4, #2
   80a42:	d006      	beq.n	80a52 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   80a44:	0412      	lsls	r2, r2, #16
   80a46:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80a4a:	4311      	orrs	r1, r2
		if (uc_last) {
   80a4c:	b10b      	cbz	r3, 80a52 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   80a4e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   80a52:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   80a54:	2000      	movs	r0, #0
}
   80a56:	bc30      	pop	{r4, r5}
   80a58:	4770      	bx	lr

00080a5a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   80a5a:	b932      	cbnz	r2, 80a6a <spi_set_clock_polarity+0x10>
   80a5c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80a60:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80a62:	f023 0301 	bic.w	r3, r3, #1
   80a66:	6303      	str	r3, [r0, #48]	; 0x30
   80a68:	4770      	bx	lr
   80a6a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80a6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80a70:	f043 0301 	orr.w	r3, r3, #1
   80a74:	6303      	str	r3, [r0, #48]	; 0x30
   80a76:	4770      	bx	lr

00080a78 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   80a78:	b932      	cbnz	r2, 80a88 <spi_set_clock_phase+0x10>
   80a7a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80a7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80a80:	f023 0302 	bic.w	r3, r3, #2
   80a84:	6303      	str	r3, [r0, #48]	; 0x30
   80a86:	4770      	bx	lr
   80a88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80a8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80a8e:	f043 0302 	orr.w	r3, r3, #2
   80a92:	6303      	str	r3, [r0, #48]	; 0x30
   80a94:	4770      	bx	lr

00080a96 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   80a96:	2a04      	cmp	r2, #4
   80a98:	d003      	beq.n	80aa2 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   80a9a:	b16a      	cbz	r2, 80ab8 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   80a9c:	2a08      	cmp	r2, #8
   80a9e:	d016      	beq.n	80ace <spi_configure_cs_behavior+0x38>
   80aa0:	4770      	bx	lr
   80aa2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80aa6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80aa8:	f023 0308 	bic.w	r3, r3, #8
   80aac:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   80aae:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ab0:	f043 0304 	orr.w	r3, r3, #4
   80ab4:	6303      	str	r3, [r0, #48]	; 0x30
   80ab6:	4770      	bx	lr
   80ab8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80abc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80abe:	f023 0308 	bic.w	r3, r3, #8
   80ac2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80ac4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ac6:	f023 0304 	bic.w	r3, r3, #4
   80aca:	6303      	str	r3, [r0, #48]	; 0x30
   80acc:	4770      	bx	lr
   80ace:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80ad2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ad4:	f043 0308 	orr.w	r3, r3, #8
   80ad8:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   80ada:	e7e1      	b.n	80aa0 <spi_configure_cs_behavior+0xa>

00080adc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80adc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80ae0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   80ae6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80ae8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80aea:	431a      	orrs	r2, r3
   80aec:	630a      	str	r2, [r1, #48]	; 0x30
   80aee:	4770      	bx	lr

00080af0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
   80af0:	b172      	cbz	r2, 80b10 <spi_set_baudrate_div+0x20>
{
   80af2:	b410      	push	{r4}
   80af4:	4614      	mov	r4, r2
   80af6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   80afa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   80b00:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80b02:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80b04:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   80b08:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   80b0a:	2000      	movs	r0, #0
}
   80b0c:	bc10      	pop	{r4}
   80b0e:	4770      	bx	lr
        return -1;
   80b10:	f04f 30ff 	mov.w	r0, #4294967295
   80b14:	4770      	bx	lr

00080b16 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80b16:	b410      	push	{r4}
   80b18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   80b1c:	6b08      	ldr	r0, [r1, #48]	; 0x30
   80b1e:	b280      	uxth	r0, r0
   80b20:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80b22:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   80b24:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   80b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   80b2c:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   80b2e:	bc10      	pop	{r4}
   80b30:	4770      	bx	lr
	...

00080b34 <spi_set_writeprotect>:
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE | SPI_WPCR_SPIWPEN;
	} else {
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE;
	}
#else
	if (ul_enable) {
   80b34:	b919      	cbnz	r1, 80b3e <spi_set_writeprotect+0xa>
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
	} else {
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD;
   80b36:	4b04      	ldr	r3, [pc, #16]	; (80b48 <spi_set_writeprotect+0x14>)
   80b38:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b3c:	4770      	bx	lr
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
   80b3e:	4b03      	ldr	r3, [pc, #12]	; (80b4c <spi_set_writeprotect+0x18>)
   80b40:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b44:	4770      	bx	lr
   80b46:	bf00      	nop
   80b48:	53504900 	.word	0x53504900
   80b4c:	53504901 	.word	0x53504901

00080b50 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80b50:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80b52:	0189      	lsls	r1, r1, #6
   80b54:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80b56:	2402      	movs	r4, #2
   80b58:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80b5a:	f04f 31ff 	mov.w	r1, #4294967295
   80b5e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80b60:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80b62:	605a      	str	r2, [r3, #4]
}
   80b64:	bc10      	pop	{r4}
   80b66:	4770      	bx	lr

00080b68 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80b68:	0189      	lsls	r1, r1, #6
   80b6a:	2305      	movs	r3, #5
   80b6c:	5043      	str	r3, [r0, r1]
   80b6e:	4770      	bx	lr

00080b70 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80b70:	0189      	lsls	r1, r1, #6
   80b72:	2302      	movs	r3, #2
   80b74:	5043      	str	r3, [r0, r1]
   80b76:	4770      	bx	lr

00080b78 <tc_set_writeprotect>:
		uint32_t ul_enable)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	if (ul_enable) {
   80b78:	b919      	cbnz	r1, 80b82 <tc_set_writeprotect+0xa>
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
	} else {
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
   80b7a:	4b04      	ldr	r3, [pc, #16]	; (80b8c <tc_set_writeprotect+0x14>)
   80b7c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b80:	4770      	bx	lr
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
   80b82:	4b03      	ldr	r3, [pc, #12]	; (80b90 <tc_set_writeprotect+0x18>)
   80b84:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b88:	4770      	bx	lr
   80b8a:	bf00      	nop
   80b8c:	54494d00 	.word	0x54494d00
   80b90:	54494d01 	.word	0x54494d01

00080b94 <ADCC_Init>:
#include "ADCC.h"

uint16_t ADCC_GlobalRawData[ADC_NUM_CHANNELS];

void ADCC_Init()
{
   80b94:	b570      	push	{r4, r5, r6, lr}
	pmc_enable_periph_clk(ID_ADC);
   80b96:	2025      	movs	r0, #37	; 0x25
   80b98:	4b21      	ldr	r3, [pc, #132]	; (80c20 <ADCC_Init+0x8c>)
   80b9a:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(),sysclk_get_main_hz()/4, ADC_STARTUP_TIME_5);
   80b9c:	4c21      	ldr	r4, [pc, #132]	; (80c24 <ADCC_Init+0x90>)
   80b9e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
   80ba2:	4a21      	ldr	r2, [pc, #132]	; (80c28 <ADCC_Init+0x94>)
   80ba4:	4921      	ldr	r1, [pc, #132]	; (80c2c <ADCC_Init+0x98>)
   80ba6:	4620      	mov	r0, r4
   80ba8:	4d21      	ldr	r5, [pc, #132]	; (80c30 <ADCC_Init+0x9c>)
   80baa:	47a8      	blx	r5
	adc_configure_timing(ADC,20,ADC_SETTLING_TIME_0,50);
   80bac:	2332      	movs	r3, #50	; 0x32
   80bae:	2200      	movs	r2, #0
   80bb0:	2114      	movs	r1, #20
   80bb2:	4620      	mov	r0, r4
   80bb4:	4d1f      	ldr	r5, [pc, #124]	; (80c34 <ADCC_Init+0xa0>)
   80bb6:	47a8      	blx	r5
	adc_configure_trigger(ADC,ADC_TRIG_TIO_CH_0,0);
   80bb8:	2200      	movs	r2, #0
   80bba:	2103      	movs	r1, #3
   80bbc:	4620      	mov	r0, r4
   80bbe:	4b1e      	ldr	r3, [pc, #120]	; (80c38 <ADCC_Init+0xa4>)
   80bc0:	4798      	blx	r3
	adc_disable_all_channel(ADC);
   80bc2:	4620      	mov	r0, r4
   80bc4:	4b1d      	ldr	r3, [pc, #116]	; (80c3c <ADCC_Init+0xa8>)
   80bc6:	4798      	blx	r3
	adc_disable_interrupt(ADC, 0xFFFFFFFF);
   80bc8:	f04f 31ff 	mov.w	r1, #4294967295
   80bcc:	4620      	mov	r0, r4
   80bce:	4b1c      	ldr	r3, [pc, #112]	; (80c40 <ADCC_Init+0xac>)
   80bd0:	4798      	blx	r3
	adc_set_resolution(ADC, ADC_12_BITS);
   80bd2:	2100      	movs	r1, #0
   80bd4:	4620      	mov	r0, r4
   80bd6:	4b1b      	ldr	r3, [pc, #108]	; (80c44 <ADCC_Init+0xb0>)
   80bd8:	4798      	blx	r3
	ADC->ADC_PTCR =  ADC_PTCR_RXTEN;
   80bda:	2601      	movs	r6, #1
   80bdc:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
	ADC->ADC_RPR = (uint32_t)ADCC_GlobalRawData;
   80be0:	4a19      	ldr	r2, [pc, #100]	; (80c48 <ADCC_Init+0xb4>)
   80be2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	ADC->ADC_RCR = ADC_NUM_CHANNELS;
   80be6:	2303      	movs	r3, #3
   80be8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	ADC->ADC_RNPR =  (uint32_t)ADCC_GlobalRawData;
   80bec:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
	ADC->ADC_RNCR = ADC_NUM_CHANNELS;
   80bf0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	adc_enable_channel(ADC,ADC_CHANNEL_0); // Mic in
   80bf4:	2100      	movs	r1, #0
   80bf6:	4620      	mov	r0, r4
   80bf8:	4d14      	ldr	r5, [pc, #80]	; (80c4c <ADCC_Init+0xb8>)
   80bfa:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_1); // Potentiometer 
   80bfc:	4631      	mov	r1, r6
   80bfe:	4620      	mov	r0, r4
   80c00:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_2); // Filtered Mic
   80c02:	2102      	movs	r1, #2
   80c04:	4620      	mov	r0, r4
   80c06:	47a8      	blx	r5
	//adc_enable_interrupt(ADC,ADC_IER_EOC0);
	adc_enable_interrupt(ADC,ADC_IER_ENDRX);
   80c08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c0c:	4620      	mov	r0, r4
   80c0e:	4b10      	ldr	r3, [pc, #64]	; (80c50 <ADCC_Init+0xbc>)
   80c10:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c12:	2220      	movs	r2, #32
   80c14:	4b0f      	ldr	r3, [pc, #60]	; (80c54 <ADCC_Init+0xc0>)
   80c16:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(ADC_IRQn);	
	adc_start(ADC);
   80c18:	4620      	mov	r0, r4
   80c1a:	4b0f      	ldr	r3, [pc, #60]	; (80c58 <ADCC_Init+0xc4>)
   80c1c:	4798      	blx	r3
   80c1e:	bd70      	pop	{r4, r5, r6, pc}
   80c20:	000814a1 	.word	0x000814a1
   80c24:	400c0000 	.word	0x400c0000
   80c28:	0280de80 	.word	0x0280de80
   80c2c:	0a037a00 	.word	0x0a037a00
   80c30:	00080161 	.word	0x00080161
   80c34:	000801b3 	.word	0x000801b3
   80c38:	000801a5 	.word	0x000801a5
   80c3c:	000801e5 	.word	0x000801e5
   80c40:	000801f1 	.word	0x000801f1
   80c44:	00080195 	.word	0x00080195
   80c48:	20071140 	.word	0x20071140
   80c4c:	000801db 	.word	0x000801db
   80c50:	000801ed 	.word	0x000801ed
   80c54:	e000e100 	.word	0xe000e100
   80c58:	000801cf 	.word	0x000801cf

00080c5c <SPI_InitPIO>:
	//Because we are using PORTB.PIN25 in peripheral B mode
	//	we need to enable the clock for that line.
	//PMC->PMC_PCER0 |= _BV(ID_PIOA);
	
	//configure for input
	PIOA->PIO_PDR |= PIO_PA25;
   80c5c:	4b1a      	ldr	r3, [pc, #104]	; (80cc8 <SPI_InitPIO+0x6c>)
   80c5e:	685a      	ldr	r2, [r3, #4]
   80c60:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c64:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ODR |= PIO_PA25;		//Input
   80c66:	695a      	ldr	r2, [r3, #20]
   80c68:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c6c:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PUER |= PIO_PA25;		//pull-up
   80c6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80c70:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c74:	665a      	str	r2, [r3, #100]	; 0x64
	
	PIOA->PIO_PDR |= PIO_PA26;		//MOSI
   80c76:	685a      	ldr	r2, [r3, #4]
   80c78:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80c7c:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA26;		//MOSI	Output
   80c7e:	691a      	ldr	r2, [r3, #16]
   80c80:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80c84:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA26;	//Peripheral A
   80c86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80c88:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   80c8c:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA27;		//SPCK
   80c8e:	685a      	ldr	r2, [r3, #4]
   80c90:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80c94:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA27;		//SPCK	Output
   80c96:	691a      	ldr	r2, [r3, #16]
   80c98:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80c9c:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA27;	//Peripheral A
   80c9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80ca0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
   80ca4:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA28;		//NPCS0
   80ca6:	685a      	ldr	r2, [r3, #4]
   80ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cac:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA28;		//NPCS0	Output
   80cae:	691a      	ldr	r2, [r3, #16]
   80cb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cb4:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA28;	//Peripheral A
   80cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cb8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   80cbc:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER |= PIO_PA28;		//pull-up
   80cbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80cc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cc4:	665a      	str	r2, [r3, #100]	; 0x64
   80cc6:	4770      	bx	lr
   80cc8:	400e0e00 	.word	0x400e0e00

00080ccc <SPI_Init>:
}

void SPI_Init(void)
{
   80ccc:	b538      	push	{r3, r4, r5, lr}
	int i;
	pmc_enable_periph_clk(ID_SPI0);
   80cce:	2018      	movs	r0, #24
   80cd0:	4b2a      	ldr	r3, [pc, #168]	; (80d7c <SPI_Init+0xb0>)
   80cd2:	4798      	blx	r3
	spi_set_writeprotect(SPI0, 0);
   80cd4:	4c2a      	ldr	r4, [pc, #168]	; (80d80 <SPI_Init+0xb4>)
   80cd6:	2100      	movs	r1, #0
   80cd8:	4620      	mov	r0, r4
   80cda:	4b2a      	ldr	r3, [pc, #168]	; (80d84 <SPI_Init+0xb8>)
   80cdc:	4798      	blx	r3
	SPI_InitPIO();
   80cde:	4b2a      	ldr	r3, [pc, #168]	; (80d88 <SPI_Init+0xbc>)
   80ce0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80ce2:	2380      	movs	r3, #128	; 0x80
   80ce4:	6023      	str	r3, [r4, #0]
   80ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  __ASM volatile ("nop");
   80cea:	bf00      	nop
	spi_reset(SPI0);	
	for(i=0;i<0xffff;i++)
   80cec:	3b01      	subs	r3, #1
   80cee:	d1fc      	bne.n	80cea <SPI_Init+0x1e>
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80cf0:	4c23      	ldr	r4, [pc, #140]	; (80d80 <SPI_Init+0xb4>)
   80cf2:	2302      	movs	r3, #2
   80cf4:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80cf6:	6863      	ldr	r3, [r4, #4]
   80cf8:	f043 0301 	orr.w	r3, r3, #1
   80cfc:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80cfe:	6863      	ldr	r3, [r4, #4]
   80d00:	f043 0310 	orr.w	r3, r3, #16
   80d04:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80d06:	6863      	ldr	r3, [r4, #4]
   80d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80d0c:	6063      	str	r3, [r4, #4]
		__NOP();
	spi_disable(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_disable_loopback(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(DEFAULT_CHIP_ID)); //NPCS[3:0]=1110b
   80d0e:	210e      	movs	r1, #14
   80d10:	4620      	mov	r0, r4
   80d12:	4b1e      	ldr	r3, [pc, #120]	; (80d8c <SPI_Init+0xc0>)
   80d14:	4798      	blx	r3
	p_spi->SPI_MR |= SPI_MR_PS;
   80d16:	6863      	ldr	r3, [r4, #4]
   80d18:	f043 0302 	orr.w	r3, r3, #2
   80d1c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80d1e:	6863      	ldr	r3, [r4, #4]
   80d20:	f023 0304 	bic.w	r3, r3, #4
   80d24:	6063      	str	r3, [r4, #4]
	spi_set_variable_peripheral_select(SPI0);
	spi_disable_peripheral_select_decode(SPI0);
	spi_set_delay_between_chip_select(SPI0, 6);
   80d26:	2106      	movs	r1, #6
   80d28:	4620      	mov	r0, r4
   80d2a:	4b19      	ldr	r3, [pc, #100]	; (80d90 <SPI_Init+0xc4>)
   80d2c:	4798      	blx	r3
	spi_set_clock_polarity(SPI0,0,false);
   80d2e:	2200      	movs	r2, #0
   80d30:	4611      	mov	r1, r2
   80d32:	4620      	mov	r0, r4
   80d34:	4b17      	ldr	r3, [pc, #92]	; (80d94 <SPI_Init+0xc8>)
   80d36:	4798      	blx	r3
	spi_set_clock_phase(SPI0, 0, true);
   80d38:	2201      	movs	r2, #1
   80d3a:	2100      	movs	r1, #0
   80d3c:	4620      	mov	r0, r4
   80d3e:	4b16      	ldr	r3, [pc, #88]	; (80d98 <SPI_Init+0xcc>)
   80d40:	4798      	blx	r3
	spi_set_baudrate_div(SPI0,0,21); //SCLK = 4Mhz
   80d42:	2215      	movs	r2, #21
   80d44:	2100      	movs	r1, #0
   80d46:	4620      	mov	r0, r4
   80d48:	4b14      	ldr	r3, [pc, #80]	; (80d9c <SPI_Init+0xd0>)
   80d4a:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0,0,0);
   80d4c:	2200      	movs	r2, #0
   80d4e:	4611      	mov	r1, r2
   80d50:	4620      	mov	r0, r4
   80d52:	4b13      	ldr	r3, [pc, #76]	; (80da0 <SPI_Init+0xd4>)
   80d54:	4798      	blx	r3
	spi_set_transfer_delay(SPI0,0,10,1); //
   80d56:	2301      	movs	r3, #1
   80d58:	220a      	movs	r2, #10
   80d5a:	2100      	movs	r1, #0
   80d5c:	4620      	mov	r0, r4
   80d5e:	4d11      	ldr	r5, [pc, #68]	; (80da4 <SPI_Init+0xd8>)
   80d60:	47a8      	blx	r5
	spi_configure_cs_behavior(SPI0, 0, SPI_CS_KEEP_LOW);
   80d62:	2208      	movs	r2, #8
   80d64:	2100      	movs	r1, #0
   80d66:	4620      	mov	r0, r4
   80d68:	4b0f      	ldr	r3, [pc, #60]	; (80da8 <SPI_Init+0xdc>)
   80d6a:	4798      	blx	r3
	SPI0->SPI_IER = 0;	
   80d6c:	2300      	movs	r3, #0
   80d6e:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80d70:	2101      	movs	r1, #1
   80d72:	6021      	str	r1, [r4, #0]
	spi_enable(SPI0);
	spi_set_writeprotect(SPI0, 1);
   80d74:	4620      	mov	r0, r4
   80d76:	4b03      	ldr	r3, [pc, #12]	; (80d84 <SPI_Init+0xb8>)
   80d78:	4798      	blx	r3
   80d7a:	bd38      	pop	{r3, r4, r5, pc}
   80d7c:	000814a1 	.word	0x000814a1
   80d80:	40008000 	.word	0x40008000
   80d84:	00080b35 	.word	0x00080b35
   80d88:	00080c5d 	.word	0x00080c5d
   80d8c:	000809d1 	.word	0x000809d1
   80d90:	000809e7 	.word	0x000809e7
   80d94:	00080a5b 	.word	0x00080a5b
   80d98:	00080a79 	.word	0x00080a79
   80d9c:	00080af1 	.word	0x00080af1
   80da0:	00080add 	.word	0x00080add
   80da4:	00080b17 	.word	0x00080b17
   80da8:	00080a97 	.word	0x00080a97

00080dac <SPIC_Write>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Write(uint16_t *data, int length, uint16_t *SR)
{
   80dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80db0:	b085      	sub	sp, #20
   80db2:	4682      	mov	sl, r0
   80db4:	4689      	mov	r9, r1
   80db6:	9201      	str	r2, [sp, #4]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80db8:	4b28      	ldr	r3, [pc, #160]	; (80e5c <SPIC_Write+0xb0>)
   80dba:	691b      	ldr	r3, [r3, #16]
   80dbc:	f013 0f01 	tst.w	r3, #1
   80dc0:	d12b      	bne.n	80e1a <SPIC_Write+0x6e>
		spi_read(SPI0,SR,&Pcs);	
	if(length>1)
   80dc2:	f1b9 0f01 	cmp.w	r9, #1
   80dc6:	dd35      	ble.n	80e34 <SPIC_Write+0x88>
	{
		for (i=0; i<(length-1);i++)
   80dc8:	f109 33ff 	add.w	r3, r9, #4294967295
   80dcc:	2b00      	cmp	r3, #0
   80dce:	dd13      	ble.n	80df8 <SPIC_Write+0x4c>
   80dd0:	f1aa 0502 	sub.w	r5, sl, #2
   80dd4:	4698      	mov	r8, r3
   80dd6:	2400      	movs	r4, #0
		{		
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80dd8:	4e20      	ldr	r6, [pc, #128]	; (80e5c <SPIC_Write+0xb0>)
   80dda:	4f21      	ldr	r7, [pc, #132]	; (80e60 <SPIC_Write+0xb4>)
				return 0;
			if(i==0)
				spi_read(SPI0,SR,&Pcs);
   80ddc:	f8df b084 	ldr.w	fp, [pc, #132]	; 80e64 <SPIC_Write+0xb8>
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80de0:	2300      	movs	r3, #0
   80de2:	461a      	mov	r2, r3
   80de4:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   80de8:	4630      	mov	r0, r6
   80dea:	47b8      	blx	r7
   80dec:	2800      	cmp	r0, #0
   80dee:	d133      	bne.n	80e58 <SPIC_Write+0xac>
			if(i==0)
   80df0:	b1d4      	cbz	r4, 80e28 <SPIC_Write+0x7c>
		for (i=0; i<(length-1);i++)
   80df2:	3401      	adds	r4, #1
   80df4:	4544      	cmp	r4, r8
   80df6:	d1f3      	bne.n	80de0 <SPIC_Write+0x34>
		}
		if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)
   80df8:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
   80dfc:	f109 39ff 	add.w	r9, r9, #4294967295
   80e00:	2301      	movs	r3, #1
   80e02:	2200      	movs	r2, #0
   80e04:	f83a 1019 	ldrh.w	r1, [sl, r9, lsl #1]
   80e08:	4814      	ldr	r0, [pc, #80]	; (80e5c <SPIC_Write+0xb0>)
   80e0a:	4c15      	ldr	r4, [pc, #84]	; (80e60 <SPIC_Write+0xb4>)
   80e0c:	47a0      	blx	r4
				return 0;
   80e0e:	fab0 f080 	clz	r0, r0
   80e12:	0940      	lsrs	r0, r0, #5
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
			return 0;
		spi_read(SPI0,SR,&Pcs);
	}
	return 1;
}
   80e14:	b005      	add	sp, #20
   80e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		spi_read(SPI0,SR,&Pcs);	
   80e1a:	f10d 020f 	add.w	r2, sp, #15
   80e1e:	9901      	ldr	r1, [sp, #4]
   80e20:	480e      	ldr	r0, [pc, #56]	; (80e5c <SPIC_Write+0xb0>)
   80e22:	4b10      	ldr	r3, [pc, #64]	; (80e64 <SPIC_Write+0xb8>)
   80e24:	4798      	blx	r3
   80e26:	e7cc      	b.n	80dc2 <SPIC_Write+0x16>
				spi_read(SPI0,SR,&Pcs);
   80e28:	f10d 020f 	add.w	r2, sp, #15
   80e2c:	9901      	ldr	r1, [sp, #4]
   80e2e:	4630      	mov	r0, r6
   80e30:	47d8      	blx	fp
   80e32:	e7de      	b.n	80df2 <SPIC_Write+0x46>
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
   80e34:	2301      	movs	r3, #1
   80e36:	2200      	movs	r2, #0
   80e38:	f8ba 1000 	ldrh.w	r1, [sl]
   80e3c:	4807      	ldr	r0, [pc, #28]	; (80e5c <SPIC_Write+0xb0>)
   80e3e:	4c08      	ldr	r4, [pc, #32]	; (80e60 <SPIC_Write+0xb4>)
   80e40:	47a0      	blx	r4
   80e42:	b108      	cbz	r0, 80e48 <SPIC_Write+0x9c>
			return 0;
   80e44:	2000      	movs	r0, #0
   80e46:	e7e5      	b.n	80e14 <SPIC_Write+0x68>
		spi_read(SPI0,SR,&Pcs);
   80e48:	f10d 020f 	add.w	r2, sp, #15
   80e4c:	9901      	ldr	r1, [sp, #4]
   80e4e:	4803      	ldr	r0, [pc, #12]	; (80e5c <SPIC_Write+0xb0>)
   80e50:	4b04      	ldr	r3, [pc, #16]	; (80e64 <SPIC_Write+0xb8>)
   80e52:	4798      	blx	r3
	return 1;
   80e54:	2001      	movs	r0, #1
   80e56:	e7dd      	b.n	80e14 <SPIC_Write+0x68>
				return 0;
   80e58:	2000      	movs	r0, #0
   80e5a:	e7db      	b.n	80e14 <SPIC_Write+0x68>
   80e5c:	40008000 	.word	0x40008000
   80e60:	00080a27 	.word	0x00080a27
   80e64:	000809f9 	.word	0x000809f9

00080e68 <SPIC_Read>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Read(uint16_t *data, int length, uint16_t *SR, uint16_t *Resp)
{
   80e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e6c:	b087      	sub	sp, #28
   80e6e:	9001      	str	r0, [sp, #4]
   80e70:	468b      	mov	fp, r1
   80e72:	9203      	str	r2, [sp, #12]
   80e74:	9302      	str	r3, [sp, #8]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80e76:	4b2a      	ldr	r3, [pc, #168]	; (80f20 <SPIC_Read+0xb8>)
   80e78:	691b      	ldr	r3, [r3, #16]
   80e7a:	f013 0f01 	tst.w	r3, #1
   80e7e:	d132      	bne.n	80ee6 <SPIC_Read+0x7e>
		spi_read(SPI0,SR,&Pcs);
	for (i=0; i<(length-1);i++)
   80e80:	f10b 33ff 	add.w	r3, fp, #4294967295
   80e84:	2b00      	cmp	r3, #0
   80e86:	dd1d      	ble.n	80ec4 <SPIC_Read+0x5c>
   80e88:	9b01      	ldr	r3, [sp, #4]
   80e8a:	1e9e      	subs	r6, r3, #2
   80e8c:	9b02      	ldr	r3, [sp, #8]
   80e8e:	1e9d      	subs	r5, r3, #2
   80e90:	f10b 3aff 	add.w	sl, fp, #4294967295
   80e94:	2400      	movs	r4, #0
	{
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80e96:	4f22      	ldr	r7, [pc, #136]	; (80f20 <SPIC_Read+0xb8>)
   80e98:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80f24 <SPIC_Read+0xbc>
			return 0;
		if(i==0)
			spi_read(SPI0,SR,&Pcs);
		else
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80e9c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80f28 <SPIC_Read+0xc0>
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80ea0:	2300      	movs	r3, #0
   80ea2:	461a      	mov	r2, r3
   80ea4:	f836 1f02 	ldrh.w	r1, [r6, #2]!
   80ea8:	4638      	mov	r0, r7
   80eaa:	47c0      	blx	r8
   80eac:	2800      	cmp	r0, #0
   80eae:	d132      	bne.n	80f16 <SPIC_Read+0xae>
		if(i==0)
   80eb0:	b304      	cbz	r4, 80ef4 <SPIC_Read+0x8c>
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80eb2:	f10d 0217 	add.w	r2, sp, #23
   80eb6:	4629      	mov	r1, r5
   80eb8:	4638      	mov	r0, r7
   80eba:	47c8      	blx	r9
	for (i=0; i<(length-1);i++)
   80ebc:	3401      	adds	r4, #1
   80ebe:	3502      	adds	r5, #2
   80ec0:	4554      	cmp	r4, sl
   80ec2:	d1ed      	bne.n	80ea0 <SPIC_Read+0x38>
	}
	if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)	
   80ec4:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
   80ec8:	f10b 3bff 	add.w	fp, fp, #4294967295
   80ecc:	ea4f 044b 	mov.w	r4, fp, lsl #1
   80ed0:	2301      	movs	r3, #1
   80ed2:	2200      	movs	r2, #0
   80ed4:	9901      	ldr	r1, [sp, #4]
   80ed6:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
   80eda:	4811      	ldr	r0, [pc, #68]	; (80f20 <SPIC_Read+0xb8>)
   80edc:	4d11      	ldr	r5, [pc, #68]	; (80f24 <SPIC_Read+0xbc>)
   80ede:	47a8      	blx	r5
   80ee0:	b170      	cbz	r0, 80f00 <SPIC_Read+0x98>
		return 0;
   80ee2:	2000      	movs	r0, #0
   80ee4:	e018      	b.n	80f18 <SPIC_Read+0xb0>
		spi_read(SPI0,SR,&Pcs);
   80ee6:	f10d 0217 	add.w	r2, sp, #23
   80eea:	9903      	ldr	r1, [sp, #12]
   80eec:	480c      	ldr	r0, [pc, #48]	; (80f20 <SPIC_Read+0xb8>)
   80eee:	4b0e      	ldr	r3, [pc, #56]	; (80f28 <SPIC_Read+0xc0>)
   80ef0:	4798      	blx	r3
   80ef2:	e7c5      	b.n	80e80 <SPIC_Read+0x18>
			spi_read(SPI0,SR,&Pcs);
   80ef4:	f10d 0217 	add.w	r2, sp, #23
   80ef8:	9903      	ldr	r1, [sp, #12]
   80efa:	4638      	mov	r0, r7
   80efc:	47c8      	blx	r9
   80efe:	e7dd      	b.n	80ebc <SPIC_Read+0x54>
	spi_read(SPI0,&Resp[length-2],&Pcs);
   80f00:	1ea1      	subs	r1, r4, #2
   80f02:	f10d 0217 	add.w	r2, sp, #23
   80f06:	9b02      	ldr	r3, [sp, #8]
   80f08:	440b      	add	r3, r1
   80f0a:	4619      	mov	r1, r3
   80f0c:	4804      	ldr	r0, [pc, #16]	; (80f20 <SPIC_Read+0xb8>)
   80f0e:	4b06      	ldr	r3, [pc, #24]	; (80f28 <SPIC_Read+0xc0>)
   80f10:	4798      	blx	r3
	return 1;
   80f12:	2001      	movs	r0, #1
   80f14:	e000      	b.n	80f18 <SPIC_Read+0xb0>
			return 0;
   80f16:	2000      	movs	r0, #0
   80f18:	b007      	add	sp, #28
   80f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f1e:	bf00      	nop
   80f20:	40008000 	.word	0x40008000
   80f24:	00080a27 	.word	0x00080a27
   80f28:	000809f9 	.word	0x000809f9

00080f2c <Timer_init>:
 */ 
#include "Timer.h"
#include "Prints.h"

void Timer_init(void)
{
   80f2c:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_TC0);
   80f2e:	201b      	movs	r0, #27
   80f30:	4c14      	ldr	r4, [pc, #80]	; (80f84 <Timer_init+0x58>)
   80f32:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_TC1);
   80f34:	201c      	movs	r0, #28
   80f36:	47a0      	blx	r4
	tc_set_writeprotect(TC0,0);
   80f38:	4c13      	ldr	r4, [pc, #76]	; (80f88 <Timer_init+0x5c>)
   80f3a:	2100      	movs	r1, #0
   80f3c:	4620      	mov	r0, r4
   80f3e:	4b13      	ldr	r3, [pc, #76]	; (80f8c <Timer_init+0x60>)
   80f40:	4798      	blx	r3
	
	REG_PIOB_ABSR |= PIO_ABSR_P25;     // Switch the multiplexer to peripheral B for TIOA0
   80f42:	4a13      	ldr	r2, [pc, #76]	; (80f90 <Timer_init+0x64>)
   80f44:	6813      	ldr	r3, [r2, #0]
   80f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80f4a:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= PIO_PDR_P25;        // Disable the GPIO on the corresponding pins
   80f4c:	3a6c      	subs	r2, #108	; 0x6c
   80f4e:	6813      	ldr	r3, [r2, #0]
   80f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80f54:	6013      	str	r3, [r2, #0]
	tc_init(TC0,0,TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC|TC_CMR_ACPA_SET|TC_CMR_ACPC_CLEAR|TC_CMR_TCCLKS_TIMER_CLOCK2); // divide MCLK by 8 
   80f56:	4a0f      	ldr	r2, [pc, #60]	; (80f94 <Timer_init+0x68>)
   80f58:	2100      	movs	r1, #0
   80f5a:	4620      	mov	r0, r4
   80f5c:	4d0e      	ldr	r5, [pc, #56]	; (80f98 <Timer_init+0x6c>)
   80f5e:	47a8      	blx	r5
	tc_init(TC0,1,TC_CMR_TCCLKS_TIMER_CLOCK4); // divide MCLK by 128
   80f60:	2203      	movs	r2, #3
   80f62:	2101      	movs	r1, #1
   80f64:	4620      	mov	r0, r4
   80f66:	47a8      	blx	r5
	TC0->TC_CHANNEL[0].TC_RC = 210;//238; // 210 cycles of MCLK/8 to reach 50Khz  -- 420 to reach 25KHz -- 230 to 45.6KHz~
   80f68:	23d2      	movs	r3, #210	; 0xd2
   80f6a:	61e3      	str	r3, [r4, #28]
	TC0->TC_CHANNEL[0].TC_RA = 105;//119; // 105 for 50Khz , 210 for 25kH
   80f6c:	2369      	movs	r3, #105	; 0x69
   80f6e:	6163      	str	r3, [r4, #20]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80f70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80f74:	4b09      	ldr	r3, [pc, #36]	; (80f9c <Timer_init+0x70>)
   80f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	NVIC_DisableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC0_IRQn);
	//tc_enable_interrupt(TC0,0,TC_IER_CPCS);
	tc_start(TC0,0);
   80f7a:	2100      	movs	r1, #0
   80f7c:	4620      	mov	r0, r4
   80f7e:	4b08      	ldr	r3, [pc, #32]	; (80fa0 <Timer_init+0x74>)
   80f80:	4798      	blx	r3
   80f82:	bd38      	pop	{r3, r4, r5, pc}
   80f84:	000814a1 	.word	0x000814a1
   80f88:	40080000 	.word	0x40080000
   80f8c:	00080b79 	.word	0x00080b79
   80f90:	400e1070 	.word	0x400e1070
   80f94:	0009c001 	.word	0x0009c001
   80f98:	00080b51 	.word	0x00080b51
   80f9c:	e000e100 	.word	0xe000e100
   80fa0:	00080b69 	.word	0x00080b69

00080fa4 <Timer_Sleep>:
	
}

void Timer_Sleep(uint32_t msDelay)
{
   80fa4:	b510      	push	{r4, lr}
   80fa6:	4604      	mov	r4, r0
	tc_start(TC0,1);	
   80fa8:	2101      	movs	r1, #1
   80faa:	4808      	ldr	r0, [pc, #32]	; (80fcc <Timer_Sleep+0x28>)
   80fac:	4b08      	ldr	r3, [pc, #32]	; (80fd0 <Timer_Sleep+0x2c>)
   80fae:	4798      	blx	r3
	//PrintLn("wait\n");
	while(TC0->TC_CHANNEL[1].TC_CV < 656*msDelay);
   80fb0:	f44f 7024 	mov.w	r0, #656	; 0x290
   80fb4:	fb00 f004 	mul.w	r0, r0, r4
   80fb8:	4a04      	ldr	r2, [pc, #16]	; (80fcc <Timer_Sleep+0x28>)
   80fba:	6d13      	ldr	r3, [r2, #80]	; 0x50
   80fbc:	4283      	cmp	r3, r0
   80fbe:	d3fc      	bcc.n	80fba <Timer_Sleep+0x16>
	//PrintLn("done wait\n");
	tc_stop(TC0,1);
   80fc0:	2101      	movs	r1, #1
   80fc2:	4802      	ldr	r0, [pc, #8]	; (80fcc <Timer_Sleep+0x28>)
   80fc4:	4b03      	ldr	r3, [pc, #12]	; (80fd4 <Timer_Sleep+0x30>)
   80fc6:	4798      	blx	r3
   80fc8:	bd10      	pop	{r4, pc}
   80fca:	bf00      	nop
   80fcc:	40080000 	.word	0x40080000
   80fd0:	00080b69 	.word	0x00080b69
   80fd4:	00080b71 	.word	0x00080b71

00080fd8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80fd8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80fda:	480e      	ldr	r0, [pc, #56]	; (81014 <sysclk_init+0x3c>)
   80fdc:	4b0e      	ldr	r3, [pc, #56]	; (81018 <sysclk_init+0x40>)
   80fde:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80fe0:	213e      	movs	r1, #62	; 0x3e
   80fe2:	2000      	movs	r0, #0
   80fe4:	4b0d      	ldr	r3, [pc, #52]	; (8101c <sysclk_init+0x44>)
   80fe6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80fe8:	4c0d      	ldr	r4, [pc, #52]	; (81020 <sysclk_init+0x48>)
   80fea:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80fec:	2800      	cmp	r0, #0
   80fee:	d0fc      	beq.n	80fea <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80ff0:	4b0c      	ldr	r3, [pc, #48]	; (81024 <sysclk_init+0x4c>)
   80ff2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80ff4:	4a0c      	ldr	r2, [pc, #48]	; (81028 <sysclk_init+0x50>)
   80ff6:	4b0d      	ldr	r3, [pc, #52]	; (8102c <sysclk_init+0x54>)
   80ff8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80ffa:	4c0d      	ldr	r4, [pc, #52]	; (81030 <sysclk_init+0x58>)
   80ffc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80ffe:	2800      	cmp	r0, #0
   81000:	d0fc      	beq.n	80ffc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81002:	2010      	movs	r0, #16
   81004:	4b0b      	ldr	r3, [pc, #44]	; (81034 <sysclk_init+0x5c>)
   81006:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81008:	4b0b      	ldr	r3, [pc, #44]	; (81038 <sysclk_init+0x60>)
   8100a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8100c:	4801      	ldr	r0, [pc, #4]	; (81014 <sysclk_init+0x3c>)
   8100e:	4b02      	ldr	r3, [pc, #8]	; (81018 <sysclk_init+0x40>)
   81010:	4798      	blx	r3
   81012:	bd10      	pop	{r4, pc}
   81014:	0501bd00 	.word	0x0501bd00
   81018:	2007013d 	.word	0x2007013d
   8101c:	0008141d 	.word	0x0008141d
   81020:	00081471 	.word	0x00081471
   81024:	00081481 	.word	0x00081481
   81028:	200d3f01 	.word	0x200d3f01
   8102c:	400e0600 	.word	0x400e0600
   81030:	00081491 	.word	0x00081491
   81034:	000813b9 	.word	0x000813b9
   81038:	0008155d 	.word	0x0008155d

0008103c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8103c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8103e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81042:	4b16      	ldr	r3, [pc, #88]	; (8109c <board_init+0x60>)
   81044:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81046:	200b      	movs	r0, #11
   81048:	4c15      	ldr	r4, [pc, #84]	; (810a0 <board_init+0x64>)
   8104a:	47a0      	blx	r4
   8104c:	200c      	movs	r0, #12
   8104e:	47a0      	blx	r4
   81050:	200d      	movs	r0, #13
   81052:	47a0      	blx	r4
   81054:	200e      	movs	r0, #14
   81056:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81058:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8105c:	203b      	movs	r0, #59	; 0x3b
   8105e:	4c11      	ldr	r4, [pc, #68]	; (810a4 <board_init+0x68>)
   81060:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81062:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81066:	2055      	movs	r0, #85	; 0x55
   81068:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8106a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8106e:	2056      	movs	r0, #86	; 0x56
   81070:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81072:	490d      	ldr	r1, [pc, #52]	; (810a8 <board_init+0x6c>)
   81074:	2068      	movs	r0, #104	; 0x68
   81076:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81078:	490c      	ldr	r1, [pc, #48]	; (810ac <board_init+0x70>)
   8107a:	205c      	movs	r0, #92	; 0x5c
   8107c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8107e:	4a0c      	ldr	r2, [pc, #48]	; (810b0 <board_init+0x74>)
   81080:	f44f 7140 	mov.w	r1, #768	; 0x300
   81084:	480b      	ldr	r0, [pc, #44]	; (810b4 <board_init+0x78>)
   81086:	4b0c      	ldr	r3, [pc, #48]	; (810b8 <board_init+0x7c>)
   81088:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8108a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8108e:	202b      	movs	r0, #43	; 0x2b
   81090:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81092:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81096:	202a      	movs	r0, #42	; 0x2a
   81098:	47a0      	blx	r4
   8109a:	bd10      	pop	{r4, pc}
   8109c:	400e1a50 	.word	0x400e1a50
   810a0:	000814a1 	.word	0x000814a1
   810a4:	000811ad 	.word	0x000811ad
   810a8:	28000079 	.word	0x28000079
   810ac:	28000001 	.word	0x28000001
   810b0:	08000001 	.word	0x08000001
   810b4:	400e0e00 	.word	0x400e0e00
   810b8:	0008127d 	.word	0x0008127d

000810bc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   810bc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   810be:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   810c2:	d016      	beq.n	810f2 <pio_set_peripheral+0x36>
   810c4:	d80b      	bhi.n	810de <pio_set_peripheral+0x22>
   810c6:	b149      	cbz	r1, 810dc <pio_set_peripheral+0x20>
   810c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   810cc:	d105      	bne.n	810da <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   810ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   810d0:	6f01      	ldr	r1, [r0, #112]	; 0x70
   810d2:	400b      	ands	r3, r1
   810d4:	ea23 0302 	bic.w	r3, r3, r2
   810d8:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   810da:	6042      	str	r2, [r0, #4]
   810dc:	4770      	bx	lr
	switch (ul_type) {
   810de:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   810e2:	d0fb      	beq.n	810dc <pio_set_peripheral+0x20>
   810e4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   810e8:	d0f8      	beq.n	810dc <pio_set_peripheral+0x20>
   810ea:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   810ee:	d1f4      	bne.n	810da <pio_set_peripheral+0x1e>
   810f0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   810f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   810f4:	4313      	orrs	r3, r2
   810f6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   810f8:	e7ef      	b.n	810da <pio_set_peripheral+0x1e>

000810fa <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   810fa:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   810fc:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81100:	bf14      	ite	ne
   81102:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81104:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81106:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8110a:	bf14      	ite	ne
   8110c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8110e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81110:	f012 0f02 	tst.w	r2, #2
   81114:	d107      	bne.n	81126 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81116:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8111a:	bf18      	it	ne
   8111c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81120:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81122:	6001      	str	r1, [r0, #0]
   81124:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81126:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8112a:	e7f9      	b.n	81120 <pio_set_input+0x26>

0008112c <pio_set_output>:
{
   8112c:	b410      	push	{r4}
   8112e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81130:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81132:	b944      	cbnz	r4, 81146 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81134:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81136:	b143      	cbz	r3, 8114a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81138:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8113a:	b942      	cbnz	r2, 8114e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8113c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8113e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81140:	6001      	str	r1, [r0, #0]
}
   81142:	bc10      	pop	{r4}
   81144:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81146:	6641      	str	r1, [r0, #100]	; 0x64
   81148:	e7f5      	b.n	81136 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8114a:	6541      	str	r1, [r0, #84]	; 0x54
   8114c:	e7f5      	b.n	8113a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8114e:	6301      	str	r1, [r0, #48]	; 0x30
   81150:	e7f5      	b.n	8113e <pio_set_output+0x12>

00081152 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81152:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81154:	4770      	bx	lr

00081156 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81156:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81158:	4770      	bx	lr

0008115a <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8115a:	0943      	lsrs	r3, r0, #5
   8115c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81160:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81164:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   81166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81168:	f000 001f 	and.w	r0, r0, #31
   8116c:	fa23 f000 	lsr.w	r0, r3, r0
}
   81170:	f000 0001 	and.w	r0, r0, #1
   81174:	4770      	bx	lr

00081176 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81176:	0943      	lsrs	r3, r0, #5
   81178:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8117c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81180:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81182:	f000 001f 	and.w	r0, r0, #31
   81186:	2201      	movs	r2, #1
   81188:	fa02 f000 	lsl.w	r0, r2, r0
   8118c:	6318      	str	r0, [r3, #48]	; 0x30
   8118e:	4770      	bx	lr

00081190 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81190:	0943      	lsrs	r3, r0, #5
   81192:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81196:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8119a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8119c:	f000 001f 	and.w	r0, r0, #31
   811a0:	2201      	movs	r2, #1
   811a2:	fa02 f000 	lsl.w	r0, r2, r0
   811a6:	6358      	str	r0, [r3, #52]	; 0x34
   811a8:	4770      	bx	lr
	...

000811ac <pio_configure_pin>:
{
   811ac:	b570      	push	{r4, r5, r6, lr}
   811ae:	b082      	sub	sp, #8
   811b0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811b2:	0943      	lsrs	r3, r0, #5
   811b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811b8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811bc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   811be:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   811c2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   811c6:	d031      	beq.n	8122c <pio_configure_pin+0x80>
   811c8:	d816      	bhi.n	811f8 <pio_configure_pin+0x4c>
   811ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   811ce:	d01b      	beq.n	81208 <pio_configure_pin+0x5c>
   811d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   811d4:	d116      	bne.n	81204 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   811d6:	f000 001f 	and.w	r0, r0, #31
   811da:	2601      	movs	r6, #1
   811dc:	4086      	lsls	r6, r0
   811de:	4632      	mov	r2, r6
   811e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   811e4:	4620      	mov	r0, r4
   811e6:	4b22      	ldr	r3, [pc, #136]	; (81270 <pio_configure_pin+0xc4>)
   811e8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   811ea:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   811ee:	bf14      	ite	ne
   811f0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   811f2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   811f4:	2001      	movs	r0, #1
   811f6:	e017      	b.n	81228 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   811f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   811fc:	d021      	beq.n	81242 <pio_configure_pin+0x96>
   811fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81202:	d01e      	beq.n	81242 <pio_configure_pin+0x96>
		return 0;
   81204:	2000      	movs	r0, #0
   81206:	e00f      	b.n	81228 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81208:	f000 001f 	and.w	r0, r0, #31
   8120c:	2601      	movs	r6, #1
   8120e:	4086      	lsls	r6, r0
   81210:	4632      	mov	r2, r6
   81212:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81216:	4620      	mov	r0, r4
   81218:	4b15      	ldr	r3, [pc, #84]	; (81270 <pio_configure_pin+0xc4>)
   8121a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8121c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81220:	bf14      	ite	ne
   81222:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81224:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81226:	2001      	movs	r0, #1
}
   81228:	b002      	add	sp, #8
   8122a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8122c:	f000 011f 	and.w	r1, r0, #31
   81230:	2601      	movs	r6, #1
   81232:	462a      	mov	r2, r5
   81234:	fa06 f101 	lsl.w	r1, r6, r1
   81238:	4620      	mov	r0, r4
   8123a:	4b0e      	ldr	r3, [pc, #56]	; (81274 <pio_configure_pin+0xc8>)
   8123c:	4798      	blx	r3
	return 1;
   8123e:	4630      	mov	r0, r6
		break;
   81240:	e7f2      	b.n	81228 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81242:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81246:	f000 011f 	and.w	r1, r0, #31
   8124a:	2601      	movs	r6, #1
   8124c:	ea05 0306 	and.w	r3, r5, r6
   81250:	9300      	str	r3, [sp, #0]
   81252:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81256:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8125a:	bf14      	ite	ne
   8125c:	2200      	movne	r2, #0
   8125e:	2201      	moveq	r2, #1
   81260:	fa06 f101 	lsl.w	r1, r6, r1
   81264:	4620      	mov	r0, r4
   81266:	4c04      	ldr	r4, [pc, #16]	; (81278 <pio_configure_pin+0xcc>)
   81268:	47a0      	blx	r4
	return 1;
   8126a:	4630      	mov	r0, r6
		break;
   8126c:	e7dc      	b.n	81228 <pio_configure_pin+0x7c>
   8126e:	bf00      	nop
   81270:	000810bd 	.word	0x000810bd
   81274:	000810fb 	.word	0x000810fb
   81278:	0008112d 	.word	0x0008112d

0008127c <pio_configure_pin_group>:
{
   8127c:	b570      	push	{r4, r5, r6, lr}
   8127e:	b082      	sub	sp, #8
   81280:	4605      	mov	r5, r0
   81282:	460e      	mov	r6, r1
   81284:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81286:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8128a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8128e:	d027      	beq.n	812e0 <pio_configure_pin_group+0x64>
   81290:	d811      	bhi.n	812b6 <pio_configure_pin_group+0x3a>
   81292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81296:	d016      	beq.n	812c6 <pio_configure_pin_group+0x4a>
   81298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8129c:	d111      	bne.n	812c2 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8129e:	460a      	mov	r2, r1
   812a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   812a4:	4b19      	ldr	r3, [pc, #100]	; (8130c <pio_configure_pin_group+0x90>)
   812a6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   812a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   812ac:	bf14      	ite	ne
   812ae:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   812b0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   812b2:	2001      	movs	r0, #1
   812b4:	e012      	b.n	812dc <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   812b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   812ba:	d015      	beq.n	812e8 <pio_configure_pin_group+0x6c>
   812bc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   812c0:	d012      	beq.n	812e8 <pio_configure_pin_group+0x6c>
		return 0;
   812c2:	2000      	movs	r0, #0
   812c4:	e00a      	b.n	812dc <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   812c6:	460a      	mov	r2, r1
   812c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   812cc:	4b0f      	ldr	r3, [pc, #60]	; (8130c <pio_configure_pin_group+0x90>)
   812ce:	4798      	blx	r3
	if (ul_pull_up_enable) {
   812d0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   812d4:	bf14      	ite	ne
   812d6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   812d8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   812da:	2001      	movs	r0, #1
}
   812dc:	b002      	add	sp, #8
   812de:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   812e0:	4b0b      	ldr	r3, [pc, #44]	; (81310 <pio_configure_pin_group+0x94>)
   812e2:	4798      	blx	r3
	return 1;
   812e4:	2001      	movs	r0, #1
		break;
   812e6:	e7f9      	b.n	812dc <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   812e8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   812ec:	f004 0301 	and.w	r3, r4, #1
   812f0:	9300      	str	r3, [sp, #0]
   812f2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   812f6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   812fa:	bf14      	ite	ne
   812fc:	2200      	movne	r2, #0
   812fe:	2201      	moveq	r2, #1
   81300:	4631      	mov	r1, r6
   81302:	4628      	mov	r0, r5
   81304:	4c03      	ldr	r4, [pc, #12]	; (81314 <pio_configure_pin_group+0x98>)
   81306:	47a0      	blx	r4
	return 1;
   81308:	2001      	movs	r0, #1
		break;
   8130a:	e7e7      	b.n	812dc <pio_configure_pin_group+0x60>
   8130c:	000810bd 	.word	0x000810bd
   81310:	000810fb 	.word	0x000810fb
   81314:	0008112d 	.word	0x0008112d

00081318 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8131c:	4604      	mov	r4, r0
   8131e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81320:	4b0e      	ldr	r3, [pc, #56]	; (8135c <pio_handler_process+0x44>)
   81322:	4798      	blx	r3
   81324:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81326:	4620      	mov	r0, r4
   81328:	4b0d      	ldr	r3, [pc, #52]	; (81360 <pio_handler_process+0x48>)
   8132a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8132c:	4005      	ands	r5, r0
   8132e:	d013      	beq.n	81358 <pio_handler_process+0x40>
   81330:	4c0c      	ldr	r4, [pc, #48]	; (81364 <pio_handler_process+0x4c>)
   81332:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81336:	e003      	b.n	81340 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81338:	42b4      	cmp	r4, r6
   8133a:	d00d      	beq.n	81358 <pio_handler_process+0x40>
   8133c:	3410      	adds	r4, #16
		while (status != 0) {
   8133e:	b15d      	cbz	r5, 81358 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81340:	6820      	ldr	r0, [r4, #0]
   81342:	4540      	cmp	r0, r8
   81344:	d1f8      	bne.n	81338 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81346:	6861      	ldr	r1, [r4, #4]
   81348:	4229      	tst	r1, r5
   8134a:	d0f5      	beq.n	81338 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8134c:	68e3      	ldr	r3, [r4, #12]
   8134e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81350:	6863      	ldr	r3, [r4, #4]
   81352:	ea25 0503 	bic.w	r5, r5, r3
   81356:	e7ef      	b.n	81338 <pio_handler_process+0x20>
   81358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8135c:	00081153 	.word	0x00081153
   81360:	00081157 	.word	0x00081157
   81364:	20071090 	.word	0x20071090

00081368 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81368:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8136a:	210b      	movs	r1, #11
   8136c:	4801      	ldr	r0, [pc, #4]	; (81374 <PIOA_Handler+0xc>)
   8136e:	4b02      	ldr	r3, [pc, #8]	; (81378 <PIOA_Handler+0x10>)
   81370:	4798      	blx	r3
   81372:	bd08      	pop	{r3, pc}
   81374:	400e0e00 	.word	0x400e0e00
   81378:	00081319 	.word	0x00081319

0008137c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8137c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8137e:	210c      	movs	r1, #12
   81380:	4801      	ldr	r0, [pc, #4]	; (81388 <PIOB_Handler+0xc>)
   81382:	4b02      	ldr	r3, [pc, #8]	; (8138c <PIOB_Handler+0x10>)
   81384:	4798      	blx	r3
   81386:	bd08      	pop	{r3, pc}
   81388:	400e1000 	.word	0x400e1000
   8138c:	00081319 	.word	0x00081319

00081390 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81390:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81392:	210d      	movs	r1, #13
   81394:	4801      	ldr	r0, [pc, #4]	; (8139c <PIOC_Handler+0xc>)
   81396:	4b02      	ldr	r3, [pc, #8]	; (813a0 <PIOC_Handler+0x10>)
   81398:	4798      	blx	r3
   8139a:	bd08      	pop	{r3, pc}
   8139c:	400e1200 	.word	0x400e1200
   813a0:	00081319 	.word	0x00081319

000813a4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   813a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   813a6:	210e      	movs	r1, #14
   813a8:	4801      	ldr	r0, [pc, #4]	; (813b0 <PIOD_Handler+0xc>)
   813aa:	4b02      	ldr	r3, [pc, #8]	; (813b4 <PIOD_Handler+0x10>)
   813ac:	4798      	blx	r3
   813ae:	bd08      	pop	{r3, pc}
   813b0:	400e1400 	.word	0x400e1400
   813b4:	00081319 	.word	0x00081319

000813b8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   813b8:	4a17      	ldr	r2, [pc, #92]	; (81418 <pmc_switch_mck_to_pllack+0x60>)
   813ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
   813bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   813c0:	4318      	orrs	r0, r3
   813c2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   813c4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   813c6:	f013 0f08 	tst.w	r3, #8
   813ca:	d10a      	bne.n	813e2 <pmc_switch_mck_to_pllack+0x2a>
   813cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   813d0:	4911      	ldr	r1, [pc, #68]	; (81418 <pmc_switch_mck_to_pllack+0x60>)
   813d2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   813d4:	f012 0f08 	tst.w	r2, #8
   813d8:	d103      	bne.n	813e2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   813da:	3b01      	subs	r3, #1
   813dc:	d1f9      	bne.n	813d2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   813de:	2001      	movs	r0, #1
   813e0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   813e2:	4a0d      	ldr	r2, [pc, #52]	; (81418 <pmc_switch_mck_to_pllack+0x60>)
   813e4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   813e6:	f023 0303 	bic.w	r3, r3, #3
   813ea:	f043 0302 	orr.w	r3, r3, #2
   813ee:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   813f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   813f2:	f013 0f08 	tst.w	r3, #8
   813f6:	d10a      	bne.n	8140e <pmc_switch_mck_to_pllack+0x56>
   813f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   813fc:	4906      	ldr	r1, [pc, #24]	; (81418 <pmc_switch_mck_to_pllack+0x60>)
   813fe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81400:	f012 0f08 	tst.w	r2, #8
   81404:	d105      	bne.n	81412 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81406:	3b01      	subs	r3, #1
   81408:	d1f9      	bne.n	813fe <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8140a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8140c:	4770      	bx	lr
	return 0;
   8140e:	2000      	movs	r0, #0
   81410:	4770      	bx	lr
   81412:	2000      	movs	r0, #0
   81414:	4770      	bx	lr
   81416:	bf00      	nop
   81418:	400e0600 	.word	0x400e0600

0008141c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8141c:	b9c8      	cbnz	r0, 81452 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8141e:	4a11      	ldr	r2, [pc, #68]	; (81464 <pmc_switch_mainck_to_xtal+0x48>)
   81420:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81422:	0209      	lsls	r1, r1, #8
   81424:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81426:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8142a:	f023 0303 	bic.w	r3, r3, #3
   8142e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81432:	f043 0301 	orr.w	r3, r3, #1
   81436:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81438:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8143a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8143c:	f013 0f01 	tst.w	r3, #1
   81440:	d0fb      	beq.n	8143a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81442:	4a08      	ldr	r2, [pc, #32]	; (81464 <pmc_switch_mainck_to_xtal+0x48>)
   81444:	6a13      	ldr	r3, [r2, #32]
   81446:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8144a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8144e:	6213      	str	r3, [r2, #32]
   81450:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81452:	4904      	ldr	r1, [pc, #16]	; (81464 <pmc_switch_mainck_to_xtal+0x48>)
   81454:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81456:	4a04      	ldr	r2, [pc, #16]	; (81468 <pmc_switch_mainck_to_xtal+0x4c>)
   81458:	401a      	ands	r2, r3
   8145a:	4b04      	ldr	r3, [pc, #16]	; (8146c <pmc_switch_mainck_to_xtal+0x50>)
   8145c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8145e:	620b      	str	r3, [r1, #32]
   81460:	4770      	bx	lr
   81462:	bf00      	nop
   81464:	400e0600 	.word	0x400e0600
   81468:	fec8fffc 	.word	0xfec8fffc
   8146c:	01370002 	.word	0x01370002

00081470 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81470:	4b02      	ldr	r3, [pc, #8]	; (8147c <pmc_osc_is_ready_mainck+0xc>)
   81472:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81474:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81478:	4770      	bx	lr
   8147a:	bf00      	nop
   8147c:	400e0600 	.word	0x400e0600

00081480 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81480:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81484:	4b01      	ldr	r3, [pc, #4]	; (8148c <pmc_disable_pllack+0xc>)
   81486:	629a      	str	r2, [r3, #40]	; 0x28
   81488:	4770      	bx	lr
   8148a:	bf00      	nop
   8148c:	400e0600 	.word	0x400e0600

00081490 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81490:	4b02      	ldr	r3, [pc, #8]	; (8149c <pmc_is_locked_pllack+0xc>)
   81492:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81494:	f000 0002 	and.w	r0, r0, #2
   81498:	4770      	bx	lr
   8149a:	bf00      	nop
   8149c:	400e0600 	.word	0x400e0600

000814a0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   814a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   814a4:	4b05      	ldr	r3, [pc, #20]	; (814bc <pmc_enable_periph_clk+0x1c>)
   814a6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   814aa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   814ae:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   814b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   814b6:	2000      	movs	r0, #0
   814b8:	4770      	bx	lr
   814ba:	bf00      	nop
   814bc:	400e0600 	.word	0x400e0600

000814c0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   814c0:	e7fe      	b.n	814c0 <Dummy_Handler>
	...

000814c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   814c4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   814c6:	4b1c      	ldr	r3, [pc, #112]	; (81538 <Reset_Handler+0x74>)
   814c8:	4a1c      	ldr	r2, [pc, #112]	; (8153c <Reset_Handler+0x78>)
   814ca:	429a      	cmp	r2, r3
   814cc:	d010      	beq.n	814f0 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   814ce:	4b1c      	ldr	r3, [pc, #112]	; (81540 <Reset_Handler+0x7c>)
   814d0:	4a19      	ldr	r2, [pc, #100]	; (81538 <Reset_Handler+0x74>)
   814d2:	429a      	cmp	r2, r3
   814d4:	d20c      	bcs.n	814f0 <Reset_Handler+0x2c>
   814d6:	3b01      	subs	r3, #1
   814d8:	1a9b      	subs	r3, r3, r2
   814da:	f023 0303 	bic.w	r3, r3, #3
   814de:	3304      	adds	r3, #4
   814e0:	4413      	add	r3, r2
   814e2:	4916      	ldr	r1, [pc, #88]	; (8153c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   814e4:	f851 0b04 	ldr.w	r0, [r1], #4
   814e8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   814ec:	429a      	cmp	r2, r3
   814ee:	d1f9      	bne.n	814e4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   814f0:	4b14      	ldr	r3, [pc, #80]	; (81544 <Reset_Handler+0x80>)
   814f2:	4a15      	ldr	r2, [pc, #84]	; (81548 <Reset_Handler+0x84>)
   814f4:	429a      	cmp	r2, r3
   814f6:	d20a      	bcs.n	8150e <Reset_Handler+0x4a>
   814f8:	3b01      	subs	r3, #1
   814fa:	1a9b      	subs	r3, r3, r2
   814fc:	f023 0303 	bic.w	r3, r3, #3
   81500:	3304      	adds	r3, #4
   81502:	4413      	add	r3, r2
		*pDest++ = 0;
   81504:	2100      	movs	r1, #0
   81506:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8150a:	4293      	cmp	r3, r2
   8150c:	d1fb      	bne.n	81506 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8150e:	4b0f      	ldr	r3, [pc, #60]	; (8154c <Reset_Handler+0x88>)
   81510:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81514:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81518:	490d      	ldr	r1, [pc, #52]	; (81550 <Reset_Handler+0x8c>)
   8151a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8151c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81524:	d203      	bcs.n	8152e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81526:	688b      	ldr	r3, [r1, #8]
   81528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8152c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8152e:	4b09      	ldr	r3, [pc, #36]	; (81554 <Reset_Handler+0x90>)
   81530:	4798      	blx	r3

	/* Branch to main function */
	main();
   81532:	4b09      	ldr	r3, [pc, #36]	; (81558 <Reset_Handler+0x94>)
   81534:	4798      	blx	r3
   81536:	e7fe      	b.n	81536 <Reset_Handler+0x72>
   81538:	20070000 	.word	0x20070000
   8153c:	00086b54 	.word	0x00086b54
   81540:	20070f70 	.word	0x20070f70
   81544:	200711d8 	.word	0x200711d8
   81548:	20070f70 	.word	0x20070f70
   8154c:	00080000 	.word	0x00080000
   81550:	e000ed00 	.word	0xe000ed00
   81554:	00081f41 	.word	0x00081f41
   81558:	00081701 	.word	0x00081701

0008155c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8155c:	4b3d      	ldr	r3, [pc, #244]	; (81654 <SystemCoreClockUpdate+0xf8>)
   8155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81560:	f003 0303 	and.w	r3, r3, #3
   81564:	2b03      	cmp	r3, #3
   81566:	d80e      	bhi.n	81586 <SystemCoreClockUpdate+0x2a>
   81568:	e8df f003 	tbb	[pc, r3]
   8156c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81570:	4b39      	ldr	r3, [pc, #228]	; (81658 <SystemCoreClockUpdate+0xfc>)
   81572:	695b      	ldr	r3, [r3, #20]
   81574:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81578:	bf14      	ite	ne
   8157a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8157e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81582:	4b36      	ldr	r3, [pc, #216]	; (8165c <SystemCoreClockUpdate+0x100>)
   81584:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81586:	4b33      	ldr	r3, [pc, #204]	; (81654 <SystemCoreClockUpdate+0xf8>)
   81588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8158a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8158e:	2b70      	cmp	r3, #112	; 0x70
   81590:	d057      	beq.n	81642 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81592:	4b30      	ldr	r3, [pc, #192]	; (81654 <SystemCoreClockUpdate+0xf8>)
   81594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81596:	4931      	ldr	r1, [pc, #196]	; (8165c <SystemCoreClockUpdate+0x100>)
   81598:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8159c:	680b      	ldr	r3, [r1, #0]
   8159e:	40d3      	lsrs	r3, r2
   815a0:	600b      	str	r3, [r1, #0]
   815a2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   815a4:	4b2b      	ldr	r3, [pc, #172]	; (81654 <SystemCoreClockUpdate+0xf8>)
   815a6:	6a1b      	ldr	r3, [r3, #32]
   815a8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   815ac:	d003      	beq.n	815b6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   815ae:	4a2c      	ldr	r2, [pc, #176]	; (81660 <SystemCoreClockUpdate+0x104>)
   815b0:	4b2a      	ldr	r3, [pc, #168]	; (8165c <SystemCoreClockUpdate+0x100>)
   815b2:	601a      	str	r2, [r3, #0]
   815b4:	e7e7      	b.n	81586 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   815b6:	4a2b      	ldr	r2, [pc, #172]	; (81664 <SystemCoreClockUpdate+0x108>)
   815b8:	4b28      	ldr	r3, [pc, #160]	; (8165c <SystemCoreClockUpdate+0x100>)
   815ba:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   815bc:	4b25      	ldr	r3, [pc, #148]	; (81654 <SystemCoreClockUpdate+0xf8>)
   815be:	6a1b      	ldr	r3, [r3, #32]
   815c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   815c4:	2b10      	cmp	r3, #16
   815c6:	d005      	beq.n	815d4 <SystemCoreClockUpdate+0x78>
   815c8:	2b20      	cmp	r3, #32
   815ca:	d1dc      	bne.n	81586 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   815cc:	4a24      	ldr	r2, [pc, #144]	; (81660 <SystemCoreClockUpdate+0x104>)
   815ce:	4b23      	ldr	r3, [pc, #140]	; (8165c <SystemCoreClockUpdate+0x100>)
   815d0:	601a      	str	r2, [r3, #0]
				break;
   815d2:	e7d8      	b.n	81586 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   815d4:	4a24      	ldr	r2, [pc, #144]	; (81668 <SystemCoreClockUpdate+0x10c>)
   815d6:	4b21      	ldr	r3, [pc, #132]	; (8165c <SystemCoreClockUpdate+0x100>)
   815d8:	601a      	str	r2, [r3, #0]
				break;
   815da:	e7d4      	b.n	81586 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   815dc:	4b1d      	ldr	r3, [pc, #116]	; (81654 <SystemCoreClockUpdate+0xf8>)
   815de:	6a1b      	ldr	r3, [r3, #32]
   815e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   815e4:	d00c      	beq.n	81600 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   815e6:	4a1e      	ldr	r2, [pc, #120]	; (81660 <SystemCoreClockUpdate+0x104>)
   815e8:	4b1c      	ldr	r3, [pc, #112]	; (8165c <SystemCoreClockUpdate+0x100>)
   815ea:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   815ec:	4b19      	ldr	r3, [pc, #100]	; (81654 <SystemCoreClockUpdate+0xf8>)
   815ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   815f0:	f003 0303 	and.w	r3, r3, #3
   815f4:	2b02      	cmp	r3, #2
   815f6:	d016      	beq.n	81626 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   815f8:	4a1c      	ldr	r2, [pc, #112]	; (8166c <SystemCoreClockUpdate+0x110>)
   815fa:	4b18      	ldr	r3, [pc, #96]	; (8165c <SystemCoreClockUpdate+0x100>)
   815fc:	601a      	str	r2, [r3, #0]
   815fe:	e7c2      	b.n	81586 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81600:	4a18      	ldr	r2, [pc, #96]	; (81664 <SystemCoreClockUpdate+0x108>)
   81602:	4b16      	ldr	r3, [pc, #88]	; (8165c <SystemCoreClockUpdate+0x100>)
   81604:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81606:	4b13      	ldr	r3, [pc, #76]	; (81654 <SystemCoreClockUpdate+0xf8>)
   81608:	6a1b      	ldr	r3, [r3, #32]
   8160a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8160e:	2b10      	cmp	r3, #16
   81610:	d005      	beq.n	8161e <SystemCoreClockUpdate+0xc2>
   81612:	2b20      	cmp	r3, #32
   81614:	d1ea      	bne.n	815ec <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81616:	4a12      	ldr	r2, [pc, #72]	; (81660 <SystemCoreClockUpdate+0x104>)
   81618:	4b10      	ldr	r3, [pc, #64]	; (8165c <SystemCoreClockUpdate+0x100>)
   8161a:	601a      	str	r2, [r3, #0]
				break;
   8161c:	e7e6      	b.n	815ec <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8161e:	4a12      	ldr	r2, [pc, #72]	; (81668 <SystemCoreClockUpdate+0x10c>)
   81620:	4b0e      	ldr	r3, [pc, #56]	; (8165c <SystemCoreClockUpdate+0x100>)
   81622:	601a      	str	r2, [r3, #0]
				break;
   81624:	e7e2      	b.n	815ec <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81626:	4a0b      	ldr	r2, [pc, #44]	; (81654 <SystemCoreClockUpdate+0xf8>)
   81628:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8162a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8162c:	480b      	ldr	r0, [pc, #44]	; (8165c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8162e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81632:	6803      	ldr	r3, [r0, #0]
   81634:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81638:	b2d2      	uxtb	r2, r2
   8163a:	fbb3 f3f2 	udiv	r3, r3, r2
   8163e:	6003      	str	r3, [r0, #0]
   81640:	e7a1      	b.n	81586 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81642:	4a06      	ldr	r2, [pc, #24]	; (8165c <SystemCoreClockUpdate+0x100>)
   81644:	6813      	ldr	r3, [r2, #0]
   81646:	490a      	ldr	r1, [pc, #40]	; (81670 <SystemCoreClockUpdate+0x114>)
   81648:	fba1 1303 	umull	r1, r3, r1, r3
   8164c:	085b      	lsrs	r3, r3, #1
   8164e:	6013      	str	r3, [r2, #0]
   81650:	4770      	bx	lr
   81652:	bf00      	nop
   81654:	400e0600 	.word	0x400e0600
   81658:	400e1a10 	.word	0x400e1a10
   8165c:	200705b0 	.word	0x200705b0
   81660:	00b71b00 	.word	0x00b71b00
   81664:	003d0900 	.word	0x003d0900
   81668:	007a1200 	.word	0x007a1200
   8166c:	0e4e1c00 	.word	0x0e4e1c00
   81670:	aaaaaaab 	.word	0xaaaaaaab

00081674 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81674:	4b0a      	ldr	r3, [pc, #40]	; (816a0 <_sbrk+0x2c>)
   81676:	681b      	ldr	r3, [r3, #0]
   81678:	b153      	cbz	r3, 81690 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8167a:	4b09      	ldr	r3, [pc, #36]	; (816a0 <_sbrk+0x2c>)
   8167c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8167e:	181a      	adds	r2, r3, r0
   81680:	4908      	ldr	r1, [pc, #32]	; (816a4 <_sbrk+0x30>)
   81682:	4291      	cmp	r1, r2
   81684:	db08      	blt.n	81698 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81686:	4610      	mov	r0, r2
   81688:	4a05      	ldr	r2, [pc, #20]	; (816a0 <_sbrk+0x2c>)
   8168a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8168c:	4618      	mov	r0, r3
   8168e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81690:	4a05      	ldr	r2, [pc, #20]	; (816a8 <_sbrk+0x34>)
   81692:	4b03      	ldr	r3, [pc, #12]	; (816a0 <_sbrk+0x2c>)
   81694:	601a      	str	r2, [r3, #0]
   81696:	e7f0      	b.n	8167a <_sbrk+0x6>
		return (caddr_t) -1;	
   81698:	f04f 30ff 	mov.w	r0, #4294967295
}
   8169c:	4770      	bx	lr
   8169e:	bf00      	nop
   816a0:	20071100 	.word	0x20071100
   816a4:	20087ffc 	.word	0x20087ffc
   816a8:	200731d8 	.word	0x200731d8

000816ac <GetDetectState>:

uint GetDetectState(void);
void Detector_Calib2Regular(void);

uint GetDetectState()
{
   816ac:	b508      	push	{r3, lr}
	uint32_t inputpin;
	uint RetVal;
	inputpin = pio_get_pin_value(PIO_PB26_IDX);
   816ae:	203a      	movs	r0, #58	; 0x3a
   816b0:	4b04      	ldr	r3, [pc, #16]	; (816c4 <GetDetectState+0x18>)
   816b2:	4798      	blx	r3
	switch(inputpin)
   816b4:	b120      	cbz	r0, 816c0 <GetDetectState+0x14>
		break;
		case CALIBRATE_Detector:
		RetVal = CALIBRATE_Detector;
		break;
		default:
		RetVal = UNKNOWN_Detector;
   816b6:	2801      	cmp	r0, #1
   816b8:	bf0c      	ite	eq
   816ba:	2001      	moveq	r0, #1
   816bc:	2002      	movne	r0, #2
   816be:	bd08      	pop	{r3, pc}
		RetVal = REGULAR_Detector;
   816c0:	2000      	movs	r0, #0
		break;
	}
	return RetVal;
}
   816c2:	bd08      	pop	{r3, pc}
   816c4:	0008115b 	.word	0x0008115b

000816c8 <Detector_Calib2Regular>:

void Detector_Calib2Regular()
{
   816c8:	b500      	push	{lr}
   816ca:	b085      	sub	sp, #20
	// stop ADC channel 1 
	// save Calibration in FLASH (NFC)	
	Byte b2[10];
	FilterState = 6;
   816cc:	2206      	movs	r2, #6
   816ce:	4b07      	ldr	r3, [pc, #28]	; (816ec <Detector_Calib2Regular+0x24>)
   816d0:	601a      	str	r2, [r3, #0]
	memcpy(b2,&Threshold,sizeof(uint32_t));
   816d2:	4b07      	ldr	r3, [pc, #28]	; (816f0 <Detector_Calib2Regular+0x28>)
   816d4:	681b      	ldr	r3, [r3, #0]
   816d6:	a804      	add	r0, sp, #16
   816d8:	f840 3d0c 	str.w	r3, [r0, #-12]!
	//memcpy(b2,&TTest,sizeof(uint32_t));
	WriteCalibToFlash(b2);
   816dc:	4b05      	ldr	r3, [pc, #20]	; (816f4 <Detector_Calib2Regular+0x2c>)
   816de:	4798      	blx	r3
	PrintLn("Write to flash\n");
   816e0:	4805      	ldr	r0, [pc, #20]	; (816f8 <Detector_Calib2Regular+0x30>)
   816e2:	4b06      	ldr	r3, [pc, #24]	; (816fc <Detector_Calib2Regular+0x34>)
   816e4:	4798      	blx	r3
//	adc_disable_interrupt(ADC,ADC_IER_EOC0);	
	
}
   816e6:	b005      	add	sp, #20
   816e8:	f85d fb04 	ldr.w	pc, [sp], #4
   816ec:	200705b4 	.word	0x200705b4
   816f0:	200705bc 	.word	0x200705bc
   816f4:	00080565 	.word	0x00080565
   816f8:	0008687c 	.word	0x0008687c
   816fc:	000805dd 	.word	0x000805dd

00081700 <main>:
	// start ADC Channel 1 
	// Update Calibration according to potentiometer ADC ch1	
}*/

int main (void)
{
   81700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	char out_str[70] = {0};
	int i;	


	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   81704:	4b80      	ldr	r3, [pc, #512]	; (81908 <main+0x208>)
   81706:	4798      	blx	r3
	//Allow UART to control PB2 and PB3
	pio_set_peripheral(PIOA, PIO_PERIPH_A, PINS_UART);
	//Enable UART1 Clock	
	sysclk_enable_peripheral_clock(ID_UART);
	#endif
	gpio_configure_group(PIOB, PIO_PB26, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 22
   81708:	4e80      	ldr	r6, [pc, #512]	; (8190c <main+0x20c>)
   8170a:	4d81      	ldr	r5, [pc, #516]	; (81910 <main+0x210>)
   8170c:	4632      	mov	r2, r6
   8170e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   81712:	4628      	mov	r0, r5
   81714:	4c7f      	ldr	r4, [pc, #508]	; (81914 <main+0x214>)
   81716:	47a0      	blx	r4
	gpio_configure_group(PIOD, PIO_PD1, PIO_OUTPUT_1); // arduino due pin # 26 OUTPUT red LED error
   81718:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
   8171c:	2102      	movs	r1, #2
   8171e:	487e      	ldr	r0, [pc, #504]	; (81918 <main+0x218>)
   81720:	47a0      	blx	r4
	gpio_configure_group(PIOB, PIO_PB21, PIO_OUTPUT_1); // arduino Blue LED
   81722:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
   81726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8172a:	4628      	mov	r0, r5
   8172c:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA7, PIO_OUTPUT_0); // arduino RT meas
   8172e:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
   81732:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   81736:	2180      	movs	r1, #128	; 0x80
   81738:	4628      	mov	r0, r5
   8173a:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA15, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 24 BUTTON
   8173c:	4632      	mov	r2, r6
   8173e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81742:	4628      	mov	r0, r5
   81744:	47a0      	blx	r4
	// might conister to use pull down instead of debouncer
	board_init();
   81746:	4b75      	ldr	r3, [pc, #468]	; (8191c <main+0x21c>)
   81748:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);	 // Green LED
   8174a:	2056      	movs	r0, #86	; 0x56
   8174c:	4c74      	ldr	r4, [pc, #464]	; (81920 <main+0x220>)
   8174e:	47a0      	blx	r4
	pio_set_pin_high(PIO_PD1_IDX); // Red LED
   81750:	2061      	movs	r0, #97	; 0x61
   81752:	4d74      	ldr	r5, [pc, #464]	; (81924 <main+0x224>)
   81754:	47a8      	blx	r5
	pio_set_pin_high(PIO_PB21_IDX); // Blue LED
   81756:	2035      	movs	r0, #53	; 0x35
   81758:	47a8      	blx	r5
	pio_set_pin_low(PIO_PA7_IDX); 
   8175a:	2007      	movs	r0, #7
   8175c:	47a0      	blx	r4
	
	
	// Init FIFO's
	FIFO_Init(&Fifo);
   8175e:	4872      	ldr	r0, [pc, #456]	; (81928 <main+0x228>)
   81760:	4b72      	ldr	r3, [pc, #456]	; (8192c <main+0x22c>)
   81762:	4798      	blx	r3
	//Fifo2LenAverage = 1.0f/((float)Fifo2p1.len);
	//FIFO2_Init(&Fifo2p2,5435);
	//FIFO2_Init(&fifoDebug,3000);
		
	
	Timer_init();
   81764:	4b72      	ldr	r3, [pc, #456]	; (81930 <main+0x230>)
   81766:	4798      	blx	r3
	
	SPI_Init();
   81768:	4b72      	ldr	r3, [pc, #456]	; (81934 <main+0x234>)
   8176a:	4798      	blx	r3
	FLASH_Init();
   8176c:	4b72      	ldr	r3, [pc, #456]	; (81938 <main+0x238>)
   8176e:	4798      	blx	r3
	#if DEBUG_UART
	uart_init(UART, &uart1Settings);
	//irq_register_handler(UART_IRQn, 0);
	#endif
	
	RF_InitTX();
   81770:	4b72      	ldr	r3, [pc, #456]	; (8193c <main+0x23c>)
   81772:	4798      	blx	r3
   81774:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   81776:	3b01      	subs	r3, #1
   81778:	d1fd      	bne.n	81776 <main+0x76>
		__NOP;
	RF_SendBell(RF24_TEST);
   8177a:	2000      	movs	r0, #0
   8177c:	4b70      	ldr	r3, [pc, #448]	; (81940 <main+0x240>)
   8177e:	4798      	blx	r3
	pio_set_pin_high(LED2_GPIO);
   81780:	2056      	movs	r0, #86	; 0x56
   81782:	4c68      	ldr	r4, [pc, #416]	; (81924 <main+0x224>)
   81784:	47a0      	blx	r4
	pio_set_pin_low(PIO_PD1_IDX);
   81786:	2061      	movs	r0, #97	; 0x61
   81788:	4d65      	ldr	r5, [pc, #404]	; (81920 <main+0x220>)
   8178a:	47a8      	blx	r5
	pio_set_pin_low(PIO_PB21_IDX);
   8178c:	2035      	movs	r0, #53	; 0x35
   8178e:	47a8      	blx	r5
	Timer_Sleep(1000);
   81790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   81794:	4b6b      	ldr	r3, [pc, #428]	; (81944 <main+0x244>)
   81796:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);
   81798:	2056      	movs	r0, #86	; 0x56
   8179a:	47a8      	blx	r5
	pio_set_pin_high(PIO_PD1_IDX);
   8179c:	2061      	movs	r0, #97	; 0x61
   8179e:	47a0      	blx	r4
	pio_set_pin_high(PIO_PB21_IDX);
   817a0:	2035      	movs	r0, #53	; 0x35
   817a2:	47a0      	blx	r4
	
	//Timer_Sleep(10000);
	DetectorState = GetDetectState();
   817a4:	4b68      	ldr	r3, [pc, #416]	; (81948 <main+0x248>)
   817a6:	4798      	blx	r3
   817a8:	b2c0      	uxtb	r0, r0
   817aa:	4b68      	ldr	r3, [pc, #416]	; (8194c <main+0x24c>)
   817ac:	7018      	strb	r0, [r3, #0]
	PrevDetectorState = DetectorState;
   817ae:	4b68      	ldr	r3, [pc, #416]	; (81950 <main+0x250>)
   817b0:	7018      	strb	r0, [r3, #0]

	if(DetectorState == REGULAR_Detector)
   817b2:	b138      	cbz	r0, 817c4 <main+0xc4>
		Byte *p;
		p = ReadCalibFromFlash();
		memcpy(&Threshold,p,sizeof(uint32_t));
	}
		
	ADCC_Init();
   817b4:	4b67      	ldr	r3, [pc, #412]	; (81954 <main+0x254>)
   817b6:	4798      	blx	r3
	DAC3X8E_Init();
   817b8:	4b67      	ldr	r3, [pc, #412]	; (81958 <main+0x258>)
   817ba:	4798      	blx	r3
	Insert application code here, after the board has been initialized. */
	while(1)
	{	
		//Calibration = ADC->ADC_CDR[1];		
		Calibration = ADCC_GlobalRawData[1];
		DetectorState = GetDetectState();
   817bc:	4d63      	ldr	r5, [pc, #396]	; (8194c <main+0x24c>)
				adc_reset(ADC);		
				Detector_Calib2Regular();
				ADCC_Init();
				break;
				case CALIBRATE_Detector:
				FilterState = 6;				
   817be:	4f67      	ldr	r7, [pc, #412]	; (8195c <main+0x25c>)
			FIFO_Init(&Fifo);
			//FIFO2_Reset(&WaveArray);
			FilterState = 6;
			delay = 0;
			//FIFO2_Reset(&Fifo2p2);
			Timer_Sleep(20);
   817c0:	4e60      	ldr	r6, [pc, #384]	; (81944 <main+0x244>)
   817c2:	e04e      	b.n	81862 <main+0x162>
		p = ReadCalibFromFlash();
   817c4:	4b66      	ldr	r3, [pc, #408]	; (81960 <main+0x260>)
   817c6:	4798      	blx	r3
		memcpy(&Threshold,p,sizeof(uint32_t));
   817c8:	6802      	ldr	r2, [r0, #0]
   817ca:	4b66      	ldr	r3, [pc, #408]	; (81964 <main+0x264>)
   817cc:	601a      	str	r2, [r3, #0]
   817ce:	e7f1      	b.n	817b4 <main+0xb4>
				adc_disable_interrupt(ADC,ADC_IER_ENDRX);
   817d0:	4c65      	ldr	r4, [pc, #404]	; (81968 <main+0x268>)
   817d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817d6:	4620      	mov	r0, r4
   817d8:	4b64      	ldr	r3, [pc, #400]	; (8196c <main+0x26c>)
   817da:	4798      	blx	r3
				adc_reset(ADC);		
   817dc:	4620      	mov	r0, r4
   817de:	4b64      	ldr	r3, [pc, #400]	; (81970 <main+0x270>)
   817e0:	4798      	blx	r3
				Detector_Calib2Regular();
   817e2:	4b64      	ldr	r3, [pc, #400]	; (81974 <main+0x274>)
   817e4:	4798      	blx	r3
				ADCC_Init();
   817e6:	4b5b      	ldr	r3, [pc, #364]	; (81954 <main+0x254>)
   817e8:	4798      	blx	r3
			PrevDetectorState = DetectorState;
   817ea:	782a      	ldrb	r2, [r5, #0]
   817ec:	4b58      	ldr	r3, [pc, #352]	; (81950 <main+0x250>)
   817ee:	701a      	strb	r2, [r3, #0]
		switch(DetectorState)
   817f0:	782b      	ldrb	r3, [r5, #0]
   817f2:	b163      	cbz	r3, 8180e <main+0x10e>
   817f4:	2b01      	cmp	r3, #1
   817f6:	d110      	bne.n	8181a <main+0x11a>
			pio_set_pin_high(PIO_PD1_IDX);
   817f8:	2061      	movs	r0, #97	; 0x61
   817fa:	4b4a      	ldr	r3, [pc, #296]	; (81924 <main+0x224>)
   817fc:	4798      	blx	r3
			MaxAllowedFirstVal = UINT32_MAX;
   817fe:	f04f 32ff 	mov.w	r2, #4294967295
   81802:	4b5d      	ldr	r3, [pc, #372]	; (81978 <main+0x278>)
   81804:	601a      	str	r2, [r3, #0]
			break;
   81806:	e008      	b.n	8181a <main+0x11a>
				FilterState = 6;				
   81808:	2306      	movs	r3, #6
   8180a:	603b      	str	r3, [r7, #0]
				break;
   8180c:	e7ed      	b.n	817ea <main+0xea>
			MaxAllowedFirstVal = Threshold + (4<<17);//(29<<17)/10;
   8180e:	4b55      	ldr	r3, [pc, #340]	; (81964 <main+0x264>)
   81810:	681b      	ldr	r3, [r3, #0]
   81812:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   81816:	4a58      	ldr	r2, [pc, #352]	; (81978 <main+0x278>)
   81818:	6013      	str	r3, [r2, #0]
		if(FilterState == 5)
   8181a:	683b      	ldr	r3, [r7, #0]
   8181c:	2b05      	cmp	r3, #5
			pio_set_pin_low(PIO_PD1_IDX);
   8181e:	f04f 0061 	mov.w	r0, #97	; 0x61
   81822:	bf0c      	ite	eq
   81824:	4b3e      	ldreq	r3, [pc, #248]	; (81920 <main+0x220>)
			pio_set_pin_high(PIO_PD1_IDX);
   81826:	4b3f      	ldrne	r3, [pc, #252]	; (81924 <main+0x224>)
   81828:	4798      	blx	r3
		if(Det_flag)
   8182a:	4b54      	ldr	r3, [pc, #336]	; (8197c <main+0x27c>)
   8182c:	681b      	ldr	r3, [r3, #0]
   8182e:	b19b      	cbz	r3, 81858 <main+0x158>
			Det_flag = 0;				
   81830:	2200      	movs	r2, #0
   81832:	4b52      	ldr	r3, [pc, #328]	; (8197c <main+0x27c>)
   81834:	601a      	str	r2, [r3, #0]
			switch (DetectorState)
   81836:	782b      	ldrb	r3, [r5, #0]
   81838:	2b00      	cmp	r3, #0
   8183a:	d02b      	beq.n	81894 <main+0x194>
   8183c:	2b01      	cmp	r3, #1
   8183e:	d03e      	beq.n	818be <main+0x1be>
			FIFO_Init(&Fifo);
   81840:	4839      	ldr	r0, [pc, #228]	; (81928 <main+0x228>)
   81842:	4b3a      	ldr	r3, [pc, #232]	; (8192c <main+0x22c>)
   81844:	4798      	blx	r3
			FilterState = 6;
   81846:	2306      	movs	r3, #6
   81848:	603b      	str	r3, [r7, #0]
			delay = 0;
   8184a:	2200      	movs	r2, #0
   8184c:	4b4c      	ldr	r3, [pc, #304]	; (81980 <main+0x280>)
   8184e:	601a      	str	r2, [r3, #0]
			Timer_Sleep(20);
   81850:	2014      	movs	r0, #20
   81852:	47b0      	blx	r6
			ADCC_Init();
   81854:	4b3f      	ldr	r3, [pc, #252]	; (81954 <main+0x254>)
   81856:	4798      	blx	r3
		}
		if(DetectorState == CALIBRATE_Detector){
   81858:	782b      	ldrb	r3, [r5, #0]
   8185a:	2b01      	cmp	r3, #1
   8185c:	d04c      	beq.n	818f8 <main+0x1f8>
	//	sprintf(out_str,"%f\r\n", ((float)ADCC_GlobalRawData[2]*3.3f)/((float)MAX_ADC-1.0f));//ADC->ADC_CDR[2]);
		sprintf(out_str,"%lu %ld\r\n",FilterState,OutData );
		PrintLn(out_str);	
		//RF_SendBell(RF24_TEST);	
		#endif
		Timer_Sleep(100);
   8185e:	2064      	movs	r0, #100	; 0x64
   81860:	47b0      	blx	r6
		Calibration = ADCC_GlobalRawData[1];
   81862:	4b48      	ldr	r3, [pc, #288]	; (81984 <main+0x284>)
   81864:	885a      	ldrh	r2, [r3, #2]
   81866:	4b48      	ldr	r3, [pc, #288]	; (81988 <main+0x288>)
   81868:	601a      	str	r2, [r3, #0]
		DetectorState = GetDetectState();
   8186a:	4b37      	ldr	r3, [pc, #220]	; (81948 <main+0x248>)
   8186c:	4798      	blx	r3
   8186e:	b2c0      	uxtb	r0, r0
   81870:	7028      	strb	r0, [r5, #0]
		if((DetectorState != UNKNOWN_Detector) &&(DetectorState != PrevDetectorState)) // State changed
   81872:	2802      	cmp	r0, #2
   81874:	d0d1      	beq.n	8181a <main+0x11a>
   81876:	4b36      	ldr	r3, [pc, #216]	; (81950 <main+0x250>)
   81878:	781b      	ldrb	r3, [r3, #0]
   8187a:	4283      	cmp	r3, r0
   8187c:	d0b8      	beq.n	817f0 <main+0xf0>
			PrintLn("State change\n");
   8187e:	4843      	ldr	r0, [pc, #268]	; (8198c <main+0x28c>)
   81880:	4b43      	ldr	r3, [pc, #268]	; (81990 <main+0x290>)
   81882:	4798      	blx	r3
			switch(DetectorState)
   81884:	782b      	ldrb	r3, [r5, #0]
   81886:	2b00      	cmp	r3, #0
   81888:	d0a2      	beq.n	817d0 <main+0xd0>
   8188a:	2b01      	cmp	r3, #1
   8188c:	d0bc      	beq.n	81808 <main+0x108>
				Detector_Calib2Regular();
   8188e:	4b39      	ldr	r3, [pc, #228]	; (81974 <main+0x274>)
   81890:	4798      	blx	r3
   81892:	e7aa      	b.n	817ea <main+0xea>
			switch (DetectorState)
   81894:	240a      	movs	r4, #10
					Timer_Sleep(20);				
   81896:	f04f 0914 	mov.w	r9, #20
					RF_SendBell(RF24_BELLDOOR);
   8189a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 81940 <main+0x240>
					Timer_Sleep(20);				
   8189e:	4648      	mov	r0, r9
   818a0:	47b0      	blx	r6
					RF_SendBell(RF24_BELLDOOR);
   818a2:	2001      	movs	r0, #1
   818a4:	47c0      	blx	r8
				for(i=0;i<10;i++)
   818a6:	3c01      	subs	r4, #1
   818a8:	d1f9      	bne.n	8189e <main+0x19e>
				pio_set_pin_high(LED2_GPIO);
   818aa:	2056      	movs	r0, #86	; 0x56
   818ac:	4b1d      	ldr	r3, [pc, #116]	; (81924 <main+0x224>)
   818ae:	4798      	blx	r3
				Timer_Sleep(500);
   818b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   818b4:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   818b6:	2056      	movs	r0, #86	; 0x56
   818b8:	4b19      	ldr	r3, [pc, #100]	; (81920 <main+0x220>)
   818ba:	4798      	blx	r3
				break;
   818bc:	e7c0      	b.n	81840 <main+0x140>
				pio_set_pin_high(LED2_GPIO);
   818be:	2056      	movs	r0, #86	; 0x56
   818c0:	4b18      	ldr	r3, [pc, #96]	; (81924 <main+0x224>)
   818c2:	4798      	blx	r3
				if((FirstDetVal>(Threshold+(1<<17))) && (FirstDetVal<(Threshold+(3<<17))))
   818c4:	4b27      	ldr	r3, [pc, #156]	; (81964 <main+0x264>)
   818c6:	681b      	ldr	r3, [r3, #0]
   818c8:	4a32      	ldr	r2, [pc, #200]	; (81994 <main+0x294>)
   818ca:	6812      	ldr	r2, [r2, #0]
   818cc:	f503 3100 	add.w	r1, r3, #131072	; 0x20000
   818d0:	4291      	cmp	r1, r2
   818d2:	d203      	bcs.n	818dc <main+0x1dc>
   818d4:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
   818d8:	429a      	cmp	r2, r3
   818da:	d309      	bcc.n	818f0 <main+0x1f0>
				Timer_Sleep(3000);				
   818dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   818e0:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   818e2:	2056      	movs	r0, #86	; 0x56
   818e4:	4b0e      	ldr	r3, [pc, #56]	; (81920 <main+0x220>)
   818e6:	4798      	blx	r3
				pio_set_pin_high(PIO_PB21_IDX);
   818e8:	2035      	movs	r0, #53	; 0x35
   818ea:	4b0e      	ldr	r3, [pc, #56]	; (81924 <main+0x224>)
   818ec:	4798      	blx	r3
				break;
   818ee:	e7a7      	b.n	81840 <main+0x140>
					pio_set_pin_low(PIO_PB21_IDX);
   818f0:	2035      	movs	r0, #53	; 0x35
   818f2:	4b0b      	ldr	r3, [pc, #44]	; (81920 <main+0x220>)
   818f4:	4798      	blx	r3
   818f6:	e7f1      	b.n	818dc <main+0x1dc>
			Threshold = Calibration*(1<<5)*MAX_CALIBRATION;
   818f8:	4b23      	ldr	r3, [pc, #140]	; (81988 <main+0x288>)
   818fa:	681b      	ldr	r3, [r3, #0]
   818fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   81900:	019b      	lsls	r3, r3, #6
   81902:	4a18      	ldr	r2, [pc, #96]	; (81964 <main+0x264>)
   81904:	6013      	str	r3, [r2, #0]
   81906:	e7aa      	b.n	8185e <main+0x15e>
   81908:	00080fd9 	.word	0x00080fd9
   8190c:	28000008 	.word	0x28000008
   81910:	400e1000 	.word	0x400e1000
   81914:	0008127d 	.word	0x0008127d
   81918:	400e1400 	.word	0x400e1400
   8191c:	0008103d 	.word	0x0008103d
   81920:	00081191 	.word	0x00081191
   81924:	00081177 	.word	0x00081177
   81928:	20071174 	.word	0x20071174
   8192c:	0008028d 	.word	0x0008028d
   81930:	00080f2d 	.word	0x00080f2d
   81934:	00080ccd 	.word	0x00080ccd
   81938:	00080369 	.word	0x00080369
   8193c:	000808c1 	.word	0x000808c1
   81940:	00080971 	.word	0x00080971
   81944:	00080fa5 	.word	0x00080fa5
   81948:	000816ad 	.word	0x000816ad
   8194c:	20071160 	.word	0x20071160
   81950:	20071148 	.word	0x20071148
   81954:	00080b95 	.word	0x00080b95
   81958:	000802b9 	.word	0x000802b9
   8195c:	200705b4 	.word	0x200705b4
   81960:	00080381 	.word	0x00080381
   81964:	200705bc 	.word	0x200705bc
   81968:	400c0000 	.word	0x400c0000
   8196c:	000801f1 	.word	0x000801f1
   81970:	000801d5 	.word	0x000801d5
   81974:	000816c9 	.word	0x000816c9
   81978:	200705b8 	.word	0x200705b8
   8197c:	20071104 	.word	0x20071104
   81980:	20071168 	.word	0x20071168
   81984:	20071140 	.word	0x20071140
   81988:	2007114c 	.word	0x2007114c
   8198c:	0008688c 	.word	0x0008688c
   81990:	000805dd 	.word	0x000805dd
   81994:	20071164 	.word	0x20071164

00081998 <__aeabi_frsub>:
   81998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8199c:	e002      	b.n	819a4 <__addsf3>
   8199e:	bf00      	nop

000819a0 <__aeabi_fsub>:
   819a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000819a4 <__addsf3>:
   819a4:	0042      	lsls	r2, r0, #1
   819a6:	bf1f      	itttt	ne
   819a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   819ac:	ea92 0f03 	teqne	r2, r3
   819b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   819b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   819b8:	d06a      	beq.n	81a90 <__addsf3+0xec>
   819ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
   819be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   819c2:	bfc1      	itttt	gt
   819c4:	18d2      	addgt	r2, r2, r3
   819c6:	4041      	eorgt	r1, r0
   819c8:	4048      	eorgt	r0, r1
   819ca:	4041      	eorgt	r1, r0
   819cc:	bfb8      	it	lt
   819ce:	425b      	neglt	r3, r3
   819d0:	2b19      	cmp	r3, #25
   819d2:	bf88      	it	hi
   819d4:	4770      	bxhi	lr
   819d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   819da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   819de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   819e2:	bf18      	it	ne
   819e4:	4240      	negne	r0, r0
   819e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   819ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   819ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   819f2:	bf18      	it	ne
   819f4:	4249      	negne	r1, r1
   819f6:	ea92 0f03 	teq	r2, r3
   819fa:	d03f      	beq.n	81a7c <__addsf3+0xd8>
   819fc:	f1a2 0201 	sub.w	r2, r2, #1
   81a00:	fa41 fc03 	asr.w	ip, r1, r3
   81a04:	eb10 000c 	adds.w	r0, r0, ip
   81a08:	f1c3 0320 	rsb	r3, r3, #32
   81a0c:	fa01 f103 	lsl.w	r1, r1, r3
   81a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81a14:	d502      	bpl.n	81a1c <__addsf3+0x78>
   81a16:	4249      	negs	r1, r1
   81a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81a20:	d313      	bcc.n	81a4a <__addsf3+0xa6>
   81a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   81a26:	d306      	bcc.n	81a36 <__addsf3+0x92>
   81a28:	0840      	lsrs	r0, r0, #1
   81a2a:	ea4f 0131 	mov.w	r1, r1, rrx
   81a2e:	f102 0201 	add.w	r2, r2, #1
   81a32:	2afe      	cmp	r2, #254	; 0xfe
   81a34:	d251      	bcs.n	81ada <__addsf3+0x136>
   81a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   81a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81a3e:	bf08      	it	eq
   81a40:	f020 0001 	biceq.w	r0, r0, #1
   81a44:	ea40 0003 	orr.w	r0, r0, r3
   81a48:	4770      	bx	lr
   81a4a:	0049      	lsls	r1, r1, #1
   81a4c:	eb40 0000 	adc.w	r0, r0, r0
   81a50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81a54:	f1a2 0201 	sub.w	r2, r2, #1
   81a58:	d1ed      	bne.n	81a36 <__addsf3+0x92>
   81a5a:	fab0 fc80 	clz	ip, r0
   81a5e:	f1ac 0c08 	sub.w	ip, ip, #8
   81a62:	ebb2 020c 	subs.w	r2, r2, ip
   81a66:	fa00 f00c 	lsl.w	r0, r0, ip
   81a6a:	bfaa      	itet	ge
   81a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81a70:	4252      	neglt	r2, r2
   81a72:	4318      	orrge	r0, r3
   81a74:	bfbc      	itt	lt
   81a76:	40d0      	lsrlt	r0, r2
   81a78:	4318      	orrlt	r0, r3
   81a7a:	4770      	bx	lr
   81a7c:	f092 0f00 	teq	r2, #0
   81a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81a84:	bf06      	itte	eq
   81a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81a8a:	3201      	addeq	r2, #1
   81a8c:	3b01      	subne	r3, #1
   81a8e:	e7b5      	b.n	819fc <__addsf3+0x58>
   81a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81a98:	bf18      	it	ne
   81a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81a9e:	d021      	beq.n	81ae4 <__addsf3+0x140>
   81aa0:	ea92 0f03 	teq	r2, r3
   81aa4:	d004      	beq.n	81ab0 <__addsf3+0x10c>
   81aa6:	f092 0f00 	teq	r2, #0
   81aaa:	bf08      	it	eq
   81aac:	4608      	moveq	r0, r1
   81aae:	4770      	bx	lr
   81ab0:	ea90 0f01 	teq	r0, r1
   81ab4:	bf1c      	itt	ne
   81ab6:	2000      	movne	r0, #0
   81ab8:	4770      	bxne	lr
   81aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81abe:	d104      	bne.n	81aca <__addsf3+0x126>
   81ac0:	0040      	lsls	r0, r0, #1
   81ac2:	bf28      	it	cs
   81ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81ac8:	4770      	bx	lr
   81aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81ace:	bf3c      	itt	cc
   81ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81ad4:	4770      	bxcc	lr
   81ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81ae2:	4770      	bx	lr
   81ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81ae8:	bf16      	itet	ne
   81aea:	4608      	movne	r0, r1
   81aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81af0:	4601      	movne	r1, r0
   81af2:	0242      	lsls	r2, r0, #9
   81af4:	bf06      	itte	eq
   81af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   81afa:	ea90 0f01 	teqeq	r0, r1
   81afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81b02:	4770      	bx	lr

00081b04 <__aeabi_ui2f>:
   81b04:	f04f 0300 	mov.w	r3, #0
   81b08:	e004      	b.n	81b14 <__aeabi_i2f+0x8>
   81b0a:	bf00      	nop

00081b0c <__aeabi_i2f>:
   81b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81b10:	bf48      	it	mi
   81b12:	4240      	negmi	r0, r0
   81b14:	ea5f 0c00 	movs.w	ip, r0
   81b18:	bf08      	it	eq
   81b1a:	4770      	bxeq	lr
   81b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81b20:	4601      	mov	r1, r0
   81b22:	f04f 0000 	mov.w	r0, #0
   81b26:	e01c      	b.n	81b62 <__aeabi_l2f+0x2a>

00081b28 <__aeabi_ul2f>:
   81b28:	ea50 0201 	orrs.w	r2, r0, r1
   81b2c:	bf08      	it	eq
   81b2e:	4770      	bxeq	lr
   81b30:	f04f 0300 	mov.w	r3, #0
   81b34:	e00a      	b.n	81b4c <__aeabi_l2f+0x14>
   81b36:	bf00      	nop

00081b38 <__aeabi_l2f>:
   81b38:	ea50 0201 	orrs.w	r2, r0, r1
   81b3c:	bf08      	it	eq
   81b3e:	4770      	bxeq	lr
   81b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81b44:	d502      	bpl.n	81b4c <__aeabi_l2f+0x14>
   81b46:	4240      	negs	r0, r0
   81b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81b4c:	ea5f 0c01 	movs.w	ip, r1
   81b50:	bf02      	ittt	eq
   81b52:	4684      	moveq	ip, r0
   81b54:	4601      	moveq	r1, r0
   81b56:	2000      	moveq	r0, #0
   81b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81b5c:	bf08      	it	eq
   81b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81b66:	fabc f28c 	clz	r2, ip
   81b6a:	3a08      	subs	r2, #8
   81b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81b70:	db10      	blt.n	81b94 <__aeabi_l2f+0x5c>
   81b72:	fa01 fc02 	lsl.w	ip, r1, r2
   81b76:	4463      	add	r3, ip
   81b78:	fa00 fc02 	lsl.w	ip, r0, r2
   81b7c:	f1c2 0220 	rsb	r2, r2, #32
   81b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81b84:	fa20 f202 	lsr.w	r2, r0, r2
   81b88:	eb43 0002 	adc.w	r0, r3, r2
   81b8c:	bf08      	it	eq
   81b8e:	f020 0001 	biceq.w	r0, r0, #1
   81b92:	4770      	bx	lr
   81b94:	f102 0220 	add.w	r2, r2, #32
   81b98:	fa01 fc02 	lsl.w	ip, r1, r2
   81b9c:	f1c2 0220 	rsb	r2, r2, #32
   81ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81ba4:	fa21 f202 	lsr.w	r2, r1, r2
   81ba8:	eb43 0002 	adc.w	r0, r3, r2
   81bac:	bf08      	it	eq
   81bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81bb2:	4770      	bx	lr

00081bb4 <__aeabi_fmul>:
   81bb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81bb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81bbc:	bf1e      	ittt	ne
   81bbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81bc2:	ea92 0f0c 	teqne	r2, ip
   81bc6:	ea93 0f0c 	teqne	r3, ip
   81bca:	d06f      	beq.n	81cac <__aeabi_fmul+0xf8>
   81bcc:	441a      	add	r2, r3
   81bce:	ea80 0c01 	eor.w	ip, r0, r1
   81bd2:	0240      	lsls	r0, r0, #9
   81bd4:	bf18      	it	ne
   81bd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   81bda:	d01e      	beq.n	81c1a <__aeabi_fmul+0x66>
   81bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81be0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81be4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81be8:	fba0 3101 	umull	r3, r1, r0, r1
   81bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81bf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81bf4:	bf3e      	ittt	cc
   81bf6:	0049      	lslcc	r1, r1, #1
   81bf8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81bfc:	005b      	lslcc	r3, r3, #1
   81bfe:	ea40 0001 	orr.w	r0, r0, r1
   81c02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81c06:	2afd      	cmp	r2, #253	; 0xfd
   81c08:	d81d      	bhi.n	81c46 <__aeabi_fmul+0x92>
   81c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81c12:	bf08      	it	eq
   81c14:	f020 0001 	biceq.w	r0, r0, #1
   81c18:	4770      	bx	lr
   81c1a:	f090 0f00 	teq	r0, #0
   81c1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81c22:	bf08      	it	eq
   81c24:	0249      	lsleq	r1, r1, #9
   81c26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81c2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81c2e:	3a7f      	subs	r2, #127	; 0x7f
   81c30:	bfc2      	ittt	gt
   81c32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81c36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81c3a:	4770      	bxgt	lr
   81c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81c40:	f04f 0300 	mov.w	r3, #0
   81c44:	3a01      	subs	r2, #1
   81c46:	dc5d      	bgt.n	81d04 <__aeabi_fmul+0x150>
   81c48:	f112 0f19 	cmn.w	r2, #25
   81c4c:	bfdc      	itt	le
   81c4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81c52:	4770      	bxle	lr
   81c54:	f1c2 0200 	rsb	r2, r2, #0
   81c58:	0041      	lsls	r1, r0, #1
   81c5a:	fa21 f102 	lsr.w	r1, r1, r2
   81c5e:	f1c2 0220 	rsb	r2, r2, #32
   81c62:	fa00 fc02 	lsl.w	ip, r0, r2
   81c66:	ea5f 0031 	movs.w	r0, r1, rrx
   81c6a:	f140 0000 	adc.w	r0, r0, #0
   81c6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81c72:	bf08      	it	eq
   81c74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81c78:	4770      	bx	lr
   81c7a:	f092 0f00 	teq	r2, #0
   81c7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81c82:	bf02      	ittt	eq
   81c84:	0040      	lsleq	r0, r0, #1
   81c86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81c8a:	3a01      	subeq	r2, #1
   81c8c:	d0f9      	beq.n	81c82 <__aeabi_fmul+0xce>
   81c8e:	ea40 000c 	orr.w	r0, r0, ip
   81c92:	f093 0f00 	teq	r3, #0
   81c96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81c9a:	bf02      	ittt	eq
   81c9c:	0049      	lsleq	r1, r1, #1
   81c9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81ca2:	3b01      	subeq	r3, #1
   81ca4:	d0f9      	beq.n	81c9a <__aeabi_fmul+0xe6>
   81ca6:	ea41 010c 	orr.w	r1, r1, ip
   81caa:	e78f      	b.n	81bcc <__aeabi_fmul+0x18>
   81cac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81cb0:	ea92 0f0c 	teq	r2, ip
   81cb4:	bf18      	it	ne
   81cb6:	ea93 0f0c 	teqne	r3, ip
   81cba:	d00a      	beq.n	81cd2 <__aeabi_fmul+0x11e>
   81cbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81cc0:	bf18      	it	ne
   81cc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81cc6:	d1d8      	bne.n	81c7a <__aeabi_fmul+0xc6>
   81cc8:	ea80 0001 	eor.w	r0, r0, r1
   81ccc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81cd0:	4770      	bx	lr
   81cd2:	f090 0f00 	teq	r0, #0
   81cd6:	bf17      	itett	ne
   81cd8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81cdc:	4608      	moveq	r0, r1
   81cde:	f091 0f00 	teqne	r1, #0
   81ce2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81ce6:	d014      	beq.n	81d12 <__aeabi_fmul+0x15e>
   81ce8:	ea92 0f0c 	teq	r2, ip
   81cec:	d101      	bne.n	81cf2 <__aeabi_fmul+0x13e>
   81cee:	0242      	lsls	r2, r0, #9
   81cf0:	d10f      	bne.n	81d12 <__aeabi_fmul+0x15e>
   81cf2:	ea93 0f0c 	teq	r3, ip
   81cf6:	d103      	bne.n	81d00 <__aeabi_fmul+0x14c>
   81cf8:	024b      	lsls	r3, r1, #9
   81cfa:	bf18      	it	ne
   81cfc:	4608      	movne	r0, r1
   81cfe:	d108      	bne.n	81d12 <__aeabi_fmul+0x15e>
   81d00:	ea80 0001 	eor.w	r0, r0, r1
   81d04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81d08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81d0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81d10:	4770      	bx	lr
   81d12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81d16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81d1a:	4770      	bx	lr

00081d1c <__aeabi_fdiv>:
   81d1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81d24:	bf1e      	ittt	ne
   81d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81d2a:	ea92 0f0c 	teqne	r2, ip
   81d2e:	ea93 0f0c 	teqne	r3, ip
   81d32:	d069      	beq.n	81e08 <__aeabi_fdiv+0xec>
   81d34:	eba2 0203 	sub.w	r2, r2, r3
   81d38:	ea80 0c01 	eor.w	ip, r0, r1
   81d3c:	0249      	lsls	r1, r1, #9
   81d3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81d42:	d037      	beq.n	81db4 <__aeabi_fdiv+0x98>
   81d44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81d48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81d4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81d54:	428b      	cmp	r3, r1
   81d56:	bf38      	it	cc
   81d58:	005b      	lslcc	r3, r3, #1
   81d5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81d5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81d62:	428b      	cmp	r3, r1
   81d64:	bf24      	itt	cs
   81d66:	1a5b      	subcs	r3, r3, r1
   81d68:	ea40 000c 	orrcs.w	r0, r0, ip
   81d6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81d70:	bf24      	itt	cs
   81d72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81d76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81d7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81d7e:	bf24      	itt	cs
   81d80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81d84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81d88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81d8c:	bf24      	itt	cs
   81d8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81d92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81d96:	011b      	lsls	r3, r3, #4
   81d98:	bf18      	it	ne
   81d9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81d9e:	d1e0      	bne.n	81d62 <__aeabi_fdiv+0x46>
   81da0:	2afd      	cmp	r2, #253	; 0xfd
   81da2:	f63f af50 	bhi.w	81c46 <__aeabi_fmul+0x92>
   81da6:	428b      	cmp	r3, r1
   81da8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81dac:	bf08      	it	eq
   81dae:	f020 0001 	biceq.w	r0, r0, #1
   81db2:	4770      	bx	lr
   81db4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81db8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81dbc:	327f      	adds	r2, #127	; 0x7f
   81dbe:	bfc2      	ittt	gt
   81dc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81dc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81dc8:	4770      	bxgt	lr
   81dca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81dce:	f04f 0300 	mov.w	r3, #0
   81dd2:	3a01      	subs	r2, #1
   81dd4:	e737      	b.n	81c46 <__aeabi_fmul+0x92>
   81dd6:	f092 0f00 	teq	r2, #0
   81dda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81dde:	bf02      	ittt	eq
   81de0:	0040      	lsleq	r0, r0, #1
   81de2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81de6:	3a01      	subeq	r2, #1
   81de8:	d0f9      	beq.n	81dde <__aeabi_fdiv+0xc2>
   81dea:	ea40 000c 	orr.w	r0, r0, ip
   81dee:	f093 0f00 	teq	r3, #0
   81df2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81df6:	bf02      	ittt	eq
   81df8:	0049      	lsleq	r1, r1, #1
   81dfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81dfe:	3b01      	subeq	r3, #1
   81e00:	d0f9      	beq.n	81df6 <__aeabi_fdiv+0xda>
   81e02:	ea41 010c 	orr.w	r1, r1, ip
   81e06:	e795      	b.n	81d34 <__aeabi_fdiv+0x18>
   81e08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81e0c:	ea92 0f0c 	teq	r2, ip
   81e10:	d108      	bne.n	81e24 <__aeabi_fdiv+0x108>
   81e12:	0242      	lsls	r2, r0, #9
   81e14:	f47f af7d 	bne.w	81d12 <__aeabi_fmul+0x15e>
   81e18:	ea93 0f0c 	teq	r3, ip
   81e1c:	f47f af70 	bne.w	81d00 <__aeabi_fmul+0x14c>
   81e20:	4608      	mov	r0, r1
   81e22:	e776      	b.n	81d12 <__aeabi_fmul+0x15e>
   81e24:	ea93 0f0c 	teq	r3, ip
   81e28:	d104      	bne.n	81e34 <__aeabi_fdiv+0x118>
   81e2a:	024b      	lsls	r3, r1, #9
   81e2c:	f43f af4c 	beq.w	81cc8 <__aeabi_fmul+0x114>
   81e30:	4608      	mov	r0, r1
   81e32:	e76e      	b.n	81d12 <__aeabi_fmul+0x15e>
   81e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81e38:	bf18      	it	ne
   81e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81e3e:	d1ca      	bne.n	81dd6 <__aeabi_fdiv+0xba>
   81e40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81e44:	f47f af5c 	bne.w	81d00 <__aeabi_fmul+0x14c>
   81e48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81e4c:	f47f af3c 	bne.w	81cc8 <__aeabi_fmul+0x114>
   81e50:	e75f      	b.n	81d12 <__aeabi_fmul+0x15e>
   81e52:	bf00      	nop

00081e54 <__gesf2>:
   81e54:	f04f 3cff 	mov.w	ip, #4294967295
   81e58:	e006      	b.n	81e68 <__cmpsf2+0x4>
   81e5a:	bf00      	nop

00081e5c <__lesf2>:
   81e5c:	f04f 0c01 	mov.w	ip, #1
   81e60:	e002      	b.n	81e68 <__cmpsf2+0x4>
   81e62:	bf00      	nop

00081e64 <__cmpsf2>:
   81e64:	f04f 0c01 	mov.w	ip, #1
   81e68:	f84d cd04 	str.w	ip, [sp, #-4]!
   81e6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81e70:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81e74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81e78:	bf18      	it	ne
   81e7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81e7e:	d011      	beq.n	81ea4 <__cmpsf2+0x40>
   81e80:	b001      	add	sp, #4
   81e82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81e86:	bf18      	it	ne
   81e88:	ea90 0f01 	teqne	r0, r1
   81e8c:	bf58      	it	pl
   81e8e:	ebb2 0003 	subspl.w	r0, r2, r3
   81e92:	bf88      	it	hi
   81e94:	17c8      	asrhi	r0, r1, #31
   81e96:	bf38      	it	cc
   81e98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81e9c:	bf18      	it	ne
   81e9e:	f040 0001 	orrne.w	r0, r0, #1
   81ea2:	4770      	bx	lr
   81ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81ea8:	d102      	bne.n	81eb0 <__cmpsf2+0x4c>
   81eaa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81eae:	d105      	bne.n	81ebc <__cmpsf2+0x58>
   81eb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81eb4:	d1e4      	bne.n	81e80 <__cmpsf2+0x1c>
   81eb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81eba:	d0e1      	beq.n	81e80 <__cmpsf2+0x1c>
   81ebc:	f85d 0b04 	ldr.w	r0, [sp], #4
   81ec0:	4770      	bx	lr
   81ec2:	bf00      	nop

00081ec4 <__aeabi_cfrcmple>:
   81ec4:	4684      	mov	ip, r0
   81ec6:	4608      	mov	r0, r1
   81ec8:	4661      	mov	r1, ip
   81eca:	e7ff      	b.n	81ecc <__aeabi_cfcmpeq>

00081ecc <__aeabi_cfcmpeq>:
   81ecc:	b50f      	push	{r0, r1, r2, r3, lr}
   81ece:	f7ff ffc9 	bl	81e64 <__cmpsf2>
   81ed2:	2800      	cmp	r0, #0
   81ed4:	bf48      	it	mi
   81ed6:	f110 0f00 	cmnmi.w	r0, #0
   81eda:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081edc <__aeabi_fcmpeq>:
   81edc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81ee0:	f7ff fff4 	bl	81ecc <__aeabi_cfcmpeq>
   81ee4:	bf0c      	ite	eq
   81ee6:	2001      	moveq	r0, #1
   81ee8:	2000      	movne	r0, #0
   81eea:	f85d fb08 	ldr.w	pc, [sp], #8
   81eee:	bf00      	nop

00081ef0 <__aeabi_fcmplt>:
   81ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81ef4:	f7ff ffea 	bl	81ecc <__aeabi_cfcmpeq>
   81ef8:	bf34      	ite	cc
   81efa:	2001      	movcc	r0, #1
   81efc:	2000      	movcs	r0, #0
   81efe:	f85d fb08 	ldr.w	pc, [sp], #8
   81f02:	bf00      	nop

00081f04 <__aeabi_fcmple>:
   81f04:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f08:	f7ff ffe0 	bl	81ecc <__aeabi_cfcmpeq>
   81f0c:	bf94      	ite	ls
   81f0e:	2001      	movls	r0, #1
   81f10:	2000      	movhi	r0, #0
   81f12:	f85d fb08 	ldr.w	pc, [sp], #8
   81f16:	bf00      	nop

00081f18 <__aeabi_fcmpge>:
   81f18:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f1c:	f7ff ffd2 	bl	81ec4 <__aeabi_cfrcmple>
   81f20:	bf94      	ite	ls
   81f22:	2001      	movls	r0, #1
   81f24:	2000      	movhi	r0, #0
   81f26:	f85d fb08 	ldr.w	pc, [sp], #8
   81f2a:	bf00      	nop

00081f2c <__aeabi_fcmpgt>:
   81f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f30:	f7ff ffc8 	bl	81ec4 <__aeabi_cfrcmple>
   81f34:	bf34      	ite	cc
   81f36:	2001      	movcc	r0, #1
   81f38:	2000      	movcs	r0, #0
   81f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   81f3e:	bf00      	nop

00081f40 <__libc_init_array>:
   81f40:	b570      	push	{r4, r5, r6, lr}
   81f42:	4e0f      	ldr	r6, [pc, #60]	; (81f80 <__libc_init_array+0x40>)
   81f44:	4d0f      	ldr	r5, [pc, #60]	; (81f84 <__libc_init_array+0x44>)
   81f46:	1b76      	subs	r6, r6, r5
   81f48:	10b6      	asrs	r6, r6, #2
   81f4a:	bf18      	it	ne
   81f4c:	2400      	movne	r4, #0
   81f4e:	d005      	beq.n	81f5c <__libc_init_array+0x1c>
   81f50:	3401      	adds	r4, #1
   81f52:	f855 3b04 	ldr.w	r3, [r5], #4
   81f56:	4798      	blx	r3
   81f58:	42a6      	cmp	r6, r4
   81f5a:	d1f9      	bne.n	81f50 <__libc_init_array+0x10>
   81f5c:	4e0a      	ldr	r6, [pc, #40]	; (81f88 <__libc_init_array+0x48>)
   81f5e:	4d0b      	ldr	r5, [pc, #44]	; (81f8c <__libc_init_array+0x4c>)
   81f60:	f004 fde2 	bl	86b28 <_init>
   81f64:	1b76      	subs	r6, r6, r5
   81f66:	10b6      	asrs	r6, r6, #2
   81f68:	bf18      	it	ne
   81f6a:	2400      	movne	r4, #0
   81f6c:	d006      	beq.n	81f7c <__libc_init_array+0x3c>
   81f6e:	3401      	adds	r4, #1
   81f70:	f855 3b04 	ldr.w	r3, [r5], #4
   81f74:	4798      	blx	r3
   81f76:	42a6      	cmp	r6, r4
   81f78:	d1f9      	bne.n	81f6e <__libc_init_array+0x2e>
   81f7a:	bd70      	pop	{r4, r5, r6, pc}
   81f7c:	bd70      	pop	{r4, r5, r6, pc}
   81f7e:	bf00      	nop
   81f80:	00086b34 	.word	0x00086b34
   81f84:	00086b34 	.word	0x00086b34
   81f88:	00086b3c 	.word	0x00086b3c
   81f8c:	00086b34 	.word	0x00086b34

00081f90 <memcpy>:
   81f90:	4684      	mov	ip, r0
   81f92:	ea41 0300 	orr.w	r3, r1, r0
   81f96:	f013 0303 	ands.w	r3, r3, #3
   81f9a:	d149      	bne.n	82030 <memcpy+0xa0>
   81f9c:	3a40      	subs	r2, #64	; 0x40
   81f9e:	d323      	bcc.n	81fe8 <memcpy+0x58>
   81fa0:	680b      	ldr	r3, [r1, #0]
   81fa2:	6003      	str	r3, [r0, #0]
   81fa4:	684b      	ldr	r3, [r1, #4]
   81fa6:	6043      	str	r3, [r0, #4]
   81fa8:	688b      	ldr	r3, [r1, #8]
   81faa:	6083      	str	r3, [r0, #8]
   81fac:	68cb      	ldr	r3, [r1, #12]
   81fae:	60c3      	str	r3, [r0, #12]
   81fb0:	690b      	ldr	r3, [r1, #16]
   81fb2:	6103      	str	r3, [r0, #16]
   81fb4:	694b      	ldr	r3, [r1, #20]
   81fb6:	6143      	str	r3, [r0, #20]
   81fb8:	698b      	ldr	r3, [r1, #24]
   81fba:	6183      	str	r3, [r0, #24]
   81fbc:	69cb      	ldr	r3, [r1, #28]
   81fbe:	61c3      	str	r3, [r0, #28]
   81fc0:	6a0b      	ldr	r3, [r1, #32]
   81fc2:	6203      	str	r3, [r0, #32]
   81fc4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81fc6:	6243      	str	r3, [r0, #36]	; 0x24
   81fc8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81fca:	6283      	str	r3, [r0, #40]	; 0x28
   81fcc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81fce:	62c3      	str	r3, [r0, #44]	; 0x2c
   81fd0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81fd2:	6303      	str	r3, [r0, #48]	; 0x30
   81fd4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81fd6:	6343      	str	r3, [r0, #52]	; 0x34
   81fd8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81fda:	6383      	str	r3, [r0, #56]	; 0x38
   81fdc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81fde:	63c3      	str	r3, [r0, #60]	; 0x3c
   81fe0:	3040      	adds	r0, #64	; 0x40
   81fe2:	3140      	adds	r1, #64	; 0x40
   81fe4:	3a40      	subs	r2, #64	; 0x40
   81fe6:	d2db      	bcs.n	81fa0 <memcpy+0x10>
   81fe8:	3230      	adds	r2, #48	; 0x30
   81fea:	d30b      	bcc.n	82004 <memcpy+0x74>
   81fec:	680b      	ldr	r3, [r1, #0]
   81fee:	6003      	str	r3, [r0, #0]
   81ff0:	684b      	ldr	r3, [r1, #4]
   81ff2:	6043      	str	r3, [r0, #4]
   81ff4:	688b      	ldr	r3, [r1, #8]
   81ff6:	6083      	str	r3, [r0, #8]
   81ff8:	68cb      	ldr	r3, [r1, #12]
   81ffa:	60c3      	str	r3, [r0, #12]
   81ffc:	3010      	adds	r0, #16
   81ffe:	3110      	adds	r1, #16
   82000:	3a10      	subs	r2, #16
   82002:	d2f3      	bcs.n	81fec <memcpy+0x5c>
   82004:	320c      	adds	r2, #12
   82006:	d305      	bcc.n	82014 <memcpy+0x84>
   82008:	f851 3b04 	ldr.w	r3, [r1], #4
   8200c:	f840 3b04 	str.w	r3, [r0], #4
   82010:	3a04      	subs	r2, #4
   82012:	d2f9      	bcs.n	82008 <memcpy+0x78>
   82014:	3204      	adds	r2, #4
   82016:	d008      	beq.n	8202a <memcpy+0x9a>
   82018:	07d2      	lsls	r2, r2, #31
   8201a:	bf1c      	itt	ne
   8201c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82020:	f800 3b01 	strbne.w	r3, [r0], #1
   82024:	d301      	bcc.n	8202a <memcpy+0x9a>
   82026:	880b      	ldrh	r3, [r1, #0]
   82028:	8003      	strh	r3, [r0, #0]
   8202a:	4660      	mov	r0, ip
   8202c:	4770      	bx	lr
   8202e:	bf00      	nop
   82030:	2a08      	cmp	r2, #8
   82032:	d313      	bcc.n	8205c <memcpy+0xcc>
   82034:	078b      	lsls	r3, r1, #30
   82036:	d0b1      	beq.n	81f9c <memcpy+0xc>
   82038:	f010 0303 	ands.w	r3, r0, #3
   8203c:	d0ae      	beq.n	81f9c <memcpy+0xc>
   8203e:	f1c3 0304 	rsb	r3, r3, #4
   82042:	1ad2      	subs	r2, r2, r3
   82044:	07db      	lsls	r3, r3, #31
   82046:	bf1c      	itt	ne
   82048:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8204c:	f800 3b01 	strbne.w	r3, [r0], #1
   82050:	d3a4      	bcc.n	81f9c <memcpy+0xc>
   82052:	f831 3b02 	ldrh.w	r3, [r1], #2
   82056:	f820 3b02 	strh.w	r3, [r0], #2
   8205a:	e79f      	b.n	81f9c <memcpy+0xc>
   8205c:	3a04      	subs	r2, #4
   8205e:	d3d9      	bcc.n	82014 <memcpy+0x84>
   82060:	3a01      	subs	r2, #1
   82062:	f811 3b01 	ldrb.w	r3, [r1], #1
   82066:	f800 3b01 	strb.w	r3, [r0], #1
   8206a:	d2f9      	bcs.n	82060 <memcpy+0xd0>
   8206c:	780b      	ldrb	r3, [r1, #0]
   8206e:	7003      	strb	r3, [r0, #0]
   82070:	784b      	ldrb	r3, [r1, #1]
   82072:	7043      	strb	r3, [r0, #1]
   82074:	788b      	ldrb	r3, [r1, #2]
   82076:	7083      	strb	r3, [r0, #2]
   82078:	4660      	mov	r0, ip
   8207a:	4770      	bx	lr

0008207c <memset>:
   8207c:	b470      	push	{r4, r5, r6}
   8207e:	0786      	lsls	r6, r0, #30
   82080:	d046      	beq.n	82110 <memset+0x94>
   82082:	1e54      	subs	r4, r2, #1
   82084:	2a00      	cmp	r2, #0
   82086:	d041      	beq.n	8210c <memset+0x90>
   82088:	b2ca      	uxtb	r2, r1
   8208a:	4603      	mov	r3, r0
   8208c:	e002      	b.n	82094 <memset+0x18>
   8208e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82092:	d33b      	bcc.n	8210c <memset+0x90>
   82094:	f803 2b01 	strb.w	r2, [r3], #1
   82098:	079d      	lsls	r5, r3, #30
   8209a:	d1f8      	bne.n	8208e <memset+0x12>
   8209c:	2c03      	cmp	r4, #3
   8209e:	d92e      	bls.n	820fe <memset+0x82>
   820a0:	b2cd      	uxtb	r5, r1
   820a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   820a6:	2c0f      	cmp	r4, #15
   820a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   820ac:	d919      	bls.n	820e2 <memset+0x66>
   820ae:	4626      	mov	r6, r4
   820b0:	f103 0210 	add.w	r2, r3, #16
   820b4:	3e10      	subs	r6, #16
   820b6:	2e0f      	cmp	r6, #15
   820b8:	f842 5c10 	str.w	r5, [r2, #-16]
   820bc:	f842 5c0c 	str.w	r5, [r2, #-12]
   820c0:	f842 5c08 	str.w	r5, [r2, #-8]
   820c4:	f842 5c04 	str.w	r5, [r2, #-4]
   820c8:	f102 0210 	add.w	r2, r2, #16
   820cc:	d8f2      	bhi.n	820b4 <memset+0x38>
   820ce:	f1a4 0210 	sub.w	r2, r4, #16
   820d2:	f022 020f 	bic.w	r2, r2, #15
   820d6:	f004 040f 	and.w	r4, r4, #15
   820da:	3210      	adds	r2, #16
   820dc:	2c03      	cmp	r4, #3
   820de:	4413      	add	r3, r2
   820e0:	d90d      	bls.n	820fe <memset+0x82>
   820e2:	461e      	mov	r6, r3
   820e4:	4622      	mov	r2, r4
   820e6:	3a04      	subs	r2, #4
   820e8:	2a03      	cmp	r2, #3
   820ea:	f846 5b04 	str.w	r5, [r6], #4
   820ee:	d8fa      	bhi.n	820e6 <memset+0x6a>
   820f0:	1f22      	subs	r2, r4, #4
   820f2:	f022 0203 	bic.w	r2, r2, #3
   820f6:	3204      	adds	r2, #4
   820f8:	4413      	add	r3, r2
   820fa:	f004 0403 	and.w	r4, r4, #3
   820fe:	b12c      	cbz	r4, 8210c <memset+0x90>
   82100:	b2c9      	uxtb	r1, r1
   82102:	441c      	add	r4, r3
   82104:	f803 1b01 	strb.w	r1, [r3], #1
   82108:	429c      	cmp	r4, r3
   8210a:	d1fb      	bne.n	82104 <memset+0x88>
   8210c:	bc70      	pop	{r4, r5, r6}
   8210e:	4770      	bx	lr
   82110:	4614      	mov	r4, r2
   82112:	4603      	mov	r3, r0
   82114:	e7c2      	b.n	8209c <memset+0x20>
   82116:	bf00      	nop

00082118 <sprintf>:
   82118:	b40e      	push	{r1, r2, r3}
   8211a:	4601      	mov	r1, r0
   8211c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8211e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   82122:	f44f 7702 	mov.w	r7, #520	; 0x208
   82126:	f64f 76ff 	movw	r6, #65535	; 0xffff
   8212a:	b09c      	sub	sp, #112	; 0x70
   8212c:	ac21      	add	r4, sp, #132	; 0x84
   8212e:	f854 2b04 	ldr.w	r2, [r4], #4
   82132:	4b0b      	ldr	r3, [pc, #44]	; (82160 <sprintf+0x48>)
   82134:	9102      	str	r1, [sp, #8]
   82136:	9106      	str	r1, [sp, #24]
   82138:	6818      	ldr	r0, [r3, #0]
   8213a:	a902      	add	r1, sp, #8
   8213c:	4623      	mov	r3, r4
   8213e:	9401      	str	r4, [sp, #4]
   82140:	f8ad 7014 	strh.w	r7, [sp, #20]
   82144:	9504      	str	r5, [sp, #16]
   82146:	9507      	str	r5, [sp, #28]
   82148:	f8ad 6016 	strh.w	r6, [sp, #22]
   8214c:	f000 f838 	bl	821c0 <_svfprintf_r>
   82150:	2200      	movs	r2, #0
   82152:	9b02      	ldr	r3, [sp, #8]
   82154:	701a      	strb	r2, [r3, #0]
   82156:	b01c      	add	sp, #112	; 0x70
   82158:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   8215c:	b003      	add	sp, #12
   8215e:	4770      	bx	lr
   82160:	200705c0 	.word	0x200705c0

00082164 <strlen>:
   82164:	f020 0103 	bic.w	r1, r0, #3
   82168:	f010 0003 	ands.w	r0, r0, #3
   8216c:	f1c0 0000 	rsb	r0, r0, #0
   82170:	f851 3b04 	ldr.w	r3, [r1], #4
   82174:	f100 0c04 	add.w	ip, r0, #4
   82178:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8217c:	f06f 0200 	mvn.w	r2, #0
   82180:	bf1c      	itt	ne
   82182:	fa22 f20c 	lsrne.w	r2, r2, ip
   82186:	4313      	orrne	r3, r2
   82188:	f04f 0c01 	mov.w	ip, #1
   8218c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82190:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82194:	eba3 020c 	sub.w	r2, r3, ip
   82198:	ea22 0203 	bic.w	r2, r2, r3
   8219c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   821a0:	bf04      	itt	eq
   821a2:	f851 3b04 	ldreq.w	r3, [r1], #4
   821a6:	3004      	addeq	r0, #4
   821a8:	d0f4      	beq.n	82194 <strlen+0x30>
   821aa:	f1c2 0100 	rsb	r1, r2, #0
   821ae:	ea02 0201 	and.w	r2, r2, r1
   821b2:	fab2 f282 	clz	r2, r2
   821b6:	f1c2 021f 	rsb	r2, r2, #31
   821ba:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   821be:	4770      	bx	lr

000821c0 <_svfprintf_r>:
   821c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   821c4:	b0c3      	sub	sp, #268	; 0x10c
   821c6:	460c      	mov	r4, r1
   821c8:	910b      	str	r1, [sp, #44]	; 0x2c
   821ca:	4692      	mov	sl, r2
   821cc:	930f      	str	r3, [sp, #60]	; 0x3c
   821ce:	900c      	str	r0, [sp, #48]	; 0x30
   821d0:	f002 fb8c 	bl	848ec <_localeconv_r>
   821d4:	6803      	ldr	r3, [r0, #0]
   821d6:	4618      	mov	r0, r3
   821d8:	931a      	str	r3, [sp, #104]	; 0x68
   821da:	f7ff ffc3 	bl	82164 <strlen>
   821de:	89a3      	ldrh	r3, [r4, #12]
   821e0:	9019      	str	r0, [sp, #100]	; 0x64
   821e2:	0619      	lsls	r1, r3, #24
   821e4:	d503      	bpl.n	821ee <_svfprintf_r+0x2e>
   821e6:	6923      	ldr	r3, [r4, #16]
   821e8:	2b00      	cmp	r3, #0
   821ea:	f001 8035 	beq.w	83258 <_svfprintf_r+0x1098>
   821ee:	2300      	movs	r3, #0
   821f0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   821f4:	46c8      	mov	r8, r9
   821f6:	9315      	str	r3, [sp, #84]	; 0x54
   821f8:	9313      	str	r3, [sp, #76]	; 0x4c
   821fa:	9314      	str	r3, [sp, #80]	; 0x50
   821fc:	9318      	str	r3, [sp, #96]	; 0x60
   821fe:	931b      	str	r3, [sp, #108]	; 0x6c
   82200:	9309      	str	r3, [sp, #36]	; 0x24
   82202:	9316      	str	r3, [sp, #88]	; 0x58
   82204:	9317      	str	r3, [sp, #92]	; 0x5c
   82206:	9327      	str	r3, [sp, #156]	; 0x9c
   82208:	9326      	str	r3, [sp, #152]	; 0x98
   8220a:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8220e:	f89a 3000 	ldrb.w	r3, [sl]
   82212:	4654      	mov	r4, sl
   82214:	b1eb      	cbz	r3, 82252 <_svfprintf_r+0x92>
   82216:	2b25      	cmp	r3, #37	; 0x25
   82218:	d102      	bne.n	82220 <_svfprintf_r+0x60>
   8221a:	e01a      	b.n	82252 <_svfprintf_r+0x92>
   8221c:	2b25      	cmp	r3, #37	; 0x25
   8221e:	d003      	beq.n	82228 <_svfprintf_r+0x68>
   82220:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82224:	2b00      	cmp	r3, #0
   82226:	d1f9      	bne.n	8221c <_svfprintf_r+0x5c>
   82228:	eba4 050a 	sub.w	r5, r4, sl
   8222c:	b18d      	cbz	r5, 82252 <_svfprintf_r+0x92>
   8222e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82230:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82232:	3301      	adds	r3, #1
   82234:	442a      	add	r2, r5
   82236:	2b07      	cmp	r3, #7
   82238:	f8c8 a000 	str.w	sl, [r8]
   8223c:	f8c8 5004 	str.w	r5, [r8, #4]
   82240:	9227      	str	r2, [sp, #156]	; 0x9c
   82242:	9326      	str	r3, [sp, #152]	; 0x98
   82244:	f300 808a 	bgt.w	8235c <_svfprintf_r+0x19c>
   82248:	f108 0808 	add.w	r8, r8, #8
   8224c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8224e:	442b      	add	r3, r5
   82250:	9309      	str	r3, [sp, #36]	; 0x24
   82252:	7823      	ldrb	r3, [r4, #0]
   82254:	2b00      	cmp	r3, #0
   82256:	f000 8089 	beq.w	8236c <_svfprintf_r+0x1ac>
   8225a:	2300      	movs	r3, #0
   8225c:	f04f 30ff 	mov.w	r0, #4294967295
   82260:	461a      	mov	r2, r3
   82262:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82266:	4619      	mov	r1, r3
   82268:	930d      	str	r3, [sp, #52]	; 0x34
   8226a:	469b      	mov	fp, r3
   8226c:	7863      	ldrb	r3, [r4, #1]
   8226e:	f104 0a01 	add.w	sl, r4, #1
   82272:	900a      	str	r0, [sp, #40]	; 0x28
   82274:	f10a 0a01 	add.w	sl, sl, #1
   82278:	f1a3 0020 	sub.w	r0, r3, #32
   8227c:	2858      	cmp	r0, #88	; 0x58
   8227e:	f200 83b7 	bhi.w	829f0 <_svfprintf_r+0x830>
   82282:	e8df f010 	tbh	[pc, r0, lsl #1]
   82286:	034c      	.short	0x034c
   82288:	03b503b5 	.word	0x03b503b5
   8228c:	03b50354 	.word	0x03b50354
   82290:	03b503b5 	.word	0x03b503b5
   82294:	03b503b5 	.word	0x03b503b5
   82298:	005903b5 	.word	0x005903b5
   8229c:	03b50359 	.word	0x03b50359
   822a0:	02140066 	.word	0x02140066
   822a4:	022f03b5 	.word	0x022f03b5
   822a8:	03a503a5 	.word	0x03a503a5
   822ac:	03a503a5 	.word	0x03a503a5
   822b0:	03a503a5 	.word	0x03a503a5
   822b4:	03a503a5 	.word	0x03a503a5
   822b8:	03b503a5 	.word	0x03b503a5
   822bc:	03b503b5 	.word	0x03b503b5
   822c0:	03b503b5 	.word	0x03b503b5
   822c4:	03b503b5 	.word	0x03b503b5
   822c8:	03b503b5 	.word	0x03b503b5
   822cc:	028b03b5 	.word	0x028b03b5
   822d0:	03b502d3 	.word	0x03b502d3
   822d4:	03b502d3 	.word	0x03b502d3
   822d8:	03b503b5 	.word	0x03b503b5
   822dc:	031b03b5 	.word	0x031b03b5
   822e0:	03b503b5 	.word	0x03b503b5
   822e4:	03b50320 	.word	0x03b50320
   822e8:	03b503b5 	.word	0x03b503b5
   822ec:	03b503b5 	.word	0x03b503b5
   822f0:	03b50234 	.word	0x03b50234
   822f4:	024b03b5 	.word	0x024b03b5
   822f8:	03b503b5 	.word	0x03b503b5
   822fc:	03b503b5 	.word	0x03b503b5
   82300:	03b503b5 	.word	0x03b503b5
   82304:	03b503b5 	.word	0x03b503b5
   82308:	03b503b5 	.word	0x03b503b5
   8230c:	039e0276 	.word	0x039e0276
   82310:	02d302d3 	.word	0x02d302d3
   82314:	036302d3 	.word	0x036302d3
   82318:	03b5039e 	.word	0x03b5039e
   8231c:	036803b5 	.word	0x036803b5
   82320:	037503b5 	.word	0x037503b5
   82324:	038c01dd 	.word	0x038c01dd
   82328:	03b5035e 	.word	0x03b5035e
   8232c:	03b501f2 	.word	0x03b501f2
   82330:	03b50087 	.word	0x03b50087
   82334:	033203b5 	.word	0x033203b5
   82338:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8233a:	6823      	ldr	r3, [r4, #0]
   8233c:	4618      	mov	r0, r3
   8233e:	930d      	str	r3, [sp, #52]	; 0x34
   82340:	4623      	mov	r3, r4
   82342:	2800      	cmp	r0, #0
   82344:	f103 0304 	add.w	r3, r3, #4
   82348:	930f      	str	r3, [sp, #60]	; 0x3c
   8234a:	da04      	bge.n	82356 <_svfprintf_r+0x196>
   8234c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8234e:	425b      	negs	r3, r3
   82350:	930d      	str	r3, [sp, #52]	; 0x34
   82352:	f04b 0b04 	orr.w	fp, fp, #4
   82356:	f89a 3000 	ldrb.w	r3, [sl]
   8235a:	e78b      	b.n	82274 <_svfprintf_r+0xb4>
   8235c:	aa25      	add	r2, sp, #148	; 0x94
   8235e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82360:	980c      	ldr	r0, [sp, #48]	; 0x30
   82362:	f003 fb07 	bl	85974 <__ssprint_r>
   82366:	b940      	cbnz	r0, 8237a <_svfprintf_r+0x1ba>
   82368:	46c8      	mov	r8, r9
   8236a:	e76f      	b.n	8224c <_svfprintf_r+0x8c>
   8236c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8236e:	b123      	cbz	r3, 8237a <_svfprintf_r+0x1ba>
   82370:	980c      	ldr	r0, [sp, #48]	; 0x30
   82372:	aa25      	add	r2, sp, #148	; 0x94
   82374:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82376:	f003 fafd 	bl	85974 <__ssprint_r>
   8237a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8237c:	899b      	ldrh	r3, [r3, #12]
   8237e:	f013 0f40 	tst.w	r3, #64	; 0x40
   82382:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82384:	bf18      	it	ne
   82386:	f04f 33ff 	movne.w	r3, #4294967295
   8238a:	9309      	str	r3, [sp, #36]	; 0x24
   8238c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8238e:	b043      	add	sp, #268	; 0x10c
   82390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82394:	f01b 0f20 	tst.w	fp, #32
   82398:	9311      	str	r3, [sp, #68]	; 0x44
   8239a:	f040 81af 	bne.w	826fc <_svfprintf_r+0x53c>
   8239e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   823a0:	f01b 0f10 	tst.w	fp, #16
   823a4:	4613      	mov	r3, r2
   823a6:	f040 859a 	bne.w	82ede <_svfprintf_r+0xd1e>
   823aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
   823ae:	f000 8596 	beq.w	82ede <_svfprintf_r+0xd1e>
   823b2:	2500      	movs	r5, #0
   823b4:	2301      	movs	r3, #1
   823b6:	8814      	ldrh	r4, [r2, #0]
   823b8:	3204      	adds	r2, #4
   823ba:	920f      	str	r2, [sp, #60]	; 0x3c
   823bc:	2200      	movs	r2, #0
   823be:	4617      	mov	r7, r2
   823c0:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   823c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   823c6:	1c4a      	adds	r2, r1, #1
   823c8:	f000 8210 	beq.w	827ec <_svfprintf_r+0x62c>
   823cc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   823d0:	9207      	str	r2, [sp, #28]
   823d2:	ea54 0205 	orrs.w	r2, r4, r5
   823d6:	f040 820f 	bne.w	827f8 <_svfprintf_r+0x638>
   823da:	2900      	cmp	r1, #0
   823dc:	f040 8431 	bne.w	82c42 <_svfprintf_r+0xa82>
   823e0:	2b00      	cmp	r3, #0
   823e2:	f040 8539 	bne.w	82e58 <_svfprintf_r+0xc98>
   823e6:	f01b 0301 	ands.w	r3, fp, #1
   823ea:	930e      	str	r3, [sp, #56]	; 0x38
   823ec:	f000 8662 	beq.w	830b4 <_svfprintf_r+0xef4>
   823f0:	2330      	movs	r3, #48	; 0x30
   823f2:	ae42      	add	r6, sp, #264	; 0x108
   823f4:	f806 3d41 	strb.w	r3, [r6, #-65]!
   823f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   823fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   823fc:	4293      	cmp	r3, r2
   823fe:	bfb8      	it	lt
   82400:	4613      	movlt	r3, r2
   82402:	9308      	str	r3, [sp, #32]
   82404:	2300      	movs	r3, #0
   82406:	9312      	str	r3, [sp, #72]	; 0x48
   82408:	b117      	cbz	r7, 82410 <_svfprintf_r+0x250>
   8240a:	9b08      	ldr	r3, [sp, #32]
   8240c:	3301      	adds	r3, #1
   8240e:	9308      	str	r3, [sp, #32]
   82410:	9b07      	ldr	r3, [sp, #28]
   82412:	f013 0302 	ands.w	r3, r3, #2
   82416:	9310      	str	r3, [sp, #64]	; 0x40
   82418:	d002      	beq.n	82420 <_svfprintf_r+0x260>
   8241a:	9b08      	ldr	r3, [sp, #32]
   8241c:	3302      	adds	r3, #2
   8241e:	9308      	str	r3, [sp, #32]
   82420:	9b07      	ldr	r3, [sp, #28]
   82422:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   82426:	f040 8310 	bne.w	82a4a <_svfprintf_r+0x88a>
   8242a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8242c:	9a08      	ldr	r2, [sp, #32]
   8242e:	eba3 0b02 	sub.w	fp, r3, r2
   82432:	f1bb 0f00 	cmp.w	fp, #0
   82436:	f340 8308 	ble.w	82a4a <_svfprintf_r+0x88a>
   8243a:	f1bb 0f10 	cmp.w	fp, #16
   8243e:	f340 87b2 	ble.w	833a6 <_svfprintf_r+0x11e6>
   82442:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82444:	4643      	mov	r3, r8
   82446:	4621      	mov	r1, r4
   82448:	46a8      	mov	r8, r5
   8244a:	2710      	movs	r7, #16
   8244c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8244e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82450:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82452:	e006      	b.n	82462 <_svfprintf_r+0x2a2>
   82454:	f1ab 0b10 	sub.w	fp, fp, #16
   82458:	f1bb 0f10 	cmp.w	fp, #16
   8245c:	f103 0308 	add.w	r3, r3, #8
   82460:	dd18      	ble.n	82494 <_svfprintf_r+0x2d4>
   82462:	3201      	adds	r2, #1
   82464:	48ab      	ldr	r0, [pc, #684]	; (82714 <_svfprintf_r+0x554>)
   82466:	3110      	adds	r1, #16
   82468:	2a07      	cmp	r2, #7
   8246a:	9127      	str	r1, [sp, #156]	; 0x9c
   8246c:	9226      	str	r2, [sp, #152]	; 0x98
   8246e:	e883 0081 	stmia.w	r3, {r0, r7}
   82472:	ddef      	ble.n	82454 <_svfprintf_r+0x294>
   82474:	aa25      	add	r2, sp, #148	; 0x94
   82476:	4629      	mov	r1, r5
   82478:	4620      	mov	r0, r4
   8247a:	f003 fa7b 	bl	85974 <__ssprint_r>
   8247e:	2800      	cmp	r0, #0
   82480:	f47f af7b 	bne.w	8237a <_svfprintf_r+0x1ba>
   82484:	f1ab 0b10 	sub.w	fp, fp, #16
   82488:	f1bb 0f10 	cmp.w	fp, #16
   8248c:	464b      	mov	r3, r9
   8248e:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82490:	9a26      	ldr	r2, [sp, #152]	; 0x98
   82492:	dce6      	bgt.n	82462 <_svfprintf_r+0x2a2>
   82494:	4645      	mov	r5, r8
   82496:	460c      	mov	r4, r1
   82498:	4698      	mov	r8, r3
   8249a:	3201      	adds	r2, #1
   8249c:	4b9d      	ldr	r3, [pc, #628]	; (82714 <_svfprintf_r+0x554>)
   8249e:	445c      	add	r4, fp
   824a0:	2a07      	cmp	r2, #7
   824a2:	9427      	str	r4, [sp, #156]	; 0x9c
   824a4:	9226      	str	r2, [sp, #152]	; 0x98
   824a6:	e888 0808 	stmia.w	r8, {r3, fp}
   824aa:	f300 82c3 	bgt.w	82a34 <_svfprintf_r+0x874>
   824ae:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   824b2:	f108 0808 	add.w	r8, r8, #8
   824b6:	b187      	cbz	r7, 824da <_svfprintf_r+0x31a>
   824b8:	2101      	movs	r1, #1
   824ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   824bc:	440c      	add	r4, r1
   824be:	440b      	add	r3, r1
   824c0:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   824c4:	2b07      	cmp	r3, #7
   824c6:	9427      	str	r4, [sp, #156]	; 0x9c
   824c8:	9326      	str	r3, [sp, #152]	; 0x98
   824ca:	f8c8 1004 	str.w	r1, [r8, #4]
   824ce:	f8c8 2000 	str.w	r2, [r8]
   824d2:	f300 83cd 	bgt.w	82c70 <_svfprintf_r+0xab0>
   824d6:	f108 0808 	add.w	r8, r8, #8
   824da:	9b10      	ldr	r3, [sp, #64]	; 0x40
   824dc:	b17b      	cbz	r3, 824fe <_svfprintf_r+0x33e>
   824de:	2102      	movs	r1, #2
   824e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   824e2:	440c      	add	r4, r1
   824e4:	3301      	adds	r3, #1
   824e6:	aa1e      	add	r2, sp, #120	; 0x78
   824e8:	2b07      	cmp	r3, #7
   824ea:	9427      	str	r4, [sp, #156]	; 0x9c
   824ec:	9326      	str	r3, [sp, #152]	; 0x98
   824ee:	f8c8 1004 	str.w	r1, [r8, #4]
   824f2:	f8c8 2000 	str.w	r2, [r8]
   824f6:	f300 8411 	bgt.w	82d1c <_svfprintf_r+0xb5c>
   824fa:	f108 0808 	add.w	r8, r8, #8
   824fe:	2d80      	cmp	r5, #128	; 0x80
   82500:	f000 8304 	beq.w	82b0c <_svfprintf_r+0x94c>
   82504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82508:	1a9f      	subs	r7, r3, r2
   8250a:	2f00      	cmp	r7, #0
   8250c:	dd37      	ble.n	8257e <_svfprintf_r+0x3be>
   8250e:	2f10      	cmp	r7, #16
   82510:	f340 8679 	ble.w	83206 <_svfprintf_r+0x1046>
   82514:	4d80      	ldr	r5, [pc, #512]	; (82718 <_svfprintf_r+0x558>)
   82516:	4642      	mov	r2, r8
   82518:	4621      	mov	r1, r4
   8251a:	46b0      	mov	r8, r6
   8251c:	f04f 0b10 	mov.w	fp, #16
   82520:	462e      	mov	r6, r5
   82522:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82524:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82526:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82528:	e004      	b.n	82534 <_svfprintf_r+0x374>
   8252a:	3f10      	subs	r7, #16
   8252c:	2f10      	cmp	r7, #16
   8252e:	f102 0208 	add.w	r2, r2, #8
   82532:	dd15      	ble.n	82560 <_svfprintf_r+0x3a0>
   82534:	3301      	adds	r3, #1
   82536:	3110      	adds	r1, #16
   82538:	2b07      	cmp	r3, #7
   8253a:	9127      	str	r1, [sp, #156]	; 0x9c
   8253c:	9326      	str	r3, [sp, #152]	; 0x98
   8253e:	e882 0840 	stmia.w	r2, {r6, fp}
   82542:	ddf2      	ble.n	8252a <_svfprintf_r+0x36a>
   82544:	aa25      	add	r2, sp, #148	; 0x94
   82546:	4629      	mov	r1, r5
   82548:	4620      	mov	r0, r4
   8254a:	f003 fa13 	bl	85974 <__ssprint_r>
   8254e:	2800      	cmp	r0, #0
   82550:	f47f af13 	bne.w	8237a <_svfprintf_r+0x1ba>
   82554:	3f10      	subs	r7, #16
   82556:	2f10      	cmp	r7, #16
   82558:	464a      	mov	r2, r9
   8255a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8255c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8255e:	dce9      	bgt.n	82534 <_svfprintf_r+0x374>
   82560:	4635      	mov	r5, r6
   82562:	460c      	mov	r4, r1
   82564:	4646      	mov	r6, r8
   82566:	4690      	mov	r8, r2
   82568:	3301      	adds	r3, #1
   8256a:	443c      	add	r4, r7
   8256c:	2b07      	cmp	r3, #7
   8256e:	9427      	str	r4, [sp, #156]	; 0x9c
   82570:	9326      	str	r3, [sp, #152]	; 0x98
   82572:	e888 00a0 	stmia.w	r8, {r5, r7}
   82576:	f300 8370 	bgt.w	82c5a <_svfprintf_r+0xa9a>
   8257a:	f108 0808 	add.w	r8, r8, #8
   8257e:	9b07      	ldr	r3, [sp, #28]
   82580:	05df      	lsls	r7, r3, #23
   82582:	f100 8264 	bmi.w	82a4e <_svfprintf_r+0x88e>
   82586:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82588:	990e      	ldr	r1, [sp, #56]	; 0x38
   8258a:	3301      	adds	r3, #1
   8258c:	440c      	add	r4, r1
   8258e:	2b07      	cmp	r3, #7
   82590:	9427      	str	r4, [sp, #156]	; 0x9c
   82592:	f8c8 6000 	str.w	r6, [r8]
   82596:	f8c8 1004 	str.w	r1, [r8, #4]
   8259a:	9326      	str	r3, [sp, #152]	; 0x98
   8259c:	f300 83b3 	bgt.w	82d06 <_svfprintf_r+0xb46>
   825a0:	f108 0808 	add.w	r8, r8, #8
   825a4:	9b07      	ldr	r3, [sp, #28]
   825a6:	075b      	lsls	r3, r3, #29
   825a8:	d53b      	bpl.n	82622 <_svfprintf_r+0x462>
   825aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   825ac:	9a08      	ldr	r2, [sp, #32]
   825ae:	1a9d      	subs	r5, r3, r2
   825b0:	2d00      	cmp	r5, #0
   825b2:	dd36      	ble.n	82622 <_svfprintf_r+0x462>
   825b4:	2d10      	cmp	r5, #16
   825b6:	f340 8721 	ble.w	833fc <_svfprintf_r+0x123c>
   825ba:	2610      	movs	r6, #16
   825bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   825c0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   825c4:	e004      	b.n	825d0 <_svfprintf_r+0x410>
   825c6:	3d10      	subs	r5, #16
   825c8:	2d10      	cmp	r5, #16
   825ca:	f108 0808 	add.w	r8, r8, #8
   825ce:	dd16      	ble.n	825fe <_svfprintf_r+0x43e>
   825d0:	3301      	adds	r3, #1
   825d2:	4a50      	ldr	r2, [pc, #320]	; (82714 <_svfprintf_r+0x554>)
   825d4:	3410      	adds	r4, #16
   825d6:	2b07      	cmp	r3, #7
   825d8:	9427      	str	r4, [sp, #156]	; 0x9c
   825da:	9326      	str	r3, [sp, #152]	; 0x98
   825dc:	e888 0044 	stmia.w	r8, {r2, r6}
   825e0:	ddf1      	ble.n	825c6 <_svfprintf_r+0x406>
   825e2:	aa25      	add	r2, sp, #148	; 0x94
   825e4:	4659      	mov	r1, fp
   825e6:	4638      	mov	r0, r7
   825e8:	f003 f9c4 	bl	85974 <__ssprint_r>
   825ec:	2800      	cmp	r0, #0
   825ee:	f47f aec4 	bne.w	8237a <_svfprintf_r+0x1ba>
   825f2:	3d10      	subs	r5, #16
   825f4:	2d10      	cmp	r5, #16
   825f6:	46c8      	mov	r8, r9
   825f8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   825fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825fc:	dce8      	bgt.n	825d0 <_svfprintf_r+0x410>
   825fe:	3301      	adds	r3, #1
   82600:	4a44      	ldr	r2, [pc, #272]	; (82714 <_svfprintf_r+0x554>)
   82602:	442c      	add	r4, r5
   82604:	2b07      	cmp	r3, #7
   82606:	9427      	str	r4, [sp, #156]	; 0x9c
   82608:	9326      	str	r3, [sp, #152]	; 0x98
   8260a:	e888 0024 	stmia.w	r8, {r2, r5}
   8260e:	dd08      	ble.n	82622 <_svfprintf_r+0x462>
   82610:	aa25      	add	r2, sp, #148	; 0x94
   82612:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82614:	980c      	ldr	r0, [sp, #48]	; 0x30
   82616:	f003 f9ad 	bl	85974 <__ssprint_r>
   8261a:	2800      	cmp	r0, #0
   8261c:	f47f aead 	bne.w	8237a <_svfprintf_r+0x1ba>
   82620:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82622:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82626:	9908      	ldr	r1, [sp, #32]
   82628:	428a      	cmp	r2, r1
   8262a:	bfac      	ite	ge
   8262c:	189b      	addge	r3, r3, r2
   8262e:	185b      	addlt	r3, r3, r1
   82630:	9309      	str	r3, [sp, #36]	; 0x24
   82632:	2c00      	cmp	r4, #0
   82634:	f040 82fb 	bne.w	82c2e <_svfprintf_r+0xa6e>
   82638:	2300      	movs	r3, #0
   8263a:	46c8      	mov	r8, r9
   8263c:	9326      	str	r3, [sp, #152]	; 0x98
   8263e:	e5e6      	b.n	8220e <_svfprintf_r+0x4e>
   82640:	9311      	str	r3, [sp, #68]	; 0x44
   82642:	f01b 0320 	ands.w	r3, fp, #32
   82646:	f040 8145 	bne.w	828d4 <_svfprintf_r+0x714>
   8264a:	f01b 0210 	ands.w	r2, fp, #16
   8264e:	f040 8466 	bne.w	82f1e <_svfprintf_r+0xd5e>
   82652:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   82656:	f000 8462 	beq.w	82f1e <_svfprintf_r+0xd5e>
   8265a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8265c:	4613      	mov	r3, r2
   8265e:	460a      	mov	r2, r1
   82660:	3204      	adds	r2, #4
   82662:	880c      	ldrh	r4, [r1, #0]
   82664:	2500      	movs	r5, #0
   82666:	920f      	str	r2, [sp, #60]	; 0x3c
   82668:	e6a8      	b.n	823bc <_svfprintf_r+0x1fc>
   8266a:	2500      	movs	r5, #0
   8266c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8266e:	9311      	str	r3, [sp, #68]	; 0x44
   82670:	6816      	ldr	r6, [r2, #0]
   82672:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   82676:	1d14      	adds	r4, r2, #4
   82678:	2e00      	cmp	r6, #0
   8267a:	f000 86cd 	beq.w	83418 <_svfprintf_r+0x1258>
   8267e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   82680:	1c53      	adds	r3, r2, #1
   82682:	f000 861b 	beq.w	832bc <_svfprintf_r+0x10fc>
   82686:	4629      	mov	r1, r5
   82688:	4630      	mov	r0, r6
   8268a:	f002 fbf9 	bl	84e80 <memchr>
   8268e:	2800      	cmp	r0, #0
   82690:	f000 870d 	beq.w	834ae <_svfprintf_r+0x12ee>
   82694:	1b83      	subs	r3, r0, r6
   82696:	950a      	str	r5, [sp, #40]	; 0x28
   82698:	930e      	str	r3, [sp, #56]	; 0x38
   8269a:	940f      	str	r4, [sp, #60]	; 0x3c
   8269c:	f8cd b01c 	str.w	fp, [sp, #28]
   826a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   826a4:	9308      	str	r3, [sp, #32]
   826a6:	9512      	str	r5, [sp, #72]	; 0x48
   826a8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   826ac:	e6ac      	b.n	82408 <_svfprintf_r+0x248>
   826ae:	f89a 3000 	ldrb.w	r3, [sl]
   826b2:	f10a 0401 	add.w	r4, sl, #1
   826b6:	2b2a      	cmp	r3, #42	; 0x2a
   826b8:	f000 87c2 	beq.w	83640 <_svfprintf_r+0x1480>
   826bc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   826c0:	2809      	cmp	r0, #9
   826c2:	46a2      	mov	sl, r4
   826c4:	f200 8718 	bhi.w	834f8 <_svfprintf_r+0x1338>
   826c8:	2300      	movs	r3, #0
   826ca:	461c      	mov	r4, r3
   826cc:	f81a 3b01 	ldrb.w	r3, [sl], #1
   826d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   826d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   826d8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   826dc:	2809      	cmp	r0, #9
   826de:	d9f5      	bls.n	826cc <_svfprintf_r+0x50c>
   826e0:	940a      	str	r4, [sp, #40]	; 0x28
   826e2:	e5c9      	b.n	82278 <_svfprintf_r+0xb8>
   826e4:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   826e8:	f89a 3000 	ldrb.w	r3, [sl]
   826ec:	e5c2      	b.n	82274 <_svfprintf_r+0xb4>
   826ee:	f04b 0b10 	orr.w	fp, fp, #16
   826f2:	f01b 0f20 	tst.w	fp, #32
   826f6:	9311      	str	r3, [sp, #68]	; 0x44
   826f8:	f43f ae51 	beq.w	8239e <_svfprintf_r+0x1de>
   826fc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   826fe:	3407      	adds	r4, #7
   82700:	f024 0307 	bic.w	r3, r4, #7
   82704:	f103 0208 	add.w	r2, r3, #8
   82708:	e9d3 4500 	ldrd	r4, r5, [r3]
   8270c:	920f      	str	r2, [sp, #60]	; 0x3c
   8270e:	2301      	movs	r3, #1
   82710:	e654      	b.n	823bc <_svfprintf_r+0x1fc>
   82712:	bf00      	nop
   82714:	000868e4 	.word	0x000868e4
   82718:	000868f4 	.word	0x000868f4
   8271c:	9311      	str	r3, [sp, #68]	; 0x44
   8271e:	2a00      	cmp	r2, #0
   82720:	f040 87ad 	bne.w	8367e <_svfprintf_r+0x14be>
   82724:	4bbe      	ldr	r3, [pc, #760]	; (82a20 <_svfprintf_r+0x860>)
   82726:	f01b 0f20 	tst.w	fp, #32
   8272a:	9318      	str	r3, [sp, #96]	; 0x60
   8272c:	f040 80e7 	bne.w	828fe <_svfprintf_r+0x73e>
   82730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82732:	f01b 0f10 	tst.w	fp, #16
   82736:	4613      	mov	r3, r2
   82738:	f040 83d8 	bne.w	82eec <_svfprintf_r+0xd2c>
   8273c:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82740:	f000 83d4 	beq.w	82eec <_svfprintf_r+0xd2c>
   82744:	2500      	movs	r5, #0
   82746:	3304      	adds	r3, #4
   82748:	8814      	ldrh	r4, [r2, #0]
   8274a:	930f      	str	r3, [sp, #60]	; 0x3c
   8274c:	f01b 0f01 	tst.w	fp, #1
   82750:	f000 80e3 	beq.w	8291a <_svfprintf_r+0x75a>
   82754:	ea54 0305 	orrs.w	r3, r4, r5
   82758:	f000 80df 	beq.w	8291a <_svfprintf_r+0x75a>
   8275c:	2330      	movs	r3, #48	; 0x30
   8275e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   82762:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   82766:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   8276a:	f04b 0b02 	orr.w	fp, fp, #2
   8276e:	2302      	movs	r3, #2
   82770:	e624      	b.n	823bc <_svfprintf_r+0x1fc>
   82772:	2201      	movs	r2, #1
   82774:	9311      	str	r3, [sp, #68]	; 0x44
   82776:	2300      	movs	r3, #0
   82778:	4611      	mov	r1, r2
   8277a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   8277c:	9208      	str	r2, [sp, #32]
   8277e:	6802      	ldr	r2, [r0, #0]
   82780:	461f      	mov	r7, r3
   82782:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82786:	930a      	str	r3, [sp, #40]	; 0x28
   82788:	9312      	str	r3, [sp, #72]	; 0x48
   8278a:	1d03      	adds	r3, r0, #4
   8278c:	f8cd b01c 	str.w	fp, [sp, #28]
   82790:	910e      	str	r1, [sp, #56]	; 0x38
   82792:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82796:	930f      	str	r3, [sp, #60]	; 0x3c
   82798:	ae28      	add	r6, sp, #160	; 0xa0
   8279a:	e639      	b.n	82410 <_svfprintf_r+0x250>
   8279c:	9311      	str	r3, [sp, #68]	; 0x44
   8279e:	2a00      	cmp	r2, #0
   827a0:	f040 8784 	bne.w	836ac <_svfprintf_r+0x14ec>
   827a4:	f04b 0b10 	orr.w	fp, fp, #16
   827a8:	f01b 0f20 	tst.w	fp, #32
   827ac:	f040 8475 	bne.w	8309a <_svfprintf_r+0xeda>
   827b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   827b2:	f01b 0f10 	tst.w	fp, #16
   827b6:	4613      	mov	r3, r2
   827b8:	f040 839d 	bne.w	82ef6 <_svfprintf_r+0xd36>
   827bc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   827c0:	f000 8399 	beq.w	82ef6 <_svfprintf_r+0xd36>
   827c4:	f9b2 4000 	ldrsh.w	r4, [r2]
   827c8:	3304      	adds	r3, #4
   827ca:	17e5      	asrs	r5, r4, #31
   827cc:	930f      	str	r3, [sp, #60]	; 0x3c
   827ce:	4622      	mov	r2, r4
   827d0:	462b      	mov	r3, r5
   827d2:	2a00      	cmp	r2, #0
   827d4:	f173 0300 	sbcs.w	r3, r3, #0
   827d8:	f2c0 8398 	blt.w	82f0c <_svfprintf_r+0xd4c>
   827dc:	990a      	ldr	r1, [sp, #40]	; 0x28
   827de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   827e2:	1c4a      	adds	r2, r1, #1
   827e4:	f04f 0301 	mov.w	r3, #1
   827e8:	f47f adf0 	bne.w	823cc <_svfprintf_r+0x20c>
   827ec:	ea54 0205 	orrs.w	r2, r4, r5
   827f0:	f000 8229 	beq.w	82c46 <_svfprintf_r+0xa86>
   827f4:	f8cd b01c 	str.w	fp, [sp, #28]
   827f8:	2b01      	cmp	r3, #1
   827fa:	f000 830e 	beq.w	82e1a <_svfprintf_r+0xc5a>
   827fe:	2b02      	cmp	r3, #2
   82800:	f040 829c 	bne.w	82d3c <_svfprintf_r+0xb7c>
   82804:	464e      	mov	r6, r9
   82806:	9818      	ldr	r0, [sp, #96]	; 0x60
   82808:	0923      	lsrs	r3, r4, #4
   8280a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   8280e:	0929      	lsrs	r1, r5, #4
   82810:	f004 020f 	and.w	r2, r4, #15
   82814:	460d      	mov	r5, r1
   82816:	461c      	mov	r4, r3
   82818:	5c83      	ldrb	r3, [r0, r2]
   8281a:	f806 3d01 	strb.w	r3, [r6, #-1]!
   8281e:	ea54 0305 	orrs.w	r3, r4, r5
   82822:	d1f1      	bne.n	82808 <_svfprintf_r+0x648>
   82824:	eba9 0306 	sub.w	r3, r9, r6
   82828:	930e      	str	r3, [sp, #56]	; 0x38
   8282a:	e5e5      	b.n	823f8 <_svfprintf_r+0x238>
   8282c:	9311      	str	r3, [sp, #68]	; 0x44
   8282e:	2a00      	cmp	r2, #0
   82830:	f040 8738 	bne.w	836a4 <_svfprintf_r+0x14e4>
   82834:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82836:	f01b 0f08 	tst.w	fp, #8
   8283a:	f104 0407 	add.w	r4, r4, #7
   8283e:	f000 84cf 	beq.w	831e0 <_svfprintf_r+0x1020>
   82842:	f024 0307 	bic.w	r3, r4, #7
   82846:	f103 0208 	add.w	r2, r3, #8
   8284a:	920f      	str	r2, [sp, #60]	; 0x3c
   8284c:	681a      	ldr	r2, [r3, #0]
   8284e:	685b      	ldr	r3, [r3, #4]
   82850:	9215      	str	r2, [sp, #84]	; 0x54
   82852:	9314      	str	r3, [sp, #80]	; 0x50
   82854:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82856:	9d15      	ldr	r5, [sp, #84]	; 0x54
   82858:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   8285c:	4628      	mov	r0, r5
   8285e:	4621      	mov	r1, r4
   82860:	f04f 32ff 	mov.w	r2, #4294967295
   82864:	4b6f      	ldr	r3, [pc, #444]	; (82a24 <_svfprintf_r+0x864>)
   82866:	f003 fdf3 	bl	86450 <__aeabi_dcmpun>
   8286a:	2800      	cmp	r0, #0
   8286c:	f040 8434 	bne.w	830d8 <_svfprintf_r+0xf18>
   82870:	4628      	mov	r0, r5
   82872:	4621      	mov	r1, r4
   82874:	f04f 32ff 	mov.w	r2, #4294967295
   82878:	4b6a      	ldr	r3, [pc, #424]	; (82a24 <_svfprintf_r+0x864>)
   8287a:	f003 fdcb 	bl	86414 <__aeabi_dcmple>
   8287e:	2800      	cmp	r0, #0
   82880:	f040 842a 	bne.w	830d8 <_svfprintf_r+0xf18>
   82884:	a815      	add	r0, sp, #84	; 0x54
   82886:	c80d      	ldmia	r0, {r0, r2, r3}
   82888:	9914      	ldr	r1, [sp, #80]	; 0x50
   8288a:	f003 fdb9 	bl	86400 <__aeabi_dcmplt>
   8288e:	2800      	cmp	r0, #0
   82890:	f040 85d4 	bne.w	8343c <_svfprintf_r+0x127c>
   82894:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82898:	2303      	movs	r3, #3
   8289a:	461a      	mov	r2, r3
   8289c:	9308      	str	r3, [sp, #32]
   8289e:	2300      	movs	r3, #0
   828a0:	4e61      	ldr	r6, [pc, #388]	; (82a28 <_svfprintf_r+0x868>)
   828a2:	4619      	mov	r1, r3
   828a4:	930a      	str	r3, [sp, #40]	; 0x28
   828a6:	4b61      	ldr	r3, [pc, #388]	; (82a2c <_svfprintf_r+0x86c>)
   828a8:	920e      	str	r2, [sp, #56]	; 0x38
   828aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   828ac:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   828b0:	9007      	str	r0, [sp, #28]
   828b2:	9112      	str	r1, [sp, #72]	; 0x48
   828b4:	2a47      	cmp	r2, #71	; 0x47
   828b6:	bfd8      	it	le
   828b8:	461e      	movle	r6, r3
   828ba:	e5a5      	b.n	82408 <_svfprintf_r+0x248>
   828bc:	f04b 0b08 	orr.w	fp, fp, #8
   828c0:	f89a 3000 	ldrb.w	r3, [sl]
   828c4:	e4d6      	b.n	82274 <_svfprintf_r+0xb4>
   828c6:	f04b 0b10 	orr.w	fp, fp, #16
   828ca:	9311      	str	r3, [sp, #68]	; 0x44
   828cc:	f01b 0320 	ands.w	r3, fp, #32
   828d0:	f43f aebb 	beq.w	8264a <_svfprintf_r+0x48a>
   828d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   828d6:	3407      	adds	r4, #7
   828d8:	f024 0307 	bic.w	r3, r4, #7
   828dc:	f103 0208 	add.w	r2, r3, #8
   828e0:	e9d3 4500 	ldrd	r4, r5, [r3]
   828e4:	920f      	str	r2, [sp, #60]	; 0x3c
   828e6:	2300      	movs	r3, #0
   828e8:	e568      	b.n	823bc <_svfprintf_r+0x1fc>
   828ea:	9311      	str	r3, [sp, #68]	; 0x44
   828ec:	2a00      	cmp	r2, #0
   828ee:	f040 86c2 	bne.w	83676 <_svfprintf_r+0x14b6>
   828f2:	4b4f      	ldr	r3, [pc, #316]	; (82a30 <_svfprintf_r+0x870>)
   828f4:	f01b 0f20 	tst.w	fp, #32
   828f8:	9318      	str	r3, [sp, #96]	; 0x60
   828fa:	f43f af19 	beq.w	82730 <_svfprintf_r+0x570>
   828fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82900:	f01b 0f01 	tst.w	fp, #1
   82904:	f104 0407 	add.w	r4, r4, #7
   82908:	f024 0307 	bic.w	r3, r4, #7
   8290c:	f103 0208 	add.w	r2, r3, #8
   82910:	920f      	str	r2, [sp, #60]	; 0x3c
   82912:	e9d3 4500 	ldrd	r4, r5, [r3]
   82916:	f47f af1d 	bne.w	82754 <_svfprintf_r+0x594>
   8291a:	2302      	movs	r3, #2
   8291c:	e54e      	b.n	823bc <_svfprintf_r+0x1fc>
   8291e:	f89a 3000 	ldrb.w	r3, [sl]
   82922:	2900      	cmp	r1, #0
   82924:	f47f aca6 	bne.w	82274 <_svfprintf_r+0xb4>
   82928:	2201      	movs	r2, #1
   8292a:	2120      	movs	r1, #32
   8292c:	e4a2      	b.n	82274 <_svfprintf_r+0xb4>
   8292e:	f04b 0b01 	orr.w	fp, fp, #1
   82932:	f89a 3000 	ldrb.w	r3, [sl]
   82936:	e49d      	b.n	82274 <_svfprintf_r+0xb4>
   82938:	f89a 3000 	ldrb.w	r3, [sl]
   8293c:	2201      	movs	r2, #1
   8293e:	212b      	movs	r1, #43	; 0x2b
   82940:	e498      	b.n	82274 <_svfprintf_r+0xb4>
   82942:	f04b 0b20 	orr.w	fp, fp, #32
   82946:	f89a 3000 	ldrb.w	r3, [sl]
   8294a:	e493      	b.n	82274 <_svfprintf_r+0xb4>
   8294c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   82950:	f89a 3000 	ldrb.w	r3, [sl]
   82954:	e48e      	b.n	82274 <_svfprintf_r+0xb4>
   82956:	f89a 3000 	ldrb.w	r3, [sl]
   8295a:	2b6c      	cmp	r3, #108	; 0x6c
   8295c:	bf03      	ittte	eq
   8295e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   82962:	f04b 0b20 	orreq.w	fp, fp, #32
   82966:	f10a 0a01 	addeq.w	sl, sl, #1
   8296a:	f04b 0b10 	orrne.w	fp, fp, #16
   8296e:	e481      	b.n	82274 <_svfprintf_r+0xb4>
   82970:	2a00      	cmp	r2, #0
   82972:	f040 867c 	bne.w	8366e <_svfprintf_r+0x14ae>
   82976:	f01b 0f20 	tst.w	fp, #32
   8297a:	f040 8452 	bne.w	83222 <_svfprintf_r+0x1062>
   8297e:	f01b 0f10 	tst.w	fp, #16
   82982:	f040 8438 	bne.w	831f6 <_svfprintf_r+0x1036>
   82986:	f01b 0f40 	tst.w	fp, #64	; 0x40
   8298a:	f000 8434 	beq.w	831f6 <_svfprintf_r+0x1036>
   8298e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82990:	6813      	ldr	r3, [r2, #0]
   82992:	3204      	adds	r2, #4
   82994:	920f      	str	r2, [sp, #60]	; 0x3c
   82996:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   8299a:	801a      	strh	r2, [r3, #0]
   8299c:	e437      	b.n	8220e <_svfprintf_r+0x4e>
   8299e:	2378      	movs	r3, #120	; 0x78
   829a0:	2230      	movs	r2, #48	; 0x30
   829a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   829a4:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   829a8:	9311      	str	r3, [sp, #68]	; 0x44
   829aa:	1d03      	adds	r3, r0, #4
   829ac:	930f      	str	r3, [sp, #60]	; 0x3c
   829ae:	4b20      	ldr	r3, [pc, #128]	; (82a30 <_svfprintf_r+0x870>)
   829b0:	6804      	ldr	r4, [r0, #0]
   829b2:	9318      	str	r3, [sp, #96]	; 0x60
   829b4:	f04b 0b02 	orr.w	fp, fp, #2
   829b8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   829bc:	2500      	movs	r5, #0
   829be:	2302      	movs	r3, #2
   829c0:	e4fc      	b.n	823bc <_svfprintf_r+0x1fc>
   829c2:	9311      	str	r3, [sp, #68]	; 0x44
   829c4:	2a00      	cmp	r2, #0
   829c6:	f43f aeef 	beq.w	827a8 <_svfprintf_r+0x5e8>
   829ca:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   829ce:	e6eb      	b.n	827a8 <_svfprintf_r+0x5e8>
   829d0:	2000      	movs	r0, #0
   829d2:	4604      	mov	r4, r0
   829d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   829d8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   829dc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   829e0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   829e4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   829e8:	2809      	cmp	r0, #9
   829ea:	d9f5      	bls.n	829d8 <_svfprintf_r+0x818>
   829ec:	940d      	str	r4, [sp, #52]	; 0x34
   829ee:	e443      	b.n	82278 <_svfprintf_r+0xb8>
   829f0:	9311      	str	r3, [sp, #68]	; 0x44
   829f2:	2a00      	cmp	r2, #0
   829f4:	f040 864a 	bne.w	8368c <_svfprintf_r+0x14cc>
   829f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   829fa:	2a00      	cmp	r2, #0
   829fc:	f43f acb6 	beq.w	8236c <_svfprintf_r+0x1ac>
   82a00:	2300      	movs	r3, #0
   82a02:	2101      	movs	r1, #1
   82a04:	461f      	mov	r7, r3
   82a06:	9108      	str	r1, [sp, #32]
   82a08:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82a0c:	f8cd b01c 	str.w	fp, [sp, #28]
   82a10:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82a14:	930a      	str	r3, [sp, #40]	; 0x28
   82a16:	9312      	str	r3, [sp, #72]	; 0x48
   82a18:	910e      	str	r1, [sp, #56]	; 0x38
   82a1a:	ae28      	add	r6, sp, #160	; 0xa0
   82a1c:	e4f8      	b.n	82410 <_svfprintf_r+0x250>
   82a1e:	bf00      	nop
   82a20:	000868b0 	.word	0x000868b0
   82a24:	7fefffff 	.word	0x7fefffff
   82a28:	000868a4 	.word	0x000868a4
   82a2c:	000868a0 	.word	0x000868a0
   82a30:	000868c4 	.word	0x000868c4
   82a34:	aa25      	add	r2, sp, #148	; 0x94
   82a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82a38:	980c      	ldr	r0, [sp, #48]	; 0x30
   82a3a:	f002 ff9b 	bl	85974 <__ssprint_r>
   82a3e:	2800      	cmp	r0, #0
   82a40:	f47f ac9b 	bne.w	8237a <_svfprintf_r+0x1ba>
   82a44:	46c8      	mov	r8, r9
   82a46:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82a4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82a4c:	e533      	b.n	824b6 <_svfprintf_r+0x2f6>
   82a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82a50:	2b65      	cmp	r3, #101	; 0x65
   82a52:	f340 809a 	ble.w	82b8a <_svfprintf_r+0x9ca>
   82a56:	a815      	add	r0, sp, #84	; 0x54
   82a58:	c80d      	ldmia	r0, {r0, r2, r3}
   82a5a:	9914      	ldr	r1, [sp, #80]	; 0x50
   82a5c:	f003 fcc6 	bl	863ec <__aeabi_dcmpeq>
   82a60:	2800      	cmp	r0, #0
   82a62:	f000 8193 	beq.w	82d8c <_svfprintf_r+0xbcc>
   82a66:	2101      	movs	r1, #1
   82a68:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82a6a:	4ab5      	ldr	r2, [pc, #724]	; (82d40 <_svfprintf_r+0xb80>)
   82a6c:	440b      	add	r3, r1
   82a6e:	440c      	add	r4, r1
   82a70:	2b07      	cmp	r3, #7
   82a72:	9427      	str	r4, [sp, #156]	; 0x9c
   82a74:	9326      	str	r3, [sp, #152]	; 0x98
   82a76:	f8c8 1004 	str.w	r1, [r8, #4]
   82a7a:	f8c8 2000 	str.w	r2, [r8]
   82a7e:	f300 83c6 	bgt.w	8320e <_svfprintf_r+0x104e>
   82a82:	f108 0808 	add.w	r8, r8, #8
   82a86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82a88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82a8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82a8c:	4293      	cmp	r3, r2
   82a8e:	db03      	blt.n	82a98 <_svfprintf_r+0x8d8>
   82a90:	9b07      	ldr	r3, [sp, #28]
   82a92:	07dd      	lsls	r5, r3, #31
   82a94:	f57f ad86 	bpl.w	825a4 <_svfprintf_r+0x3e4>
   82a98:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82a9a:	9919      	ldr	r1, [sp, #100]	; 0x64
   82a9c:	3301      	adds	r3, #1
   82a9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82aa0:	440c      	add	r4, r1
   82aa2:	2b07      	cmp	r3, #7
   82aa4:	f8c8 2000 	str.w	r2, [r8]
   82aa8:	f8c8 1004 	str.w	r1, [r8, #4]
   82aac:	9427      	str	r4, [sp, #156]	; 0x9c
   82aae:	9326      	str	r3, [sp, #152]	; 0x98
   82ab0:	f300 83c4 	bgt.w	8323c <_svfprintf_r+0x107c>
   82ab4:	f108 0808 	add.w	r8, r8, #8
   82ab8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82aba:	1e5e      	subs	r6, r3, #1
   82abc:	2e00      	cmp	r6, #0
   82abe:	f77f ad71 	ble.w	825a4 <_svfprintf_r+0x3e4>
   82ac2:	2e10      	cmp	r6, #16
   82ac4:	f340 8575 	ble.w	835b2 <_svfprintf_r+0x13f2>
   82ac8:	4622      	mov	r2, r4
   82aca:	2710      	movs	r7, #16
   82acc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ace:	4d9d      	ldr	r5, [pc, #628]	; (82d44 <_svfprintf_r+0xb84>)
   82ad0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82ad4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82ad6:	e005      	b.n	82ae4 <_svfprintf_r+0x924>
   82ad8:	f108 0808 	add.w	r8, r8, #8
   82adc:	3e10      	subs	r6, #16
   82ade:	2e10      	cmp	r6, #16
   82ae0:	f340 8225 	ble.w	82f2e <_svfprintf_r+0xd6e>
   82ae4:	3301      	adds	r3, #1
   82ae6:	3210      	adds	r2, #16
   82ae8:	2b07      	cmp	r3, #7
   82aea:	9227      	str	r2, [sp, #156]	; 0x9c
   82aec:	9326      	str	r3, [sp, #152]	; 0x98
   82aee:	e888 00a0 	stmia.w	r8, {r5, r7}
   82af2:	ddf1      	ble.n	82ad8 <_svfprintf_r+0x918>
   82af4:	aa25      	add	r2, sp, #148	; 0x94
   82af6:	4621      	mov	r1, r4
   82af8:	4658      	mov	r0, fp
   82afa:	f002 ff3b 	bl	85974 <__ssprint_r>
   82afe:	2800      	cmp	r0, #0
   82b00:	f47f ac3b 	bne.w	8237a <_svfprintf_r+0x1ba>
   82b04:	46c8      	mov	r8, r9
   82b06:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82b08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b0a:	e7e7      	b.n	82adc <_svfprintf_r+0x91c>
   82b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82b0e:	9a08      	ldr	r2, [sp, #32]
   82b10:	1a9f      	subs	r7, r3, r2
   82b12:	2f00      	cmp	r7, #0
   82b14:	f77f acf6 	ble.w	82504 <_svfprintf_r+0x344>
   82b18:	2f10      	cmp	r7, #16
   82b1a:	f340 84a8 	ble.w	8346e <_svfprintf_r+0x12ae>
   82b1e:	4d89      	ldr	r5, [pc, #548]	; (82d44 <_svfprintf_r+0xb84>)
   82b20:	4642      	mov	r2, r8
   82b22:	4621      	mov	r1, r4
   82b24:	46b0      	mov	r8, r6
   82b26:	f04f 0b10 	mov.w	fp, #16
   82b2a:	462e      	mov	r6, r5
   82b2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82b30:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82b32:	e004      	b.n	82b3e <_svfprintf_r+0x97e>
   82b34:	3f10      	subs	r7, #16
   82b36:	2f10      	cmp	r7, #16
   82b38:	f102 0208 	add.w	r2, r2, #8
   82b3c:	dd15      	ble.n	82b6a <_svfprintf_r+0x9aa>
   82b3e:	3301      	adds	r3, #1
   82b40:	3110      	adds	r1, #16
   82b42:	2b07      	cmp	r3, #7
   82b44:	9127      	str	r1, [sp, #156]	; 0x9c
   82b46:	9326      	str	r3, [sp, #152]	; 0x98
   82b48:	e882 0840 	stmia.w	r2, {r6, fp}
   82b4c:	ddf2      	ble.n	82b34 <_svfprintf_r+0x974>
   82b4e:	aa25      	add	r2, sp, #148	; 0x94
   82b50:	4629      	mov	r1, r5
   82b52:	4620      	mov	r0, r4
   82b54:	f002 ff0e 	bl	85974 <__ssprint_r>
   82b58:	2800      	cmp	r0, #0
   82b5a:	f47f ac0e 	bne.w	8237a <_svfprintf_r+0x1ba>
   82b5e:	3f10      	subs	r7, #16
   82b60:	2f10      	cmp	r7, #16
   82b62:	464a      	mov	r2, r9
   82b64:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82b66:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b68:	dce9      	bgt.n	82b3e <_svfprintf_r+0x97e>
   82b6a:	4635      	mov	r5, r6
   82b6c:	460c      	mov	r4, r1
   82b6e:	4646      	mov	r6, r8
   82b70:	4690      	mov	r8, r2
   82b72:	3301      	adds	r3, #1
   82b74:	443c      	add	r4, r7
   82b76:	2b07      	cmp	r3, #7
   82b78:	9427      	str	r4, [sp, #156]	; 0x9c
   82b7a:	9326      	str	r3, [sp, #152]	; 0x98
   82b7c:	e888 00a0 	stmia.w	r8, {r5, r7}
   82b80:	f300 829e 	bgt.w	830c0 <_svfprintf_r+0xf00>
   82b84:	f108 0808 	add.w	r8, r8, #8
   82b88:	e4bc      	b.n	82504 <_svfprintf_r+0x344>
   82b8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82b8c:	2b01      	cmp	r3, #1
   82b8e:	f340 824f 	ble.w	83030 <_svfprintf_r+0xe70>
   82b92:	2301      	movs	r3, #1
   82b94:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82b96:	441c      	add	r4, r3
   82b98:	441f      	add	r7, r3
   82b9a:	2f07      	cmp	r7, #7
   82b9c:	9427      	str	r4, [sp, #156]	; 0x9c
   82b9e:	f8c8 6000 	str.w	r6, [r8]
   82ba2:	9726      	str	r7, [sp, #152]	; 0x98
   82ba4:	f8c8 3004 	str.w	r3, [r8, #4]
   82ba8:	f300 825f 	bgt.w	8306a <_svfprintf_r+0xeaa>
   82bac:	f108 0808 	add.w	r8, r8, #8
   82bb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   82bb2:	3701      	adds	r7, #1
   82bb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   82bb6:	4414      	add	r4, r2
   82bb8:	2f07      	cmp	r7, #7
   82bba:	9427      	str	r4, [sp, #156]	; 0x9c
   82bbc:	9726      	str	r7, [sp, #152]	; 0x98
   82bbe:	f8c8 3000 	str.w	r3, [r8]
   82bc2:	f8c8 2004 	str.w	r2, [r8, #4]
   82bc6:	f300 825c 	bgt.w	83082 <_svfprintf_r+0xec2>
   82bca:	f108 0808 	add.w	r8, r8, #8
   82bce:	a815      	add	r0, sp, #84	; 0x54
   82bd0:	c80d      	ldmia	r0, {r0, r2, r3}
   82bd2:	9914      	ldr	r1, [sp, #80]	; 0x50
   82bd4:	f003 fc0a 	bl	863ec <__aeabi_dcmpeq>
   82bd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82bda:	2800      	cmp	r0, #0
   82bdc:	f040 8141 	bne.w	82e62 <_svfprintf_r+0xca2>
   82be0:	3b01      	subs	r3, #1
   82be2:	3701      	adds	r7, #1
   82be4:	3601      	adds	r6, #1
   82be6:	441c      	add	r4, r3
   82be8:	2f07      	cmp	r7, #7
   82bea:	f8c8 6000 	str.w	r6, [r8]
   82bee:	9726      	str	r7, [sp, #152]	; 0x98
   82bf0:	9427      	str	r4, [sp, #156]	; 0x9c
   82bf2:	f8c8 3004 	str.w	r3, [r8, #4]
   82bf6:	f300 8166 	bgt.w	82ec6 <_svfprintf_r+0xd06>
   82bfa:	f108 0808 	add.w	r8, r8, #8
   82bfe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   82c00:	3701      	adds	r7, #1
   82c02:	4414      	add	r4, r2
   82c04:	ab21      	add	r3, sp, #132	; 0x84
   82c06:	2f07      	cmp	r7, #7
   82c08:	9427      	str	r4, [sp, #156]	; 0x9c
   82c0a:	9726      	str	r7, [sp, #152]	; 0x98
   82c0c:	f8c8 2004 	str.w	r2, [r8, #4]
   82c10:	f8c8 3000 	str.w	r3, [r8]
   82c14:	f77f acc4 	ble.w	825a0 <_svfprintf_r+0x3e0>
   82c18:	aa25      	add	r2, sp, #148	; 0x94
   82c1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c1e:	f002 fea9 	bl	85974 <__ssprint_r>
   82c22:	2800      	cmp	r0, #0
   82c24:	f47f aba9 	bne.w	8237a <_svfprintf_r+0x1ba>
   82c28:	46c8      	mov	r8, r9
   82c2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82c2c:	e4ba      	b.n	825a4 <_svfprintf_r+0x3e4>
   82c2e:	aa25      	add	r2, sp, #148	; 0x94
   82c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c32:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c34:	f002 fe9e 	bl	85974 <__ssprint_r>
   82c38:	2800      	cmp	r0, #0
   82c3a:	f43f acfd 	beq.w	82638 <_svfprintf_r+0x478>
   82c3e:	f7ff bb9c 	b.w	8237a <_svfprintf_r+0x1ba>
   82c42:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82c46:	2b01      	cmp	r3, #1
   82c48:	f000 817e 	beq.w	82f48 <_svfprintf_r+0xd88>
   82c4c:	2b02      	cmp	r3, #2
   82c4e:	d171      	bne.n	82d34 <_svfprintf_r+0xb74>
   82c50:	f8cd b01c 	str.w	fp, [sp, #28]
   82c54:	2400      	movs	r4, #0
   82c56:	2500      	movs	r5, #0
   82c58:	e5d4      	b.n	82804 <_svfprintf_r+0x644>
   82c5a:	aa25      	add	r2, sp, #148	; 0x94
   82c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c5e:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c60:	f002 fe88 	bl	85974 <__ssprint_r>
   82c64:	2800      	cmp	r0, #0
   82c66:	f47f ab88 	bne.w	8237a <_svfprintf_r+0x1ba>
   82c6a:	46c8      	mov	r8, r9
   82c6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82c6e:	e486      	b.n	8257e <_svfprintf_r+0x3be>
   82c70:	aa25      	add	r2, sp, #148	; 0x94
   82c72:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c74:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c76:	f002 fe7d 	bl	85974 <__ssprint_r>
   82c7a:	2800      	cmp	r0, #0
   82c7c:	f47f ab7d 	bne.w	8237a <_svfprintf_r+0x1ba>
   82c80:	46c8      	mov	r8, r9
   82c82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82c84:	e429      	b.n	824da <_svfprintf_r+0x31a>
   82c86:	2001      	movs	r0, #1
   82c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82c8a:	4a2d      	ldr	r2, [pc, #180]	; (82d40 <_svfprintf_r+0xb80>)
   82c8c:	4403      	add	r3, r0
   82c8e:	4404      	add	r4, r0
   82c90:	2b07      	cmp	r3, #7
   82c92:	9427      	str	r4, [sp, #156]	; 0x9c
   82c94:	9326      	str	r3, [sp, #152]	; 0x98
   82c96:	f8c8 0004 	str.w	r0, [r8, #4]
   82c9a:	f8c8 2000 	str.w	r2, [r8]
   82c9e:	f340 82d8 	ble.w	83252 <_svfprintf_r+0x1092>
   82ca2:	aa25      	add	r2, sp, #148	; 0x94
   82ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
   82ca8:	f002 fe64 	bl	85974 <__ssprint_r>
   82cac:	2800      	cmp	r0, #0
   82cae:	f47f ab64 	bne.w	8237a <_svfprintf_r+0x1ba>
   82cb2:	46c8      	mov	r8, r9
   82cb4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82cb6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82cb8:	b929      	cbnz	r1, 82cc6 <_svfprintf_r+0xb06>
   82cba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82cbc:	b91b      	cbnz	r3, 82cc6 <_svfprintf_r+0xb06>
   82cbe:	9b07      	ldr	r3, [sp, #28]
   82cc0:	07d8      	lsls	r0, r3, #31
   82cc2:	f57f ac6f 	bpl.w	825a4 <_svfprintf_r+0x3e4>
   82cc6:	9819      	ldr	r0, [sp, #100]	; 0x64
   82cc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82cca:	4602      	mov	r2, r0
   82ccc:	3301      	adds	r3, #1
   82cce:	4422      	add	r2, r4
   82cd0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   82cd2:	2b07      	cmp	r3, #7
   82cd4:	9227      	str	r2, [sp, #156]	; 0x9c
   82cd6:	f8c8 4000 	str.w	r4, [r8]
   82cda:	f8c8 0004 	str.w	r0, [r8, #4]
   82cde:	9326      	str	r3, [sp, #152]	; 0x98
   82ce0:	f300 8431 	bgt.w	83546 <_svfprintf_r+0x1386>
   82ce4:	f108 0808 	add.w	r8, r8, #8
   82ce8:	2900      	cmp	r1, #0
   82cea:	f2c0 8409 	blt.w	83500 <_svfprintf_r+0x1340>
   82cee:	9913      	ldr	r1, [sp, #76]	; 0x4c
   82cf0:	3301      	adds	r3, #1
   82cf2:	188c      	adds	r4, r1, r2
   82cf4:	2b07      	cmp	r3, #7
   82cf6:	9427      	str	r4, [sp, #156]	; 0x9c
   82cf8:	9326      	str	r3, [sp, #152]	; 0x98
   82cfa:	f8c8 6000 	str.w	r6, [r8]
   82cfe:	f8c8 1004 	str.w	r1, [r8, #4]
   82d02:	f77f ac4d 	ble.w	825a0 <_svfprintf_r+0x3e0>
   82d06:	aa25      	add	r2, sp, #148	; 0x94
   82d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d0c:	f002 fe32 	bl	85974 <__ssprint_r>
   82d10:	2800      	cmp	r0, #0
   82d12:	f47f ab32 	bne.w	8237a <_svfprintf_r+0x1ba>
   82d16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d18:	46c8      	mov	r8, r9
   82d1a:	e443      	b.n	825a4 <_svfprintf_r+0x3e4>
   82d1c:	aa25      	add	r2, sp, #148	; 0x94
   82d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d20:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d22:	f002 fe27 	bl	85974 <__ssprint_r>
   82d26:	2800      	cmp	r0, #0
   82d28:	f47f ab27 	bne.w	8237a <_svfprintf_r+0x1ba>
   82d2c:	46c8      	mov	r8, r9
   82d2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d30:	f7ff bbe5 	b.w	824fe <_svfprintf_r+0x33e>
   82d34:	2400      	movs	r4, #0
   82d36:	2500      	movs	r5, #0
   82d38:	f8cd b01c 	str.w	fp, [sp, #28]
   82d3c:	4649      	mov	r1, r9
   82d3e:	e004      	b.n	82d4a <_svfprintf_r+0xb8a>
   82d40:	000868e0 	.word	0x000868e0
   82d44:	000868f4 	.word	0x000868f4
   82d48:	4631      	mov	r1, r6
   82d4a:	08e2      	lsrs	r2, r4, #3
   82d4c:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   82d50:	08e8      	lsrs	r0, r5, #3
   82d52:	f004 0307 	and.w	r3, r4, #7
   82d56:	4605      	mov	r5, r0
   82d58:	4614      	mov	r4, r2
   82d5a:	3330      	adds	r3, #48	; 0x30
   82d5c:	ea54 0205 	orrs.w	r2, r4, r5
   82d60:	f801 3c01 	strb.w	r3, [r1, #-1]
   82d64:	f101 36ff 	add.w	r6, r1, #4294967295
   82d68:	d1ee      	bne.n	82d48 <_svfprintf_r+0xb88>
   82d6a:	9a07      	ldr	r2, [sp, #28]
   82d6c:	07d2      	lsls	r2, r2, #31
   82d6e:	f57f ad59 	bpl.w	82824 <_svfprintf_r+0x664>
   82d72:	2b30      	cmp	r3, #48	; 0x30
   82d74:	f43f ad56 	beq.w	82824 <_svfprintf_r+0x664>
   82d78:	2330      	movs	r3, #48	; 0x30
   82d7a:	3902      	subs	r1, #2
   82d7c:	f806 3c01 	strb.w	r3, [r6, #-1]
   82d80:	eba9 0301 	sub.w	r3, r9, r1
   82d84:	930e      	str	r3, [sp, #56]	; 0x38
   82d86:	460e      	mov	r6, r1
   82d88:	f7ff bb36 	b.w	823f8 <_svfprintf_r+0x238>
   82d8c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82d8e:	2900      	cmp	r1, #0
   82d90:	f77f af79 	ble.w	82c86 <_svfprintf_r+0xac6>
   82d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82d96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82d98:	4293      	cmp	r3, r2
   82d9a:	bfa8      	it	ge
   82d9c:	4613      	movge	r3, r2
   82d9e:	2b00      	cmp	r3, #0
   82da0:	461f      	mov	r7, r3
   82da2:	dd0b      	ble.n	82dbc <_svfprintf_r+0xbfc>
   82da4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82da6:	443c      	add	r4, r7
   82da8:	3301      	adds	r3, #1
   82daa:	2b07      	cmp	r3, #7
   82dac:	9427      	str	r4, [sp, #156]	; 0x9c
   82dae:	e888 00c0 	stmia.w	r8, {r6, r7}
   82db2:	9326      	str	r3, [sp, #152]	; 0x98
   82db4:	f300 82fb 	bgt.w	833ae <_svfprintf_r+0x11ee>
   82db8:	f108 0808 	add.w	r8, r8, #8
   82dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82dbe:	2f00      	cmp	r7, #0
   82dc0:	bfa8      	it	ge
   82dc2:	1bdb      	subge	r3, r3, r7
   82dc4:	2b00      	cmp	r3, #0
   82dc6:	461f      	mov	r7, r3
   82dc8:	f340 80d7 	ble.w	82f7a <_svfprintf_r+0xdba>
   82dcc:	2b10      	cmp	r3, #16
   82dce:	f340 8434 	ble.w	8363a <_svfprintf_r+0x147a>
   82dd2:	4dba      	ldr	r5, [pc, #744]	; (830bc <_svfprintf_r+0xefc>)
   82dd4:	4642      	mov	r2, r8
   82dd6:	4621      	mov	r1, r4
   82dd8:	46b0      	mov	r8, r6
   82dda:	f04f 0b10 	mov.w	fp, #16
   82dde:	462e      	mov	r6, r5
   82de0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82de2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82de4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82de6:	e004      	b.n	82df2 <_svfprintf_r+0xc32>
   82de8:	3208      	adds	r2, #8
   82dea:	3f10      	subs	r7, #16
   82dec:	2f10      	cmp	r7, #16
   82dee:	f340 80b5 	ble.w	82f5c <_svfprintf_r+0xd9c>
   82df2:	3301      	adds	r3, #1
   82df4:	3110      	adds	r1, #16
   82df6:	2b07      	cmp	r3, #7
   82df8:	9127      	str	r1, [sp, #156]	; 0x9c
   82dfa:	9326      	str	r3, [sp, #152]	; 0x98
   82dfc:	e882 0840 	stmia.w	r2, {r6, fp}
   82e00:	ddf2      	ble.n	82de8 <_svfprintf_r+0xc28>
   82e02:	aa25      	add	r2, sp, #148	; 0x94
   82e04:	4629      	mov	r1, r5
   82e06:	4620      	mov	r0, r4
   82e08:	f002 fdb4 	bl	85974 <__ssprint_r>
   82e0c:	2800      	cmp	r0, #0
   82e0e:	f47f aab4 	bne.w	8237a <_svfprintf_r+0x1ba>
   82e12:	464a      	mov	r2, r9
   82e14:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82e16:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e18:	e7e7      	b.n	82dea <_svfprintf_r+0xc2a>
   82e1a:	2d00      	cmp	r5, #0
   82e1c:	bf08      	it	eq
   82e1e:	2c0a      	cmpeq	r4, #10
   82e20:	f0c0 8090 	bcc.w	82f44 <_svfprintf_r+0xd84>
   82e24:	464e      	mov	r6, r9
   82e26:	4620      	mov	r0, r4
   82e28:	4629      	mov	r1, r5
   82e2a:	220a      	movs	r2, #10
   82e2c:	2300      	movs	r3, #0
   82e2e:	f003 fb4d 	bl	864cc <__aeabi_uldivmod>
   82e32:	3230      	adds	r2, #48	; 0x30
   82e34:	f806 2d01 	strb.w	r2, [r6, #-1]!
   82e38:	4620      	mov	r0, r4
   82e3a:	4629      	mov	r1, r5
   82e3c:	2300      	movs	r3, #0
   82e3e:	220a      	movs	r2, #10
   82e40:	f003 fb44 	bl	864cc <__aeabi_uldivmod>
   82e44:	4604      	mov	r4, r0
   82e46:	460d      	mov	r5, r1
   82e48:	ea54 0305 	orrs.w	r3, r4, r5
   82e4c:	d1eb      	bne.n	82e26 <_svfprintf_r+0xc66>
   82e4e:	eba9 0306 	sub.w	r3, r9, r6
   82e52:	930e      	str	r3, [sp, #56]	; 0x38
   82e54:	f7ff bad0 	b.w	823f8 <_svfprintf_r+0x238>
   82e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82e5a:	464e      	mov	r6, r9
   82e5c:	930e      	str	r3, [sp, #56]	; 0x38
   82e5e:	f7ff bacb 	b.w	823f8 <_svfprintf_r+0x238>
   82e62:	1e5e      	subs	r6, r3, #1
   82e64:	2e00      	cmp	r6, #0
   82e66:	f77f aeca 	ble.w	82bfe <_svfprintf_r+0xa3e>
   82e6a:	2e10      	cmp	r6, #16
   82e6c:	f340 83e3 	ble.w	83636 <_svfprintf_r+0x1476>
   82e70:	4622      	mov	r2, r4
   82e72:	f04f 0b10 	mov.w	fp, #16
   82e76:	4d91      	ldr	r5, [pc, #580]	; (830bc <_svfprintf_r+0xefc>)
   82e78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82e7a:	e004      	b.n	82e86 <_svfprintf_r+0xcc6>
   82e7c:	3e10      	subs	r6, #16
   82e7e:	2e10      	cmp	r6, #16
   82e80:	f108 0808 	add.w	r8, r8, #8
   82e84:	dd15      	ble.n	82eb2 <_svfprintf_r+0xcf2>
   82e86:	3701      	adds	r7, #1
   82e88:	3210      	adds	r2, #16
   82e8a:	2f07      	cmp	r7, #7
   82e8c:	9227      	str	r2, [sp, #156]	; 0x9c
   82e8e:	9726      	str	r7, [sp, #152]	; 0x98
   82e90:	e888 0820 	stmia.w	r8, {r5, fp}
   82e94:	ddf2      	ble.n	82e7c <_svfprintf_r+0xcbc>
   82e96:	aa25      	add	r2, sp, #148	; 0x94
   82e98:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82e9a:	4620      	mov	r0, r4
   82e9c:	f002 fd6a 	bl	85974 <__ssprint_r>
   82ea0:	2800      	cmp	r0, #0
   82ea2:	f47f aa6a 	bne.w	8237a <_svfprintf_r+0x1ba>
   82ea6:	3e10      	subs	r6, #16
   82ea8:	2e10      	cmp	r6, #16
   82eaa:	46c8      	mov	r8, r9
   82eac:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82eae:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82eb0:	dce9      	bgt.n	82e86 <_svfprintf_r+0xcc6>
   82eb2:	4614      	mov	r4, r2
   82eb4:	3701      	adds	r7, #1
   82eb6:	4434      	add	r4, r6
   82eb8:	2f07      	cmp	r7, #7
   82eba:	9427      	str	r4, [sp, #156]	; 0x9c
   82ebc:	9726      	str	r7, [sp, #152]	; 0x98
   82ebe:	e888 0060 	stmia.w	r8, {r5, r6}
   82ec2:	f77f ae9a 	ble.w	82bfa <_svfprintf_r+0xa3a>
   82ec6:	aa25      	add	r2, sp, #148	; 0x94
   82ec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82eca:	980c      	ldr	r0, [sp, #48]	; 0x30
   82ecc:	f002 fd52 	bl	85974 <__ssprint_r>
   82ed0:	2800      	cmp	r0, #0
   82ed2:	f47f aa52 	bne.w	8237a <_svfprintf_r+0x1ba>
   82ed6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82ed8:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82eda:	46c8      	mov	r8, r9
   82edc:	e68f      	b.n	82bfe <_svfprintf_r+0xa3e>
   82ede:	3204      	adds	r2, #4
   82ee0:	681c      	ldr	r4, [r3, #0]
   82ee2:	2500      	movs	r5, #0
   82ee4:	2301      	movs	r3, #1
   82ee6:	920f      	str	r2, [sp, #60]	; 0x3c
   82ee8:	f7ff ba68 	b.w	823bc <_svfprintf_r+0x1fc>
   82eec:	681c      	ldr	r4, [r3, #0]
   82eee:	3304      	adds	r3, #4
   82ef0:	930f      	str	r3, [sp, #60]	; 0x3c
   82ef2:	2500      	movs	r5, #0
   82ef4:	e42a      	b.n	8274c <_svfprintf_r+0x58c>
   82ef6:	681c      	ldr	r4, [r3, #0]
   82ef8:	3304      	adds	r3, #4
   82efa:	17e5      	asrs	r5, r4, #31
   82efc:	4622      	mov	r2, r4
   82efe:	930f      	str	r3, [sp, #60]	; 0x3c
   82f00:	462b      	mov	r3, r5
   82f02:	2a00      	cmp	r2, #0
   82f04:	f173 0300 	sbcs.w	r3, r3, #0
   82f08:	f6bf ac68 	bge.w	827dc <_svfprintf_r+0x61c>
   82f0c:	272d      	movs	r7, #45	; 0x2d
   82f0e:	4264      	negs	r4, r4
   82f10:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82f14:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   82f18:	2301      	movs	r3, #1
   82f1a:	f7ff ba53 	b.w	823c4 <_svfprintf_r+0x204>
   82f1e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82f20:	2500      	movs	r5, #0
   82f22:	460a      	mov	r2, r1
   82f24:	3204      	adds	r2, #4
   82f26:	680c      	ldr	r4, [r1, #0]
   82f28:	920f      	str	r2, [sp, #60]	; 0x3c
   82f2a:	f7ff ba47 	b.w	823bc <_svfprintf_r+0x1fc>
   82f2e:	4614      	mov	r4, r2
   82f30:	3301      	adds	r3, #1
   82f32:	4434      	add	r4, r6
   82f34:	2b07      	cmp	r3, #7
   82f36:	9427      	str	r4, [sp, #156]	; 0x9c
   82f38:	9326      	str	r3, [sp, #152]	; 0x98
   82f3a:	e888 0060 	stmia.w	r8, {r5, r6}
   82f3e:	f77f ab2f 	ble.w	825a0 <_svfprintf_r+0x3e0>
   82f42:	e6e0      	b.n	82d06 <_svfprintf_r+0xb46>
   82f44:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82f48:	2301      	movs	r3, #1
   82f4a:	ae42      	add	r6, sp, #264	; 0x108
   82f4c:	3430      	adds	r4, #48	; 0x30
   82f4e:	f8cd b01c 	str.w	fp, [sp, #28]
   82f52:	f806 4d41 	strb.w	r4, [r6, #-65]!
   82f56:	930e      	str	r3, [sp, #56]	; 0x38
   82f58:	f7ff ba4e 	b.w	823f8 <_svfprintf_r+0x238>
   82f5c:	4635      	mov	r5, r6
   82f5e:	460c      	mov	r4, r1
   82f60:	4646      	mov	r6, r8
   82f62:	4690      	mov	r8, r2
   82f64:	3301      	adds	r3, #1
   82f66:	443c      	add	r4, r7
   82f68:	2b07      	cmp	r3, #7
   82f6a:	9427      	str	r4, [sp, #156]	; 0x9c
   82f6c:	9326      	str	r3, [sp, #152]	; 0x98
   82f6e:	e888 00a0 	stmia.w	r8, {r5, r7}
   82f72:	f300 8246 	bgt.w	83402 <_svfprintf_r+0x1242>
   82f76:	f108 0808 	add.w	r8, r8, #8
   82f7a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   82f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82f7e:	429a      	cmp	r2, r3
   82f80:	db45      	blt.n	8300e <_svfprintf_r+0xe4e>
   82f82:	9b07      	ldr	r3, [sp, #28]
   82f84:	07d9      	lsls	r1, r3, #31
   82f86:	d442      	bmi.n	8300e <_svfprintf_r+0xe4e>
   82f88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82f8a:	9812      	ldr	r0, [sp, #72]	; 0x48
   82f8c:	1a9a      	subs	r2, r3, r2
   82f8e:	1a1d      	subs	r5, r3, r0
   82f90:	4295      	cmp	r5, r2
   82f92:	bfa8      	it	ge
   82f94:	4615      	movge	r5, r2
   82f96:	2d00      	cmp	r5, #0
   82f98:	dd0e      	ble.n	82fb8 <_svfprintf_r+0xdf8>
   82f9a:	9926      	ldr	r1, [sp, #152]	; 0x98
   82f9c:	4406      	add	r6, r0
   82f9e:	3101      	adds	r1, #1
   82fa0:	442c      	add	r4, r5
   82fa2:	2907      	cmp	r1, #7
   82fa4:	f8c8 6000 	str.w	r6, [r8]
   82fa8:	9427      	str	r4, [sp, #156]	; 0x9c
   82faa:	f8c8 5004 	str.w	r5, [r8, #4]
   82fae:	9126      	str	r1, [sp, #152]	; 0x98
   82fb0:	f300 8216 	bgt.w	833e0 <_svfprintf_r+0x1220>
   82fb4:	f108 0808 	add.w	r8, r8, #8
   82fb8:	2d00      	cmp	r5, #0
   82fba:	bfb4      	ite	lt
   82fbc:	4616      	movlt	r6, r2
   82fbe:	1b56      	subge	r6, r2, r5
   82fc0:	2e00      	cmp	r6, #0
   82fc2:	f77f aaef 	ble.w	825a4 <_svfprintf_r+0x3e4>
   82fc6:	2e10      	cmp	r6, #16
   82fc8:	f340 82f3 	ble.w	835b2 <_svfprintf_r+0x13f2>
   82fcc:	4622      	mov	r2, r4
   82fce:	2710      	movs	r7, #16
   82fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82fd2:	4d3a      	ldr	r5, [pc, #232]	; (830bc <_svfprintf_r+0xefc>)
   82fd4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82fd8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82fda:	e004      	b.n	82fe6 <_svfprintf_r+0xe26>
   82fdc:	f108 0808 	add.w	r8, r8, #8
   82fe0:	3e10      	subs	r6, #16
   82fe2:	2e10      	cmp	r6, #16
   82fe4:	dda3      	ble.n	82f2e <_svfprintf_r+0xd6e>
   82fe6:	3301      	adds	r3, #1
   82fe8:	3210      	adds	r2, #16
   82fea:	2b07      	cmp	r3, #7
   82fec:	9227      	str	r2, [sp, #156]	; 0x9c
   82fee:	9326      	str	r3, [sp, #152]	; 0x98
   82ff0:	e888 00a0 	stmia.w	r8, {r5, r7}
   82ff4:	ddf2      	ble.n	82fdc <_svfprintf_r+0xe1c>
   82ff6:	aa25      	add	r2, sp, #148	; 0x94
   82ff8:	4621      	mov	r1, r4
   82ffa:	4658      	mov	r0, fp
   82ffc:	f002 fcba 	bl	85974 <__ssprint_r>
   83000:	2800      	cmp	r0, #0
   83002:	f47f a9ba 	bne.w	8237a <_svfprintf_r+0x1ba>
   83006:	46c8      	mov	r8, r9
   83008:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8300a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8300c:	e7e8      	b.n	82fe0 <_svfprintf_r+0xe20>
   8300e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83010:	9819      	ldr	r0, [sp, #100]	; 0x64
   83012:	3301      	adds	r3, #1
   83014:	991a      	ldr	r1, [sp, #104]	; 0x68
   83016:	4404      	add	r4, r0
   83018:	2b07      	cmp	r3, #7
   8301a:	9427      	str	r4, [sp, #156]	; 0x9c
   8301c:	f8c8 1000 	str.w	r1, [r8]
   83020:	f8c8 0004 	str.w	r0, [r8, #4]
   83024:	9326      	str	r3, [sp, #152]	; 0x98
   83026:	f300 81cf 	bgt.w	833c8 <_svfprintf_r+0x1208>
   8302a:	f108 0808 	add.w	r8, r8, #8
   8302e:	e7ab      	b.n	82f88 <_svfprintf_r+0xdc8>
   83030:	9b07      	ldr	r3, [sp, #28]
   83032:	07da      	lsls	r2, r3, #31
   83034:	f53f adad 	bmi.w	82b92 <_svfprintf_r+0x9d2>
   83038:	2301      	movs	r3, #1
   8303a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8303c:	441c      	add	r4, r3
   8303e:	441f      	add	r7, r3
   83040:	2f07      	cmp	r7, #7
   83042:	9427      	str	r4, [sp, #156]	; 0x9c
   83044:	f8c8 6000 	str.w	r6, [r8]
   83048:	9726      	str	r7, [sp, #152]	; 0x98
   8304a:	f8c8 3004 	str.w	r3, [r8, #4]
   8304e:	f77f add4 	ble.w	82bfa <_svfprintf_r+0xa3a>
   83052:	aa25      	add	r2, sp, #148	; 0x94
   83054:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83056:	980c      	ldr	r0, [sp, #48]	; 0x30
   83058:	f002 fc8c 	bl	85974 <__ssprint_r>
   8305c:	2800      	cmp	r0, #0
   8305e:	f47f a98c 	bne.w	8237a <_svfprintf_r+0x1ba>
   83062:	46c8      	mov	r8, r9
   83064:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83066:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83068:	e5c9      	b.n	82bfe <_svfprintf_r+0xa3e>
   8306a:	aa25      	add	r2, sp, #148	; 0x94
   8306c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8306e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83070:	f002 fc80 	bl	85974 <__ssprint_r>
   83074:	2800      	cmp	r0, #0
   83076:	f47f a980 	bne.w	8237a <_svfprintf_r+0x1ba>
   8307a:	46c8      	mov	r8, r9
   8307c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8307e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83080:	e596      	b.n	82bb0 <_svfprintf_r+0x9f0>
   83082:	aa25      	add	r2, sp, #148	; 0x94
   83084:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83086:	980c      	ldr	r0, [sp, #48]	; 0x30
   83088:	f002 fc74 	bl	85974 <__ssprint_r>
   8308c:	2800      	cmp	r0, #0
   8308e:	f47f a974 	bne.w	8237a <_svfprintf_r+0x1ba>
   83092:	46c8      	mov	r8, r9
   83094:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83096:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83098:	e599      	b.n	82bce <_svfprintf_r+0xa0e>
   8309a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8309c:	3407      	adds	r4, #7
   8309e:	f024 0407 	bic.w	r4, r4, #7
   830a2:	f104 0108 	add.w	r1, r4, #8
   830a6:	e9d4 2300 	ldrd	r2, r3, [r4]
   830aa:	910f      	str	r1, [sp, #60]	; 0x3c
   830ac:	4614      	mov	r4, r2
   830ae:	461d      	mov	r5, r3
   830b0:	f7ff bb8f 	b.w	827d2 <_svfprintf_r+0x612>
   830b4:	464e      	mov	r6, r9
   830b6:	f7ff b99f 	b.w	823f8 <_svfprintf_r+0x238>
   830ba:	bf00      	nop
   830bc:	000868f4 	.word	0x000868f4
   830c0:	aa25      	add	r2, sp, #148	; 0x94
   830c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   830c6:	f002 fc55 	bl	85974 <__ssprint_r>
   830ca:	2800      	cmp	r0, #0
   830cc:	f47f a955 	bne.w	8237a <_svfprintf_r+0x1ba>
   830d0:	46c8      	mov	r8, r9
   830d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830d4:	f7ff ba16 	b.w	82504 <_svfprintf_r+0x344>
   830d8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   830da:	4622      	mov	r2, r4
   830dc:	4620      	mov	r0, r4
   830de:	9c14      	ldr	r4, [sp, #80]	; 0x50
   830e0:	4623      	mov	r3, r4
   830e2:	4621      	mov	r1, r4
   830e4:	f003 f9b4 	bl	86450 <__aeabi_dcmpun>
   830e8:	2800      	cmp	r0, #0
   830ea:	f040 8273 	bne.w	835d4 <_svfprintf_r+0x1414>
   830ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   830f0:	3301      	adds	r3, #1
   830f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   830f4:	f023 0320 	bic.w	r3, r3, #32
   830f8:	930e      	str	r3, [sp, #56]	; 0x38
   830fa:	f000 819c 	beq.w	83436 <_svfprintf_r+0x1276>
   830fe:	2b47      	cmp	r3, #71	; 0x47
   83100:	f000 80d6 	beq.w	832b0 <_svfprintf_r+0x10f0>
   83104:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   83108:	9307      	str	r3, [sp, #28]
   8310a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8310c:	1e1f      	subs	r7, r3, #0
   8310e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83110:	9308      	str	r3, [sp, #32]
   83112:	bfb7      	itett	lt
   83114:	463b      	movlt	r3, r7
   83116:	2300      	movge	r3, #0
   83118:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   8311c:	232d      	movlt	r3, #45	; 0x2d
   8311e:	9310      	str	r3, [sp, #64]	; 0x40
   83120:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83122:	2b66      	cmp	r3, #102	; 0x66
   83124:	f000 8190 	beq.w	83448 <_svfprintf_r+0x1288>
   83128:	2b46      	cmp	r3, #70	; 0x46
   8312a:	f000 80a4 	beq.w	83276 <_svfprintf_r+0x10b6>
   8312e:	2002      	movs	r0, #2
   83130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83132:	a923      	add	r1, sp, #140	; 0x8c
   83134:	2b45      	cmp	r3, #69	; 0x45
   83136:	bf0a      	itet	eq
   83138:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   8313a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   8313c:	1c5d      	addeq	r5, r3, #1
   8313e:	e88d 0021 	stmia.w	sp, {r0, r5}
   83142:	9104      	str	r1, [sp, #16]
   83144:	a820      	add	r0, sp, #128	; 0x80
   83146:	a91f      	add	r1, sp, #124	; 0x7c
   83148:	463b      	mov	r3, r7
   8314a:	9003      	str	r0, [sp, #12]
   8314c:	9a08      	ldr	r2, [sp, #32]
   8314e:	9102      	str	r1, [sp, #8]
   83150:	980c      	ldr	r0, [sp, #48]	; 0x30
   83152:	f000 fb59 	bl	83808 <_dtoa_r>
   83156:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83158:	4606      	mov	r6, r0
   8315a:	2b67      	cmp	r3, #103	; 0x67
   8315c:	f040 81ba 	bne.w	834d4 <_svfprintf_r+0x1314>
   83160:	f01b 0f01 	tst.w	fp, #1
   83164:	f000 8223 	beq.w	835ae <_svfprintf_r+0x13ee>
   83168:	1974      	adds	r4, r6, r5
   8316a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   8316c:	9808      	ldr	r0, [sp, #32]
   8316e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   83170:	4639      	mov	r1, r7
   83172:	f003 f93b 	bl	863ec <__aeabi_dcmpeq>
   83176:	2800      	cmp	r0, #0
   83178:	f040 8124 	bne.w	833c4 <_svfprintf_r+0x1204>
   8317c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8317e:	42a3      	cmp	r3, r4
   83180:	d206      	bcs.n	83190 <_svfprintf_r+0xfd0>
   83182:	2130      	movs	r1, #48	; 0x30
   83184:	1c5a      	adds	r2, r3, #1
   83186:	9223      	str	r2, [sp, #140]	; 0x8c
   83188:	7019      	strb	r1, [r3, #0]
   8318a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8318c:	429c      	cmp	r4, r3
   8318e:	d8f9      	bhi.n	83184 <_svfprintf_r+0xfc4>
   83190:	1b9b      	subs	r3, r3, r6
   83192:	9313      	str	r3, [sp, #76]	; 0x4c
   83194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83196:	2b47      	cmp	r3, #71	; 0x47
   83198:	f000 80a2 	beq.w	832e0 <_svfprintf_r+0x1120>
   8319c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8319e:	2b65      	cmp	r3, #101	; 0x65
   831a0:	f340 81a7 	ble.w	834f2 <_svfprintf_r+0x1332>
   831a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831a6:	2b66      	cmp	r3, #102	; 0x66
   831a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   831aa:	9312      	str	r3, [sp, #72]	; 0x48
   831ac:	f000 8171 	beq.w	83492 <_svfprintf_r+0x12d2>
   831b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   831b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   831b4:	4619      	mov	r1, r3
   831b6:	4291      	cmp	r1, r2
   831b8:	f300 815d 	bgt.w	83476 <_svfprintf_r+0x12b6>
   831bc:	f01b 0f01 	tst.w	fp, #1
   831c0:	f040 81f0 	bne.w	835a4 <_svfprintf_r+0x13e4>
   831c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   831c8:	9308      	str	r3, [sp, #32]
   831ca:	2367      	movs	r3, #103	; 0x67
   831cc:	920e      	str	r2, [sp, #56]	; 0x38
   831ce:	9311      	str	r3, [sp, #68]	; 0x44
   831d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   831d2:	2b00      	cmp	r3, #0
   831d4:	d17d      	bne.n	832d2 <_svfprintf_r+0x1112>
   831d6:	930a      	str	r3, [sp, #40]	; 0x28
   831d8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   831dc:	f7ff b914 	b.w	82408 <_svfprintf_r+0x248>
   831e0:	f024 0407 	bic.w	r4, r4, #7
   831e4:	6823      	ldr	r3, [r4, #0]
   831e6:	9315      	str	r3, [sp, #84]	; 0x54
   831e8:	6863      	ldr	r3, [r4, #4]
   831ea:	9314      	str	r3, [sp, #80]	; 0x50
   831ec:	f104 0308 	add.w	r3, r4, #8
   831f0:	930f      	str	r3, [sp, #60]	; 0x3c
   831f2:	f7ff bb2f 	b.w	82854 <_svfprintf_r+0x694>
   831f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   831f8:	6813      	ldr	r3, [r2, #0]
   831fa:	3204      	adds	r2, #4
   831fc:	920f      	str	r2, [sp, #60]	; 0x3c
   831fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   83200:	601a      	str	r2, [r3, #0]
   83202:	f7ff b804 	b.w	8220e <_svfprintf_r+0x4e>
   83206:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83208:	4daf      	ldr	r5, [pc, #700]	; (834c8 <_svfprintf_r+0x1308>)
   8320a:	f7ff b9ad 	b.w	82568 <_svfprintf_r+0x3a8>
   8320e:	aa25      	add	r2, sp, #148	; 0x94
   83210:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83212:	980c      	ldr	r0, [sp, #48]	; 0x30
   83214:	f002 fbae 	bl	85974 <__ssprint_r>
   83218:	2800      	cmp	r0, #0
   8321a:	f47f a8ae 	bne.w	8237a <_svfprintf_r+0x1ba>
   8321e:	46c8      	mov	r8, r9
   83220:	e431      	b.n	82a86 <_svfprintf_r+0x8c6>
   83222:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83224:	4613      	mov	r3, r2
   83226:	3304      	adds	r3, #4
   83228:	930f      	str	r3, [sp, #60]	; 0x3c
   8322a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8322c:	6811      	ldr	r1, [r2, #0]
   8322e:	17dd      	asrs	r5, r3, #31
   83230:	461a      	mov	r2, r3
   83232:	462b      	mov	r3, r5
   83234:	e9c1 2300 	strd	r2, r3, [r1]
   83238:	f7fe bfe9 	b.w	8220e <_svfprintf_r+0x4e>
   8323c:	aa25      	add	r2, sp, #148	; 0x94
   8323e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83240:	980c      	ldr	r0, [sp, #48]	; 0x30
   83242:	f002 fb97 	bl	85974 <__ssprint_r>
   83246:	2800      	cmp	r0, #0
   83248:	f47f a897 	bne.w	8237a <_svfprintf_r+0x1ba>
   8324c:	46c8      	mov	r8, r9
   8324e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83250:	e432      	b.n	82ab8 <_svfprintf_r+0x8f8>
   83252:	f108 0808 	add.w	r8, r8, #8
   83256:	e52f      	b.n	82cb8 <_svfprintf_r+0xaf8>
   83258:	2140      	movs	r1, #64	; 0x40
   8325a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8325c:	f001 fb58 	bl	84910 <_malloc_r>
   83260:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83262:	6010      	str	r0, [r2, #0]
   83264:	6110      	str	r0, [r2, #16]
   83266:	2800      	cmp	r0, #0
   83268:	f000 8214 	beq.w	83694 <_svfprintf_r+0x14d4>
   8326c:	2340      	movs	r3, #64	; 0x40
   8326e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83270:	6153      	str	r3, [r2, #20]
   83272:	f7fe bfbc 	b.w	821ee <_svfprintf_r+0x2e>
   83276:	2003      	movs	r0, #3
   83278:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8327a:	a923      	add	r1, sp, #140	; 0x8c
   8327c:	e88d 0011 	stmia.w	sp, {r0, r4}
   83280:	9104      	str	r1, [sp, #16]
   83282:	a820      	add	r0, sp, #128	; 0x80
   83284:	a91f      	add	r1, sp, #124	; 0x7c
   83286:	9003      	str	r0, [sp, #12]
   83288:	9a08      	ldr	r2, [sp, #32]
   8328a:	463b      	mov	r3, r7
   8328c:	9102      	str	r1, [sp, #8]
   8328e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83290:	f000 faba 	bl	83808 <_dtoa_r>
   83294:	4625      	mov	r5, r4
   83296:	4606      	mov	r6, r0
   83298:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8329a:	1974      	adds	r4, r6, r5
   8329c:	2b46      	cmp	r3, #70	; 0x46
   8329e:	f47f af64 	bne.w	8316a <_svfprintf_r+0xfaa>
   832a2:	7833      	ldrb	r3, [r6, #0]
   832a4:	2b30      	cmp	r3, #48	; 0x30
   832a6:	f000 8187 	beq.w	835b8 <_svfprintf_r+0x13f8>
   832aa:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   832ac:	442c      	add	r4, r5
   832ae:	e75c      	b.n	8316a <_svfprintf_r+0xfaa>
   832b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   832b2:	2b00      	cmp	r3, #0
   832b4:	bf08      	it	eq
   832b6:	2301      	moveq	r3, #1
   832b8:	930a      	str	r3, [sp, #40]	; 0x28
   832ba:	e723      	b.n	83104 <_svfprintf_r+0xf44>
   832bc:	4630      	mov	r0, r6
   832be:	950a      	str	r5, [sp, #40]	; 0x28
   832c0:	f7fe ff50 	bl	82164 <strlen>
   832c4:	940f      	str	r4, [sp, #60]	; 0x3c
   832c6:	900e      	str	r0, [sp, #56]	; 0x38
   832c8:	f8cd b01c 	str.w	fp, [sp, #28]
   832cc:	4603      	mov	r3, r0
   832ce:	f7ff b9e7 	b.w	826a0 <_svfprintf_r+0x4e0>
   832d2:	272d      	movs	r7, #45	; 0x2d
   832d4:	2300      	movs	r3, #0
   832d6:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   832da:	930a      	str	r3, [sp, #40]	; 0x28
   832dc:	f7ff b895 	b.w	8240a <_svfprintf_r+0x24a>
   832e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   832e2:	461a      	mov	r2, r3
   832e4:	9312      	str	r3, [sp, #72]	; 0x48
   832e6:	3303      	adds	r3, #3
   832e8:	db04      	blt.n	832f4 <_svfprintf_r+0x1134>
   832ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   832ec:	4619      	mov	r1, r3
   832ee:	4291      	cmp	r1, r2
   832f0:	f6bf af5e 	bge.w	831b0 <_svfprintf_r+0xff0>
   832f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   832f6:	3b02      	subs	r3, #2
   832f8:	9311      	str	r3, [sp, #68]	; 0x44
   832fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   832fc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   83300:	3b01      	subs	r3, #1
   83302:	2b00      	cmp	r3, #0
   83304:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   83308:	bfb4      	ite	lt
   8330a:	222d      	movlt	r2, #45	; 0x2d
   8330c:	222b      	movge	r2, #43	; 0x2b
   8330e:	931f      	str	r3, [sp, #124]	; 0x7c
   83310:	bfb8      	it	lt
   83312:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   83314:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   83318:	bfb8      	it	lt
   8331a:	f1c3 0301 	rsblt	r3, r3, #1
   8331e:	2b09      	cmp	r3, #9
   83320:	f340 811f 	ble.w	83562 <_svfprintf_r+0x13a2>
   83324:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   83328:	4601      	mov	r1, r0
   8332a:	4c68      	ldr	r4, [pc, #416]	; (834cc <_svfprintf_r+0x130c>)
   8332c:	e000      	b.n	83330 <_svfprintf_r+0x1170>
   8332e:	4611      	mov	r1, r2
   83330:	fb84 5203 	smull	r5, r2, r4, r3
   83334:	17dd      	asrs	r5, r3, #31
   83336:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   8333a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8333e:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   83342:	3230      	adds	r2, #48	; 0x30
   83344:	2d09      	cmp	r5, #9
   83346:	f801 2c01 	strb.w	r2, [r1, #-1]
   8334a:	462b      	mov	r3, r5
   8334c:	f101 32ff 	add.w	r2, r1, #4294967295
   83350:	dced      	bgt.n	8332e <_svfprintf_r+0x116e>
   83352:	3330      	adds	r3, #48	; 0x30
   83354:	3902      	subs	r1, #2
   83356:	b2dc      	uxtb	r4, r3
   83358:	4288      	cmp	r0, r1
   8335a:	f802 4c01 	strb.w	r4, [r2, #-1]
   8335e:	f240 8192 	bls.w	83686 <_svfprintf_r+0x14c6>
   83362:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   83366:	4613      	mov	r3, r2
   83368:	e001      	b.n	8336e <_svfprintf_r+0x11ae>
   8336a:	f813 4b01 	ldrb.w	r4, [r3], #1
   8336e:	4283      	cmp	r3, r0
   83370:	f801 4b01 	strb.w	r4, [r1], #1
   83374:	d1f9      	bne.n	8336a <_svfprintf_r+0x11aa>
   83376:	3301      	adds	r3, #1
   83378:	1a9b      	subs	r3, r3, r2
   8337a:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   8337e:	4413      	add	r3, r2
   83380:	aa21      	add	r2, sp, #132	; 0x84
   83382:	1a9b      	subs	r3, r3, r2
   83384:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   83386:	931b      	str	r3, [sp, #108]	; 0x6c
   83388:	2a01      	cmp	r2, #1
   8338a:	4413      	add	r3, r2
   8338c:	930e      	str	r3, [sp, #56]	; 0x38
   8338e:	f340 8148 	ble.w	83622 <_svfprintf_r+0x1462>
   83392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83394:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83396:	4413      	add	r3, r2
   83398:	930e      	str	r3, [sp, #56]	; 0x38
   8339a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8339e:	9308      	str	r3, [sp, #32]
   833a0:	2300      	movs	r3, #0
   833a2:	9312      	str	r3, [sp, #72]	; 0x48
   833a4:	e714      	b.n	831d0 <_svfprintf_r+0x1010>
   833a6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   833a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   833aa:	f7ff b876 	b.w	8249a <_svfprintf_r+0x2da>
   833ae:	aa25      	add	r2, sp, #148	; 0x94
   833b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   833b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   833b4:	f002 fade 	bl	85974 <__ssprint_r>
   833b8:	2800      	cmp	r0, #0
   833ba:	f47e afde 	bne.w	8237a <_svfprintf_r+0x1ba>
   833be:	46c8      	mov	r8, r9
   833c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   833c2:	e4fb      	b.n	82dbc <_svfprintf_r+0xbfc>
   833c4:	4623      	mov	r3, r4
   833c6:	e6e3      	b.n	83190 <_svfprintf_r+0xfd0>
   833c8:	aa25      	add	r2, sp, #148	; 0x94
   833ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   833cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   833ce:	f002 fad1 	bl	85974 <__ssprint_r>
   833d2:	2800      	cmp	r0, #0
   833d4:	f47e afd1 	bne.w	8237a <_svfprintf_r+0x1ba>
   833d8:	46c8      	mov	r8, r9
   833da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   833dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   833de:	e5d3      	b.n	82f88 <_svfprintf_r+0xdc8>
   833e0:	aa25      	add	r2, sp, #148	; 0x94
   833e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   833e4:	980c      	ldr	r0, [sp, #48]	; 0x30
   833e6:	f002 fac5 	bl	85974 <__ssprint_r>
   833ea:	2800      	cmp	r0, #0
   833ec:	f47e afc5 	bne.w	8237a <_svfprintf_r+0x1ba>
   833f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   833f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   833f4:	46c8      	mov	r8, r9
   833f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   833f8:	1a9a      	subs	r2, r3, r2
   833fa:	e5dd      	b.n	82fb8 <_svfprintf_r+0xdf8>
   833fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   833fe:	f7ff b8fe 	b.w	825fe <_svfprintf_r+0x43e>
   83402:	aa25      	add	r2, sp, #148	; 0x94
   83404:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83406:	980c      	ldr	r0, [sp, #48]	; 0x30
   83408:	f002 fab4 	bl	85974 <__ssprint_r>
   8340c:	2800      	cmp	r0, #0
   8340e:	f47e afb4 	bne.w	8237a <_svfprintf_r+0x1ba>
   83412:	46c8      	mov	r8, r9
   83414:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83416:	e5b0      	b.n	82f7a <_svfprintf_r+0xdba>
   83418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8341a:	4637      	mov	r7, r6
   8341c:	2b06      	cmp	r3, #6
   8341e:	bf28      	it	cs
   83420:	2306      	movcs	r3, #6
   83422:	960a      	str	r6, [sp, #40]	; 0x28
   83424:	9612      	str	r6, [sp, #72]	; 0x48
   83426:	9308      	str	r3, [sp, #32]
   83428:	940f      	str	r4, [sp, #60]	; 0x3c
   8342a:	f8cd b01c 	str.w	fp, [sp, #28]
   8342e:	930e      	str	r3, [sp, #56]	; 0x38
   83430:	4e27      	ldr	r6, [pc, #156]	; (834d0 <_svfprintf_r+0x1310>)
   83432:	f7fe bfe9 	b.w	82408 <_svfprintf_r+0x248>
   83436:	2306      	movs	r3, #6
   83438:	930a      	str	r3, [sp, #40]	; 0x28
   8343a:	e663      	b.n	83104 <_svfprintf_r+0xf44>
   8343c:	232d      	movs	r3, #45	; 0x2d
   8343e:	461f      	mov	r7, r3
   83440:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83444:	f7ff ba28 	b.w	82898 <_svfprintf_r+0x6d8>
   83448:	2003      	movs	r0, #3
   8344a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8344c:	a923      	add	r1, sp, #140	; 0x8c
   8344e:	e88d 0011 	stmia.w	sp, {r0, r4}
   83452:	9104      	str	r1, [sp, #16]
   83454:	a820      	add	r0, sp, #128	; 0x80
   83456:	a91f      	add	r1, sp, #124	; 0x7c
   83458:	9003      	str	r0, [sp, #12]
   8345a:	9a08      	ldr	r2, [sp, #32]
   8345c:	463b      	mov	r3, r7
   8345e:	9102      	str	r1, [sp, #8]
   83460:	980c      	ldr	r0, [sp, #48]	; 0x30
   83462:	f000 f9d1 	bl	83808 <_dtoa_r>
   83466:	4625      	mov	r5, r4
   83468:	4606      	mov	r6, r0
   8346a:	1904      	adds	r4, r0, r4
   8346c:	e719      	b.n	832a2 <_svfprintf_r+0x10e2>
   8346e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83470:	4d15      	ldr	r5, [pc, #84]	; (834c8 <_svfprintf_r+0x1308>)
   83472:	f7ff bb7e 	b.w	82b72 <_svfprintf_r+0x9b2>
   83476:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8347a:	4413      	add	r3, r2
   8347c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8347e:	930e      	str	r3, [sp, #56]	; 0x38
   83480:	2a00      	cmp	r2, #0
   83482:	f340 80c7 	ble.w	83614 <_svfprintf_r+0x1454>
   83486:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8348a:	9308      	str	r3, [sp, #32]
   8348c:	2367      	movs	r3, #103	; 0x67
   8348e:	9311      	str	r3, [sp, #68]	; 0x44
   83490:	e69e      	b.n	831d0 <_svfprintf_r+0x1010>
   83492:	2b00      	cmp	r3, #0
   83494:	f340 80e1 	ble.w	8365a <_svfprintf_r+0x149a>
   83498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8349a:	2a00      	cmp	r2, #0
   8349c:	f040 80b0 	bne.w	83600 <_svfprintf_r+0x1440>
   834a0:	f01b 0f01 	tst.w	fp, #1
   834a4:	f040 80ac 	bne.w	83600 <_svfprintf_r+0x1440>
   834a8:	9308      	str	r3, [sp, #32]
   834aa:	930e      	str	r3, [sp, #56]	; 0x38
   834ac:	e690      	b.n	831d0 <_svfprintf_r+0x1010>
   834ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   834b0:	940f      	str	r4, [sp, #60]	; 0x3c
   834b2:	9308      	str	r3, [sp, #32]
   834b4:	930e      	str	r3, [sp, #56]	; 0x38
   834b6:	900a      	str	r0, [sp, #40]	; 0x28
   834b8:	f8cd b01c 	str.w	fp, [sp, #28]
   834bc:	9012      	str	r0, [sp, #72]	; 0x48
   834be:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   834c2:	f7fe bfa1 	b.w	82408 <_svfprintf_r+0x248>
   834c6:	bf00      	nop
   834c8:	000868f4 	.word	0x000868f4
   834cc:	66666667 	.word	0x66666667
   834d0:	000868d8 	.word	0x000868d8
   834d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   834d6:	2b47      	cmp	r3, #71	; 0x47
   834d8:	f47f ae46 	bne.w	83168 <_svfprintf_r+0xfa8>
   834dc:	f01b 0f01 	tst.w	fp, #1
   834e0:	f47f aeda 	bne.w	83298 <_svfprintf_r+0x10d8>
   834e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   834e6:	1b9b      	subs	r3, r3, r6
   834e8:	9313      	str	r3, [sp, #76]	; 0x4c
   834ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   834ec:	2b47      	cmp	r3, #71	; 0x47
   834ee:	f43f aef7 	beq.w	832e0 <_svfprintf_r+0x1120>
   834f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   834f4:	9312      	str	r3, [sp, #72]	; 0x48
   834f6:	e700      	b.n	832fa <_svfprintf_r+0x113a>
   834f8:	2000      	movs	r0, #0
   834fa:	900a      	str	r0, [sp, #40]	; 0x28
   834fc:	f7fe bebc 	b.w	82278 <_svfprintf_r+0xb8>
   83500:	424f      	negs	r7, r1
   83502:	3110      	adds	r1, #16
   83504:	da35      	bge.n	83572 <_svfprintf_r+0x13b2>
   83506:	2410      	movs	r4, #16
   83508:	4d6a      	ldr	r5, [pc, #424]	; (836b4 <_svfprintf_r+0x14f4>)
   8350a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8350e:	e004      	b.n	8351a <_svfprintf_r+0x135a>
   83510:	f108 0808 	add.w	r8, r8, #8
   83514:	3f10      	subs	r7, #16
   83516:	2f10      	cmp	r7, #16
   83518:	dd2c      	ble.n	83574 <_svfprintf_r+0x13b4>
   8351a:	3301      	adds	r3, #1
   8351c:	3210      	adds	r2, #16
   8351e:	2b07      	cmp	r3, #7
   83520:	9227      	str	r2, [sp, #156]	; 0x9c
   83522:	9326      	str	r3, [sp, #152]	; 0x98
   83524:	f8c8 5000 	str.w	r5, [r8]
   83528:	f8c8 4004 	str.w	r4, [r8, #4]
   8352c:	ddf0      	ble.n	83510 <_svfprintf_r+0x1350>
   8352e:	aa25      	add	r2, sp, #148	; 0x94
   83530:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83532:	4658      	mov	r0, fp
   83534:	f002 fa1e 	bl	85974 <__ssprint_r>
   83538:	2800      	cmp	r0, #0
   8353a:	f47e af1e 	bne.w	8237a <_svfprintf_r+0x1ba>
   8353e:	46c8      	mov	r8, r9
   83540:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83542:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83544:	e7e6      	b.n	83514 <_svfprintf_r+0x1354>
   83546:	aa25      	add	r2, sp, #148	; 0x94
   83548:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8354a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8354c:	f002 fa12 	bl	85974 <__ssprint_r>
   83550:	2800      	cmp	r0, #0
   83552:	f47e af12 	bne.w	8237a <_svfprintf_r+0x1ba>
   83556:	46c8      	mov	r8, r9
   83558:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8355a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8355c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8355e:	f7ff bbc3 	b.w	82ce8 <_svfprintf_r+0xb28>
   83562:	2230      	movs	r2, #48	; 0x30
   83564:	4413      	add	r3, r2
   83566:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   8356a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   8356e:	ab22      	add	r3, sp, #136	; 0x88
   83570:	e706      	b.n	83380 <_svfprintf_r+0x11c0>
   83572:	4d50      	ldr	r5, [pc, #320]	; (836b4 <_svfprintf_r+0x14f4>)
   83574:	3301      	adds	r3, #1
   83576:	443a      	add	r2, r7
   83578:	2b07      	cmp	r3, #7
   8357a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8357e:	9227      	str	r2, [sp, #156]	; 0x9c
   83580:	9326      	str	r3, [sp, #152]	; 0x98
   83582:	f108 0808 	add.w	r8, r8, #8
   83586:	f77f abb2 	ble.w	82cee <_svfprintf_r+0xb2e>
   8358a:	aa25      	add	r2, sp, #148	; 0x94
   8358c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8358e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83590:	f002 f9f0 	bl	85974 <__ssprint_r>
   83594:	2800      	cmp	r0, #0
   83596:	f47e aef0 	bne.w	8237a <_svfprintf_r+0x1ba>
   8359a:	46c8      	mov	r8, r9
   8359c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8359e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835a0:	f7ff bba5 	b.w	82cee <_svfprintf_r+0xb2e>
   835a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   835a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   835a8:	4413      	add	r3, r2
   835aa:	930e      	str	r3, [sp, #56]	; 0x38
   835ac:	e76b      	b.n	83486 <_svfprintf_r+0x12c6>
   835ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   835b0:	e5ee      	b.n	83190 <_svfprintf_r+0xfd0>
   835b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835b4:	4d3f      	ldr	r5, [pc, #252]	; (836b4 <_svfprintf_r+0x14f4>)
   835b6:	e4bb      	b.n	82f30 <_svfprintf_r+0xd70>
   835b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   835ba:	9808      	ldr	r0, [sp, #32]
   835bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   835be:	4639      	mov	r1, r7
   835c0:	f002 ff14 	bl	863ec <__aeabi_dcmpeq>
   835c4:	2800      	cmp	r0, #0
   835c6:	f47f ae70 	bne.w	832aa <_svfprintf_r+0x10ea>
   835ca:	f1c5 0501 	rsb	r5, r5, #1
   835ce:	951f      	str	r5, [sp, #124]	; 0x7c
   835d0:	442c      	add	r4, r5
   835d2:	e5ca      	b.n	8316a <_svfprintf_r+0xfaa>
   835d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   835d6:	4e38      	ldr	r6, [pc, #224]	; (836b8 <_svfprintf_r+0x14f8>)
   835d8:	2b00      	cmp	r3, #0
   835da:	bfbe      	ittt	lt
   835dc:	232d      	movlt	r3, #45	; 0x2d
   835de:	461f      	movlt	r7, r3
   835e0:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   835e4:	f04f 0303 	mov.w	r3, #3
   835e8:	461a      	mov	r2, r3
   835ea:	9308      	str	r3, [sp, #32]
   835ec:	f04f 0300 	mov.w	r3, #0
   835f0:	bfa8      	it	ge
   835f2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   835f6:	4619      	mov	r1, r3
   835f8:	930a      	str	r3, [sp, #40]	; 0x28
   835fa:	4b30      	ldr	r3, [pc, #192]	; (836bc <_svfprintf_r+0x14fc>)
   835fc:	f7ff b954 	b.w	828a8 <_svfprintf_r+0x6e8>
   83600:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83602:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83604:	4413      	add	r3, r2
   83606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83608:	441a      	add	r2, r3
   8360a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8360e:	920e      	str	r2, [sp, #56]	; 0x38
   83610:	9308      	str	r3, [sp, #32]
   83612:	e5dd      	b.n	831d0 <_svfprintf_r+0x1010>
   83614:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83618:	f1c3 0301 	rsb	r3, r3, #1
   8361c:	441a      	add	r2, r3
   8361e:	4613      	mov	r3, r2
   83620:	e7c3      	b.n	835aa <_svfprintf_r+0x13ea>
   83622:	f01b 0301 	ands.w	r3, fp, #1
   83626:	9312      	str	r3, [sp, #72]	; 0x48
   83628:	f47f aeb3 	bne.w	83392 <_svfprintf_r+0x11d2>
   8362c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8362e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83632:	9308      	str	r3, [sp, #32]
   83634:	e5cc      	b.n	831d0 <_svfprintf_r+0x1010>
   83636:	4d1f      	ldr	r5, [pc, #124]	; (836b4 <_svfprintf_r+0x14f4>)
   83638:	e43c      	b.n	82eb4 <_svfprintf_r+0xcf4>
   8363a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8363c:	4d1d      	ldr	r5, [pc, #116]	; (836b4 <_svfprintf_r+0x14f4>)
   8363e:	e491      	b.n	82f64 <_svfprintf_r+0xda4>
   83640:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   83642:	f89a 3001 	ldrb.w	r3, [sl, #1]
   83646:	6828      	ldr	r0, [r5, #0]
   83648:	46a2      	mov	sl, r4
   8364a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   8364e:	900a      	str	r0, [sp, #40]	; 0x28
   83650:	4628      	mov	r0, r5
   83652:	3004      	adds	r0, #4
   83654:	900f      	str	r0, [sp, #60]	; 0x3c
   83656:	f7fe be0d 	b.w	82274 <_svfprintf_r+0xb4>
   8365a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8365c:	b913      	cbnz	r3, 83664 <_svfprintf_r+0x14a4>
   8365e:	f01b 0f01 	tst.w	fp, #1
   83662:	d002      	beq.n	8366a <_svfprintf_r+0x14aa>
   83664:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83666:	3301      	adds	r3, #1
   83668:	e7cd      	b.n	83606 <_svfprintf_r+0x1446>
   8366a:	2301      	movs	r3, #1
   8366c:	e71c      	b.n	834a8 <_svfprintf_r+0x12e8>
   8366e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83672:	f7ff b980 	b.w	82976 <_svfprintf_r+0x7b6>
   83676:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   8367a:	f7ff b93a 	b.w	828f2 <_svfprintf_r+0x732>
   8367e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83682:	f7ff b84f 	b.w	82724 <_svfprintf_r+0x564>
   83686:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   8368a:	e679      	b.n	83380 <_svfprintf_r+0x11c0>
   8368c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83690:	f7ff b9b2 	b.w	829f8 <_svfprintf_r+0x838>
   83694:	f04f 32ff 	mov.w	r2, #4294967295
   83698:	230c      	movs	r3, #12
   8369a:	9209      	str	r2, [sp, #36]	; 0x24
   8369c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8369e:	6013      	str	r3, [r2, #0]
   836a0:	f7fe be74 	b.w	8238c <_svfprintf_r+0x1cc>
   836a4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836a8:	f7ff b8c4 	b.w	82834 <_svfprintf_r+0x674>
   836ac:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836b0:	f7ff b878 	b.w	827a4 <_svfprintf_r+0x5e4>
   836b4:	000868f4 	.word	0x000868f4
   836b8:	000868ac 	.word	0x000868ac
   836bc:	000868a8 	.word	0x000868a8

000836c0 <register_fini>:
   836c0:	4b02      	ldr	r3, [pc, #8]	; (836cc <register_fini+0xc>)
   836c2:	b113      	cbz	r3, 836ca <register_fini+0xa>
   836c4:	4802      	ldr	r0, [pc, #8]	; (836d0 <register_fini+0x10>)
   836c6:	f000 b805 	b.w	836d4 <atexit>
   836ca:	4770      	bx	lr
   836cc:	00000000 	.word	0x00000000
   836d0:	0008464d 	.word	0x0008464d

000836d4 <atexit>:
   836d4:	2300      	movs	r3, #0
   836d6:	4601      	mov	r1, r0
   836d8:	461a      	mov	r2, r3
   836da:	4618      	mov	r0, r3
   836dc:	f002 b9d4 	b.w	85a88 <__register_exitproc>

000836e0 <quorem>:
   836e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   836e4:	6903      	ldr	r3, [r0, #16]
   836e6:	690f      	ldr	r7, [r1, #16]
   836e8:	b083      	sub	sp, #12
   836ea:	429f      	cmp	r7, r3
   836ec:	f300 8088 	bgt.w	83800 <quorem+0x120>
   836f0:	3f01      	subs	r7, #1
   836f2:	f101 0614 	add.w	r6, r1, #20
   836f6:	f100 0a14 	add.w	sl, r0, #20
   836fa:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   836fe:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   83702:	3301      	adds	r3, #1
   83704:	fbb2 f8f3 	udiv	r8, r2, r3
   83708:	00bb      	lsls	r3, r7, #2
   8370a:	9300      	str	r3, [sp, #0]
   8370c:	eb06 0903 	add.w	r9, r6, r3
   83710:	4453      	add	r3, sl
   83712:	9301      	str	r3, [sp, #4]
   83714:	f1b8 0f00 	cmp.w	r8, #0
   83718:	d03b      	beq.n	83792 <quorem+0xb2>
   8371a:	2300      	movs	r3, #0
   8371c:	46b4      	mov	ip, r6
   8371e:	461c      	mov	r4, r3
   83720:	46d6      	mov	lr, sl
   83722:	f85c 2b04 	ldr.w	r2, [ip], #4
   83726:	f8de 5000 	ldr.w	r5, [lr]
   8372a:	fa1f fb82 	uxth.w	fp, r2
   8372e:	fb08 330b 	mla	r3, r8, fp, r3
   83732:	0c12      	lsrs	r2, r2, #16
   83734:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   83738:	fb08 bb02 	mla	fp, r8, r2, fp
   8373c:	b29a      	uxth	r2, r3
   8373e:	1aa2      	subs	r2, r4, r2
   83740:	b2ab      	uxth	r3, r5
   83742:	fa1f f48b 	uxth.w	r4, fp
   83746:	441a      	add	r2, r3
   83748:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   8374c:	eb04 4422 	add.w	r4, r4, r2, asr #16
   83750:	b292      	uxth	r2, r2
   83752:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   83756:	45e1      	cmp	r9, ip
   83758:	f84e 2b04 	str.w	r2, [lr], #4
   8375c:	ea4f 4424 	mov.w	r4, r4, asr #16
   83760:	ea4f 431b 	mov.w	r3, fp, lsr #16
   83764:	d2dd      	bcs.n	83722 <quorem+0x42>
   83766:	9b00      	ldr	r3, [sp, #0]
   83768:	f85a 3003 	ldr.w	r3, [sl, r3]
   8376c:	b98b      	cbnz	r3, 83792 <quorem+0xb2>
   8376e:	9c01      	ldr	r4, [sp, #4]
   83770:	1f23      	subs	r3, r4, #4
   83772:	459a      	cmp	sl, r3
   83774:	d20c      	bcs.n	83790 <quorem+0xb0>
   83776:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8377a:	b94b      	cbnz	r3, 83790 <quorem+0xb0>
   8377c:	f1a4 0308 	sub.w	r3, r4, #8
   83780:	e002      	b.n	83788 <quorem+0xa8>
   83782:	681a      	ldr	r2, [r3, #0]
   83784:	3b04      	subs	r3, #4
   83786:	b91a      	cbnz	r2, 83790 <quorem+0xb0>
   83788:	459a      	cmp	sl, r3
   8378a:	f107 37ff 	add.w	r7, r7, #4294967295
   8378e:	d3f8      	bcc.n	83782 <quorem+0xa2>
   83790:	6107      	str	r7, [r0, #16]
   83792:	4604      	mov	r4, r0
   83794:	f001 fe28 	bl	853e8 <__mcmp>
   83798:	2800      	cmp	r0, #0
   8379a:	db2d      	blt.n	837f8 <quorem+0x118>
   8379c:	4655      	mov	r5, sl
   8379e:	2300      	movs	r3, #0
   837a0:	f108 0801 	add.w	r8, r8, #1
   837a4:	f856 1b04 	ldr.w	r1, [r6], #4
   837a8:	6828      	ldr	r0, [r5, #0]
   837aa:	b28a      	uxth	r2, r1
   837ac:	1a9a      	subs	r2, r3, r2
   837ae:	0c0b      	lsrs	r3, r1, #16
   837b0:	b281      	uxth	r1, r0
   837b2:	440a      	add	r2, r1
   837b4:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   837b8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   837bc:	b292      	uxth	r2, r2
   837be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   837c2:	45b1      	cmp	r9, r6
   837c4:	f845 2b04 	str.w	r2, [r5], #4
   837c8:	ea4f 4323 	mov.w	r3, r3, asr #16
   837cc:	d2ea      	bcs.n	837a4 <quorem+0xc4>
   837ce:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   837d2:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   837d6:	b97a      	cbnz	r2, 837f8 <quorem+0x118>
   837d8:	1f1a      	subs	r2, r3, #4
   837da:	4592      	cmp	sl, r2
   837dc:	d20b      	bcs.n	837f6 <quorem+0x116>
   837de:	f853 2c04 	ldr.w	r2, [r3, #-4]
   837e2:	b942      	cbnz	r2, 837f6 <quorem+0x116>
   837e4:	3b08      	subs	r3, #8
   837e6:	e002      	b.n	837ee <quorem+0x10e>
   837e8:	681a      	ldr	r2, [r3, #0]
   837ea:	3b04      	subs	r3, #4
   837ec:	b91a      	cbnz	r2, 837f6 <quorem+0x116>
   837ee:	459a      	cmp	sl, r3
   837f0:	f107 37ff 	add.w	r7, r7, #4294967295
   837f4:	d3f8      	bcc.n	837e8 <quorem+0x108>
   837f6:	6127      	str	r7, [r4, #16]
   837f8:	4640      	mov	r0, r8
   837fa:	b003      	add	sp, #12
   837fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83800:	2000      	movs	r0, #0
   83802:	b003      	add	sp, #12
   83804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00083808 <_dtoa_r>:
   83808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8380c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   8380e:	b09b      	sub	sp, #108	; 0x6c
   83810:	4604      	mov	r4, r0
   83812:	4692      	mov	sl, r2
   83814:	469b      	mov	fp, r3
   83816:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   83818:	b14d      	cbz	r5, 8382e <_dtoa_r+0x26>
   8381a:	2301      	movs	r3, #1
   8381c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8381e:	4629      	mov	r1, r5
   83820:	4093      	lsls	r3, r2
   83822:	60ab      	str	r3, [r5, #8]
   83824:	606a      	str	r2, [r5, #4]
   83826:	f001 fc07 	bl	85038 <_Bfree>
   8382a:	2300      	movs	r3, #0
   8382c:	6423      	str	r3, [r4, #64]	; 0x40
   8382e:	f1bb 0f00 	cmp.w	fp, #0
   83832:	465d      	mov	r5, fp
   83834:	db35      	blt.n	838a2 <_dtoa_r+0x9a>
   83836:	2300      	movs	r3, #0
   83838:	6033      	str	r3, [r6, #0]
   8383a:	4b9d      	ldr	r3, [pc, #628]	; (83ab0 <_dtoa_r+0x2a8>)
   8383c:	43ab      	bics	r3, r5
   8383e:	d015      	beq.n	8386c <_dtoa_r+0x64>
   83840:	2200      	movs	r2, #0
   83842:	2300      	movs	r3, #0
   83844:	4650      	mov	r0, sl
   83846:	4659      	mov	r1, fp
   83848:	f002 fdd0 	bl	863ec <__aeabi_dcmpeq>
   8384c:	4680      	mov	r8, r0
   8384e:	2800      	cmp	r0, #0
   83850:	d02d      	beq.n	838ae <_dtoa_r+0xa6>
   83852:	2301      	movs	r3, #1
   83854:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83856:	6013      	str	r3, [r2, #0]
   83858:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8385a:	2b00      	cmp	r3, #0
   8385c:	f000 80bd 	beq.w	839da <_dtoa_r+0x1d2>
   83860:	4894      	ldr	r0, [pc, #592]	; (83ab4 <_dtoa_r+0x2ac>)
   83862:	6018      	str	r0, [r3, #0]
   83864:	3801      	subs	r0, #1
   83866:	b01b      	add	sp, #108	; 0x6c
   83868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8386c:	f242 730f 	movw	r3, #9999	; 0x270f
   83870:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83872:	6013      	str	r3, [r2, #0]
   83874:	f1ba 0f00 	cmp.w	sl, #0
   83878:	d10d      	bne.n	83896 <_dtoa_r+0x8e>
   8387a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   8387e:	b955      	cbnz	r5, 83896 <_dtoa_r+0x8e>
   83880:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83882:	488d      	ldr	r0, [pc, #564]	; (83ab8 <_dtoa_r+0x2b0>)
   83884:	2b00      	cmp	r3, #0
   83886:	d0ee      	beq.n	83866 <_dtoa_r+0x5e>
   83888:	f100 0308 	add.w	r3, r0, #8
   8388c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   8388e:	6013      	str	r3, [r2, #0]
   83890:	b01b      	add	sp, #108	; 0x6c
   83892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83896:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83898:	4888      	ldr	r0, [pc, #544]	; (83abc <_dtoa_r+0x2b4>)
   8389a:	2b00      	cmp	r3, #0
   8389c:	d0e3      	beq.n	83866 <_dtoa_r+0x5e>
   8389e:	1cc3      	adds	r3, r0, #3
   838a0:	e7f4      	b.n	8388c <_dtoa_r+0x84>
   838a2:	2301      	movs	r3, #1
   838a4:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   838a8:	6033      	str	r3, [r6, #0]
   838aa:	46ab      	mov	fp, r5
   838ac:	e7c5      	b.n	8383a <_dtoa_r+0x32>
   838ae:	aa18      	add	r2, sp, #96	; 0x60
   838b0:	ab19      	add	r3, sp, #100	; 0x64
   838b2:	9201      	str	r2, [sp, #4]
   838b4:	9300      	str	r3, [sp, #0]
   838b6:	4652      	mov	r2, sl
   838b8:	465b      	mov	r3, fp
   838ba:	4620      	mov	r0, r4
   838bc:	f001 fe3e 	bl	8553c <__d2b>
   838c0:	0d2b      	lsrs	r3, r5, #20
   838c2:	4681      	mov	r9, r0
   838c4:	d071      	beq.n	839aa <_dtoa_r+0x1a2>
   838c6:	4650      	mov	r0, sl
   838c8:	f3cb 0213 	ubfx	r2, fp, #0, #20
   838cc:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   838d0:	9f18      	ldr	r7, [sp, #96]	; 0x60
   838d2:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   838d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   838da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   838de:	2200      	movs	r2, #0
   838e0:	4b77      	ldr	r3, [pc, #476]	; (83ac0 <_dtoa_r+0x2b8>)
   838e2:	f002 f967 	bl	85bb4 <__aeabi_dsub>
   838e6:	a36c      	add	r3, pc, #432	; (adr r3, 83a98 <_dtoa_r+0x290>)
   838e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   838ec:	f002 fb16 	bl	85f1c <__aeabi_dmul>
   838f0:	a36b      	add	r3, pc, #428	; (adr r3, 83aa0 <_dtoa_r+0x298>)
   838f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   838f6:	f002 f95f 	bl	85bb8 <__adddf3>
   838fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   838fe:	4630      	mov	r0, r6
   83900:	f002 faa6 	bl	85e50 <__aeabi_i2d>
   83904:	a368      	add	r3, pc, #416	; (adr r3, 83aa8 <_dtoa_r+0x2a0>)
   83906:	e9d3 2300 	ldrd	r2, r3, [r3]
   8390a:	f002 fb07 	bl	85f1c <__aeabi_dmul>
   8390e:	4602      	mov	r2, r0
   83910:	460b      	mov	r3, r1
   83912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   83916:	f002 f94f 	bl	85bb8 <__adddf3>
   8391a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8391e:	f002 fdad 	bl	8647c <__aeabi_d2iz>
   83922:	2200      	movs	r2, #0
   83924:	9002      	str	r0, [sp, #8]
   83926:	2300      	movs	r3, #0
   83928:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8392c:	f002 fd68 	bl	86400 <__aeabi_dcmplt>
   83930:	2800      	cmp	r0, #0
   83932:	f040 816d 	bne.w	83c10 <_dtoa_r+0x408>
   83936:	9d02      	ldr	r5, [sp, #8]
   83938:	2d16      	cmp	r5, #22
   8393a:	f200 8157 	bhi.w	83bec <_dtoa_r+0x3e4>
   8393e:	4961      	ldr	r1, [pc, #388]	; (83ac4 <_dtoa_r+0x2bc>)
   83940:	4652      	mov	r2, sl
   83942:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   83946:	465b      	mov	r3, fp
   83948:	e9d1 0100 	ldrd	r0, r1, [r1]
   8394c:	f002 fd76 	bl	8643c <__aeabi_dcmpgt>
   83950:	2800      	cmp	r0, #0
   83952:	f000 81be 	beq.w	83cd2 <_dtoa_r+0x4ca>
   83956:	1e6b      	subs	r3, r5, #1
   83958:	9302      	str	r3, [sp, #8]
   8395a:	2300      	movs	r3, #0
   8395c:	930e      	str	r3, [sp, #56]	; 0x38
   8395e:	1bbf      	subs	r7, r7, r6
   83960:	1e7b      	subs	r3, r7, #1
   83962:	9308      	str	r3, [sp, #32]
   83964:	f100 814e 	bmi.w	83c04 <_dtoa_r+0x3fc>
   83968:	2300      	movs	r3, #0
   8396a:	930a      	str	r3, [sp, #40]	; 0x28
   8396c:	9b02      	ldr	r3, [sp, #8]
   8396e:	2b00      	cmp	r3, #0
   83970:	f2c0 813f 	blt.w	83bf2 <_dtoa_r+0x3ea>
   83974:	9a08      	ldr	r2, [sp, #32]
   83976:	930d      	str	r3, [sp, #52]	; 0x34
   83978:	4611      	mov	r1, r2
   8397a:	4419      	add	r1, r3
   8397c:	2300      	movs	r3, #0
   8397e:	9108      	str	r1, [sp, #32]
   83980:	930c      	str	r3, [sp, #48]	; 0x30
   83982:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83984:	2b09      	cmp	r3, #9
   83986:	d82a      	bhi.n	839de <_dtoa_r+0x1d6>
   83988:	2b05      	cmp	r3, #5
   8398a:	f340 8658 	ble.w	8463e <_dtoa_r+0xe36>
   8398e:	2500      	movs	r5, #0
   83990:	3b04      	subs	r3, #4
   83992:	9324      	str	r3, [sp, #144]	; 0x90
   83994:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83996:	3b02      	subs	r3, #2
   83998:	2b03      	cmp	r3, #3
   8399a:	f200 863f 	bhi.w	8461c <_dtoa_r+0xe14>
   8399e:	e8df f013 	tbh	[pc, r3, lsl #1]
   839a2:	03ce      	.short	0x03ce
   839a4:	03d902c3 	.word	0x03d902c3
   839a8:	045b      	.short	0x045b
   839aa:	9f18      	ldr	r7, [sp, #96]	; 0x60
   839ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
   839ae:	443e      	add	r6, r7
   839b0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   839b4:	2b20      	cmp	r3, #32
   839b6:	f340 8187 	ble.w	83cc8 <_dtoa_r+0x4c0>
   839ba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   839be:	f206 4012 	addw	r0, r6, #1042	; 0x412
   839c2:	409d      	lsls	r5, r3
   839c4:	fa2a f000 	lsr.w	r0, sl, r0
   839c8:	4328      	orrs	r0, r5
   839ca:	f002 fa31 	bl	85e30 <__aeabi_ui2d>
   839ce:	2301      	movs	r3, #1
   839d0:	3e01      	subs	r6, #1
   839d2:	9314      	str	r3, [sp, #80]	; 0x50
   839d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   839d8:	e781      	b.n	838de <_dtoa_r+0xd6>
   839da:	483b      	ldr	r0, [pc, #236]	; (83ac8 <_dtoa_r+0x2c0>)
   839dc:	e743      	b.n	83866 <_dtoa_r+0x5e>
   839de:	2100      	movs	r1, #0
   839e0:	4620      	mov	r0, r4
   839e2:	6461      	str	r1, [r4, #68]	; 0x44
   839e4:	9125      	str	r1, [sp, #148]	; 0x94
   839e6:	f001 fb01 	bl	84fec <_Balloc>
   839ea:	f04f 33ff 	mov.w	r3, #4294967295
   839ee:	9307      	str	r3, [sp, #28]
   839f0:	930f      	str	r3, [sp, #60]	; 0x3c
   839f2:	2301      	movs	r3, #1
   839f4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   839f6:	9004      	str	r0, [sp, #16]
   839f8:	6420      	str	r0, [r4, #64]	; 0x40
   839fa:	9224      	str	r2, [sp, #144]	; 0x90
   839fc:	930b      	str	r3, [sp, #44]	; 0x2c
   839fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83a00:	2b00      	cmp	r3, #0
   83a02:	f2c0 80d3 	blt.w	83bac <_dtoa_r+0x3a4>
   83a06:	9a02      	ldr	r2, [sp, #8]
   83a08:	2a0e      	cmp	r2, #14
   83a0a:	f300 80cf 	bgt.w	83bac <_dtoa_r+0x3a4>
   83a0e:	4b2d      	ldr	r3, [pc, #180]	; (83ac4 <_dtoa_r+0x2bc>)
   83a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83a14:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a18:	e9cd 2308 	strd	r2, r3, [sp, #32]
   83a1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83a1e:	2b00      	cmp	r3, #0
   83a20:	f2c0 83b4 	blt.w	8418c <_dtoa_r+0x984>
   83a24:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   83a28:	4650      	mov	r0, sl
   83a2a:	462a      	mov	r2, r5
   83a2c:	4633      	mov	r3, r6
   83a2e:	4659      	mov	r1, fp
   83a30:	f002 fb9e 	bl	86170 <__aeabi_ddiv>
   83a34:	f002 fd22 	bl	8647c <__aeabi_d2iz>
   83a38:	4680      	mov	r8, r0
   83a3a:	f002 fa09 	bl	85e50 <__aeabi_i2d>
   83a3e:	462a      	mov	r2, r5
   83a40:	4633      	mov	r3, r6
   83a42:	f002 fa6b 	bl	85f1c <__aeabi_dmul>
   83a46:	4602      	mov	r2, r0
   83a48:	460b      	mov	r3, r1
   83a4a:	4650      	mov	r0, sl
   83a4c:	4659      	mov	r1, fp
   83a4e:	f002 f8b1 	bl	85bb4 <__aeabi_dsub>
   83a52:	9e07      	ldr	r6, [sp, #28]
   83a54:	9f04      	ldr	r7, [sp, #16]
   83a56:	f108 0530 	add.w	r5, r8, #48	; 0x30
   83a5a:	2e01      	cmp	r6, #1
   83a5c:	703d      	strb	r5, [r7, #0]
   83a5e:	4602      	mov	r2, r0
   83a60:	460b      	mov	r3, r1
   83a62:	f107 0501 	add.w	r5, r7, #1
   83a66:	d064      	beq.n	83b32 <_dtoa_r+0x32a>
   83a68:	2200      	movs	r2, #0
   83a6a:	4b18      	ldr	r3, [pc, #96]	; (83acc <_dtoa_r+0x2c4>)
   83a6c:	f002 fa56 	bl	85f1c <__aeabi_dmul>
   83a70:	2200      	movs	r2, #0
   83a72:	2300      	movs	r3, #0
   83a74:	4606      	mov	r6, r0
   83a76:	460f      	mov	r7, r1
   83a78:	f002 fcb8 	bl	863ec <__aeabi_dcmpeq>
   83a7c:	2800      	cmp	r0, #0
   83a7e:	f040 8082 	bne.w	83b86 <_dtoa_r+0x37e>
   83a82:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   83a86:	f04f 0a00 	mov.w	sl, #0
   83a8a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83a8e:	f04f 0b00 	mov.w	fp, #0
   83a92:	940b      	str	r4, [sp, #44]	; 0x2c
   83a94:	e029      	b.n	83aea <_dtoa_r+0x2e2>
   83a96:	bf00      	nop
   83a98:	636f4361 	.word	0x636f4361
   83a9c:	3fd287a7 	.word	0x3fd287a7
   83aa0:	8b60c8b3 	.word	0x8b60c8b3
   83aa4:	3fc68a28 	.word	0x3fc68a28
   83aa8:	509f79fb 	.word	0x509f79fb
   83aac:	3fd34413 	.word	0x3fd34413
   83ab0:	7ff00000 	.word	0x7ff00000
   83ab4:	000868e1 	.word	0x000868e1
   83ab8:	00086904 	.word	0x00086904
   83abc:	00086910 	.word	0x00086910
   83ac0:	3ff80000 	.word	0x3ff80000
   83ac4:	00086950 	.word	0x00086950
   83ac8:	000868e0 	.word	0x000868e0
   83acc:	40240000 	.word	0x40240000
   83ad0:	2200      	movs	r2, #0
   83ad2:	4b81      	ldr	r3, [pc, #516]	; (83cd8 <_dtoa_r+0x4d0>)
   83ad4:	f002 fa22 	bl	85f1c <__aeabi_dmul>
   83ad8:	4652      	mov	r2, sl
   83ada:	465b      	mov	r3, fp
   83adc:	4606      	mov	r6, r0
   83ade:	460f      	mov	r7, r1
   83ae0:	f002 fc84 	bl	863ec <__aeabi_dcmpeq>
   83ae4:	2800      	cmp	r0, #0
   83ae6:	f040 83ba 	bne.w	8425e <_dtoa_r+0xa56>
   83aea:	4642      	mov	r2, r8
   83aec:	464b      	mov	r3, r9
   83aee:	4630      	mov	r0, r6
   83af0:	4639      	mov	r1, r7
   83af2:	f002 fb3d 	bl	86170 <__aeabi_ddiv>
   83af6:	f002 fcc1 	bl	8647c <__aeabi_d2iz>
   83afa:	4604      	mov	r4, r0
   83afc:	f002 f9a8 	bl	85e50 <__aeabi_i2d>
   83b00:	4642      	mov	r2, r8
   83b02:	464b      	mov	r3, r9
   83b04:	f002 fa0a 	bl	85f1c <__aeabi_dmul>
   83b08:	4602      	mov	r2, r0
   83b0a:	460b      	mov	r3, r1
   83b0c:	4630      	mov	r0, r6
   83b0e:	4639      	mov	r1, r7
   83b10:	f002 f850 	bl	85bb4 <__aeabi_dsub>
   83b14:	f104 0630 	add.w	r6, r4, #48	; 0x30
   83b18:	f805 6b01 	strb.w	r6, [r5], #1
   83b1c:	9e04      	ldr	r6, [sp, #16]
   83b1e:	9f07      	ldr	r7, [sp, #28]
   83b20:	1bae      	subs	r6, r5, r6
   83b22:	42be      	cmp	r6, r7
   83b24:	4602      	mov	r2, r0
   83b26:	460b      	mov	r3, r1
   83b28:	d1d2      	bne.n	83ad0 <_dtoa_r+0x2c8>
   83b2a:	46a0      	mov	r8, r4
   83b2c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   83b30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83b32:	4610      	mov	r0, r2
   83b34:	4619      	mov	r1, r3
   83b36:	f002 f83f 	bl	85bb8 <__adddf3>
   83b3a:	4606      	mov	r6, r0
   83b3c:	460f      	mov	r7, r1
   83b3e:	4602      	mov	r2, r0
   83b40:	460b      	mov	r3, r1
   83b42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83b46:	f002 fc5b 	bl	86400 <__aeabi_dcmplt>
   83b4a:	b948      	cbnz	r0, 83b60 <_dtoa_r+0x358>
   83b4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83b50:	4632      	mov	r2, r6
   83b52:	463b      	mov	r3, r7
   83b54:	f002 fc4a 	bl	863ec <__aeabi_dcmpeq>
   83b58:	b1a8      	cbz	r0, 83b86 <_dtoa_r+0x37e>
   83b5a:	f018 0f01 	tst.w	r8, #1
   83b5e:	d012      	beq.n	83b86 <_dtoa_r+0x37e>
   83b60:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   83b64:	1e6b      	subs	r3, r5, #1
   83b66:	9a04      	ldr	r2, [sp, #16]
   83b68:	e004      	b.n	83b74 <_dtoa_r+0x36c>
   83b6a:	429a      	cmp	r2, r3
   83b6c:	f000 8402 	beq.w	84374 <_dtoa_r+0xb6c>
   83b70:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   83b74:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   83b78:	f103 0501 	add.w	r5, r3, #1
   83b7c:	d0f5      	beq.n	83b6a <_dtoa_r+0x362>
   83b7e:	f108 0801 	add.w	r8, r8, #1
   83b82:	f883 8000 	strb.w	r8, [r3]
   83b86:	4649      	mov	r1, r9
   83b88:	4620      	mov	r0, r4
   83b8a:	f001 fa55 	bl	85038 <_Bfree>
   83b8e:	2200      	movs	r2, #0
   83b90:	9b02      	ldr	r3, [sp, #8]
   83b92:	702a      	strb	r2, [r5, #0]
   83b94:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83b96:	3301      	adds	r3, #1
   83b98:	6013      	str	r3, [r2, #0]
   83b9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83b9c:	2b00      	cmp	r3, #0
   83b9e:	f000 839f 	beq.w	842e0 <_dtoa_r+0xad8>
   83ba2:	9804      	ldr	r0, [sp, #16]
   83ba4:	601d      	str	r5, [r3, #0]
   83ba6:	b01b      	add	sp, #108	; 0x6c
   83ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83bae:	2a00      	cmp	r2, #0
   83bb0:	d03e      	beq.n	83c30 <_dtoa_r+0x428>
   83bb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83bb4:	2a01      	cmp	r2, #1
   83bb6:	f340 8311 	ble.w	841dc <_dtoa_r+0x9d4>
   83bba:	9b07      	ldr	r3, [sp, #28]
   83bbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83bbe:	1e5f      	subs	r7, r3, #1
   83bc0:	42ba      	cmp	r2, r7
   83bc2:	f2c0 8390 	blt.w	842e6 <_dtoa_r+0xade>
   83bc6:	1bd7      	subs	r7, r2, r7
   83bc8:	9b07      	ldr	r3, [sp, #28]
   83bca:	2b00      	cmp	r3, #0
   83bcc:	f2c0 848c 	blt.w	844e8 <_dtoa_r+0xce0>
   83bd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83bd2:	9b07      	ldr	r3, [sp, #28]
   83bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83bd6:	2101      	movs	r1, #1
   83bd8:	441a      	add	r2, r3
   83bda:	920a      	str	r2, [sp, #40]	; 0x28
   83bdc:	9a08      	ldr	r2, [sp, #32]
   83bde:	4620      	mov	r0, r4
   83be0:	441a      	add	r2, r3
   83be2:	9208      	str	r2, [sp, #32]
   83be4:	f001 fac4 	bl	85170 <__i2b>
   83be8:	4606      	mov	r6, r0
   83bea:	e023      	b.n	83c34 <_dtoa_r+0x42c>
   83bec:	2301      	movs	r3, #1
   83bee:	930e      	str	r3, [sp, #56]	; 0x38
   83bf0:	e6b5      	b.n	8395e <_dtoa_r+0x156>
   83bf2:	2300      	movs	r3, #0
   83bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83bf6:	930d      	str	r3, [sp, #52]	; 0x34
   83bf8:	9b02      	ldr	r3, [sp, #8]
   83bfa:	1ad2      	subs	r2, r2, r3
   83bfc:	425b      	negs	r3, r3
   83bfe:	920a      	str	r2, [sp, #40]	; 0x28
   83c00:	930c      	str	r3, [sp, #48]	; 0x30
   83c02:	e6be      	b.n	83982 <_dtoa_r+0x17a>
   83c04:	f1c7 0301 	rsb	r3, r7, #1
   83c08:	930a      	str	r3, [sp, #40]	; 0x28
   83c0a:	2300      	movs	r3, #0
   83c0c:	9308      	str	r3, [sp, #32]
   83c0e:	e6ad      	b.n	8396c <_dtoa_r+0x164>
   83c10:	9d02      	ldr	r5, [sp, #8]
   83c12:	4628      	mov	r0, r5
   83c14:	f002 f91c 	bl	85e50 <__aeabi_i2d>
   83c18:	4602      	mov	r2, r0
   83c1a:	460b      	mov	r3, r1
   83c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83c20:	f002 fbe4 	bl	863ec <__aeabi_dcmpeq>
   83c24:	2800      	cmp	r0, #0
   83c26:	f47f ae86 	bne.w	83936 <_dtoa_r+0x12e>
   83c2a:	1e6b      	subs	r3, r5, #1
   83c2c:	9302      	str	r3, [sp, #8]
   83c2e:	e682      	b.n	83936 <_dtoa_r+0x12e>
   83c30:	ad0a      	add	r5, sp, #40	; 0x28
   83c32:	cde0      	ldmia	r5, {r5, r6, r7}
   83c34:	2d00      	cmp	r5, #0
   83c36:	dd0c      	ble.n	83c52 <_dtoa_r+0x44a>
   83c38:	9908      	ldr	r1, [sp, #32]
   83c3a:	2900      	cmp	r1, #0
   83c3c:	460b      	mov	r3, r1
   83c3e:	dd08      	ble.n	83c52 <_dtoa_r+0x44a>
   83c40:	42a9      	cmp	r1, r5
   83c42:	bfa8      	it	ge
   83c44:	462b      	movge	r3, r5
   83c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c48:	1aed      	subs	r5, r5, r3
   83c4a:	1ad2      	subs	r2, r2, r3
   83c4c:	1acb      	subs	r3, r1, r3
   83c4e:	920a      	str	r2, [sp, #40]	; 0x28
   83c50:	9308      	str	r3, [sp, #32]
   83c52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83c54:	b1d3      	cbz	r3, 83c8c <_dtoa_r+0x484>
   83c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83c58:	2b00      	cmp	r3, #0
   83c5a:	f000 82b8 	beq.w	841ce <_dtoa_r+0x9c6>
   83c5e:	2f00      	cmp	r7, #0
   83c60:	dd10      	ble.n	83c84 <_dtoa_r+0x47c>
   83c62:	4631      	mov	r1, r6
   83c64:	463a      	mov	r2, r7
   83c66:	4620      	mov	r0, r4
   83c68:	f001 fb1e 	bl	852a8 <__pow5mult>
   83c6c:	464a      	mov	r2, r9
   83c6e:	4601      	mov	r1, r0
   83c70:	4606      	mov	r6, r0
   83c72:	4620      	mov	r0, r4
   83c74:	f001 fa86 	bl	85184 <__multiply>
   83c78:	4603      	mov	r3, r0
   83c7a:	4649      	mov	r1, r9
   83c7c:	4620      	mov	r0, r4
   83c7e:	4699      	mov	r9, r3
   83c80:	f001 f9da 	bl	85038 <_Bfree>
   83c84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83c86:	1bda      	subs	r2, r3, r7
   83c88:	f040 82a2 	bne.w	841d0 <_dtoa_r+0x9c8>
   83c8c:	2101      	movs	r1, #1
   83c8e:	4620      	mov	r0, r4
   83c90:	f001 fa6e 	bl	85170 <__i2b>
   83c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83c96:	4680      	mov	r8, r0
   83c98:	2b00      	cmp	r3, #0
   83c9a:	dd1f      	ble.n	83cdc <_dtoa_r+0x4d4>
   83c9c:	4601      	mov	r1, r0
   83c9e:	461a      	mov	r2, r3
   83ca0:	4620      	mov	r0, r4
   83ca2:	f001 fb01 	bl	852a8 <__pow5mult>
   83ca6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83ca8:	4680      	mov	r8, r0
   83caa:	2b01      	cmp	r3, #1
   83cac:	f340 8255 	ble.w	8415a <_dtoa_r+0x952>
   83cb0:	2300      	movs	r3, #0
   83cb2:	930c      	str	r3, [sp, #48]	; 0x30
   83cb4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   83cb8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83cbc:	6918      	ldr	r0, [r3, #16]
   83cbe:	f001 fa07 	bl	850d0 <__hi0bits>
   83cc2:	f1c0 0020 	rsb	r0, r0, #32
   83cc6:	e013      	b.n	83cf0 <_dtoa_r+0x4e8>
   83cc8:	f1c3 0520 	rsb	r5, r3, #32
   83ccc:	fa0a f005 	lsl.w	r0, sl, r5
   83cd0:	e67b      	b.n	839ca <_dtoa_r+0x1c2>
   83cd2:	900e      	str	r0, [sp, #56]	; 0x38
   83cd4:	e643      	b.n	8395e <_dtoa_r+0x156>
   83cd6:	bf00      	nop
   83cd8:	40240000 	.word	0x40240000
   83cdc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83cde:	2b01      	cmp	r3, #1
   83ce0:	f340 8285 	ble.w	841ee <_dtoa_r+0x9e6>
   83ce4:	2300      	movs	r3, #0
   83ce6:	930c      	str	r3, [sp, #48]	; 0x30
   83ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83cea:	2001      	movs	r0, #1
   83cec:	2b00      	cmp	r3, #0
   83cee:	d1e1      	bne.n	83cb4 <_dtoa_r+0x4ac>
   83cf0:	9a08      	ldr	r2, [sp, #32]
   83cf2:	4410      	add	r0, r2
   83cf4:	f010 001f 	ands.w	r0, r0, #31
   83cf8:	f000 80a1 	beq.w	83e3e <_dtoa_r+0x636>
   83cfc:	f1c0 0320 	rsb	r3, r0, #32
   83d00:	2b04      	cmp	r3, #4
   83d02:	f340 8486 	ble.w	84612 <_dtoa_r+0xe0a>
   83d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d08:	f1c0 001c 	rsb	r0, r0, #28
   83d0c:	4403      	add	r3, r0
   83d0e:	930a      	str	r3, [sp, #40]	; 0x28
   83d10:	4613      	mov	r3, r2
   83d12:	4403      	add	r3, r0
   83d14:	4405      	add	r5, r0
   83d16:	9308      	str	r3, [sp, #32]
   83d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d1a:	2b00      	cmp	r3, #0
   83d1c:	dd05      	ble.n	83d2a <_dtoa_r+0x522>
   83d1e:	4649      	mov	r1, r9
   83d20:	461a      	mov	r2, r3
   83d22:	4620      	mov	r0, r4
   83d24:	f001 fb10 	bl	85348 <__lshift>
   83d28:	4681      	mov	r9, r0
   83d2a:	9b08      	ldr	r3, [sp, #32]
   83d2c:	2b00      	cmp	r3, #0
   83d2e:	dd05      	ble.n	83d3c <_dtoa_r+0x534>
   83d30:	4641      	mov	r1, r8
   83d32:	461a      	mov	r2, r3
   83d34:	4620      	mov	r0, r4
   83d36:	f001 fb07 	bl	85348 <__lshift>
   83d3a:	4680      	mov	r8, r0
   83d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83d3e:	2b00      	cmp	r3, #0
   83d40:	f040 8086 	bne.w	83e50 <_dtoa_r+0x648>
   83d44:	9b07      	ldr	r3, [sp, #28]
   83d46:	2b00      	cmp	r3, #0
   83d48:	f340 8264 	ble.w	84214 <_dtoa_r+0xa0c>
   83d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83d4e:	2b00      	cmp	r3, #0
   83d50:	f000 8098 	beq.w	83e84 <_dtoa_r+0x67c>
   83d54:	2d00      	cmp	r5, #0
   83d56:	dd05      	ble.n	83d64 <_dtoa_r+0x55c>
   83d58:	4631      	mov	r1, r6
   83d5a:	462a      	mov	r2, r5
   83d5c:	4620      	mov	r0, r4
   83d5e:	f001 faf3 	bl	85348 <__lshift>
   83d62:	4606      	mov	r6, r0
   83d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83d66:	2b00      	cmp	r3, #0
   83d68:	f040 8336 	bne.w	843d8 <_dtoa_r+0xbd0>
   83d6c:	9608      	str	r6, [sp, #32]
   83d6e:	9b07      	ldr	r3, [sp, #28]
   83d70:	9a04      	ldr	r2, [sp, #16]
   83d72:	3b01      	subs	r3, #1
   83d74:	18d3      	adds	r3, r2, r3
   83d76:	930b      	str	r3, [sp, #44]	; 0x2c
   83d78:	4617      	mov	r7, r2
   83d7a:	f00a 0301 	and.w	r3, sl, #1
   83d7e:	46c2      	mov	sl, r8
   83d80:	f8dd b020 	ldr.w	fp, [sp, #32]
   83d84:	930c      	str	r3, [sp, #48]	; 0x30
   83d86:	4651      	mov	r1, sl
   83d88:	4648      	mov	r0, r9
   83d8a:	f7ff fca9 	bl	836e0 <quorem>
   83d8e:	4631      	mov	r1, r6
   83d90:	4605      	mov	r5, r0
   83d92:	4648      	mov	r0, r9
   83d94:	f001 fb28 	bl	853e8 <__mcmp>
   83d98:	465a      	mov	r2, fp
   83d9a:	9007      	str	r0, [sp, #28]
   83d9c:	4651      	mov	r1, sl
   83d9e:	4620      	mov	r0, r4
   83da0:	f001 fb3e 	bl	85420 <__mdiff>
   83da4:	68c2      	ldr	r2, [r0, #12]
   83da6:	4680      	mov	r8, r0
   83da8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   83dac:	2a00      	cmp	r2, #0
   83dae:	f040 8229 	bne.w	84204 <_dtoa_r+0x9fc>
   83db2:	4601      	mov	r1, r0
   83db4:	4648      	mov	r0, r9
   83db6:	930a      	str	r3, [sp, #40]	; 0x28
   83db8:	f001 fb16 	bl	853e8 <__mcmp>
   83dbc:	4641      	mov	r1, r8
   83dbe:	9008      	str	r0, [sp, #32]
   83dc0:	4620      	mov	r0, r4
   83dc2:	f001 f939 	bl	85038 <_Bfree>
   83dc6:	9a08      	ldr	r2, [sp, #32]
   83dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83dca:	b932      	cbnz	r2, 83dda <_dtoa_r+0x5d2>
   83dcc:	9924      	ldr	r1, [sp, #144]	; 0x90
   83dce:	b921      	cbnz	r1, 83dda <_dtoa_r+0x5d2>
   83dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83dd2:	2a00      	cmp	r2, #0
   83dd4:	f000 83ee 	beq.w	845b4 <_dtoa_r+0xdac>
   83dd8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83dda:	9907      	ldr	r1, [sp, #28]
   83ddc:	2900      	cmp	r1, #0
   83dde:	f2c0 829f 	blt.w	84320 <_dtoa_r+0xb18>
   83de2:	d105      	bne.n	83df0 <_dtoa_r+0x5e8>
   83de4:	9924      	ldr	r1, [sp, #144]	; 0x90
   83de6:	b919      	cbnz	r1, 83df0 <_dtoa_r+0x5e8>
   83de8:	990c      	ldr	r1, [sp, #48]	; 0x30
   83dea:	2900      	cmp	r1, #0
   83dec:	f000 8298 	beq.w	84320 <_dtoa_r+0xb18>
   83df0:	2a00      	cmp	r2, #0
   83df2:	f300 8305 	bgt.w	84400 <_dtoa_r+0xbf8>
   83df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83df8:	f107 0801 	add.w	r8, r7, #1
   83dfc:	4297      	cmp	r7, r2
   83dfe:	703b      	strb	r3, [r7, #0]
   83e00:	4645      	mov	r5, r8
   83e02:	f000 830b 	beq.w	8441c <_dtoa_r+0xc14>
   83e06:	4649      	mov	r1, r9
   83e08:	2300      	movs	r3, #0
   83e0a:	220a      	movs	r2, #10
   83e0c:	4620      	mov	r0, r4
   83e0e:	f001 f91d 	bl	8504c <__multadd>
   83e12:	455e      	cmp	r6, fp
   83e14:	4681      	mov	r9, r0
   83e16:	4631      	mov	r1, r6
   83e18:	f04f 0300 	mov.w	r3, #0
   83e1c:	f04f 020a 	mov.w	r2, #10
   83e20:	4620      	mov	r0, r4
   83e22:	f000 81e9 	beq.w	841f8 <_dtoa_r+0x9f0>
   83e26:	f001 f911 	bl	8504c <__multadd>
   83e2a:	4659      	mov	r1, fp
   83e2c:	4606      	mov	r6, r0
   83e2e:	2300      	movs	r3, #0
   83e30:	220a      	movs	r2, #10
   83e32:	4620      	mov	r0, r4
   83e34:	f001 f90a 	bl	8504c <__multadd>
   83e38:	4647      	mov	r7, r8
   83e3a:	4683      	mov	fp, r0
   83e3c:	e7a3      	b.n	83d86 <_dtoa_r+0x57e>
   83e3e:	201c      	movs	r0, #28
   83e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e42:	4405      	add	r5, r0
   83e44:	4403      	add	r3, r0
   83e46:	930a      	str	r3, [sp, #40]	; 0x28
   83e48:	9b08      	ldr	r3, [sp, #32]
   83e4a:	4403      	add	r3, r0
   83e4c:	9308      	str	r3, [sp, #32]
   83e4e:	e763      	b.n	83d18 <_dtoa_r+0x510>
   83e50:	4641      	mov	r1, r8
   83e52:	4648      	mov	r0, r9
   83e54:	f001 fac8 	bl	853e8 <__mcmp>
   83e58:	2800      	cmp	r0, #0
   83e5a:	f6bf af73 	bge.w	83d44 <_dtoa_r+0x53c>
   83e5e:	9f02      	ldr	r7, [sp, #8]
   83e60:	4649      	mov	r1, r9
   83e62:	2300      	movs	r3, #0
   83e64:	220a      	movs	r2, #10
   83e66:	4620      	mov	r0, r4
   83e68:	3f01      	subs	r7, #1
   83e6a:	9702      	str	r7, [sp, #8]
   83e6c:	f001 f8ee 	bl	8504c <__multadd>
   83e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83e72:	4681      	mov	r9, r0
   83e74:	2b00      	cmp	r3, #0
   83e76:	f040 83b5 	bne.w	845e4 <_dtoa_r+0xddc>
   83e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83e7c:	2b00      	cmp	r3, #0
   83e7e:	f340 83be 	ble.w	845fe <_dtoa_r+0xdf6>
   83e82:	9307      	str	r3, [sp, #28]
   83e84:	f8dd a010 	ldr.w	sl, [sp, #16]
   83e88:	9f07      	ldr	r7, [sp, #28]
   83e8a:	4655      	mov	r5, sl
   83e8c:	e006      	b.n	83e9c <_dtoa_r+0x694>
   83e8e:	4649      	mov	r1, r9
   83e90:	2300      	movs	r3, #0
   83e92:	220a      	movs	r2, #10
   83e94:	4620      	mov	r0, r4
   83e96:	f001 f8d9 	bl	8504c <__multadd>
   83e9a:	4681      	mov	r9, r0
   83e9c:	4641      	mov	r1, r8
   83e9e:	4648      	mov	r0, r9
   83ea0:	f7ff fc1e 	bl	836e0 <quorem>
   83ea4:	3030      	adds	r0, #48	; 0x30
   83ea6:	f805 0b01 	strb.w	r0, [r5], #1
   83eaa:	eba5 030a 	sub.w	r3, r5, sl
   83eae:	42bb      	cmp	r3, r7
   83eb0:	dbed      	blt.n	83e8e <_dtoa_r+0x686>
   83eb2:	9b04      	ldr	r3, [sp, #16]
   83eb4:	9a07      	ldr	r2, [sp, #28]
   83eb6:	4682      	mov	sl, r0
   83eb8:	2a01      	cmp	r2, #1
   83eba:	bfac      	ite	ge
   83ebc:	189b      	addge	r3, r3, r2
   83ebe:	3301      	addlt	r3, #1
   83ec0:	f04f 0b00 	mov.w	fp, #0
   83ec4:	461d      	mov	r5, r3
   83ec6:	4649      	mov	r1, r9
   83ec8:	2201      	movs	r2, #1
   83eca:	4620      	mov	r0, r4
   83ecc:	f001 fa3c 	bl	85348 <__lshift>
   83ed0:	4641      	mov	r1, r8
   83ed2:	4681      	mov	r9, r0
   83ed4:	f001 fa88 	bl	853e8 <__mcmp>
   83ed8:	2800      	cmp	r0, #0
   83eda:	f340 823f 	ble.w	8435c <_dtoa_r+0xb54>
   83ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   83ee2:	1e6b      	subs	r3, r5, #1
   83ee4:	9904      	ldr	r1, [sp, #16]
   83ee6:	e004      	b.n	83ef2 <_dtoa_r+0x6ea>
   83ee8:	428b      	cmp	r3, r1
   83eea:	f000 81ae 	beq.w	8424a <_dtoa_r+0xa42>
   83eee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   83ef2:	2a39      	cmp	r2, #57	; 0x39
   83ef4:	f103 0501 	add.w	r5, r3, #1
   83ef8:	d0f6      	beq.n	83ee8 <_dtoa_r+0x6e0>
   83efa:	3201      	adds	r2, #1
   83efc:	701a      	strb	r2, [r3, #0]
   83efe:	4641      	mov	r1, r8
   83f00:	4620      	mov	r0, r4
   83f02:	f001 f899 	bl	85038 <_Bfree>
   83f06:	2e00      	cmp	r6, #0
   83f08:	f43f ae3d 	beq.w	83b86 <_dtoa_r+0x37e>
   83f0c:	f1bb 0f00 	cmp.w	fp, #0
   83f10:	d005      	beq.n	83f1e <_dtoa_r+0x716>
   83f12:	45b3      	cmp	fp, r6
   83f14:	d003      	beq.n	83f1e <_dtoa_r+0x716>
   83f16:	4659      	mov	r1, fp
   83f18:	4620      	mov	r0, r4
   83f1a:	f001 f88d 	bl	85038 <_Bfree>
   83f1e:	4631      	mov	r1, r6
   83f20:	4620      	mov	r0, r4
   83f22:	f001 f889 	bl	85038 <_Bfree>
   83f26:	e62e      	b.n	83b86 <_dtoa_r+0x37e>
   83f28:	2300      	movs	r3, #0
   83f2a:	930b      	str	r3, [sp, #44]	; 0x2c
   83f2c:	9b02      	ldr	r3, [sp, #8]
   83f2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83f30:	4413      	add	r3, r2
   83f32:	930f      	str	r3, [sp, #60]	; 0x3c
   83f34:	3301      	adds	r3, #1
   83f36:	2b01      	cmp	r3, #1
   83f38:	461f      	mov	r7, r3
   83f3a:	461e      	mov	r6, r3
   83f3c:	bfb8      	it	lt
   83f3e:	2701      	movlt	r7, #1
   83f40:	9307      	str	r3, [sp, #28]
   83f42:	2100      	movs	r1, #0
   83f44:	2f17      	cmp	r7, #23
   83f46:	6461      	str	r1, [r4, #68]	; 0x44
   83f48:	d90a      	bls.n	83f60 <_dtoa_r+0x758>
   83f4a:	2201      	movs	r2, #1
   83f4c:	2304      	movs	r3, #4
   83f4e:	005b      	lsls	r3, r3, #1
   83f50:	f103 0014 	add.w	r0, r3, #20
   83f54:	4287      	cmp	r7, r0
   83f56:	4611      	mov	r1, r2
   83f58:	f102 0201 	add.w	r2, r2, #1
   83f5c:	d2f7      	bcs.n	83f4e <_dtoa_r+0x746>
   83f5e:	6461      	str	r1, [r4, #68]	; 0x44
   83f60:	4620      	mov	r0, r4
   83f62:	f001 f843 	bl	84fec <_Balloc>
   83f66:	2e0e      	cmp	r6, #14
   83f68:	9004      	str	r0, [sp, #16]
   83f6a:	6420      	str	r0, [r4, #64]	; 0x40
   83f6c:	f63f ad47 	bhi.w	839fe <_dtoa_r+0x1f6>
   83f70:	2d00      	cmp	r5, #0
   83f72:	f43f ad44 	beq.w	839fe <_dtoa_r+0x1f6>
   83f76:	9902      	ldr	r1, [sp, #8]
   83f78:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   83f7c:	2900      	cmp	r1, #0
   83f7e:	f340 8203 	ble.w	84388 <_dtoa_r+0xb80>
   83f82:	4bb9      	ldr	r3, [pc, #740]	; (84268 <_dtoa_r+0xa60>)
   83f84:	f001 020f 	and.w	r2, r1, #15
   83f88:	110d      	asrs	r5, r1, #4
   83f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83f8e:	06e9      	lsls	r1, r5, #27
   83f90:	e9d3 6700 	ldrd	r6, r7, [r3]
   83f94:	f140 81af 	bpl.w	842f6 <_dtoa_r+0xaee>
   83f98:	4bb4      	ldr	r3, [pc, #720]	; (8426c <_dtoa_r+0xa64>)
   83f9a:	4650      	mov	r0, sl
   83f9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   83fa0:	4659      	mov	r1, fp
   83fa2:	f002 f8e5 	bl	86170 <__aeabi_ddiv>
   83fa6:	f04f 0a03 	mov.w	sl, #3
   83faa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   83fae:	f005 050f 	and.w	r5, r5, #15
   83fb2:	b18d      	cbz	r5, 83fd8 <_dtoa_r+0x7d0>
   83fb4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8426c <_dtoa_r+0xa64>
   83fb8:	07ea      	lsls	r2, r5, #31
   83fba:	d509      	bpl.n	83fd0 <_dtoa_r+0x7c8>
   83fbc:	e9d8 2300 	ldrd	r2, r3, [r8]
   83fc0:	4630      	mov	r0, r6
   83fc2:	4639      	mov	r1, r7
   83fc4:	f001 ffaa 	bl	85f1c <__aeabi_dmul>
   83fc8:	4606      	mov	r6, r0
   83fca:	460f      	mov	r7, r1
   83fcc:	f10a 0a01 	add.w	sl, sl, #1
   83fd0:	106d      	asrs	r5, r5, #1
   83fd2:	f108 0808 	add.w	r8, r8, #8
   83fd6:	d1ef      	bne.n	83fb8 <_dtoa_r+0x7b0>
   83fd8:	463b      	mov	r3, r7
   83fda:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   83fde:	4632      	mov	r2, r6
   83fe0:	f002 f8c6 	bl	86170 <__aeabi_ddiv>
   83fe4:	4607      	mov	r7, r0
   83fe6:	4688      	mov	r8, r1
   83fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83fea:	b143      	cbz	r3, 83ffe <_dtoa_r+0x7f6>
   83fec:	2200      	movs	r2, #0
   83fee:	4ba0      	ldr	r3, [pc, #640]	; (84270 <_dtoa_r+0xa68>)
   83ff0:	4638      	mov	r0, r7
   83ff2:	4641      	mov	r1, r8
   83ff4:	f002 fa04 	bl	86400 <__aeabi_dcmplt>
   83ff8:	2800      	cmp	r0, #0
   83ffa:	f040 8287 	bne.w	8450c <_dtoa_r+0xd04>
   83ffe:	4650      	mov	r0, sl
   84000:	f001 ff26 	bl	85e50 <__aeabi_i2d>
   84004:	463a      	mov	r2, r7
   84006:	4643      	mov	r3, r8
   84008:	f001 ff88 	bl	85f1c <__aeabi_dmul>
   8400c:	4b99      	ldr	r3, [pc, #612]	; (84274 <_dtoa_r+0xa6c>)
   8400e:	2200      	movs	r2, #0
   84010:	f001 fdd2 	bl	85bb8 <__adddf3>
   84014:	9b07      	ldr	r3, [sp, #28]
   84016:	4605      	mov	r5, r0
   84018:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8401c:	2b00      	cmp	r3, #0
   8401e:	f000 813f 	beq.w	842a0 <_dtoa_r+0xa98>
   84022:	9b02      	ldr	r3, [sp, #8]
   84024:	9315      	str	r3, [sp, #84]	; 0x54
   84026:	9b07      	ldr	r3, [sp, #28]
   84028:	9312      	str	r3, [sp, #72]	; 0x48
   8402a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8402c:	2b00      	cmp	r3, #0
   8402e:	f000 81fb 	beq.w	84428 <_dtoa_r+0xc20>
   84032:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84034:	4b8c      	ldr	r3, [pc, #560]	; (84268 <_dtoa_r+0xa60>)
   84036:	2000      	movs	r0, #0
   84038:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8403c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   84040:	498d      	ldr	r1, [pc, #564]	; (84278 <_dtoa_r+0xa70>)
   84042:	f002 f895 	bl	86170 <__aeabi_ddiv>
   84046:	462a      	mov	r2, r5
   84048:	4633      	mov	r3, r6
   8404a:	f001 fdb3 	bl	85bb4 <__aeabi_dsub>
   8404e:	4682      	mov	sl, r0
   84050:	468b      	mov	fp, r1
   84052:	4638      	mov	r0, r7
   84054:	4641      	mov	r1, r8
   84056:	f002 fa11 	bl	8647c <__aeabi_d2iz>
   8405a:	4605      	mov	r5, r0
   8405c:	f001 fef8 	bl	85e50 <__aeabi_i2d>
   84060:	4602      	mov	r2, r0
   84062:	460b      	mov	r3, r1
   84064:	4638      	mov	r0, r7
   84066:	4641      	mov	r1, r8
   84068:	f001 fda4 	bl	85bb4 <__aeabi_dsub>
   8406c:	3530      	adds	r5, #48	; 0x30
   8406e:	fa5f f885 	uxtb.w	r8, r5
   84072:	9d04      	ldr	r5, [sp, #16]
   84074:	4606      	mov	r6, r0
   84076:	460f      	mov	r7, r1
   84078:	f885 8000 	strb.w	r8, [r5]
   8407c:	4602      	mov	r2, r0
   8407e:	460b      	mov	r3, r1
   84080:	4650      	mov	r0, sl
   84082:	4659      	mov	r1, fp
   84084:	3501      	adds	r5, #1
   84086:	f002 f9d9 	bl	8643c <__aeabi_dcmpgt>
   8408a:	2800      	cmp	r0, #0
   8408c:	d154      	bne.n	84138 <_dtoa_r+0x930>
   8408e:	4632      	mov	r2, r6
   84090:	463b      	mov	r3, r7
   84092:	2000      	movs	r0, #0
   84094:	4976      	ldr	r1, [pc, #472]	; (84270 <_dtoa_r+0xa68>)
   84096:	f001 fd8d 	bl	85bb4 <__aeabi_dsub>
   8409a:	4602      	mov	r2, r0
   8409c:	460b      	mov	r3, r1
   8409e:	4650      	mov	r0, sl
   840a0:	4659      	mov	r1, fp
   840a2:	f002 f9cb 	bl	8643c <__aeabi_dcmpgt>
   840a6:	2800      	cmp	r0, #0
   840a8:	f040 8270 	bne.w	8458c <_dtoa_r+0xd84>
   840ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   840ae:	2a01      	cmp	r2, #1
   840b0:	f000 8112 	beq.w	842d8 <_dtoa_r+0xad0>
   840b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   840b6:	9a04      	ldr	r2, [sp, #16]
   840b8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   840bc:	4413      	add	r3, r2
   840be:	4699      	mov	r9, r3
   840c0:	e00f      	b.n	840e2 <_dtoa_r+0x8da>
   840c2:	4632      	mov	r2, r6
   840c4:	463b      	mov	r3, r7
   840c6:	2000      	movs	r0, #0
   840c8:	4969      	ldr	r1, [pc, #420]	; (84270 <_dtoa_r+0xa68>)
   840ca:	f001 fd73 	bl	85bb4 <__aeabi_dsub>
   840ce:	4652      	mov	r2, sl
   840d0:	465b      	mov	r3, fp
   840d2:	f002 f995 	bl	86400 <__aeabi_dcmplt>
   840d6:	2800      	cmp	r0, #0
   840d8:	f040 8256 	bne.w	84588 <_dtoa_r+0xd80>
   840dc:	454d      	cmp	r5, r9
   840de:	f000 80f9 	beq.w	842d4 <_dtoa_r+0xacc>
   840e2:	4650      	mov	r0, sl
   840e4:	4659      	mov	r1, fp
   840e6:	2200      	movs	r2, #0
   840e8:	4b64      	ldr	r3, [pc, #400]	; (8427c <_dtoa_r+0xa74>)
   840ea:	f001 ff17 	bl	85f1c <__aeabi_dmul>
   840ee:	2200      	movs	r2, #0
   840f0:	4b62      	ldr	r3, [pc, #392]	; (8427c <_dtoa_r+0xa74>)
   840f2:	4682      	mov	sl, r0
   840f4:	468b      	mov	fp, r1
   840f6:	4630      	mov	r0, r6
   840f8:	4639      	mov	r1, r7
   840fa:	f001 ff0f 	bl	85f1c <__aeabi_dmul>
   840fe:	460f      	mov	r7, r1
   84100:	4606      	mov	r6, r0
   84102:	f002 f9bb 	bl	8647c <__aeabi_d2iz>
   84106:	4680      	mov	r8, r0
   84108:	f001 fea2 	bl	85e50 <__aeabi_i2d>
   8410c:	4602      	mov	r2, r0
   8410e:	460b      	mov	r3, r1
   84110:	4630      	mov	r0, r6
   84112:	4639      	mov	r1, r7
   84114:	f001 fd4e 	bl	85bb4 <__aeabi_dsub>
   84118:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8411c:	fa5f f888 	uxtb.w	r8, r8
   84120:	f805 8b01 	strb.w	r8, [r5], #1
   84124:	4652      	mov	r2, sl
   84126:	465b      	mov	r3, fp
   84128:	4606      	mov	r6, r0
   8412a:	460f      	mov	r7, r1
   8412c:	f002 f968 	bl	86400 <__aeabi_dcmplt>
   84130:	2800      	cmp	r0, #0
   84132:	d0c6      	beq.n	840c2 <_dtoa_r+0x8ba>
   84134:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84138:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8413a:	9302      	str	r3, [sp, #8]
   8413c:	e523      	b.n	83b86 <_dtoa_r+0x37e>
   8413e:	2300      	movs	r3, #0
   84140:	930b      	str	r3, [sp, #44]	; 0x2c
   84142:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84144:	2b00      	cmp	r3, #0
   84146:	f340 80dd 	ble.w	84304 <_dtoa_r+0xafc>
   8414a:	461f      	mov	r7, r3
   8414c:	461e      	mov	r6, r3
   8414e:	930f      	str	r3, [sp, #60]	; 0x3c
   84150:	9307      	str	r3, [sp, #28]
   84152:	e6f6      	b.n	83f42 <_dtoa_r+0x73a>
   84154:	2301      	movs	r3, #1
   84156:	930b      	str	r3, [sp, #44]	; 0x2c
   84158:	e7f3      	b.n	84142 <_dtoa_r+0x93a>
   8415a:	f1ba 0f00 	cmp.w	sl, #0
   8415e:	f47f ada7 	bne.w	83cb0 <_dtoa_r+0x4a8>
   84162:	f3cb 0313 	ubfx	r3, fp, #0, #20
   84166:	2b00      	cmp	r3, #0
   84168:	f47f adbc 	bne.w	83ce4 <_dtoa_r+0x4dc>
   8416c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   84170:	0d3f      	lsrs	r7, r7, #20
   84172:	053f      	lsls	r7, r7, #20
   84174:	2f00      	cmp	r7, #0
   84176:	f000 820d 	beq.w	84594 <_dtoa_r+0xd8c>
   8417a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8417c:	3301      	adds	r3, #1
   8417e:	930a      	str	r3, [sp, #40]	; 0x28
   84180:	9b08      	ldr	r3, [sp, #32]
   84182:	3301      	adds	r3, #1
   84184:	9308      	str	r3, [sp, #32]
   84186:	2301      	movs	r3, #1
   84188:	930c      	str	r3, [sp, #48]	; 0x30
   8418a:	e5ad      	b.n	83ce8 <_dtoa_r+0x4e0>
   8418c:	9b07      	ldr	r3, [sp, #28]
   8418e:	2b00      	cmp	r3, #0
   84190:	f73f ac48 	bgt.w	83a24 <_dtoa_r+0x21c>
   84194:	f040 8222 	bne.w	845dc <_dtoa_r+0xdd4>
   84198:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8419c:	2200      	movs	r2, #0
   8419e:	4b38      	ldr	r3, [pc, #224]	; (84280 <_dtoa_r+0xa78>)
   841a0:	f001 febc 	bl	85f1c <__aeabi_dmul>
   841a4:	4652      	mov	r2, sl
   841a6:	465b      	mov	r3, fp
   841a8:	f002 f93e 	bl	86428 <__aeabi_dcmpge>
   841ac:	f8dd 801c 	ldr.w	r8, [sp, #28]
   841b0:	4646      	mov	r6, r8
   841b2:	2800      	cmp	r0, #0
   841b4:	d041      	beq.n	8423a <_dtoa_r+0xa32>
   841b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   841b8:	9d04      	ldr	r5, [sp, #16]
   841ba:	43db      	mvns	r3, r3
   841bc:	9302      	str	r3, [sp, #8]
   841be:	4641      	mov	r1, r8
   841c0:	4620      	mov	r0, r4
   841c2:	f000 ff39 	bl	85038 <_Bfree>
   841c6:	2e00      	cmp	r6, #0
   841c8:	f43f acdd 	beq.w	83b86 <_dtoa_r+0x37e>
   841cc:	e6a7      	b.n	83f1e <_dtoa_r+0x716>
   841ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   841d0:	4649      	mov	r1, r9
   841d2:	4620      	mov	r0, r4
   841d4:	f001 f868 	bl	852a8 <__pow5mult>
   841d8:	4681      	mov	r9, r0
   841da:	e557      	b.n	83c8c <_dtoa_r+0x484>
   841dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   841de:	2a00      	cmp	r2, #0
   841e0:	f000 8188 	beq.w	844f4 <_dtoa_r+0xcec>
   841e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   841e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   841ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   841ec:	e4f2      	b.n	83bd4 <_dtoa_r+0x3cc>
   841ee:	f1ba 0f00 	cmp.w	sl, #0
   841f2:	f47f ad77 	bne.w	83ce4 <_dtoa_r+0x4dc>
   841f6:	e7b4      	b.n	84162 <_dtoa_r+0x95a>
   841f8:	f000 ff28 	bl	8504c <__multadd>
   841fc:	4647      	mov	r7, r8
   841fe:	4606      	mov	r6, r0
   84200:	4683      	mov	fp, r0
   84202:	e5c0      	b.n	83d86 <_dtoa_r+0x57e>
   84204:	4601      	mov	r1, r0
   84206:	4620      	mov	r0, r4
   84208:	9308      	str	r3, [sp, #32]
   8420a:	f000 ff15 	bl	85038 <_Bfree>
   8420e:	2201      	movs	r2, #1
   84210:	9b08      	ldr	r3, [sp, #32]
   84212:	e5e2      	b.n	83dda <_dtoa_r+0x5d2>
   84214:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84216:	2b02      	cmp	r3, #2
   84218:	f77f ad98 	ble.w	83d4c <_dtoa_r+0x544>
   8421c:	9b07      	ldr	r3, [sp, #28]
   8421e:	2b00      	cmp	r3, #0
   84220:	d1c9      	bne.n	841b6 <_dtoa_r+0x9ae>
   84222:	4641      	mov	r1, r8
   84224:	2205      	movs	r2, #5
   84226:	4620      	mov	r0, r4
   84228:	f000 ff10 	bl	8504c <__multadd>
   8422c:	4601      	mov	r1, r0
   8422e:	4680      	mov	r8, r0
   84230:	4648      	mov	r0, r9
   84232:	f001 f8d9 	bl	853e8 <__mcmp>
   84236:	2800      	cmp	r0, #0
   84238:	ddbd      	ble.n	841b6 <_dtoa_r+0x9ae>
   8423a:	2331      	movs	r3, #49	; 0x31
   8423c:	9a02      	ldr	r2, [sp, #8]
   8423e:	9904      	ldr	r1, [sp, #16]
   84240:	3201      	adds	r2, #1
   84242:	9202      	str	r2, [sp, #8]
   84244:	700b      	strb	r3, [r1, #0]
   84246:	1c4d      	adds	r5, r1, #1
   84248:	e7b9      	b.n	841be <_dtoa_r+0x9b6>
   8424a:	2331      	movs	r3, #49	; 0x31
   8424c:	9a02      	ldr	r2, [sp, #8]
   8424e:	3201      	adds	r2, #1
   84250:	9202      	str	r2, [sp, #8]
   84252:	9a04      	ldr	r2, [sp, #16]
   84254:	7013      	strb	r3, [r2, #0]
   84256:	e652      	b.n	83efe <_dtoa_r+0x6f6>
   84258:	2301      	movs	r3, #1
   8425a:	930b      	str	r3, [sp, #44]	; 0x2c
   8425c:	e666      	b.n	83f2c <_dtoa_r+0x724>
   8425e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84262:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84264:	e48f      	b.n	83b86 <_dtoa_r+0x37e>
   84266:	bf00      	nop
   84268:	00086950 	.word	0x00086950
   8426c:	00086928 	.word	0x00086928
   84270:	3ff00000 	.word	0x3ff00000
   84274:	401c0000 	.word	0x401c0000
   84278:	3fe00000 	.word	0x3fe00000
   8427c:	40240000 	.word	0x40240000
   84280:	40140000 	.word	0x40140000
   84284:	4650      	mov	r0, sl
   84286:	f001 fde3 	bl	85e50 <__aeabi_i2d>
   8428a:	463a      	mov	r2, r7
   8428c:	4643      	mov	r3, r8
   8428e:	f001 fe45 	bl	85f1c <__aeabi_dmul>
   84292:	2200      	movs	r2, #0
   84294:	4bc1      	ldr	r3, [pc, #772]	; (8459c <_dtoa_r+0xd94>)
   84296:	f001 fc8f 	bl	85bb8 <__adddf3>
   8429a:	4605      	mov	r5, r0
   8429c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   842a0:	4641      	mov	r1, r8
   842a2:	2200      	movs	r2, #0
   842a4:	4bbe      	ldr	r3, [pc, #760]	; (845a0 <_dtoa_r+0xd98>)
   842a6:	4638      	mov	r0, r7
   842a8:	f001 fc84 	bl	85bb4 <__aeabi_dsub>
   842ac:	462a      	mov	r2, r5
   842ae:	4633      	mov	r3, r6
   842b0:	4682      	mov	sl, r0
   842b2:	468b      	mov	fp, r1
   842b4:	f002 f8c2 	bl	8643c <__aeabi_dcmpgt>
   842b8:	4680      	mov	r8, r0
   842ba:	2800      	cmp	r0, #0
   842bc:	f040 8110 	bne.w	844e0 <_dtoa_r+0xcd8>
   842c0:	462a      	mov	r2, r5
   842c2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   842c6:	4650      	mov	r0, sl
   842c8:	4659      	mov	r1, fp
   842ca:	f002 f899 	bl	86400 <__aeabi_dcmplt>
   842ce:	b118      	cbz	r0, 842d8 <_dtoa_r+0xad0>
   842d0:	4646      	mov	r6, r8
   842d2:	e770      	b.n	841b6 <_dtoa_r+0x9ae>
   842d4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   842d8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   842dc:	f7ff bb8f 	b.w	839fe <_dtoa_r+0x1f6>
   842e0:	9804      	ldr	r0, [sp, #16]
   842e2:	f7ff bac0 	b.w	83866 <_dtoa_r+0x5e>
   842e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   842e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   842ea:	1afb      	subs	r3, r7, r3
   842ec:	441a      	add	r2, r3
   842ee:	970c      	str	r7, [sp, #48]	; 0x30
   842f0:	920d      	str	r2, [sp, #52]	; 0x34
   842f2:	2700      	movs	r7, #0
   842f4:	e468      	b.n	83bc8 <_dtoa_r+0x3c0>
   842f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   842fa:	f04f 0a02 	mov.w	sl, #2
   842fe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   84302:	e656      	b.n	83fb2 <_dtoa_r+0x7aa>
   84304:	2100      	movs	r1, #0
   84306:	2301      	movs	r3, #1
   84308:	4620      	mov	r0, r4
   8430a:	6461      	str	r1, [r4, #68]	; 0x44
   8430c:	9325      	str	r3, [sp, #148]	; 0x94
   8430e:	f000 fe6d 	bl	84fec <_Balloc>
   84312:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84314:	9004      	str	r0, [sp, #16]
   84316:	9307      	str	r3, [sp, #28]
   84318:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8431a:	6420      	str	r0, [r4, #64]	; 0x40
   8431c:	930f      	str	r3, [sp, #60]	; 0x3c
   8431e:	e627      	b.n	83f70 <_dtoa_r+0x768>
   84320:	2a00      	cmp	r2, #0
   84322:	46d0      	mov	r8, sl
   84324:	f8cd b020 	str.w	fp, [sp, #32]
   84328:	469a      	mov	sl, r3
   8432a:	dd11      	ble.n	84350 <_dtoa_r+0xb48>
   8432c:	4649      	mov	r1, r9
   8432e:	2201      	movs	r2, #1
   84330:	4620      	mov	r0, r4
   84332:	f001 f809 	bl	85348 <__lshift>
   84336:	4641      	mov	r1, r8
   84338:	4681      	mov	r9, r0
   8433a:	f001 f855 	bl	853e8 <__mcmp>
   8433e:	2800      	cmp	r0, #0
   84340:	f340 8145 	ble.w	845ce <_dtoa_r+0xdc6>
   84344:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   84348:	f000 8105 	beq.w	84556 <_dtoa_r+0xd4e>
   8434c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   84350:	46b3      	mov	fp, r6
   84352:	f887 a000 	strb.w	sl, [r7]
   84356:	1c7d      	adds	r5, r7, #1
   84358:	9e08      	ldr	r6, [sp, #32]
   8435a:	e5d0      	b.n	83efe <_dtoa_r+0x6f6>
   8435c:	d104      	bne.n	84368 <_dtoa_r+0xb60>
   8435e:	f01a 0f01 	tst.w	sl, #1
   84362:	d001      	beq.n	84368 <_dtoa_r+0xb60>
   84364:	e5bb      	b.n	83ede <_dtoa_r+0x6d6>
   84366:	4615      	mov	r5, r2
   84368:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8436c:	1e6a      	subs	r2, r5, #1
   8436e:	2b30      	cmp	r3, #48	; 0x30
   84370:	d0f9      	beq.n	84366 <_dtoa_r+0xb5e>
   84372:	e5c4      	b.n	83efe <_dtoa_r+0x6f6>
   84374:	2230      	movs	r2, #48	; 0x30
   84376:	9904      	ldr	r1, [sp, #16]
   84378:	700a      	strb	r2, [r1, #0]
   8437a:	9a02      	ldr	r2, [sp, #8]
   8437c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84380:	3201      	adds	r2, #1
   84382:	9202      	str	r2, [sp, #8]
   84384:	f7ff bbfb 	b.w	83b7e <_dtoa_r+0x376>
   84388:	f000 80bb 	beq.w	84502 <_dtoa_r+0xcfa>
   8438c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   84390:	9b02      	ldr	r3, [sp, #8]
   84392:	f04f 0a02 	mov.w	sl, #2
   84396:	425d      	negs	r5, r3
   84398:	4b82      	ldr	r3, [pc, #520]	; (845a4 <_dtoa_r+0xd9c>)
   8439a:	f005 020f 	and.w	r2, r5, #15
   8439e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   843a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   843a6:	f001 fdb9 	bl	85f1c <__aeabi_dmul>
   843aa:	112d      	asrs	r5, r5, #4
   843ac:	4607      	mov	r7, r0
   843ae:	4688      	mov	r8, r1
   843b0:	f43f ae1a 	beq.w	83fe8 <_dtoa_r+0x7e0>
   843b4:	4e7c      	ldr	r6, [pc, #496]	; (845a8 <_dtoa_r+0xda0>)
   843b6:	07eb      	lsls	r3, r5, #31
   843b8:	d509      	bpl.n	843ce <_dtoa_r+0xbc6>
   843ba:	e9d6 2300 	ldrd	r2, r3, [r6]
   843be:	4638      	mov	r0, r7
   843c0:	4641      	mov	r1, r8
   843c2:	f001 fdab 	bl	85f1c <__aeabi_dmul>
   843c6:	4607      	mov	r7, r0
   843c8:	4688      	mov	r8, r1
   843ca:	f10a 0a01 	add.w	sl, sl, #1
   843ce:	106d      	asrs	r5, r5, #1
   843d0:	f106 0608 	add.w	r6, r6, #8
   843d4:	d1ef      	bne.n	843b6 <_dtoa_r+0xbae>
   843d6:	e607      	b.n	83fe8 <_dtoa_r+0x7e0>
   843d8:	6871      	ldr	r1, [r6, #4]
   843da:	4620      	mov	r0, r4
   843dc:	f000 fe06 	bl	84fec <_Balloc>
   843e0:	4605      	mov	r5, r0
   843e2:	6933      	ldr	r3, [r6, #16]
   843e4:	f106 010c 	add.w	r1, r6, #12
   843e8:	3302      	adds	r3, #2
   843ea:	009a      	lsls	r2, r3, #2
   843ec:	300c      	adds	r0, #12
   843ee:	f7fd fdcf 	bl	81f90 <memcpy>
   843f2:	4629      	mov	r1, r5
   843f4:	2201      	movs	r2, #1
   843f6:	4620      	mov	r0, r4
   843f8:	f000 ffa6 	bl	85348 <__lshift>
   843fc:	9008      	str	r0, [sp, #32]
   843fe:	e4b6      	b.n	83d6e <_dtoa_r+0x566>
   84400:	2b39      	cmp	r3, #57	; 0x39
   84402:	f8cd b020 	str.w	fp, [sp, #32]
   84406:	46d0      	mov	r8, sl
   84408:	f000 80a5 	beq.w	84556 <_dtoa_r+0xd4e>
   8440c:	f103 0a01 	add.w	sl, r3, #1
   84410:	46b3      	mov	fp, r6
   84412:	f887 a000 	strb.w	sl, [r7]
   84416:	1c7d      	adds	r5, r7, #1
   84418:	9e08      	ldr	r6, [sp, #32]
   8441a:	e570      	b.n	83efe <_dtoa_r+0x6f6>
   8441c:	465a      	mov	r2, fp
   8441e:	46d0      	mov	r8, sl
   84420:	46b3      	mov	fp, r6
   84422:	469a      	mov	sl, r3
   84424:	4616      	mov	r6, r2
   84426:	e54e      	b.n	83ec6 <_dtoa_r+0x6be>
   84428:	9812      	ldr	r0, [sp, #72]	; 0x48
   8442a:	495e      	ldr	r1, [pc, #376]	; (845a4 <_dtoa_r+0xd9c>)
   8442c:	462a      	mov	r2, r5
   8442e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   84432:	4633      	mov	r3, r6
   84434:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   84438:	f001 fd70 	bl	85f1c <__aeabi_dmul>
   8443c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   84440:	4638      	mov	r0, r7
   84442:	4641      	mov	r1, r8
   84444:	f002 f81a 	bl	8647c <__aeabi_d2iz>
   84448:	4605      	mov	r5, r0
   8444a:	f001 fd01 	bl	85e50 <__aeabi_i2d>
   8444e:	4602      	mov	r2, r0
   84450:	460b      	mov	r3, r1
   84452:	4638      	mov	r0, r7
   84454:	4641      	mov	r1, r8
   84456:	f001 fbad 	bl	85bb4 <__aeabi_dsub>
   8445a:	4606      	mov	r6, r0
   8445c:	9812      	ldr	r0, [sp, #72]	; 0x48
   8445e:	9a04      	ldr	r2, [sp, #16]
   84460:	3530      	adds	r5, #48	; 0x30
   84462:	2801      	cmp	r0, #1
   84464:	7015      	strb	r5, [r2, #0]
   84466:	460f      	mov	r7, r1
   84468:	f102 0501 	add.w	r5, r2, #1
   8446c:	d026      	beq.n	844bc <_dtoa_r+0xcb4>
   8446e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84470:	9a04      	ldr	r2, [sp, #16]
   84472:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   84476:	4413      	add	r3, r2
   84478:	f04f 0a00 	mov.w	sl, #0
   8447c:	4699      	mov	r9, r3
   8447e:	f8df b130 	ldr.w	fp, [pc, #304]	; 845b0 <_dtoa_r+0xda8>
   84482:	4652      	mov	r2, sl
   84484:	465b      	mov	r3, fp
   84486:	4630      	mov	r0, r6
   84488:	4639      	mov	r1, r7
   8448a:	f001 fd47 	bl	85f1c <__aeabi_dmul>
   8448e:	460f      	mov	r7, r1
   84490:	4606      	mov	r6, r0
   84492:	f001 fff3 	bl	8647c <__aeabi_d2iz>
   84496:	4680      	mov	r8, r0
   84498:	f001 fcda 	bl	85e50 <__aeabi_i2d>
   8449c:	4602      	mov	r2, r0
   8449e:	460b      	mov	r3, r1
   844a0:	4630      	mov	r0, r6
   844a2:	4639      	mov	r1, r7
   844a4:	f001 fb86 	bl	85bb4 <__aeabi_dsub>
   844a8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   844ac:	f805 8b01 	strb.w	r8, [r5], #1
   844b0:	454d      	cmp	r5, r9
   844b2:	4606      	mov	r6, r0
   844b4:	460f      	mov	r7, r1
   844b6:	d1e4      	bne.n	84482 <_dtoa_r+0xc7a>
   844b8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   844bc:	2200      	movs	r2, #0
   844be:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   844c2:	4b3a      	ldr	r3, [pc, #232]	; (845ac <_dtoa_r+0xda4>)
   844c4:	f001 fb78 	bl	85bb8 <__adddf3>
   844c8:	4632      	mov	r2, r6
   844ca:	463b      	mov	r3, r7
   844cc:	f001 ff98 	bl	86400 <__aeabi_dcmplt>
   844d0:	2800      	cmp	r0, #0
   844d2:	d046      	beq.n	84562 <_dtoa_r+0xd5a>
   844d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   844d6:	9302      	str	r3, [sp, #8]
   844d8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   844dc:	f7ff bb42 	b.w	83b64 <_dtoa_r+0x35c>
   844e0:	f04f 0800 	mov.w	r8, #0
   844e4:	4646      	mov	r6, r8
   844e6:	e6a8      	b.n	8423a <_dtoa_r+0xa32>
   844e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   844ea:	9a07      	ldr	r2, [sp, #28]
   844ec:	1a9d      	subs	r5, r3, r2
   844ee:	2300      	movs	r3, #0
   844f0:	f7ff bb70 	b.w	83bd4 <_dtoa_r+0x3cc>
   844f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   844f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   844f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   844fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   844fe:	f7ff bb69 	b.w	83bd4 <_dtoa_r+0x3cc>
   84502:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   84506:	f04f 0a02 	mov.w	sl, #2
   8450a:	e56d      	b.n	83fe8 <_dtoa_r+0x7e0>
   8450c:	9b07      	ldr	r3, [sp, #28]
   8450e:	2b00      	cmp	r3, #0
   84510:	f43f aeb8 	beq.w	84284 <_dtoa_r+0xa7c>
   84514:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84516:	2b00      	cmp	r3, #0
   84518:	f77f aede 	ble.w	842d8 <_dtoa_r+0xad0>
   8451c:	2200      	movs	r2, #0
   8451e:	4b24      	ldr	r3, [pc, #144]	; (845b0 <_dtoa_r+0xda8>)
   84520:	4638      	mov	r0, r7
   84522:	4641      	mov	r1, r8
   84524:	f001 fcfa 	bl	85f1c <__aeabi_dmul>
   84528:	4607      	mov	r7, r0
   8452a:	4688      	mov	r8, r1
   8452c:	f10a 0001 	add.w	r0, sl, #1
   84530:	f001 fc8e 	bl	85e50 <__aeabi_i2d>
   84534:	463a      	mov	r2, r7
   84536:	4643      	mov	r3, r8
   84538:	f001 fcf0 	bl	85f1c <__aeabi_dmul>
   8453c:	2200      	movs	r2, #0
   8453e:	4b17      	ldr	r3, [pc, #92]	; (8459c <_dtoa_r+0xd94>)
   84540:	f001 fb3a 	bl	85bb8 <__adddf3>
   84544:	9a02      	ldr	r2, [sp, #8]
   84546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84548:	3a01      	subs	r2, #1
   8454a:	4605      	mov	r5, r0
   8454c:	9215      	str	r2, [sp, #84]	; 0x54
   8454e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   84552:	9312      	str	r3, [sp, #72]	; 0x48
   84554:	e569      	b.n	8402a <_dtoa_r+0x822>
   84556:	2239      	movs	r2, #57	; 0x39
   84558:	46b3      	mov	fp, r6
   8455a:	703a      	strb	r2, [r7, #0]
   8455c:	9e08      	ldr	r6, [sp, #32]
   8455e:	1c7d      	adds	r5, r7, #1
   84560:	e4bf      	b.n	83ee2 <_dtoa_r+0x6da>
   84562:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   84566:	2000      	movs	r0, #0
   84568:	4910      	ldr	r1, [pc, #64]	; (845ac <_dtoa_r+0xda4>)
   8456a:	f001 fb23 	bl	85bb4 <__aeabi_dsub>
   8456e:	4632      	mov	r2, r6
   84570:	463b      	mov	r3, r7
   84572:	f001 ff63 	bl	8643c <__aeabi_dcmpgt>
   84576:	b908      	cbnz	r0, 8457c <_dtoa_r+0xd74>
   84578:	e6ae      	b.n	842d8 <_dtoa_r+0xad0>
   8457a:	4615      	mov	r5, r2
   8457c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   84580:	1e6a      	subs	r2, r5, #1
   84582:	2b30      	cmp	r3, #48	; 0x30
   84584:	d0f9      	beq.n	8457a <_dtoa_r+0xd72>
   84586:	e5d7      	b.n	84138 <_dtoa_r+0x930>
   84588:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   8458c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8458e:	9302      	str	r3, [sp, #8]
   84590:	f7ff bae8 	b.w	83b64 <_dtoa_r+0x35c>
   84594:	970c      	str	r7, [sp, #48]	; 0x30
   84596:	f7ff bba7 	b.w	83ce8 <_dtoa_r+0x4e0>
   8459a:	bf00      	nop
   8459c:	401c0000 	.word	0x401c0000
   845a0:	40140000 	.word	0x40140000
   845a4:	00086950 	.word	0x00086950
   845a8:	00086928 	.word	0x00086928
   845ac:	3fe00000 	.word	0x3fe00000
   845b0:	40240000 	.word	0x40240000
   845b4:	2b39      	cmp	r3, #57	; 0x39
   845b6:	f8cd b020 	str.w	fp, [sp, #32]
   845ba:	46d0      	mov	r8, sl
   845bc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   845c0:	469a      	mov	sl, r3
   845c2:	d0c8      	beq.n	84556 <_dtoa_r+0xd4e>
   845c4:	f1bb 0f00 	cmp.w	fp, #0
   845c8:	f73f aec0 	bgt.w	8434c <_dtoa_r+0xb44>
   845cc:	e6c0      	b.n	84350 <_dtoa_r+0xb48>
   845ce:	f47f aebf 	bne.w	84350 <_dtoa_r+0xb48>
   845d2:	f01a 0f01 	tst.w	sl, #1
   845d6:	f43f aebb 	beq.w	84350 <_dtoa_r+0xb48>
   845da:	e6b3      	b.n	84344 <_dtoa_r+0xb3c>
   845dc:	f04f 0800 	mov.w	r8, #0
   845e0:	4646      	mov	r6, r8
   845e2:	e5e8      	b.n	841b6 <_dtoa_r+0x9ae>
   845e4:	4631      	mov	r1, r6
   845e6:	2300      	movs	r3, #0
   845e8:	220a      	movs	r2, #10
   845ea:	4620      	mov	r0, r4
   845ec:	f000 fd2e 	bl	8504c <__multadd>
   845f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   845f2:	4606      	mov	r6, r0
   845f4:	2b00      	cmp	r3, #0
   845f6:	dd07      	ble.n	84608 <_dtoa_r+0xe00>
   845f8:	9307      	str	r3, [sp, #28]
   845fa:	f7ff bbab 	b.w	83d54 <_dtoa_r+0x54c>
   845fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84600:	2b02      	cmp	r3, #2
   84602:	dc1f      	bgt.n	84644 <_dtoa_r+0xe3c>
   84604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84606:	e43c      	b.n	83e82 <_dtoa_r+0x67a>
   84608:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8460a:	2b02      	cmp	r3, #2
   8460c:	dc1a      	bgt.n	84644 <_dtoa_r+0xe3c>
   8460e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84610:	e7f2      	b.n	845f8 <_dtoa_r+0xdf0>
   84612:	f43f ab81 	beq.w	83d18 <_dtoa_r+0x510>
   84616:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8461a:	e411      	b.n	83e40 <_dtoa_r+0x638>
   8461c:	2500      	movs	r5, #0
   8461e:	4620      	mov	r0, r4
   84620:	6465      	str	r5, [r4, #68]	; 0x44
   84622:	4629      	mov	r1, r5
   84624:	f000 fce2 	bl	84fec <_Balloc>
   84628:	f04f 33ff 	mov.w	r3, #4294967295
   8462c:	9307      	str	r3, [sp, #28]
   8462e:	930f      	str	r3, [sp, #60]	; 0x3c
   84630:	2301      	movs	r3, #1
   84632:	9004      	str	r0, [sp, #16]
   84634:	9525      	str	r5, [sp, #148]	; 0x94
   84636:	6420      	str	r0, [r4, #64]	; 0x40
   84638:	930b      	str	r3, [sp, #44]	; 0x2c
   8463a:	f7ff b9e0 	b.w	839fe <_dtoa_r+0x1f6>
   8463e:	2501      	movs	r5, #1
   84640:	f7ff b9a8 	b.w	83994 <_dtoa_r+0x18c>
   84644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84646:	9307      	str	r3, [sp, #28]
   84648:	e5e8      	b.n	8421c <_dtoa_r+0xa14>
   8464a:	bf00      	nop

0008464c <__libc_fini_array>:
   8464c:	b538      	push	{r3, r4, r5, lr}
   8464e:	4c0a      	ldr	r4, [pc, #40]	; (84678 <__libc_fini_array+0x2c>)
   84650:	4d0a      	ldr	r5, [pc, #40]	; (8467c <__libc_fini_array+0x30>)
   84652:	1b64      	subs	r4, r4, r5
   84654:	10a4      	asrs	r4, r4, #2
   84656:	d00a      	beq.n	8466e <__libc_fini_array+0x22>
   84658:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8465c:	3b01      	subs	r3, #1
   8465e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   84662:	3c01      	subs	r4, #1
   84664:	f855 3904 	ldr.w	r3, [r5], #-4
   84668:	4798      	blx	r3
   8466a:	2c00      	cmp	r4, #0
   8466c:	d1f9      	bne.n	84662 <__libc_fini_array+0x16>
   8466e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84672:	f002 ba63 	b.w	86b3c <_fini>
   84676:	bf00      	nop
   84678:	00086b4c 	.word	0x00086b4c
   8467c:	00086b48 	.word	0x00086b48

00084680 <_malloc_trim_r>:
   84680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84682:	460c      	mov	r4, r1
   84684:	4f23      	ldr	r7, [pc, #140]	; (84714 <_malloc_trim_r+0x94>)
   84686:	4606      	mov	r6, r0
   84688:	f000 fca4 	bl	84fd4 <__malloc_lock>
   8468c:	68bb      	ldr	r3, [r7, #8]
   8468e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   84692:	685d      	ldr	r5, [r3, #4]
   84694:	310f      	adds	r1, #15
   84696:	f025 0503 	bic.w	r5, r5, #3
   8469a:	4429      	add	r1, r5
   8469c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   846a0:	f021 010f 	bic.w	r1, r1, #15
   846a4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   846a8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   846ac:	db07      	blt.n	846be <_malloc_trim_r+0x3e>
   846ae:	2100      	movs	r1, #0
   846b0:	4630      	mov	r0, r6
   846b2:	f001 f94d 	bl	85950 <_sbrk_r>
   846b6:	68bb      	ldr	r3, [r7, #8]
   846b8:	442b      	add	r3, r5
   846ba:	4298      	cmp	r0, r3
   846bc:	d004      	beq.n	846c8 <_malloc_trim_r+0x48>
   846be:	4630      	mov	r0, r6
   846c0:	f000 fc8e 	bl	84fe0 <__malloc_unlock>
   846c4:	2000      	movs	r0, #0
   846c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   846c8:	4261      	negs	r1, r4
   846ca:	4630      	mov	r0, r6
   846cc:	f001 f940 	bl	85950 <_sbrk_r>
   846d0:	3001      	adds	r0, #1
   846d2:	d00d      	beq.n	846f0 <_malloc_trim_r+0x70>
   846d4:	4b10      	ldr	r3, [pc, #64]	; (84718 <_malloc_trim_r+0x98>)
   846d6:	68ba      	ldr	r2, [r7, #8]
   846d8:	6819      	ldr	r1, [r3, #0]
   846da:	1b2d      	subs	r5, r5, r4
   846dc:	f045 0501 	orr.w	r5, r5, #1
   846e0:	4630      	mov	r0, r6
   846e2:	1b09      	subs	r1, r1, r4
   846e4:	6055      	str	r5, [r2, #4]
   846e6:	6019      	str	r1, [r3, #0]
   846e8:	f000 fc7a 	bl	84fe0 <__malloc_unlock>
   846ec:	2001      	movs	r0, #1
   846ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   846f0:	2100      	movs	r1, #0
   846f2:	4630      	mov	r0, r6
   846f4:	f001 f92c 	bl	85950 <_sbrk_r>
   846f8:	68ba      	ldr	r2, [r7, #8]
   846fa:	1a83      	subs	r3, r0, r2
   846fc:	2b0f      	cmp	r3, #15
   846fe:	ddde      	ble.n	846be <_malloc_trim_r+0x3e>
   84700:	4c06      	ldr	r4, [pc, #24]	; (8471c <_malloc_trim_r+0x9c>)
   84702:	4905      	ldr	r1, [pc, #20]	; (84718 <_malloc_trim_r+0x98>)
   84704:	6824      	ldr	r4, [r4, #0]
   84706:	f043 0301 	orr.w	r3, r3, #1
   8470a:	1b00      	subs	r0, r0, r4
   8470c:	6053      	str	r3, [r2, #4]
   8470e:	6008      	str	r0, [r1, #0]
   84710:	e7d5      	b.n	846be <_malloc_trim_r+0x3e>
   84712:	bf00      	nop
   84714:	20070b60 	.word	0x20070b60
   84718:	2007110c 	.word	0x2007110c
   8471c:	20070f68 	.word	0x20070f68

00084720 <_free_r>:
   84720:	2900      	cmp	r1, #0
   84722:	d044      	beq.n	847ae <_free_r+0x8e>
   84724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84728:	460d      	mov	r5, r1
   8472a:	4680      	mov	r8, r0
   8472c:	f000 fc52 	bl	84fd4 <__malloc_lock>
   84730:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84734:	4969      	ldr	r1, [pc, #420]	; (848dc <_free_r+0x1bc>)
   84736:	f1a5 0408 	sub.w	r4, r5, #8
   8473a:	f027 0301 	bic.w	r3, r7, #1
   8473e:	18e2      	adds	r2, r4, r3
   84740:	688e      	ldr	r6, [r1, #8]
   84742:	6850      	ldr	r0, [r2, #4]
   84744:	42b2      	cmp	r2, r6
   84746:	f020 0003 	bic.w	r0, r0, #3
   8474a:	d05e      	beq.n	8480a <_free_r+0xea>
   8474c:	07fe      	lsls	r6, r7, #31
   8474e:	6050      	str	r0, [r2, #4]
   84750:	d40b      	bmi.n	8476a <_free_r+0x4a>
   84752:	f855 7c08 	ldr.w	r7, [r5, #-8]
   84756:	f101 0e08 	add.w	lr, r1, #8
   8475a:	1be4      	subs	r4, r4, r7
   8475c:	68a5      	ldr	r5, [r4, #8]
   8475e:	443b      	add	r3, r7
   84760:	4575      	cmp	r5, lr
   84762:	d06d      	beq.n	84840 <_free_r+0x120>
   84764:	68e7      	ldr	r7, [r4, #12]
   84766:	60ef      	str	r7, [r5, #12]
   84768:	60bd      	str	r5, [r7, #8]
   8476a:	1815      	adds	r5, r2, r0
   8476c:	686d      	ldr	r5, [r5, #4]
   8476e:	07ed      	lsls	r5, r5, #31
   84770:	d53e      	bpl.n	847f0 <_free_r+0xd0>
   84772:	f043 0201 	orr.w	r2, r3, #1
   84776:	6062      	str	r2, [r4, #4]
   84778:	50e3      	str	r3, [r4, r3]
   8477a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8477e:	d217      	bcs.n	847b0 <_free_r+0x90>
   84780:	2201      	movs	r2, #1
   84782:	08db      	lsrs	r3, r3, #3
   84784:	1098      	asrs	r0, r3, #2
   84786:	684d      	ldr	r5, [r1, #4]
   84788:	4413      	add	r3, r2
   8478a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8478e:	4082      	lsls	r2, r0
   84790:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   84794:	432a      	orrs	r2, r5
   84796:	3808      	subs	r0, #8
   84798:	60e0      	str	r0, [r4, #12]
   8479a:	60a7      	str	r7, [r4, #8]
   8479c:	604a      	str	r2, [r1, #4]
   8479e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   847a2:	60fc      	str	r4, [r7, #12]
   847a4:	4640      	mov	r0, r8
   847a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   847aa:	f000 bc19 	b.w	84fe0 <__malloc_unlock>
   847ae:	4770      	bx	lr
   847b0:	0a5a      	lsrs	r2, r3, #9
   847b2:	2a04      	cmp	r2, #4
   847b4:	d852      	bhi.n	8485c <_free_r+0x13c>
   847b6:	099a      	lsrs	r2, r3, #6
   847b8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   847bc:	00ff      	lsls	r7, r7, #3
   847be:	f102 0538 	add.w	r5, r2, #56	; 0x38
   847c2:	19c8      	adds	r0, r1, r7
   847c4:	59ca      	ldr	r2, [r1, r7]
   847c6:	3808      	subs	r0, #8
   847c8:	4290      	cmp	r0, r2
   847ca:	d04f      	beq.n	8486c <_free_r+0x14c>
   847cc:	6851      	ldr	r1, [r2, #4]
   847ce:	f021 0103 	bic.w	r1, r1, #3
   847d2:	428b      	cmp	r3, r1
   847d4:	d232      	bcs.n	8483c <_free_r+0x11c>
   847d6:	6892      	ldr	r2, [r2, #8]
   847d8:	4290      	cmp	r0, r2
   847da:	d1f7      	bne.n	847cc <_free_r+0xac>
   847dc:	68c3      	ldr	r3, [r0, #12]
   847de:	60a0      	str	r0, [r4, #8]
   847e0:	60e3      	str	r3, [r4, #12]
   847e2:	609c      	str	r4, [r3, #8]
   847e4:	60c4      	str	r4, [r0, #12]
   847e6:	4640      	mov	r0, r8
   847e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   847ec:	f000 bbf8 	b.w	84fe0 <__malloc_unlock>
   847f0:	6895      	ldr	r5, [r2, #8]
   847f2:	4f3b      	ldr	r7, [pc, #236]	; (848e0 <_free_r+0x1c0>)
   847f4:	4403      	add	r3, r0
   847f6:	42bd      	cmp	r5, r7
   847f8:	d040      	beq.n	8487c <_free_r+0x15c>
   847fa:	68d0      	ldr	r0, [r2, #12]
   847fc:	f043 0201 	orr.w	r2, r3, #1
   84800:	60e8      	str	r0, [r5, #12]
   84802:	6085      	str	r5, [r0, #8]
   84804:	6062      	str	r2, [r4, #4]
   84806:	50e3      	str	r3, [r4, r3]
   84808:	e7b7      	b.n	8477a <_free_r+0x5a>
   8480a:	07ff      	lsls	r7, r7, #31
   8480c:	4403      	add	r3, r0
   8480e:	d407      	bmi.n	84820 <_free_r+0x100>
   84810:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84814:	1b64      	subs	r4, r4, r5
   84816:	68e2      	ldr	r2, [r4, #12]
   84818:	68a0      	ldr	r0, [r4, #8]
   8481a:	442b      	add	r3, r5
   8481c:	60c2      	str	r2, [r0, #12]
   8481e:	6090      	str	r0, [r2, #8]
   84820:	4a30      	ldr	r2, [pc, #192]	; (848e4 <_free_r+0x1c4>)
   84822:	f043 0001 	orr.w	r0, r3, #1
   84826:	6812      	ldr	r2, [r2, #0]
   84828:	6060      	str	r0, [r4, #4]
   8482a:	4293      	cmp	r3, r2
   8482c:	608c      	str	r4, [r1, #8]
   8482e:	d3b9      	bcc.n	847a4 <_free_r+0x84>
   84830:	4b2d      	ldr	r3, [pc, #180]	; (848e8 <_free_r+0x1c8>)
   84832:	4640      	mov	r0, r8
   84834:	6819      	ldr	r1, [r3, #0]
   84836:	f7ff ff23 	bl	84680 <_malloc_trim_r>
   8483a:	e7b3      	b.n	847a4 <_free_r+0x84>
   8483c:	4610      	mov	r0, r2
   8483e:	e7cd      	b.n	847dc <_free_r+0xbc>
   84840:	1811      	adds	r1, r2, r0
   84842:	6849      	ldr	r1, [r1, #4]
   84844:	07c9      	lsls	r1, r1, #31
   84846:	d444      	bmi.n	848d2 <_free_r+0x1b2>
   84848:	6891      	ldr	r1, [r2, #8]
   8484a:	4403      	add	r3, r0
   8484c:	68d2      	ldr	r2, [r2, #12]
   8484e:	f043 0001 	orr.w	r0, r3, #1
   84852:	60ca      	str	r2, [r1, #12]
   84854:	6091      	str	r1, [r2, #8]
   84856:	6060      	str	r0, [r4, #4]
   84858:	50e3      	str	r3, [r4, r3]
   8485a:	e7a3      	b.n	847a4 <_free_r+0x84>
   8485c:	2a14      	cmp	r2, #20
   8485e:	d816      	bhi.n	8488e <_free_r+0x16e>
   84860:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   84864:	00ff      	lsls	r7, r7, #3
   84866:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8486a:	e7aa      	b.n	847c2 <_free_r+0xa2>
   8486c:	2301      	movs	r3, #1
   8486e:	10aa      	asrs	r2, r5, #2
   84870:	684d      	ldr	r5, [r1, #4]
   84872:	4093      	lsls	r3, r2
   84874:	432b      	orrs	r3, r5
   84876:	604b      	str	r3, [r1, #4]
   84878:	4603      	mov	r3, r0
   8487a:	e7b0      	b.n	847de <_free_r+0xbe>
   8487c:	f043 0201 	orr.w	r2, r3, #1
   84880:	614c      	str	r4, [r1, #20]
   84882:	610c      	str	r4, [r1, #16]
   84884:	60e5      	str	r5, [r4, #12]
   84886:	60a5      	str	r5, [r4, #8]
   84888:	6062      	str	r2, [r4, #4]
   8488a:	50e3      	str	r3, [r4, r3]
   8488c:	e78a      	b.n	847a4 <_free_r+0x84>
   8488e:	2a54      	cmp	r2, #84	; 0x54
   84890:	d806      	bhi.n	848a0 <_free_r+0x180>
   84892:	0b1a      	lsrs	r2, r3, #12
   84894:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84898:	00ff      	lsls	r7, r7, #3
   8489a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8489e:	e790      	b.n	847c2 <_free_r+0xa2>
   848a0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   848a4:	d806      	bhi.n	848b4 <_free_r+0x194>
   848a6:	0bda      	lsrs	r2, r3, #15
   848a8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   848ac:	00ff      	lsls	r7, r7, #3
   848ae:	f102 0577 	add.w	r5, r2, #119	; 0x77
   848b2:	e786      	b.n	847c2 <_free_r+0xa2>
   848b4:	f240 5054 	movw	r0, #1364	; 0x554
   848b8:	4282      	cmp	r2, r0
   848ba:	d806      	bhi.n	848ca <_free_r+0x1aa>
   848bc:	0c9a      	lsrs	r2, r3, #18
   848be:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   848c2:	00ff      	lsls	r7, r7, #3
   848c4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   848c8:	e77b      	b.n	847c2 <_free_r+0xa2>
   848ca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   848ce:	257e      	movs	r5, #126	; 0x7e
   848d0:	e777      	b.n	847c2 <_free_r+0xa2>
   848d2:	f043 0101 	orr.w	r1, r3, #1
   848d6:	6061      	str	r1, [r4, #4]
   848d8:	6013      	str	r3, [r2, #0]
   848da:	e763      	b.n	847a4 <_free_r+0x84>
   848dc:	20070b60 	.word	0x20070b60
   848e0:	20070b68 	.word	0x20070b68
   848e4:	20070f6c 	.word	0x20070f6c
   848e8:	2007113c 	.word	0x2007113c

000848ec <_localeconv_r>:
   848ec:	4a04      	ldr	r2, [pc, #16]	; (84900 <_localeconv_r+0x14>)
   848ee:	4b05      	ldr	r3, [pc, #20]	; (84904 <_localeconv_r+0x18>)
   848f0:	6812      	ldr	r2, [r2, #0]
   848f2:	6b50      	ldr	r0, [r2, #52]	; 0x34
   848f4:	2800      	cmp	r0, #0
   848f6:	bf08      	it	eq
   848f8:	4618      	moveq	r0, r3
   848fa:	30f0      	adds	r0, #240	; 0xf0
   848fc:	4770      	bx	lr
   848fe:	bf00      	nop
   84900:	200705c0 	.word	0x200705c0
   84904:	200709f4 	.word	0x200709f4

00084908 <__retarget_lock_acquire_recursive>:
   84908:	4770      	bx	lr
   8490a:	bf00      	nop

0008490c <__retarget_lock_release_recursive>:
   8490c:	4770      	bx	lr
   8490e:	bf00      	nop

00084910 <_malloc_r>:
   84910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84914:	f101 060b 	add.w	r6, r1, #11
   84918:	2e16      	cmp	r6, #22
   8491a:	b083      	sub	sp, #12
   8491c:	4605      	mov	r5, r0
   8491e:	f240 809e 	bls.w	84a5e <_malloc_r+0x14e>
   84922:	f036 0607 	bics.w	r6, r6, #7
   84926:	f100 80bd 	bmi.w	84aa4 <_malloc_r+0x194>
   8492a:	42b1      	cmp	r1, r6
   8492c:	f200 80ba 	bhi.w	84aa4 <_malloc_r+0x194>
   84930:	f000 fb50 	bl	84fd4 <__malloc_lock>
   84934:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84938:	f0c0 8285 	bcc.w	84e46 <_malloc_r+0x536>
   8493c:	0a73      	lsrs	r3, r6, #9
   8493e:	f000 80b8 	beq.w	84ab2 <_malloc_r+0x1a2>
   84942:	2b04      	cmp	r3, #4
   84944:	f200 816c 	bhi.w	84c20 <_malloc_r+0x310>
   84948:	09b3      	lsrs	r3, r6, #6
   8494a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8494e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   84952:	00c1      	lsls	r1, r0, #3
   84954:	4fb8      	ldr	r7, [pc, #736]	; (84c38 <_malloc_r+0x328>)
   84956:	4439      	add	r1, r7
   84958:	684c      	ldr	r4, [r1, #4]
   8495a:	3908      	subs	r1, #8
   8495c:	42a1      	cmp	r1, r4
   8495e:	d106      	bne.n	8496e <_malloc_r+0x5e>
   84960:	e00c      	b.n	8497c <_malloc_r+0x6c>
   84962:	2a00      	cmp	r2, #0
   84964:	f280 80ab 	bge.w	84abe <_malloc_r+0x1ae>
   84968:	68e4      	ldr	r4, [r4, #12]
   8496a:	42a1      	cmp	r1, r4
   8496c:	d006      	beq.n	8497c <_malloc_r+0x6c>
   8496e:	6863      	ldr	r3, [r4, #4]
   84970:	f023 0303 	bic.w	r3, r3, #3
   84974:	1b9a      	subs	r2, r3, r6
   84976:	2a0f      	cmp	r2, #15
   84978:	ddf3      	ble.n	84962 <_malloc_r+0x52>
   8497a:	4670      	mov	r0, lr
   8497c:	693c      	ldr	r4, [r7, #16]
   8497e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84c4c <_malloc_r+0x33c>
   84982:	4574      	cmp	r4, lr
   84984:	f000 819e 	beq.w	84cc4 <_malloc_r+0x3b4>
   84988:	6863      	ldr	r3, [r4, #4]
   8498a:	f023 0303 	bic.w	r3, r3, #3
   8498e:	1b9a      	subs	r2, r3, r6
   84990:	2a0f      	cmp	r2, #15
   84992:	f300 8183 	bgt.w	84c9c <_malloc_r+0x38c>
   84996:	2a00      	cmp	r2, #0
   84998:	f8c7 e014 	str.w	lr, [r7, #20]
   8499c:	f8c7 e010 	str.w	lr, [r7, #16]
   849a0:	f280 8091 	bge.w	84ac6 <_malloc_r+0x1b6>
   849a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   849a8:	f080 8154 	bcs.w	84c54 <_malloc_r+0x344>
   849ac:	2201      	movs	r2, #1
   849ae:	08db      	lsrs	r3, r3, #3
   849b0:	6879      	ldr	r1, [r7, #4]
   849b2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   849b6:	4413      	add	r3, r2
   849b8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   849bc:	fa02 f20c 	lsl.w	r2, r2, ip
   849c0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   849c4:	430a      	orrs	r2, r1
   849c6:	f1ac 0108 	sub.w	r1, ip, #8
   849ca:	60e1      	str	r1, [r4, #12]
   849cc:	f8c4 8008 	str.w	r8, [r4, #8]
   849d0:	607a      	str	r2, [r7, #4]
   849d2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   849d6:	f8c8 400c 	str.w	r4, [r8, #12]
   849da:	2401      	movs	r4, #1
   849dc:	1083      	asrs	r3, r0, #2
   849de:	409c      	lsls	r4, r3
   849e0:	4294      	cmp	r4, r2
   849e2:	d87d      	bhi.n	84ae0 <_malloc_r+0x1d0>
   849e4:	4214      	tst	r4, r2
   849e6:	d106      	bne.n	849f6 <_malloc_r+0xe6>
   849e8:	f020 0003 	bic.w	r0, r0, #3
   849ec:	0064      	lsls	r4, r4, #1
   849ee:	4214      	tst	r4, r2
   849f0:	f100 0004 	add.w	r0, r0, #4
   849f4:	d0fa      	beq.n	849ec <_malloc_r+0xdc>
   849f6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   849fa:	46cc      	mov	ip, r9
   849fc:	4680      	mov	r8, r0
   849fe:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84a02:	459c      	cmp	ip, r3
   84a04:	d107      	bne.n	84a16 <_malloc_r+0x106>
   84a06:	e15f      	b.n	84cc8 <_malloc_r+0x3b8>
   84a08:	2a00      	cmp	r2, #0
   84a0a:	f280 816d 	bge.w	84ce8 <_malloc_r+0x3d8>
   84a0e:	68db      	ldr	r3, [r3, #12]
   84a10:	459c      	cmp	ip, r3
   84a12:	f000 8159 	beq.w	84cc8 <_malloc_r+0x3b8>
   84a16:	6859      	ldr	r1, [r3, #4]
   84a18:	f021 0103 	bic.w	r1, r1, #3
   84a1c:	1b8a      	subs	r2, r1, r6
   84a1e:	2a0f      	cmp	r2, #15
   84a20:	ddf2      	ble.n	84a08 <_malloc_r+0xf8>
   84a22:	68dc      	ldr	r4, [r3, #12]
   84a24:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84a28:	f046 0801 	orr.w	r8, r6, #1
   84a2c:	4628      	mov	r0, r5
   84a2e:	441e      	add	r6, r3
   84a30:	f042 0501 	orr.w	r5, r2, #1
   84a34:	f8c3 8004 	str.w	r8, [r3, #4]
   84a38:	f8cc 400c 	str.w	r4, [ip, #12]
   84a3c:	f8c4 c008 	str.w	ip, [r4, #8]
   84a40:	617e      	str	r6, [r7, #20]
   84a42:	613e      	str	r6, [r7, #16]
   84a44:	f8c6 e00c 	str.w	lr, [r6, #12]
   84a48:	f8c6 e008 	str.w	lr, [r6, #8]
   84a4c:	6075      	str	r5, [r6, #4]
   84a4e:	505a      	str	r2, [r3, r1]
   84a50:	9300      	str	r3, [sp, #0]
   84a52:	f000 fac5 	bl	84fe0 <__malloc_unlock>
   84a56:	9b00      	ldr	r3, [sp, #0]
   84a58:	f103 0408 	add.w	r4, r3, #8
   84a5c:	e01e      	b.n	84a9c <_malloc_r+0x18c>
   84a5e:	2910      	cmp	r1, #16
   84a60:	d820      	bhi.n	84aa4 <_malloc_r+0x194>
   84a62:	f000 fab7 	bl	84fd4 <__malloc_lock>
   84a66:	2610      	movs	r6, #16
   84a68:	2318      	movs	r3, #24
   84a6a:	2002      	movs	r0, #2
   84a6c:	4f72      	ldr	r7, [pc, #456]	; (84c38 <_malloc_r+0x328>)
   84a6e:	443b      	add	r3, r7
   84a70:	685c      	ldr	r4, [r3, #4]
   84a72:	f1a3 0208 	sub.w	r2, r3, #8
   84a76:	4294      	cmp	r4, r2
   84a78:	f000 812f 	beq.w	84cda <_malloc_r+0x3ca>
   84a7c:	6863      	ldr	r3, [r4, #4]
   84a7e:	68e1      	ldr	r1, [r4, #12]
   84a80:	f023 0303 	bic.w	r3, r3, #3
   84a84:	4423      	add	r3, r4
   84a86:	685a      	ldr	r2, [r3, #4]
   84a88:	68a6      	ldr	r6, [r4, #8]
   84a8a:	f042 0201 	orr.w	r2, r2, #1
   84a8e:	60f1      	str	r1, [r6, #12]
   84a90:	4628      	mov	r0, r5
   84a92:	608e      	str	r6, [r1, #8]
   84a94:	605a      	str	r2, [r3, #4]
   84a96:	f000 faa3 	bl	84fe0 <__malloc_unlock>
   84a9a:	3408      	adds	r4, #8
   84a9c:	4620      	mov	r0, r4
   84a9e:	b003      	add	sp, #12
   84aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84aa4:	2400      	movs	r4, #0
   84aa6:	230c      	movs	r3, #12
   84aa8:	4620      	mov	r0, r4
   84aaa:	602b      	str	r3, [r5, #0]
   84aac:	b003      	add	sp, #12
   84aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ab2:	2040      	movs	r0, #64	; 0x40
   84ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
   84ab8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   84abc:	e74a      	b.n	84954 <_malloc_r+0x44>
   84abe:	4423      	add	r3, r4
   84ac0:	685a      	ldr	r2, [r3, #4]
   84ac2:	68e1      	ldr	r1, [r4, #12]
   84ac4:	e7e0      	b.n	84a88 <_malloc_r+0x178>
   84ac6:	4423      	add	r3, r4
   84ac8:	685a      	ldr	r2, [r3, #4]
   84aca:	4628      	mov	r0, r5
   84acc:	f042 0201 	orr.w	r2, r2, #1
   84ad0:	605a      	str	r2, [r3, #4]
   84ad2:	3408      	adds	r4, #8
   84ad4:	f000 fa84 	bl	84fe0 <__malloc_unlock>
   84ad8:	4620      	mov	r0, r4
   84ada:	b003      	add	sp, #12
   84adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ae0:	68bc      	ldr	r4, [r7, #8]
   84ae2:	6863      	ldr	r3, [r4, #4]
   84ae4:	f023 0803 	bic.w	r8, r3, #3
   84ae8:	45b0      	cmp	r8, r6
   84aea:	d304      	bcc.n	84af6 <_malloc_r+0x1e6>
   84aec:	eba8 0306 	sub.w	r3, r8, r6
   84af0:	2b0f      	cmp	r3, #15
   84af2:	f300 8085 	bgt.w	84c00 <_malloc_r+0x2f0>
   84af6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84c50 <_malloc_r+0x340>
   84afa:	4b50      	ldr	r3, [pc, #320]	; (84c3c <_malloc_r+0x32c>)
   84afc:	f8d9 2000 	ldr.w	r2, [r9]
   84b00:	681b      	ldr	r3, [r3, #0]
   84b02:	3201      	adds	r2, #1
   84b04:	4433      	add	r3, r6
   84b06:	eb04 0a08 	add.w	sl, r4, r8
   84b0a:	f000 8154 	beq.w	84db6 <_malloc_r+0x4a6>
   84b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   84b12:	330f      	adds	r3, #15
   84b14:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84b18:	f02b 0b0f 	bic.w	fp, fp, #15
   84b1c:	4659      	mov	r1, fp
   84b1e:	4628      	mov	r0, r5
   84b20:	f000 ff16 	bl	85950 <_sbrk_r>
   84b24:	1c41      	adds	r1, r0, #1
   84b26:	4602      	mov	r2, r0
   84b28:	f000 80fb 	beq.w	84d22 <_malloc_r+0x412>
   84b2c:	4582      	cmp	sl, r0
   84b2e:	f200 80f6 	bhi.w	84d1e <_malloc_r+0x40e>
   84b32:	4b43      	ldr	r3, [pc, #268]	; (84c40 <_malloc_r+0x330>)
   84b34:	6819      	ldr	r1, [r3, #0]
   84b36:	4459      	add	r1, fp
   84b38:	6019      	str	r1, [r3, #0]
   84b3a:	f000 814c 	beq.w	84dd6 <_malloc_r+0x4c6>
   84b3e:	f8d9 0000 	ldr.w	r0, [r9]
   84b42:	3001      	adds	r0, #1
   84b44:	bf1b      	ittet	ne
   84b46:	eba2 0a0a 	subne.w	sl, r2, sl
   84b4a:	4451      	addne	r1, sl
   84b4c:	f8c9 2000 	streq.w	r2, [r9]
   84b50:	6019      	strne	r1, [r3, #0]
   84b52:	f012 0107 	ands.w	r1, r2, #7
   84b56:	f000 8114 	beq.w	84d82 <_malloc_r+0x472>
   84b5a:	f1c1 0008 	rsb	r0, r1, #8
   84b5e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   84b62:	4402      	add	r2, r0
   84b64:	3108      	adds	r1, #8
   84b66:	eb02 090b 	add.w	r9, r2, fp
   84b6a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   84b6e:	eba1 0909 	sub.w	r9, r1, r9
   84b72:	4649      	mov	r1, r9
   84b74:	4628      	mov	r0, r5
   84b76:	9301      	str	r3, [sp, #4]
   84b78:	9200      	str	r2, [sp, #0]
   84b7a:	f000 fee9 	bl	85950 <_sbrk_r>
   84b7e:	1c43      	adds	r3, r0, #1
   84b80:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84b84:	f000 8142 	beq.w	84e0c <_malloc_r+0x4fc>
   84b88:	1a80      	subs	r0, r0, r2
   84b8a:	4448      	add	r0, r9
   84b8c:	f040 0001 	orr.w	r0, r0, #1
   84b90:	6819      	ldr	r1, [r3, #0]
   84b92:	42bc      	cmp	r4, r7
   84b94:	4449      	add	r1, r9
   84b96:	60ba      	str	r2, [r7, #8]
   84b98:	6019      	str	r1, [r3, #0]
   84b9a:	6050      	str	r0, [r2, #4]
   84b9c:	d017      	beq.n	84bce <_malloc_r+0x2be>
   84b9e:	f1b8 0f0f 	cmp.w	r8, #15
   84ba2:	f240 80fa 	bls.w	84d9a <_malloc_r+0x48a>
   84ba6:	f04f 0c05 	mov.w	ip, #5
   84baa:	6862      	ldr	r2, [r4, #4]
   84bac:	f1a8 000c 	sub.w	r0, r8, #12
   84bb0:	f020 0007 	bic.w	r0, r0, #7
   84bb4:	f002 0201 	and.w	r2, r2, #1
   84bb8:	eb04 0e00 	add.w	lr, r4, r0
   84bbc:	4302      	orrs	r2, r0
   84bbe:	280f      	cmp	r0, #15
   84bc0:	6062      	str	r2, [r4, #4]
   84bc2:	f8ce c004 	str.w	ip, [lr, #4]
   84bc6:	f8ce c008 	str.w	ip, [lr, #8]
   84bca:	f200 8116 	bhi.w	84dfa <_malloc_r+0x4ea>
   84bce:	4b1d      	ldr	r3, [pc, #116]	; (84c44 <_malloc_r+0x334>)
   84bd0:	68bc      	ldr	r4, [r7, #8]
   84bd2:	681a      	ldr	r2, [r3, #0]
   84bd4:	4291      	cmp	r1, r2
   84bd6:	bf88      	it	hi
   84bd8:	6019      	strhi	r1, [r3, #0]
   84bda:	4b1b      	ldr	r3, [pc, #108]	; (84c48 <_malloc_r+0x338>)
   84bdc:	681a      	ldr	r2, [r3, #0]
   84bde:	4291      	cmp	r1, r2
   84be0:	6862      	ldr	r2, [r4, #4]
   84be2:	bf88      	it	hi
   84be4:	6019      	strhi	r1, [r3, #0]
   84be6:	f022 0203 	bic.w	r2, r2, #3
   84bea:	4296      	cmp	r6, r2
   84bec:	eba2 0306 	sub.w	r3, r2, r6
   84bf0:	d801      	bhi.n	84bf6 <_malloc_r+0x2e6>
   84bf2:	2b0f      	cmp	r3, #15
   84bf4:	dc04      	bgt.n	84c00 <_malloc_r+0x2f0>
   84bf6:	4628      	mov	r0, r5
   84bf8:	f000 f9f2 	bl	84fe0 <__malloc_unlock>
   84bfc:	2400      	movs	r4, #0
   84bfe:	e74d      	b.n	84a9c <_malloc_r+0x18c>
   84c00:	f046 0201 	orr.w	r2, r6, #1
   84c04:	f043 0301 	orr.w	r3, r3, #1
   84c08:	4426      	add	r6, r4
   84c0a:	6062      	str	r2, [r4, #4]
   84c0c:	4628      	mov	r0, r5
   84c0e:	60be      	str	r6, [r7, #8]
   84c10:	3408      	adds	r4, #8
   84c12:	6073      	str	r3, [r6, #4]
   84c14:	f000 f9e4 	bl	84fe0 <__malloc_unlock>
   84c18:	4620      	mov	r0, r4
   84c1a:	b003      	add	sp, #12
   84c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84c20:	2b14      	cmp	r3, #20
   84c22:	d970      	bls.n	84d06 <_malloc_r+0x3f6>
   84c24:	2b54      	cmp	r3, #84	; 0x54
   84c26:	f200 80a2 	bhi.w	84d6e <_malloc_r+0x45e>
   84c2a:	0b33      	lsrs	r3, r6, #12
   84c2c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84c30:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84c34:	00c1      	lsls	r1, r0, #3
   84c36:	e68d      	b.n	84954 <_malloc_r+0x44>
   84c38:	20070b60 	.word	0x20070b60
   84c3c:	2007113c 	.word	0x2007113c
   84c40:	2007110c 	.word	0x2007110c
   84c44:	20071134 	.word	0x20071134
   84c48:	20071138 	.word	0x20071138
   84c4c:	20070b68 	.word	0x20070b68
   84c50:	20070f68 	.word	0x20070f68
   84c54:	0a5a      	lsrs	r2, r3, #9
   84c56:	2a04      	cmp	r2, #4
   84c58:	d95b      	bls.n	84d12 <_malloc_r+0x402>
   84c5a:	2a14      	cmp	r2, #20
   84c5c:	f200 80ae 	bhi.w	84dbc <_malloc_r+0x4ac>
   84c60:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84c64:	00c9      	lsls	r1, r1, #3
   84c66:	325b      	adds	r2, #91	; 0x5b
   84c68:	eb07 0c01 	add.w	ip, r7, r1
   84c6c:	5879      	ldr	r1, [r7, r1]
   84c6e:	f1ac 0c08 	sub.w	ip, ip, #8
   84c72:	458c      	cmp	ip, r1
   84c74:	f000 8088 	beq.w	84d88 <_malloc_r+0x478>
   84c78:	684a      	ldr	r2, [r1, #4]
   84c7a:	f022 0203 	bic.w	r2, r2, #3
   84c7e:	4293      	cmp	r3, r2
   84c80:	d273      	bcs.n	84d6a <_malloc_r+0x45a>
   84c82:	6889      	ldr	r1, [r1, #8]
   84c84:	458c      	cmp	ip, r1
   84c86:	d1f7      	bne.n	84c78 <_malloc_r+0x368>
   84c88:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84c8c:	687a      	ldr	r2, [r7, #4]
   84c8e:	60e3      	str	r3, [r4, #12]
   84c90:	f8c4 c008 	str.w	ip, [r4, #8]
   84c94:	609c      	str	r4, [r3, #8]
   84c96:	f8cc 400c 	str.w	r4, [ip, #12]
   84c9a:	e69e      	b.n	849da <_malloc_r+0xca>
   84c9c:	f046 0c01 	orr.w	ip, r6, #1
   84ca0:	f042 0101 	orr.w	r1, r2, #1
   84ca4:	4426      	add	r6, r4
   84ca6:	f8c4 c004 	str.w	ip, [r4, #4]
   84caa:	4628      	mov	r0, r5
   84cac:	617e      	str	r6, [r7, #20]
   84cae:	613e      	str	r6, [r7, #16]
   84cb0:	f8c6 e00c 	str.w	lr, [r6, #12]
   84cb4:	f8c6 e008 	str.w	lr, [r6, #8]
   84cb8:	6071      	str	r1, [r6, #4]
   84cba:	50e2      	str	r2, [r4, r3]
   84cbc:	f000 f990 	bl	84fe0 <__malloc_unlock>
   84cc0:	3408      	adds	r4, #8
   84cc2:	e6eb      	b.n	84a9c <_malloc_r+0x18c>
   84cc4:	687a      	ldr	r2, [r7, #4]
   84cc6:	e688      	b.n	849da <_malloc_r+0xca>
   84cc8:	f108 0801 	add.w	r8, r8, #1
   84ccc:	f018 0f03 	tst.w	r8, #3
   84cd0:	f10c 0c08 	add.w	ip, ip, #8
   84cd4:	f47f ae93 	bne.w	849fe <_malloc_r+0xee>
   84cd8:	e02d      	b.n	84d36 <_malloc_r+0x426>
   84cda:	68dc      	ldr	r4, [r3, #12]
   84cdc:	42a3      	cmp	r3, r4
   84cde:	bf08      	it	eq
   84ce0:	3002      	addeq	r0, #2
   84ce2:	f43f ae4b 	beq.w	8497c <_malloc_r+0x6c>
   84ce6:	e6c9      	b.n	84a7c <_malloc_r+0x16c>
   84ce8:	461c      	mov	r4, r3
   84cea:	4419      	add	r1, r3
   84cec:	684a      	ldr	r2, [r1, #4]
   84cee:	68db      	ldr	r3, [r3, #12]
   84cf0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84cf4:	f042 0201 	orr.w	r2, r2, #1
   84cf8:	604a      	str	r2, [r1, #4]
   84cfa:	4628      	mov	r0, r5
   84cfc:	60f3      	str	r3, [r6, #12]
   84cfe:	609e      	str	r6, [r3, #8]
   84d00:	f000 f96e 	bl	84fe0 <__malloc_unlock>
   84d04:	e6ca      	b.n	84a9c <_malloc_r+0x18c>
   84d06:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84d0a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84d0e:	00c1      	lsls	r1, r0, #3
   84d10:	e620      	b.n	84954 <_malloc_r+0x44>
   84d12:	099a      	lsrs	r2, r3, #6
   84d14:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84d18:	00c9      	lsls	r1, r1, #3
   84d1a:	3238      	adds	r2, #56	; 0x38
   84d1c:	e7a4      	b.n	84c68 <_malloc_r+0x358>
   84d1e:	42bc      	cmp	r4, r7
   84d20:	d054      	beq.n	84dcc <_malloc_r+0x4bc>
   84d22:	68bc      	ldr	r4, [r7, #8]
   84d24:	6862      	ldr	r2, [r4, #4]
   84d26:	f022 0203 	bic.w	r2, r2, #3
   84d2a:	e75e      	b.n	84bea <_malloc_r+0x2da>
   84d2c:	f859 3908 	ldr.w	r3, [r9], #-8
   84d30:	4599      	cmp	r9, r3
   84d32:	f040 8086 	bne.w	84e42 <_malloc_r+0x532>
   84d36:	f010 0f03 	tst.w	r0, #3
   84d3a:	f100 30ff 	add.w	r0, r0, #4294967295
   84d3e:	d1f5      	bne.n	84d2c <_malloc_r+0x41c>
   84d40:	687b      	ldr	r3, [r7, #4]
   84d42:	ea23 0304 	bic.w	r3, r3, r4
   84d46:	607b      	str	r3, [r7, #4]
   84d48:	0064      	lsls	r4, r4, #1
   84d4a:	429c      	cmp	r4, r3
   84d4c:	f63f aec8 	bhi.w	84ae0 <_malloc_r+0x1d0>
   84d50:	2c00      	cmp	r4, #0
   84d52:	f43f aec5 	beq.w	84ae0 <_malloc_r+0x1d0>
   84d56:	421c      	tst	r4, r3
   84d58:	4640      	mov	r0, r8
   84d5a:	f47f ae4c 	bne.w	849f6 <_malloc_r+0xe6>
   84d5e:	0064      	lsls	r4, r4, #1
   84d60:	421c      	tst	r4, r3
   84d62:	f100 0004 	add.w	r0, r0, #4
   84d66:	d0fa      	beq.n	84d5e <_malloc_r+0x44e>
   84d68:	e645      	b.n	849f6 <_malloc_r+0xe6>
   84d6a:	468c      	mov	ip, r1
   84d6c:	e78c      	b.n	84c88 <_malloc_r+0x378>
   84d6e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84d72:	d815      	bhi.n	84da0 <_malloc_r+0x490>
   84d74:	0bf3      	lsrs	r3, r6, #15
   84d76:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84d7a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84d7e:	00c1      	lsls	r1, r0, #3
   84d80:	e5e8      	b.n	84954 <_malloc_r+0x44>
   84d82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84d86:	e6ee      	b.n	84b66 <_malloc_r+0x256>
   84d88:	2101      	movs	r1, #1
   84d8a:	687b      	ldr	r3, [r7, #4]
   84d8c:	1092      	asrs	r2, r2, #2
   84d8e:	fa01 f202 	lsl.w	r2, r1, r2
   84d92:	431a      	orrs	r2, r3
   84d94:	607a      	str	r2, [r7, #4]
   84d96:	4663      	mov	r3, ip
   84d98:	e779      	b.n	84c8e <_malloc_r+0x37e>
   84d9a:	2301      	movs	r3, #1
   84d9c:	6053      	str	r3, [r2, #4]
   84d9e:	e72a      	b.n	84bf6 <_malloc_r+0x2e6>
   84da0:	f240 5254 	movw	r2, #1364	; 0x554
   84da4:	4293      	cmp	r3, r2
   84da6:	d822      	bhi.n	84dee <_malloc_r+0x4de>
   84da8:	0cb3      	lsrs	r3, r6, #18
   84daa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84dae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84db2:	00c1      	lsls	r1, r0, #3
   84db4:	e5ce      	b.n	84954 <_malloc_r+0x44>
   84db6:	f103 0b10 	add.w	fp, r3, #16
   84dba:	e6af      	b.n	84b1c <_malloc_r+0x20c>
   84dbc:	2a54      	cmp	r2, #84	; 0x54
   84dbe:	d829      	bhi.n	84e14 <_malloc_r+0x504>
   84dc0:	0b1a      	lsrs	r2, r3, #12
   84dc2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84dc6:	00c9      	lsls	r1, r1, #3
   84dc8:	326e      	adds	r2, #110	; 0x6e
   84dca:	e74d      	b.n	84c68 <_malloc_r+0x358>
   84dcc:	4b20      	ldr	r3, [pc, #128]	; (84e50 <_malloc_r+0x540>)
   84dce:	6819      	ldr	r1, [r3, #0]
   84dd0:	4459      	add	r1, fp
   84dd2:	6019      	str	r1, [r3, #0]
   84dd4:	e6b3      	b.n	84b3e <_malloc_r+0x22e>
   84dd6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84dda:	2800      	cmp	r0, #0
   84ddc:	f47f aeaf 	bne.w	84b3e <_malloc_r+0x22e>
   84de0:	eb08 030b 	add.w	r3, r8, fp
   84de4:	68ba      	ldr	r2, [r7, #8]
   84de6:	f043 0301 	orr.w	r3, r3, #1
   84dea:	6053      	str	r3, [r2, #4]
   84dec:	e6ef      	b.n	84bce <_malloc_r+0x2be>
   84dee:	207f      	movs	r0, #127	; 0x7f
   84df0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84df4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84df8:	e5ac      	b.n	84954 <_malloc_r+0x44>
   84dfa:	f104 0108 	add.w	r1, r4, #8
   84dfe:	4628      	mov	r0, r5
   84e00:	9300      	str	r3, [sp, #0]
   84e02:	f7ff fc8d 	bl	84720 <_free_r>
   84e06:	9b00      	ldr	r3, [sp, #0]
   84e08:	6819      	ldr	r1, [r3, #0]
   84e0a:	e6e0      	b.n	84bce <_malloc_r+0x2be>
   84e0c:	2001      	movs	r0, #1
   84e0e:	f04f 0900 	mov.w	r9, #0
   84e12:	e6bd      	b.n	84b90 <_malloc_r+0x280>
   84e14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84e18:	d805      	bhi.n	84e26 <_malloc_r+0x516>
   84e1a:	0bda      	lsrs	r2, r3, #15
   84e1c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84e20:	00c9      	lsls	r1, r1, #3
   84e22:	3277      	adds	r2, #119	; 0x77
   84e24:	e720      	b.n	84c68 <_malloc_r+0x358>
   84e26:	f240 5154 	movw	r1, #1364	; 0x554
   84e2a:	428a      	cmp	r2, r1
   84e2c:	d805      	bhi.n	84e3a <_malloc_r+0x52a>
   84e2e:	0c9a      	lsrs	r2, r3, #18
   84e30:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84e34:	00c9      	lsls	r1, r1, #3
   84e36:	327c      	adds	r2, #124	; 0x7c
   84e38:	e716      	b.n	84c68 <_malloc_r+0x358>
   84e3a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84e3e:	227e      	movs	r2, #126	; 0x7e
   84e40:	e712      	b.n	84c68 <_malloc_r+0x358>
   84e42:	687b      	ldr	r3, [r7, #4]
   84e44:	e780      	b.n	84d48 <_malloc_r+0x438>
   84e46:	08f0      	lsrs	r0, r6, #3
   84e48:	f106 0308 	add.w	r3, r6, #8
   84e4c:	e60e      	b.n	84a6c <_malloc_r+0x15c>
   84e4e:	bf00      	nop
   84e50:	2007110c 	.word	0x2007110c

00084e54 <__ascii_mbtowc>:
   84e54:	b082      	sub	sp, #8
   84e56:	b149      	cbz	r1, 84e6c <__ascii_mbtowc+0x18>
   84e58:	b15a      	cbz	r2, 84e72 <__ascii_mbtowc+0x1e>
   84e5a:	b16b      	cbz	r3, 84e78 <__ascii_mbtowc+0x24>
   84e5c:	7813      	ldrb	r3, [r2, #0]
   84e5e:	600b      	str	r3, [r1, #0]
   84e60:	7812      	ldrb	r2, [r2, #0]
   84e62:	1c10      	adds	r0, r2, #0
   84e64:	bf18      	it	ne
   84e66:	2001      	movne	r0, #1
   84e68:	b002      	add	sp, #8
   84e6a:	4770      	bx	lr
   84e6c:	a901      	add	r1, sp, #4
   84e6e:	2a00      	cmp	r2, #0
   84e70:	d1f3      	bne.n	84e5a <__ascii_mbtowc+0x6>
   84e72:	4610      	mov	r0, r2
   84e74:	b002      	add	sp, #8
   84e76:	4770      	bx	lr
   84e78:	f06f 0001 	mvn.w	r0, #1
   84e7c:	e7f4      	b.n	84e68 <__ascii_mbtowc+0x14>
   84e7e:	bf00      	nop

00084e80 <memchr>:
   84e80:	0783      	lsls	r3, r0, #30
   84e82:	b470      	push	{r4, r5, r6}
   84e84:	b2cd      	uxtb	r5, r1
   84e86:	d03d      	beq.n	84f04 <memchr+0x84>
   84e88:	1e54      	subs	r4, r2, #1
   84e8a:	b30a      	cbz	r2, 84ed0 <memchr+0x50>
   84e8c:	7803      	ldrb	r3, [r0, #0]
   84e8e:	42ab      	cmp	r3, r5
   84e90:	d01f      	beq.n	84ed2 <memchr+0x52>
   84e92:	1c43      	adds	r3, r0, #1
   84e94:	e005      	b.n	84ea2 <memchr+0x22>
   84e96:	f114 34ff 	adds.w	r4, r4, #4294967295
   84e9a:	d319      	bcc.n	84ed0 <memchr+0x50>
   84e9c:	7802      	ldrb	r2, [r0, #0]
   84e9e:	42aa      	cmp	r2, r5
   84ea0:	d017      	beq.n	84ed2 <memchr+0x52>
   84ea2:	f013 0f03 	tst.w	r3, #3
   84ea6:	4618      	mov	r0, r3
   84ea8:	f103 0301 	add.w	r3, r3, #1
   84eac:	d1f3      	bne.n	84e96 <memchr+0x16>
   84eae:	2c03      	cmp	r4, #3
   84eb0:	d811      	bhi.n	84ed6 <memchr+0x56>
   84eb2:	b34c      	cbz	r4, 84f08 <memchr+0x88>
   84eb4:	7803      	ldrb	r3, [r0, #0]
   84eb6:	42ab      	cmp	r3, r5
   84eb8:	d00b      	beq.n	84ed2 <memchr+0x52>
   84eba:	4404      	add	r4, r0
   84ebc:	1c43      	adds	r3, r0, #1
   84ebe:	e002      	b.n	84ec6 <memchr+0x46>
   84ec0:	7802      	ldrb	r2, [r0, #0]
   84ec2:	42aa      	cmp	r2, r5
   84ec4:	d005      	beq.n	84ed2 <memchr+0x52>
   84ec6:	429c      	cmp	r4, r3
   84ec8:	4618      	mov	r0, r3
   84eca:	f103 0301 	add.w	r3, r3, #1
   84ece:	d1f7      	bne.n	84ec0 <memchr+0x40>
   84ed0:	2000      	movs	r0, #0
   84ed2:	bc70      	pop	{r4, r5, r6}
   84ed4:	4770      	bx	lr
   84ed6:	0209      	lsls	r1, r1, #8
   84ed8:	b289      	uxth	r1, r1
   84eda:	4329      	orrs	r1, r5
   84edc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84ee0:	6803      	ldr	r3, [r0, #0]
   84ee2:	4606      	mov	r6, r0
   84ee4:	404b      	eors	r3, r1
   84ee6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84eea:	ea22 0303 	bic.w	r3, r2, r3
   84eee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84ef2:	f100 0004 	add.w	r0, r0, #4
   84ef6:	d103      	bne.n	84f00 <memchr+0x80>
   84ef8:	3c04      	subs	r4, #4
   84efa:	2c03      	cmp	r4, #3
   84efc:	d8f0      	bhi.n	84ee0 <memchr+0x60>
   84efe:	e7d8      	b.n	84eb2 <memchr+0x32>
   84f00:	4630      	mov	r0, r6
   84f02:	e7d7      	b.n	84eb4 <memchr+0x34>
   84f04:	4614      	mov	r4, r2
   84f06:	e7d2      	b.n	84eae <memchr+0x2e>
   84f08:	4620      	mov	r0, r4
   84f0a:	e7e2      	b.n	84ed2 <memchr+0x52>

00084f0c <memmove>:
   84f0c:	4288      	cmp	r0, r1
   84f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84f10:	d90d      	bls.n	84f2e <memmove+0x22>
   84f12:	188b      	adds	r3, r1, r2
   84f14:	4298      	cmp	r0, r3
   84f16:	d20a      	bcs.n	84f2e <memmove+0x22>
   84f18:	1884      	adds	r4, r0, r2
   84f1a:	2a00      	cmp	r2, #0
   84f1c:	d051      	beq.n	84fc2 <memmove+0xb6>
   84f1e:	4622      	mov	r2, r4
   84f20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84f24:	4299      	cmp	r1, r3
   84f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84f2a:	d1f9      	bne.n	84f20 <memmove+0x14>
   84f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f2e:	2a0f      	cmp	r2, #15
   84f30:	d948      	bls.n	84fc4 <memmove+0xb8>
   84f32:	ea41 0300 	orr.w	r3, r1, r0
   84f36:	079b      	lsls	r3, r3, #30
   84f38:	d146      	bne.n	84fc8 <memmove+0xbc>
   84f3a:	4615      	mov	r5, r2
   84f3c:	f100 0410 	add.w	r4, r0, #16
   84f40:	f101 0310 	add.w	r3, r1, #16
   84f44:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84f48:	3d10      	subs	r5, #16
   84f4a:	f844 6c10 	str.w	r6, [r4, #-16]
   84f4e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84f52:	2d0f      	cmp	r5, #15
   84f54:	f844 6c0c 	str.w	r6, [r4, #-12]
   84f58:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84f5c:	f104 0410 	add.w	r4, r4, #16
   84f60:	f844 6c18 	str.w	r6, [r4, #-24]
   84f64:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84f68:	f103 0310 	add.w	r3, r3, #16
   84f6c:	f844 6c14 	str.w	r6, [r4, #-20]
   84f70:	d8e8      	bhi.n	84f44 <memmove+0x38>
   84f72:	f1a2 0310 	sub.w	r3, r2, #16
   84f76:	f023 030f 	bic.w	r3, r3, #15
   84f7a:	f002 0e0f 	and.w	lr, r2, #15
   84f7e:	3310      	adds	r3, #16
   84f80:	f1be 0f03 	cmp.w	lr, #3
   84f84:	4419      	add	r1, r3
   84f86:	4403      	add	r3, r0
   84f88:	d921      	bls.n	84fce <memmove+0xc2>
   84f8a:	460e      	mov	r6, r1
   84f8c:	4674      	mov	r4, lr
   84f8e:	1f1d      	subs	r5, r3, #4
   84f90:	f856 7b04 	ldr.w	r7, [r6], #4
   84f94:	3c04      	subs	r4, #4
   84f96:	2c03      	cmp	r4, #3
   84f98:	f845 7f04 	str.w	r7, [r5, #4]!
   84f9c:	d8f8      	bhi.n	84f90 <memmove+0x84>
   84f9e:	f1ae 0404 	sub.w	r4, lr, #4
   84fa2:	f024 0403 	bic.w	r4, r4, #3
   84fa6:	3404      	adds	r4, #4
   84fa8:	4421      	add	r1, r4
   84faa:	4423      	add	r3, r4
   84fac:	f002 0203 	and.w	r2, r2, #3
   84fb0:	b162      	cbz	r2, 84fcc <memmove+0xc0>
   84fb2:	3b01      	subs	r3, #1
   84fb4:	440a      	add	r2, r1
   84fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
   84fba:	428a      	cmp	r2, r1
   84fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
   84fc0:	d1f9      	bne.n	84fb6 <memmove+0xaa>
   84fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84fc4:	4603      	mov	r3, r0
   84fc6:	e7f3      	b.n	84fb0 <memmove+0xa4>
   84fc8:	4603      	mov	r3, r0
   84fca:	e7f2      	b.n	84fb2 <memmove+0xa6>
   84fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84fce:	4672      	mov	r2, lr
   84fd0:	e7ee      	b.n	84fb0 <memmove+0xa4>
   84fd2:	bf00      	nop

00084fd4 <__malloc_lock>:
   84fd4:	4801      	ldr	r0, [pc, #4]	; (84fdc <__malloc_lock+0x8>)
   84fd6:	f7ff bc97 	b.w	84908 <__retarget_lock_acquire_recursive>
   84fda:	bf00      	nop
   84fdc:	200711c0 	.word	0x200711c0

00084fe0 <__malloc_unlock>:
   84fe0:	4801      	ldr	r0, [pc, #4]	; (84fe8 <__malloc_unlock+0x8>)
   84fe2:	f7ff bc93 	b.w	8490c <__retarget_lock_release_recursive>
   84fe6:	bf00      	nop
   84fe8:	200711c0 	.word	0x200711c0

00084fec <_Balloc>:
   84fec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84fee:	b570      	push	{r4, r5, r6, lr}
   84ff0:	4605      	mov	r5, r0
   84ff2:	460c      	mov	r4, r1
   84ff4:	b14b      	cbz	r3, 8500a <_Balloc+0x1e>
   84ff6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   84ffa:	b180      	cbz	r0, 8501e <_Balloc+0x32>
   84ffc:	6802      	ldr	r2, [r0, #0]
   84ffe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   85002:	2300      	movs	r3, #0
   85004:	6103      	str	r3, [r0, #16]
   85006:	60c3      	str	r3, [r0, #12]
   85008:	bd70      	pop	{r4, r5, r6, pc}
   8500a:	2221      	movs	r2, #33	; 0x21
   8500c:	2104      	movs	r1, #4
   8500e:	f000 fd9d 	bl	85b4c <_calloc_r>
   85012:	64e8      	str	r0, [r5, #76]	; 0x4c
   85014:	4603      	mov	r3, r0
   85016:	2800      	cmp	r0, #0
   85018:	d1ed      	bne.n	84ff6 <_Balloc+0xa>
   8501a:	2000      	movs	r0, #0
   8501c:	bd70      	pop	{r4, r5, r6, pc}
   8501e:	2101      	movs	r1, #1
   85020:	fa01 f604 	lsl.w	r6, r1, r4
   85024:	1d72      	adds	r2, r6, #5
   85026:	4628      	mov	r0, r5
   85028:	0092      	lsls	r2, r2, #2
   8502a:	f000 fd8f 	bl	85b4c <_calloc_r>
   8502e:	2800      	cmp	r0, #0
   85030:	d0f3      	beq.n	8501a <_Balloc+0x2e>
   85032:	6044      	str	r4, [r0, #4]
   85034:	6086      	str	r6, [r0, #8]
   85036:	e7e4      	b.n	85002 <_Balloc+0x16>

00085038 <_Bfree>:
   85038:	b131      	cbz	r1, 85048 <_Bfree+0x10>
   8503a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8503c:	684a      	ldr	r2, [r1, #4]
   8503e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   85042:	6008      	str	r0, [r1, #0]
   85044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   85048:	4770      	bx	lr
   8504a:	bf00      	nop

0008504c <__multadd>:
   8504c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8504e:	460c      	mov	r4, r1
   85050:	4605      	mov	r5, r0
   85052:	f04f 0e00 	mov.w	lr, #0
   85056:	690e      	ldr	r6, [r1, #16]
   85058:	b083      	sub	sp, #12
   8505a:	f101 0714 	add.w	r7, r1, #20
   8505e:	6838      	ldr	r0, [r7, #0]
   85060:	f10e 0e01 	add.w	lr, lr, #1
   85064:	b281      	uxth	r1, r0
   85066:	fb02 3301 	mla	r3, r2, r1, r3
   8506a:	0c01      	lsrs	r1, r0, #16
   8506c:	0c18      	lsrs	r0, r3, #16
   8506e:	fb02 0101 	mla	r1, r2, r1, r0
   85072:	b29b      	uxth	r3, r3
   85074:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   85078:	4576      	cmp	r6, lr
   8507a:	f847 3b04 	str.w	r3, [r7], #4
   8507e:	ea4f 4311 	mov.w	r3, r1, lsr #16
   85082:	dcec      	bgt.n	8505e <__multadd+0x12>
   85084:	b13b      	cbz	r3, 85096 <__multadd+0x4a>
   85086:	68a2      	ldr	r2, [r4, #8]
   85088:	4296      	cmp	r6, r2
   8508a:	da07      	bge.n	8509c <__multadd+0x50>
   8508c:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   85090:	3601      	adds	r6, #1
   85092:	6153      	str	r3, [r2, #20]
   85094:	6126      	str	r6, [r4, #16]
   85096:	4620      	mov	r0, r4
   85098:	b003      	add	sp, #12
   8509a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8509c:	6861      	ldr	r1, [r4, #4]
   8509e:	4628      	mov	r0, r5
   850a0:	3101      	adds	r1, #1
   850a2:	9301      	str	r3, [sp, #4]
   850a4:	f7ff ffa2 	bl	84fec <_Balloc>
   850a8:	4607      	mov	r7, r0
   850aa:	6922      	ldr	r2, [r4, #16]
   850ac:	f104 010c 	add.w	r1, r4, #12
   850b0:	3202      	adds	r2, #2
   850b2:	0092      	lsls	r2, r2, #2
   850b4:	300c      	adds	r0, #12
   850b6:	f7fc ff6b 	bl	81f90 <memcpy>
   850ba:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   850bc:	6861      	ldr	r1, [r4, #4]
   850be:	9b01      	ldr	r3, [sp, #4]
   850c0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   850c4:	6020      	str	r0, [r4, #0]
   850c6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   850ca:	463c      	mov	r4, r7
   850cc:	e7de      	b.n	8508c <__multadd+0x40>
   850ce:	bf00      	nop

000850d0 <__hi0bits>:
   850d0:	0c02      	lsrs	r2, r0, #16
   850d2:	0412      	lsls	r2, r2, #16
   850d4:	4603      	mov	r3, r0
   850d6:	b9b2      	cbnz	r2, 85106 <__hi0bits+0x36>
   850d8:	0403      	lsls	r3, r0, #16
   850da:	2010      	movs	r0, #16
   850dc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   850e0:	bf04      	itt	eq
   850e2:	021b      	lsleq	r3, r3, #8
   850e4:	3008      	addeq	r0, #8
   850e6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   850ea:	bf04      	itt	eq
   850ec:	011b      	lsleq	r3, r3, #4
   850ee:	3004      	addeq	r0, #4
   850f0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   850f4:	bf04      	itt	eq
   850f6:	009b      	lsleq	r3, r3, #2
   850f8:	3002      	addeq	r0, #2
   850fa:	2b00      	cmp	r3, #0
   850fc:	db02      	blt.n	85104 <__hi0bits+0x34>
   850fe:	005b      	lsls	r3, r3, #1
   85100:	d403      	bmi.n	8510a <__hi0bits+0x3a>
   85102:	2020      	movs	r0, #32
   85104:	4770      	bx	lr
   85106:	2000      	movs	r0, #0
   85108:	e7e8      	b.n	850dc <__hi0bits+0xc>
   8510a:	3001      	adds	r0, #1
   8510c:	4770      	bx	lr
   8510e:	bf00      	nop

00085110 <__lo0bits>:
   85110:	6803      	ldr	r3, [r0, #0]
   85112:	4601      	mov	r1, r0
   85114:	f013 0207 	ands.w	r2, r3, #7
   85118:	d007      	beq.n	8512a <__lo0bits+0x1a>
   8511a:	07da      	lsls	r2, r3, #31
   8511c:	d421      	bmi.n	85162 <__lo0bits+0x52>
   8511e:	0798      	lsls	r0, r3, #30
   85120:	d421      	bmi.n	85166 <__lo0bits+0x56>
   85122:	089b      	lsrs	r3, r3, #2
   85124:	600b      	str	r3, [r1, #0]
   85126:	2002      	movs	r0, #2
   85128:	4770      	bx	lr
   8512a:	b298      	uxth	r0, r3
   8512c:	b198      	cbz	r0, 85156 <__lo0bits+0x46>
   8512e:	4610      	mov	r0, r2
   85130:	f013 0fff 	tst.w	r3, #255	; 0xff
   85134:	bf04      	itt	eq
   85136:	0a1b      	lsreq	r3, r3, #8
   85138:	3008      	addeq	r0, #8
   8513a:	071a      	lsls	r2, r3, #28
   8513c:	bf04      	itt	eq
   8513e:	091b      	lsreq	r3, r3, #4
   85140:	3004      	addeq	r0, #4
   85142:	079a      	lsls	r2, r3, #30
   85144:	bf04      	itt	eq
   85146:	089b      	lsreq	r3, r3, #2
   85148:	3002      	addeq	r0, #2
   8514a:	07da      	lsls	r2, r3, #31
   8514c:	d407      	bmi.n	8515e <__lo0bits+0x4e>
   8514e:	085b      	lsrs	r3, r3, #1
   85150:	d104      	bne.n	8515c <__lo0bits+0x4c>
   85152:	2020      	movs	r0, #32
   85154:	4770      	bx	lr
   85156:	0c1b      	lsrs	r3, r3, #16
   85158:	2010      	movs	r0, #16
   8515a:	e7e9      	b.n	85130 <__lo0bits+0x20>
   8515c:	3001      	adds	r0, #1
   8515e:	600b      	str	r3, [r1, #0]
   85160:	4770      	bx	lr
   85162:	2000      	movs	r0, #0
   85164:	4770      	bx	lr
   85166:	085b      	lsrs	r3, r3, #1
   85168:	600b      	str	r3, [r1, #0]
   8516a:	2001      	movs	r0, #1
   8516c:	4770      	bx	lr
   8516e:	bf00      	nop

00085170 <__i2b>:
   85170:	b510      	push	{r4, lr}
   85172:	460c      	mov	r4, r1
   85174:	2101      	movs	r1, #1
   85176:	f7ff ff39 	bl	84fec <_Balloc>
   8517a:	2201      	movs	r2, #1
   8517c:	6144      	str	r4, [r0, #20]
   8517e:	6102      	str	r2, [r0, #16]
   85180:	bd10      	pop	{r4, pc}
   85182:	bf00      	nop

00085184 <__multiply>:
   85184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85188:	690c      	ldr	r4, [r1, #16]
   8518a:	6915      	ldr	r5, [r2, #16]
   8518c:	b083      	sub	sp, #12
   8518e:	42ac      	cmp	r4, r5
   85190:	468b      	mov	fp, r1
   85192:	4616      	mov	r6, r2
   85194:	da04      	bge.n	851a0 <__multiply+0x1c>
   85196:	4622      	mov	r2, r4
   85198:	46b3      	mov	fp, r6
   8519a:	462c      	mov	r4, r5
   8519c:	460e      	mov	r6, r1
   8519e:	4615      	mov	r5, r2
   851a0:	f8db 3008 	ldr.w	r3, [fp, #8]
   851a4:	eb04 0805 	add.w	r8, r4, r5
   851a8:	f8db 1004 	ldr.w	r1, [fp, #4]
   851ac:	4598      	cmp	r8, r3
   851ae:	bfc8      	it	gt
   851b0:	3101      	addgt	r1, #1
   851b2:	f7ff ff1b 	bl	84fec <_Balloc>
   851b6:	f100 0914 	add.w	r9, r0, #20
   851ba:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   851be:	45d1      	cmp	r9, sl
   851c0:	9000      	str	r0, [sp, #0]
   851c2:	d205      	bcs.n	851d0 <__multiply+0x4c>
   851c4:	464b      	mov	r3, r9
   851c6:	2100      	movs	r1, #0
   851c8:	f843 1b04 	str.w	r1, [r3], #4
   851cc:	459a      	cmp	sl, r3
   851ce:	d8fb      	bhi.n	851c8 <__multiply+0x44>
   851d0:	f106 0c14 	add.w	ip, r6, #20
   851d4:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   851d8:	f10b 0b14 	add.w	fp, fp, #20
   851dc:	459c      	cmp	ip, r3
   851de:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   851e2:	d24b      	bcs.n	8527c <__multiply+0xf8>
   851e4:	f8cd a004 	str.w	sl, [sp, #4]
   851e8:	469a      	mov	sl, r3
   851ea:	f8dc 5000 	ldr.w	r5, [ip]
   851ee:	b2af      	uxth	r7, r5
   851f0:	b1e7      	cbz	r7, 8522c <__multiply+0xa8>
   851f2:	464d      	mov	r5, r9
   851f4:	465e      	mov	r6, fp
   851f6:	2100      	movs	r1, #0
   851f8:	f856 2b04 	ldr.w	r2, [r6], #4
   851fc:	6828      	ldr	r0, [r5, #0]
   851fe:	b293      	uxth	r3, r2
   85200:	b284      	uxth	r4, r0
   85202:	0c12      	lsrs	r2, r2, #16
   85204:	fb07 4303 	mla	r3, r7, r3, r4
   85208:	0c00      	lsrs	r0, r0, #16
   8520a:	fb07 0202 	mla	r2, r7, r2, r0
   8520e:	440b      	add	r3, r1
   85210:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   85214:	b29b      	uxth	r3, r3
   85216:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8521a:	45b6      	cmp	lr, r6
   8521c:	f845 3b04 	str.w	r3, [r5], #4
   85220:	ea4f 4111 	mov.w	r1, r1, lsr #16
   85224:	d8e8      	bhi.n	851f8 <__multiply+0x74>
   85226:	6029      	str	r1, [r5, #0]
   85228:	f8dc 5000 	ldr.w	r5, [ip]
   8522c:	0c2d      	lsrs	r5, r5, #16
   8522e:	d01d      	beq.n	8526c <__multiply+0xe8>
   85230:	f8d9 3000 	ldr.w	r3, [r9]
   85234:	4648      	mov	r0, r9
   85236:	461c      	mov	r4, r3
   85238:	4659      	mov	r1, fp
   8523a:	2200      	movs	r2, #0
   8523c:	880e      	ldrh	r6, [r1, #0]
   8523e:	0c24      	lsrs	r4, r4, #16
   85240:	fb05 4406 	mla	r4, r5, r6, r4
   85244:	b29b      	uxth	r3, r3
   85246:	4422      	add	r2, r4
   85248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8524c:	f840 3b04 	str.w	r3, [r0], #4
   85250:	f851 3b04 	ldr.w	r3, [r1], #4
   85254:	6804      	ldr	r4, [r0, #0]
   85256:	0c1b      	lsrs	r3, r3, #16
   85258:	b2a6      	uxth	r6, r4
   8525a:	fb05 6303 	mla	r3, r5, r3, r6
   8525e:	458e      	cmp	lr, r1
   85260:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   85264:	ea4f 4213 	mov.w	r2, r3, lsr #16
   85268:	d8e8      	bhi.n	8523c <__multiply+0xb8>
   8526a:	6003      	str	r3, [r0, #0]
   8526c:	f10c 0c04 	add.w	ip, ip, #4
   85270:	45e2      	cmp	sl, ip
   85272:	f109 0904 	add.w	r9, r9, #4
   85276:	d8b8      	bhi.n	851ea <__multiply+0x66>
   85278:	f8dd a004 	ldr.w	sl, [sp, #4]
   8527c:	f1b8 0f00 	cmp.w	r8, #0
   85280:	dd0b      	ble.n	8529a <__multiply+0x116>
   85282:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   85286:	f1aa 0a04 	sub.w	sl, sl, #4
   8528a:	b11b      	cbz	r3, 85294 <__multiply+0x110>
   8528c:	e005      	b.n	8529a <__multiply+0x116>
   8528e:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   85292:	b913      	cbnz	r3, 8529a <__multiply+0x116>
   85294:	f1b8 0801 	subs.w	r8, r8, #1
   85298:	d1f9      	bne.n	8528e <__multiply+0x10a>
   8529a:	9800      	ldr	r0, [sp, #0]
   8529c:	f8c0 8010 	str.w	r8, [r0, #16]
   852a0:	b003      	add	sp, #12
   852a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852a6:	bf00      	nop

000852a8 <__pow5mult>:
   852a8:	f012 0303 	ands.w	r3, r2, #3
   852ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   852b0:	4614      	mov	r4, r2
   852b2:	4607      	mov	r7, r0
   852b4:	d12e      	bne.n	85314 <__pow5mult+0x6c>
   852b6:	460d      	mov	r5, r1
   852b8:	10a4      	asrs	r4, r4, #2
   852ba:	d01c      	beq.n	852f6 <__pow5mult+0x4e>
   852bc:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   852be:	b396      	cbz	r6, 85326 <__pow5mult+0x7e>
   852c0:	07e3      	lsls	r3, r4, #31
   852c2:	f04f 0800 	mov.w	r8, #0
   852c6:	d406      	bmi.n	852d6 <__pow5mult+0x2e>
   852c8:	1064      	asrs	r4, r4, #1
   852ca:	d014      	beq.n	852f6 <__pow5mult+0x4e>
   852cc:	6830      	ldr	r0, [r6, #0]
   852ce:	b1a8      	cbz	r0, 852fc <__pow5mult+0x54>
   852d0:	4606      	mov	r6, r0
   852d2:	07e3      	lsls	r3, r4, #31
   852d4:	d5f8      	bpl.n	852c8 <__pow5mult+0x20>
   852d6:	4632      	mov	r2, r6
   852d8:	4629      	mov	r1, r5
   852da:	4638      	mov	r0, r7
   852dc:	f7ff ff52 	bl	85184 <__multiply>
   852e0:	b1b5      	cbz	r5, 85310 <__pow5mult+0x68>
   852e2:	686a      	ldr	r2, [r5, #4]
   852e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   852e6:	1064      	asrs	r4, r4, #1
   852e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   852ec:	6029      	str	r1, [r5, #0]
   852ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   852f2:	4605      	mov	r5, r0
   852f4:	d1ea      	bne.n	852cc <__pow5mult+0x24>
   852f6:	4628      	mov	r0, r5
   852f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852fc:	4632      	mov	r2, r6
   852fe:	4631      	mov	r1, r6
   85300:	4638      	mov	r0, r7
   85302:	f7ff ff3f 	bl	85184 <__multiply>
   85306:	6030      	str	r0, [r6, #0]
   85308:	f8c0 8000 	str.w	r8, [r0]
   8530c:	4606      	mov	r6, r0
   8530e:	e7e0      	b.n	852d2 <__pow5mult+0x2a>
   85310:	4605      	mov	r5, r0
   85312:	e7d9      	b.n	852c8 <__pow5mult+0x20>
   85314:	4a0b      	ldr	r2, [pc, #44]	; (85344 <__pow5mult+0x9c>)
   85316:	3b01      	subs	r3, #1
   85318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8531c:	2300      	movs	r3, #0
   8531e:	f7ff fe95 	bl	8504c <__multadd>
   85322:	4605      	mov	r5, r0
   85324:	e7c8      	b.n	852b8 <__pow5mult+0x10>
   85326:	2101      	movs	r1, #1
   85328:	4638      	mov	r0, r7
   8532a:	f7ff fe5f 	bl	84fec <_Balloc>
   8532e:	f240 2171 	movw	r1, #625	; 0x271
   85332:	2201      	movs	r2, #1
   85334:	2300      	movs	r3, #0
   85336:	6141      	str	r1, [r0, #20]
   85338:	6102      	str	r2, [r0, #16]
   8533a:	4606      	mov	r6, r0
   8533c:	64b8      	str	r0, [r7, #72]	; 0x48
   8533e:	6003      	str	r3, [r0, #0]
   85340:	e7be      	b.n	852c0 <__pow5mult+0x18>
   85342:	bf00      	nop
   85344:	00086a18 	.word	0x00086a18

00085348 <__lshift>:
   85348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8534c:	690b      	ldr	r3, [r1, #16]
   8534e:	1154      	asrs	r4, r2, #5
   85350:	eb04 0803 	add.w	r8, r4, r3
   85354:	688b      	ldr	r3, [r1, #8]
   85356:	f108 0501 	add.w	r5, r8, #1
   8535a:	429d      	cmp	r5, r3
   8535c:	460e      	mov	r6, r1
   8535e:	4691      	mov	r9, r2
   85360:	4607      	mov	r7, r0
   85362:	6849      	ldr	r1, [r1, #4]
   85364:	dd04      	ble.n	85370 <__lshift+0x28>
   85366:	005b      	lsls	r3, r3, #1
   85368:	429d      	cmp	r5, r3
   8536a:	f101 0101 	add.w	r1, r1, #1
   8536e:	dcfa      	bgt.n	85366 <__lshift+0x1e>
   85370:	4638      	mov	r0, r7
   85372:	f7ff fe3b 	bl	84fec <_Balloc>
   85376:	2c00      	cmp	r4, #0
   85378:	f100 0314 	add.w	r3, r0, #20
   8537c:	dd06      	ble.n	8538c <__lshift+0x44>
   8537e:	2100      	movs	r1, #0
   85380:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   85384:	f843 1b04 	str.w	r1, [r3], #4
   85388:	429a      	cmp	r2, r3
   8538a:	d1fb      	bne.n	85384 <__lshift+0x3c>
   8538c:	6934      	ldr	r4, [r6, #16]
   8538e:	f106 0114 	add.w	r1, r6, #20
   85392:	f019 091f 	ands.w	r9, r9, #31
   85396:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8539a:	d01d      	beq.n	853d8 <__lshift+0x90>
   8539c:	2200      	movs	r2, #0
   8539e:	f1c9 0c20 	rsb	ip, r9, #32
   853a2:	680c      	ldr	r4, [r1, #0]
   853a4:	fa04 f409 	lsl.w	r4, r4, r9
   853a8:	4314      	orrs	r4, r2
   853aa:	f843 4b04 	str.w	r4, [r3], #4
   853ae:	f851 2b04 	ldr.w	r2, [r1], #4
   853b2:	458e      	cmp	lr, r1
   853b4:	fa22 f20c 	lsr.w	r2, r2, ip
   853b8:	d8f3      	bhi.n	853a2 <__lshift+0x5a>
   853ba:	601a      	str	r2, [r3, #0]
   853bc:	b10a      	cbz	r2, 853c2 <__lshift+0x7a>
   853be:	f108 0502 	add.w	r5, r8, #2
   853c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   853c4:	6872      	ldr	r2, [r6, #4]
   853c6:	3d01      	subs	r5, #1
   853c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   853cc:	6105      	str	r5, [r0, #16]
   853ce:	6031      	str	r1, [r6, #0]
   853d0:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   853d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   853d8:	3b04      	subs	r3, #4
   853da:	f851 2b04 	ldr.w	r2, [r1], #4
   853de:	458e      	cmp	lr, r1
   853e0:	f843 2f04 	str.w	r2, [r3, #4]!
   853e4:	d8f9      	bhi.n	853da <__lshift+0x92>
   853e6:	e7ec      	b.n	853c2 <__lshift+0x7a>

000853e8 <__mcmp>:
   853e8:	b430      	push	{r4, r5}
   853ea:	690b      	ldr	r3, [r1, #16]
   853ec:	4605      	mov	r5, r0
   853ee:	6900      	ldr	r0, [r0, #16]
   853f0:	1ac0      	subs	r0, r0, r3
   853f2:	d10f      	bne.n	85414 <__mcmp+0x2c>
   853f4:	009b      	lsls	r3, r3, #2
   853f6:	3514      	adds	r5, #20
   853f8:	3114      	adds	r1, #20
   853fa:	4419      	add	r1, r3
   853fc:	442b      	add	r3, r5
   853fe:	e001      	b.n	85404 <__mcmp+0x1c>
   85400:	429d      	cmp	r5, r3
   85402:	d207      	bcs.n	85414 <__mcmp+0x2c>
   85404:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   85408:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8540c:	4294      	cmp	r4, r2
   8540e:	d0f7      	beq.n	85400 <__mcmp+0x18>
   85410:	d302      	bcc.n	85418 <__mcmp+0x30>
   85412:	2001      	movs	r0, #1
   85414:	bc30      	pop	{r4, r5}
   85416:	4770      	bx	lr
   85418:	f04f 30ff 	mov.w	r0, #4294967295
   8541c:	e7fa      	b.n	85414 <__mcmp+0x2c>
   8541e:	bf00      	nop

00085420 <__mdiff>:
   85420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85424:	690c      	ldr	r4, [r1, #16]
   85426:	4689      	mov	r9, r1
   85428:	6911      	ldr	r1, [r2, #16]
   8542a:	4692      	mov	sl, r2
   8542c:	1a64      	subs	r4, r4, r1
   8542e:	2c00      	cmp	r4, #0
   85430:	d117      	bne.n	85462 <__mdiff+0x42>
   85432:	0089      	lsls	r1, r1, #2
   85434:	f109 0714 	add.w	r7, r9, #20
   85438:	f102 0614 	add.w	r6, r2, #20
   8543c:	187b      	adds	r3, r7, r1
   8543e:	4431      	add	r1, r6
   85440:	e001      	b.n	85446 <__mdiff+0x26>
   85442:	429f      	cmp	r7, r3
   85444:	d265      	bcs.n	85512 <__mdiff+0xf2>
   85446:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8544a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   8544e:	4295      	cmp	r5, r2
   85450:	d0f7      	beq.n	85442 <__mdiff+0x22>
   85452:	d267      	bcs.n	85524 <__mdiff+0x104>
   85454:	464b      	mov	r3, r9
   85456:	46bb      	mov	fp, r7
   85458:	46d1      	mov	r9, sl
   8545a:	4637      	mov	r7, r6
   8545c:	469a      	mov	sl, r3
   8545e:	2401      	movs	r4, #1
   85460:	e005      	b.n	8546e <__mdiff+0x4e>
   85462:	db61      	blt.n	85528 <__mdiff+0x108>
   85464:	2400      	movs	r4, #0
   85466:	f109 0714 	add.w	r7, r9, #20
   8546a:	f10a 0b14 	add.w	fp, sl, #20
   8546e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   85472:	f7ff fdbb 	bl	84fec <_Balloc>
   85476:	465d      	mov	r5, fp
   85478:	f04f 0800 	mov.w	r8, #0
   8547c:	f8d9 e010 	ldr.w	lr, [r9, #16]
   85480:	f8da 3010 	ldr.w	r3, [sl, #16]
   85484:	463e      	mov	r6, r7
   85486:	60c4      	str	r4, [r0, #12]
   85488:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   8548c:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   85490:	f100 0414 	add.w	r4, r0, #20
   85494:	f856 9b04 	ldr.w	r9, [r6], #4
   85498:	f855 2b04 	ldr.w	r2, [r5], #4
   8549c:	fa1f f389 	uxth.w	r3, r9
   854a0:	4443      	add	r3, r8
   854a2:	fa1f f882 	uxth.w	r8, r2
   854a6:	0c12      	lsrs	r2, r2, #16
   854a8:	eba3 0308 	sub.w	r3, r3, r8
   854ac:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   854b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
   854b4:	b29b      	uxth	r3, r3
   854b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   854ba:	45ac      	cmp	ip, r5
   854bc:	f844 3b04 	str.w	r3, [r4], #4
   854c0:	ea4f 4822 	mov.w	r8, r2, asr #16
   854c4:	d8e6      	bhi.n	85494 <__mdiff+0x74>
   854c6:	42b7      	cmp	r7, r6
   854c8:	d917      	bls.n	854fa <__mdiff+0xda>
   854ca:	46a4      	mov	ip, r4
   854cc:	4635      	mov	r5, r6
   854ce:	f855 3b04 	ldr.w	r3, [r5], #4
   854d2:	b299      	uxth	r1, r3
   854d4:	4441      	add	r1, r8
   854d6:	140a      	asrs	r2, r1, #16
   854d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   854dc:	b289      	uxth	r1, r1
   854de:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   854e2:	42af      	cmp	r7, r5
   854e4:	f84c 3b04 	str.w	r3, [ip], #4
   854e8:	ea4f 4822 	mov.w	r8, r2, asr #16
   854ec:	d8ef      	bhi.n	854ce <__mdiff+0xae>
   854ee:	43f6      	mvns	r6, r6
   854f0:	4437      	add	r7, r6
   854f2:	f027 0703 	bic.w	r7, r7, #3
   854f6:	3704      	adds	r7, #4
   854f8:	443c      	add	r4, r7
   854fa:	3c04      	subs	r4, #4
   854fc:	b92b      	cbnz	r3, 8550a <__mdiff+0xea>
   854fe:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   85502:	f10e 3eff 	add.w	lr, lr, #4294967295
   85506:	2b00      	cmp	r3, #0
   85508:	d0f9      	beq.n	854fe <__mdiff+0xde>
   8550a:	f8c0 e010 	str.w	lr, [r0, #16]
   8550e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85512:	2100      	movs	r1, #0
   85514:	f7ff fd6a 	bl	84fec <_Balloc>
   85518:	2201      	movs	r2, #1
   8551a:	2300      	movs	r3, #0
   8551c:	6102      	str	r2, [r0, #16]
   8551e:	6143      	str	r3, [r0, #20]
   85520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85524:	46b3      	mov	fp, r6
   85526:	e7a2      	b.n	8546e <__mdiff+0x4e>
   85528:	464b      	mov	r3, r9
   8552a:	f109 0b14 	add.w	fp, r9, #20
   8552e:	f102 0714 	add.w	r7, r2, #20
   85532:	4691      	mov	r9, r2
   85534:	2401      	movs	r4, #1
   85536:	469a      	mov	sl, r3
   85538:	e799      	b.n	8546e <__mdiff+0x4e>
   8553a:	bf00      	nop

0008553c <__d2b>:
   8553c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8553e:	2101      	movs	r1, #1
   85540:	b083      	sub	sp, #12
   85542:	461c      	mov	r4, r3
   85544:	f3c3 550a 	ubfx	r5, r3, #20, #11
   85548:	4616      	mov	r6, r2
   8554a:	f7ff fd4f 	bl	84fec <_Balloc>
   8554e:	f3c4 0413 	ubfx	r4, r4, #0, #20
   85552:	4607      	mov	r7, r0
   85554:	b10d      	cbz	r5, 8555a <__d2b+0x1e>
   85556:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   8555a:	9401      	str	r4, [sp, #4]
   8555c:	b306      	cbz	r6, 855a0 <__d2b+0x64>
   8555e:	a802      	add	r0, sp, #8
   85560:	f840 6d08 	str.w	r6, [r0, #-8]!
   85564:	f7ff fdd4 	bl	85110 <__lo0bits>
   85568:	2800      	cmp	r0, #0
   8556a:	d130      	bne.n	855ce <__d2b+0x92>
   8556c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85570:	617a      	str	r2, [r7, #20]
   85572:	2b00      	cmp	r3, #0
   85574:	bf0c      	ite	eq
   85576:	2101      	moveq	r1, #1
   85578:	2102      	movne	r1, #2
   8557a:	61bb      	str	r3, [r7, #24]
   8557c:	6139      	str	r1, [r7, #16]
   8557e:	b9d5      	cbnz	r5, 855b6 <__d2b+0x7a>
   85580:	9a08      	ldr	r2, [sp, #32]
   85582:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   85586:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8558a:	6010      	str	r0, [r2, #0]
   8558c:	6918      	ldr	r0, [r3, #16]
   8558e:	f7ff fd9f 	bl	850d0 <__hi0bits>
   85592:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85594:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   85598:	6018      	str	r0, [r3, #0]
   8559a:	4638      	mov	r0, r7
   8559c:	b003      	add	sp, #12
   8559e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   855a0:	a801      	add	r0, sp, #4
   855a2:	f7ff fdb5 	bl	85110 <__lo0bits>
   855a6:	2201      	movs	r2, #1
   855a8:	9b01      	ldr	r3, [sp, #4]
   855aa:	4611      	mov	r1, r2
   855ac:	3020      	adds	r0, #32
   855ae:	613a      	str	r2, [r7, #16]
   855b0:	617b      	str	r3, [r7, #20]
   855b2:	2d00      	cmp	r5, #0
   855b4:	d0e4      	beq.n	85580 <__d2b+0x44>
   855b6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   855ba:	9a08      	ldr	r2, [sp, #32]
   855bc:	4403      	add	r3, r0
   855be:	6013      	str	r3, [r2, #0]
   855c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   855c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   855c6:	6018      	str	r0, [r3, #0]
   855c8:	4638      	mov	r0, r7
   855ca:	b003      	add	sp, #12
   855cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   855ce:	9b01      	ldr	r3, [sp, #4]
   855d0:	f1c0 0220 	rsb	r2, r0, #32
   855d4:	9900      	ldr	r1, [sp, #0]
   855d6:	fa03 f202 	lsl.w	r2, r3, r2
   855da:	430a      	orrs	r2, r1
   855dc:	40c3      	lsrs	r3, r0
   855de:	9301      	str	r3, [sp, #4]
   855e0:	617a      	str	r2, [r7, #20]
   855e2:	e7c6      	b.n	85572 <__d2b+0x36>

000855e4 <_realloc_r>:
   855e4:	2900      	cmp	r1, #0
   855e6:	f000 8094 	beq.w	85712 <_realloc_r+0x12e>
   855ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   855ee:	460c      	mov	r4, r1
   855f0:	4615      	mov	r5, r2
   855f2:	b083      	sub	sp, #12
   855f4:	4680      	mov	r8, r0
   855f6:	f105 060b 	add.w	r6, r5, #11
   855fa:	f7ff fceb 	bl	84fd4 <__malloc_lock>
   855fe:	f854 ec04 	ldr.w	lr, [r4, #-4]
   85602:	2e16      	cmp	r6, #22
   85604:	f02e 0703 	bic.w	r7, lr, #3
   85608:	f1a4 0908 	sub.w	r9, r4, #8
   8560c:	d83c      	bhi.n	85688 <_realloc_r+0xa4>
   8560e:	2210      	movs	r2, #16
   85610:	4616      	mov	r6, r2
   85612:	42b5      	cmp	r5, r6
   85614:	d83d      	bhi.n	85692 <_realloc_r+0xae>
   85616:	4297      	cmp	r7, r2
   85618:	da43      	bge.n	856a2 <_realloc_r+0xbe>
   8561a:	4bc6      	ldr	r3, [pc, #792]	; (85934 <_realloc_r+0x350>)
   8561c:	eb09 0007 	add.w	r0, r9, r7
   85620:	6899      	ldr	r1, [r3, #8]
   85622:	4288      	cmp	r0, r1
   85624:	f000 80c3 	beq.w	857ae <_realloc_r+0x1ca>
   85628:	6843      	ldr	r3, [r0, #4]
   8562a:	f023 0101 	bic.w	r1, r3, #1
   8562e:	4401      	add	r1, r0
   85630:	6849      	ldr	r1, [r1, #4]
   85632:	07c9      	lsls	r1, r1, #31
   85634:	d54d      	bpl.n	856d2 <_realloc_r+0xee>
   85636:	f01e 0f01 	tst.w	lr, #1
   8563a:	f000 809b 	beq.w	85774 <_realloc_r+0x190>
   8563e:	4629      	mov	r1, r5
   85640:	4640      	mov	r0, r8
   85642:	f7ff f965 	bl	84910 <_malloc_r>
   85646:	4605      	mov	r5, r0
   85648:	2800      	cmp	r0, #0
   8564a:	d03b      	beq.n	856c4 <_realloc_r+0xe0>
   8564c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85650:	f1a0 0208 	sub.w	r2, r0, #8
   85654:	f023 0301 	bic.w	r3, r3, #1
   85658:	444b      	add	r3, r9
   8565a:	429a      	cmp	r2, r3
   8565c:	f000 812b 	beq.w	858b6 <_realloc_r+0x2d2>
   85660:	1f3a      	subs	r2, r7, #4
   85662:	2a24      	cmp	r2, #36	; 0x24
   85664:	f200 8118 	bhi.w	85898 <_realloc_r+0x2b4>
   85668:	2a13      	cmp	r2, #19
   8566a:	f200 80eb 	bhi.w	85844 <_realloc_r+0x260>
   8566e:	4603      	mov	r3, r0
   85670:	4622      	mov	r2, r4
   85672:	6811      	ldr	r1, [r2, #0]
   85674:	6019      	str	r1, [r3, #0]
   85676:	6851      	ldr	r1, [r2, #4]
   85678:	6059      	str	r1, [r3, #4]
   8567a:	6892      	ldr	r2, [r2, #8]
   8567c:	609a      	str	r2, [r3, #8]
   8567e:	4621      	mov	r1, r4
   85680:	4640      	mov	r0, r8
   85682:	f7ff f84d 	bl	84720 <_free_r>
   85686:	e01d      	b.n	856c4 <_realloc_r+0xe0>
   85688:	f026 0607 	bic.w	r6, r6, #7
   8568c:	2e00      	cmp	r6, #0
   8568e:	4632      	mov	r2, r6
   85690:	dabf      	bge.n	85612 <_realloc_r+0x2e>
   85692:	2500      	movs	r5, #0
   85694:	230c      	movs	r3, #12
   85696:	4628      	mov	r0, r5
   85698:	f8c8 3000 	str.w	r3, [r8]
   8569c:	b003      	add	sp, #12
   8569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856a2:	4625      	mov	r5, r4
   856a4:	1bbb      	subs	r3, r7, r6
   856a6:	2b0f      	cmp	r3, #15
   856a8:	f8d9 2004 	ldr.w	r2, [r9, #4]
   856ac:	d81d      	bhi.n	856ea <_realloc_r+0x106>
   856ae:	f002 0201 	and.w	r2, r2, #1
   856b2:	433a      	orrs	r2, r7
   856b4:	eb09 0107 	add.w	r1, r9, r7
   856b8:	f8c9 2004 	str.w	r2, [r9, #4]
   856bc:	684b      	ldr	r3, [r1, #4]
   856be:	f043 0301 	orr.w	r3, r3, #1
   856c2:	604b      	str	r3, [r1, #4]
   856c4:	4640      	mov	r0, r8
   856c6:	f7ff fc8b 	bl	84fe0 <__malloc_unlock>
   856ca:	4628      	mov	r0, r5
   856cc:	b003      	add	sp, #12
   856ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856d2:	f023 0303 	bic.w	r3, r3, #3
   856d6:	18f9      	adds	r1, r7, r3
   856d8:	4291      	cmp	r1, r2
   856da:	db1d      	blt.n	85718 <_realloc_r+0x134>
   856dc:	68c3      	ldr	r3, [r0, #12]
   856de:	6882      	ldr	r2, [r0, #8]
   856e0:	4625      	mov	r5, r4
   856e2:	60d3      	str	r3, [r2, #12]
   856e4:	460f      	mov	r7, r1
   856e6:	609a      	str	r2, [r3, #8]
   856e8:	e7dc      	b.n	856a4 <_realloc_r+0xc0>
   856ea:	f002 0201 	and.w	r2, r2, #1
   856ee:	eb09 0106 	add.w	r1, r9, r6
   856f2:	f043 0301 	orr.w	r3, r3, #1
   856f6:	4332      	orrs	r2, r6
   856f8:	f8c9 2004 	str.w	r2, [r9, #4]
   856fc:	444f      	add	r7, r9
   856fe:	604b      	str	r3, [r1, #4]
   85700:	687b      	ldr	r3, [r7, #4]
   85702:	3108      	adds	r1, #8
   85704:	f043 0301 	orr.w	r3, r3, #1
   85708:	607b      	str	r3, [r7, #4]
   8570a:	4640      	mov	r0, r8
   8570c:	f7ff f808 	bl	84720 <_free_r>
   85710:	e7d8      	b.n	856c4 <_realloc_r+0xe0>
   85712:	4611      	mov	r1, r2
   85714:	f7ff b8fc 	b.w	84910 <_malloc_r>
   85718:	f01e 0f01 	tst.w	lr, #1
   8571c:	d18f      	bne.n	8563e <_realloc_r+0x5a>
   8571e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85722:	eba9 0a01 	sub.w	sl, r9, r1
   85726:	f8da 1004 	ldr.w	r1, [sl, #4]
   8572a:	f021 0103 	bic.w	r1, r1, #3
   8572e:	440b      	add	r3, r1
   85730:	443b      	add	r3, r7
   85732:	4293      	cmp	r3, r2
   85734:	db26      	blt.n	85784 <_realloc_r+0x1a0>
   85736:	4655      	mov	r5, sl
   85738:	68c1      	ldr	r1, [r0, #12]
   8573a:	6880      	ldr	r0, [r0, #8]
   8573c:	1f3a      	subs	r2, r7, #4
   8573e:	60c1      	str	r1, [r0, #12]
   85740:	6088      	str	r0, [r1, #8]
   85742:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85746:	f8da 100c 	ldr.w	r1, [sl, #12]
   8574a:	2a24      	cmp	r2, #36	; 0x24
   8574c:	60c1      	str	r1, [r0, #12]
   8574e:	6088      	str	r0, [r1, #8]
   85750:	d826      	bhi.n	857a0 <_realloc_r+0x1bc>
   85752:	2a13      	cmp	r2, #19
   85754:	f240 8081 	bls.w	8585a <_realloc_r+0x276>
   85758:	6821      	ldr	r1, [r4, #0]
   8575a:	2a1b      	cmp	r2, #27
   8575c:	f8ca 1008 	str.w	r1, [sl, #8]
   85760:	6861      	ldr	r1, [r4, #4]
   85762:	f8ca 100c 	str.w	r1, [sl, #12]
   85766:	f200 80ad 	bhi.w	858c4 <_realloc_r+0x2e0>
   8576a:	f104 0008 	add.w	r0, r4, #8
   8576e:	f10a 0210 	add.w	r2, sl, #16
   85772:	e074      	b.n	8585e <_realloc_r+0x27a>
   85774:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85778:	eba9 0a03 	sub.w	sl, r9, r3
   8577c:	f8da 1004 	ldr.w	r1, [sl, #4]
   85780:	f021 0103 	bic.w	r1, r1, #3
   85784:	187b      	adds	r3, r7, r1
   85786:	4293      	cmp	r3, r2
   85788:	f6ff af59 	blt.w	8563e <_realloc_r+0x5a>
   8578c:	4655      	mov	r5, sl
   8578e:	f8da 100c 	ldr.w	r1, [sl, #12]
   85792:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85796:	1f3a      	subs	r2, r7, #4
   85798:	2a24      	cmp	r2, #36	; 0x24
   8579a:	60c1      	str	r1, [r0, #12]
   8579c:	6088      	str	r0, [r1, #8]
   8579e:	d9d8      	bls.n	85752 <_realloc_r+0x16e>
   857a0:	4621      	mov	r1, r4
   857a2:	4628      	mov	r0, r5
   857a4:	461f      	mov	r7, r3
   857a6:	46d1      	mov	r9, sl
   857a8:	f7ff fbb0 	bl	84f0c <memmove>
   857ac:	e77a      	b.n	856a4 <_realloc_r+0xc0>
   857ae:	6841      	ldr	r1, [r0, #4]
   857b0:	f106 0010 	add.w	r0, r6, #16
   857b4:	f021 0b03 	bic.w	fp, r1, #3
   857b8:	44bb      	add	fp, r7
   857ba:	4583      	cmp	fp, r0
   857bc:	da58      	bge.n	85870 <_realloc_r+0x28c>
   857be:	f01e 0f01 	tst.w	lr, #1
   857c2:	f47f af3c 	bne.w	8563e <_realloc_r+0x5a>
   857c6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   857ca:	eba9 0a01 	sub.w	sl, r9, r1
   857ce:	f8da 1004 	ldr.w	r1, [sl, #4]
   857d2:	f021 0103 	bic.w	r1, r1, #3
   857d6:	448b      	add	fp, r1
   857d8:	4558      	cmp	r0, fp
   857da:	dcd3      	bgt.n	85784 <_realloc_r+0x1a0>
   857dc:	4655      	mov	r5, sl
   857de:	f8da 100c 	ldr.w	r1, [sl, #12]
   857e2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   857e6:	1f3a      	subs	r2, r7, #4
   857e8:	2a24      	cmp	r2, #36	; 0x24
   857ea:	60c1      	str	r1, [r0, #12]
   857ec:	6088      	str	r0, [r1, #8]
   857ee:	f200 808d 	bhi.w	8590c <_realloc_r+0x328>
   857f2:	2a13      	cmp	r2, #19
   857f4:	f240 8087 	bls.w	85906 <_realloc_r+0x322>
   857f8:	6821      	ldr	r1, [r4, #0]
   857fa:	2a1b      	cmp	r2, #27
   857fc:	f8ca 1008 	str.w	r1, [sl, #8]
   85800:	6861      	ldr	r1, [r4, #4]
   85802:	f8ca 100c 	str.w	r1, [sl, #12]
   85806:	f200 8088 	bhi.w	8591a <_realloc_r+0x336>
   8580a:	f104 0108 	add.w	r1, r4, #8
   8580e:	f10a 0210 	add.w	r2, sl, #16
   85812:	6808      	ldr	r0, [r1, #0]
   85814:	6010      	str	r0, [r2, #0]
   85816:	6848      	ldr	r0, [r1, #4]
   85818:	6050      	str	r0, [r2, #4]
   8581a:	6889      	ldr	r1, [r1, #8]
   8581c:	6091      	str	r1, [r2, #8]
   8581e:	ebab 0206 	sub.w	r2, fp, r6
   85822:	eb0a 0106 	add.w	r1, sl, r6
   85826:	f042 0201 	orr.w	r2, r2, #1
   8582a:	6099      	str	r1, [r3, #8]
   8582c:	604a      	str	r2, [r1, #4]
   8582e:	f8da 3004 	ldr.w	r3, [sl, #4]
   85832:	4640      	mov	r0, r8
   85834:	f003 0301 	and.w	r3, r3, #1
   85838:	431e      	orrs	r6, r3
   8583a:	f8ca 6004 	str.w	r6, [sl, #4]
   8583e:	f7ff fbcf 	bl	84fe0 <__malloc_unlock>
   85842:	e742      	b.n	856ca <_realloc_r+0xe6>
   85844:	6823      	ldr	r3, [r4, #0]
   85846:	2a1b      	cmp	r2, #27
   85848:	6003      	str	r3, [r0, #0]
   8584a:	6863      	ldr	r3, [r4, #4]
   8584c:	6043      	str	r3, [r0, #4]
   8584e:	d827      	bhi.n	858a0 <_realloc_r+0x2bc>
   85850:	f100 0308 	add.w	r3, r0, #8
   85854:	f104 0208 	add.w	r2, r4, #8
   85858:	e70b      	b.n	85672 <_realloc_r+0x8e>
   8585a:	4620      	mov	r0, r4
   8585c:	462a      	mov	r2, r5
   8585e:	6801      	ldr	r1, [r0, #0]
   85860:	461f      	mov	r7, r3
   85862:	6011      	str	r1, [r2, #0]
   85864:	6841      	ldr	r1, [r0, #4]
   85866:	46d1      	mov	r9, sl
   85868:	6051      	str	r1, [r2, #4]
   8586a:	6883      	ldr	r3, [r0, #8]
   8586c:	6093      	str	r3, [r2, #8]
   8586e:	e719      	b.n	856a4 <_realloc_r+0xc0>
   85870:	ebab 0b06 	sub.w	fp, fp, r6
   85874:	eb09 0106 	add.w	r1, r9, r6
   85878:	f04b 0201 	orr.w	r2, fp, #1
   8587c:	6099      	str	r1, [r3, #8]
   8587e:	604a      	str	r2, [r1, #4]
   85880:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85884:	4640      	mov	r0, r8
   85886:	f003 0301 	and.w	r3, r3, #1
   8588a:	431e      	orrs	r6, r3
   8588c:	f844 6c04 	str.w	r6, [r4, #-4]
   85890:	f7ff fba6 	bl	84fe0 <__malloc_unlock>
   85894:	4625      	mov	r5, r4
   85896:	e718      	b.n	856ca <_realloc_r+0xe6>
   85898:	4621      	mov	r1, r4
   8589a:	f7ff fb37 	bl	84f0c <memmove>
   8589e:	e6ee      	b.n	8567e <_realloc_r+0x9a>
   858a0:	68a3      	ldr	r3, [r4, #8]
   858a2:	2a24      	cmp	r2, #36	; 0x24
   858a4:	6083      	str	r3, [r0, #8]
   858a6:	68e3      	ldr	r3, [r4, #12]
   858a8:	60c3      	str	r3, [r0, #12]
   858aa:	d018      	beq.n	858de <_realloc_r+0x2fa>
   858ac:	f100 0310 	add.w	r3, r0, #16
   858b0:	f104 0210 	add.w	r2, r4, #16
   858b4:	e6dd      	b.n	85672 <_realloc_r+0x8e>
   858b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   858ba:	4625      	mov	r5, r4
   858bc:	f023 0303 	bic.w	r3, r3, #3
   858c0:	441f      	add	r7, r3
   858c2:	e6ef      	b.n	856a4 <_realloc_r+0xc0>
   858c4:	68a1      	ldr	r1, [r4, #8]
   858c6:	2a24      	cmp	r2, #36	; 0x24
   858c8:	f8ca 1010 	str.w	r1, [sl, #16]
   858cc:	68e1      	ldr	r1, [r4, #12]
   858ce:	f8ca 1014 	str.w	r1, [sl, #20]
   858d2:	d00d      	beq.n	858f0 <_realloc_r+0x30c>
   858d4:	f104 0010 	add.w	r0, r4, #16
   858d8:	f10a 0218 	add.w	r2, sl, #24
   858dc:	e7bf      	b.n	8585e <_realloc_r+0x27a>
   858de:	6922      	ldr	r2, [r4, #16]
   858e0:	f100 0318 	add.w	r3, r0, #24
   858e4:	6102      	str	r2, [r0, #16]
   858e6:	6961      	ldr	r1, [r4, #20]
   858e8:	f104 0218 	add.w	r2, r4, #24
   858ec:	6141      	str	r1, [r0, #20]
   858ee:	e6c0      	b.n	85672 <_realloc_r+0x8e>
   858f0:	6922      	ldr	r2, [r4, #16]
   858f2:	f104 0018 	add.w	r0, r4, #24
   858f6:	f8ca 2018 	str.w	r2, [sl, #24]
   858fa:	6961      	ldr	r1, [r4, #20]
   858fc:	f10a 0220 	add.w	r2, sl, #32
   85900:	f8ca 101c 	str.w	r1, [sl, #28]
   85904:	e7ab      	b.n	8585e <_realloc_r+0x27a>
   85906:	4621      	mov	r1, r4
   85908:	462a      	mov	r2, r5
   8590a:	e782      	b.n	85812 <_realloc_r+0x22e>
   8590c:	4621      	mov	r1, r4
   8590e:	4628      	mov	r0, r5
   85910:	9301      	str	r3, [sp, #4]
   85912:	f7ff fafb 	bl	84f0c <memmove>
   85916:	9b01      	ldr	r3, [sp, #4]
   85918:	e781      	b.n	8581e <_realloc_r+0x23a>
   8591a:	68a1      	ldr	r1, [r4, #8]
   8591c:	2a24      	cmp	r2, #36	; 0x24
   8591e:	f8ca 1010 	str.w	r1, [sl, #16]
   85922:	68e1      	ldr	r1, [r4, #12]
   85924:	f8ca 1014 	str.w	r1, [sl, #20]
   85928:	d006      	beq.n	85938 <_realloc_r+0x354>
   8592a:	f104 0110 	add.w	r1, r4, #16
   8592e:	f10a 0218 	add.w	r2, sl, #24
   85932:	e76e      	b.n	85812 <_realloc_r+0x22e>
   85934:	20070b60 	.word	0x20070b60
   85938:	6922      	ldr	r2, [r4, #16]
   8593a:	f104 0118 	add.w	r1, r4, #24
   8593e:	f8ca 2018 	str.w	r2, [sl, #24]
   85942:	6960      	ldr	r0, [r4, #20]
   85944:	f10a 0220 	add.w	r2, sl, #32
   85948:	f8ca 001c 	str.w	r0, [sl, #28]
   8594c:	e761      	b.n	85812 <_realloc_r+0x22e>
   8594e:	bf00      	nop

00085950 <_sbrk_r>:
   85950:	b538      	push	{r3, r4, r5, lr}
   85952:	2300      	movs	r3, #0
   85954:	4c06      	ldr	r4, [pc, #24]	; (85970 <_sbrk_r+0x20>)
   85956:	4605      	mov	r5, r0
   85958:	4608      	mov	r0, r1
   8595a:	6023      	str	r3, [r4, #0]
   8595c:	f7fb fe8a 	bl	81674 <_sbrk>
   85960:	1c43      	adds	r3, r0, #1
   85962:	d000      	beq.n	85966 <_sbrk_r+0x16>
   85964:	bd38      	pop	{r3, r4, r5, pc}
   85966:	6823      	ldr	r3, [r4, #0]
   85968:	2b00      	cmp	r3, #0
   8596a:	d0fb      	beq.n	85964 <_sbrk_r+0x14>
   8596c:	602b      	str	r3, [r5, #0]
   8596e:	bd38      	pop	{r3, r4, r5, pc}
   85970:	200711d4 	.word	0x200711d4

00085974 <__ssprint_r>:
   85974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85978:	6893      	ldr	r3, [r2, #8]
   8597a:	b083      	sub	sp, #12
   8597c:	4690      	mov	r8, r2
   8597e:	2b00      	cmp	r3, #0
   85980:	d070      	beq.n	85a64 <__ssprint_r+0xf0>
   85982:	4682      	mov	sl, r0
   85984:	460c      	mov	r4, r1
   85986:	6817      	ldr	r7, [r2, #0]
   85988:	688d      	ldr	r5, [r1, #8]
   8598a:	6808      	ldr	r0, [r1, #0]
   8598c:	e042      	b.n	85a14 <__ssprint_r+0xa0>
   8598e:	89a3      	ldrh	r3, [r4, #12]
   85990:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85994:	d02e      	beq.n	859f4 <__ssprint_r+0x80>
   85996:	6965      	ldr	r5, [r4, #20]
   85998:	6921      	ldr	r1, [r4, #16]
   8599a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8599e:	eba0 0b01 	sub.w	fp, r0, r1
   859a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   859a6:	f10b 0001 	add.w	r0, fp, #1
   859aa:	106d      	asrs	r5, r5, #1
   859ac:	4430      	add	r0, r6
   859ae:	42a8      	cmp	r0, r5
   859b0:	462a      	mov	r2, r5
   859b2:	bf84      	itt	hi
   859b4:	4605      	movhi	r5, r0
   859b6:	462a      	movhi	r2, r5
   859b8:	055b      	lsls	r3, r3, #21
   859ba:	d538      	bpl.n	85a2e <__ssprint_r+0xba>
   859bc:	4611      	mov	r1, r2
   859be:	4650      	mov	r0, sl
   859c0:	f7fe ffa6 	bl	84910 <_malloc_r>
   859c4:	2800      	cmp	r0, #0
   859c6:	d03c      	beq.n	85a42 <__ssprint_r+0xce>
   859c8:	465a      	mov	r2, fp
   859ca:	6921      	ldr	r1, [r4, #16]
   859cc:	9001      	str	r0, [sp, #4]
   859ce:	f7fc fadf 	bl	81f90 <memcpy>
   859d2:	89a2      	ldrh	r2, [r4, #12]
   859d4:	9b01      	ldr	r3, [sp, #4]
   859d6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   859da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   859de:	81a2      	strh	r2, [r4, #12]
   859e0:	eba5 020b 	sub.w	r2, r5, fp
   859e4:	eb03 000b 	add.w	r0, r3, fp
   859e8:	6165      	str	r5, [r4, #20]
   859ea:	46b3      	mov	fp, r6
   859ec:	4635      	mov	r5, r6
   859ee:	6123      	str	r3, [r4, #16]
   859f0:	6020      	str	r0, [r4, #0]
   859f2:	60a2      	str	r2, [r4, #8]
   859f4:	465a      	mov	r2, fp
   859f6:	4649      	mov	r1, r9
   859f8:	f7ff fa88 	bl	84f0c <memmove>
   859fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   85a00:	68a2      	ldr	r2, [r4, #8]
   85a02:	6820      	ldr	r0, [r4, #0]
   85a04:	1b55      	subs	r5, r2, r5
   85a06:	4458      	add	r0, fp
   85a08:	1b9e      	subs	r6, r3, r6
   85a0a:	60a5      	str	r5, [r4, #8]
   85a0c:	6020      	str	r0, [r4, #0]
   85a0e:	f8c8 6008 	str.w	r6, [r8, #8]
   85a12:	b33e      	cbz	r6, 85a64 <__ssprint_r+0xf0>
   85a14:	687e      	ldr	r6, [r7, #4]
   85a16:	463b      	mov	r3, r7
   85a18:	3708      	adds	r7, #8
   85a1a:	2e00      	cmp	r6, #0
   85a1c:	d0fa      	beq.n	85a14 <__ssprint_r+0xa0>
   85a1e:	42ae      	cmp	r6, r5
   85a20:	f8d3 9000 	ldr.w	r9, [r3]
   85a24:	46ab      	mov	fp, r5
   85a26:	d2b2      	bcs.n	8598e <__ssprint_r+0x1a>
   85a28:	4635      	mov	r5, r6
   85a2a:	46b3      	mov	fp, r6
   85a2c:	e7e2      	b.n	859f4 <__ssprint_r+0x80>
   85a2e:	4650      	mov	r0, sl
   85a30:	f7ff fdd8 	bl	855e4 <_realloc_r>
   85a34:	4603      	mov	r3, r0
   85a36:	2800      	cmp	r0, #0
   85a38:	d1d2      	bne.n	859e0 <__ssprint_r+0x6c>
   85a3a:	6921      	ldr	r1, [r4, #16]
   85a3c:	4650      	mov	r0, sl
   85a3e:	f7fe fe6f 	bl	84720 <_free_r>
   85a42:	230c      	movs	r3, #12
   85a44:	2200      	movs	r2, #0
   85a46:	f04f 30ff 	mov.w	r0, #4294967295
   85a4a:	f8ca 3000 	str.w	r3, [sl]
   85a4e:	89a3      	ldrh	r3, [r4, #12]
   85a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85a54:	81a3      	strh	r3, [r4, #12]
   85a56:	f8c8 2008 	str.w	r2, [r8, #8]
   85a5a:	f8c8 2004 	str.w	r2, [r8, #4]
   85a5e:	b003      	add	sp, #12
   85a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a64:	2000      	movs	r0, #0
   85a66:	f8c8 0004 	str.w	r0, [r8, #4]
   85a6a:	b003      	add	sp, #12
   85a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085a70 <__ascii_wctomb>:
   85a70:	b119      	cbz	r1, 85a7a <__ascii_wctomb+0xa>
   85a72:	2aff      	cmp	r2, #255	; 0xff
   85a74:	d803      	bhi.n	85a7e <__ascii_wctomb+0xe>
   85a76:	700a      	strb	r2, [r1, #0]
   85a78:	2101      	movs	r1, #1
   85a7a:	4608      	mov	r0, r1
   85a7c:	4770      	bx	lr
   85a7e:	238a      	movs	r3, #138	; 0x8a
   85a80:	f04f 31ff 	mov.w	r1, #4294967295
   85a84:	6003      	str	r3, [r0, #0]
   85a86:	e7f8      	b.n	85a7a <__ascii_wctomb+0xa>

00085a88 <__register_exitproc>:
   85a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85a8c:	4d2c      	ldr	r5, [pc, #176]	; (85b40 <__register_exitproc+0xb8>)
   85a8e:	4606      	mov	r6, r0
   85a90:	6828      	ldr	r0, [r5, #0]
   85a92:	4698      	mov	r8, r3
   85a94:	460f      	mov	r7, r1
   85a96:	4691      	mov	r9, r2
   85a98:	f7fe ff36 	bl	84908 <__retarget_lock_acquire_recursive>
   85a9c:	4b29      	ldr	r3, [pc, #164]	; (85b44 <__register_exitproc+0xbc>)
   85a9e:	681c      	ldr	r4, [r3, #0]
   85aa0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85aa4:	2b00      	cmp	r3, #0
   85aa6:	d03e      	beq.n	85b26 <__register_exitproc+0x9e>
   85aa8:	685a      	ldr	r2, [r3, #4]
   85aaa:	2a1f      	cmp	r2, #31
   85aac:	dc1c      	bgt.n	85ae8 <__register_exitproc+0x60>
   85aae:	f102 0e01 	add.w	lr, r2, #1
   85ab2:	b176      	cbz	r6, 85ad2 <__register_exitproc+0x4a>
   85ab4:	2101      	movs	r1, #1
   85ab6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   85aba:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85abe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85ac2:	4091      	lsls	r1, r2
   85ac4:	4308      	orrs	r0, r1
   85ac6:	2e02      	cmp	r6, #2
   85ac8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85acc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85ad0:	d023      	beq.n	85b1a <__register_exitproc+0x92>
   85ad2:	3202      	adds	r2, #2
   85ad4:	f8c3 e004 	str.w	lr, [r3, #4]
   85ad8:	6828      	ldr	r0, [r5, #0]
   85ada:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85ade:	f7fe ff15 	bl	8490c <__retarget_lock_release_recursive>
   85ae2:	2000      	movs	r0, #0
   85ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85ae8:	4b17      	ldr	r3, [pc, #92]	; (85b48 <__register_exitproc+0xc0>)
   85aea:	b30b      	cbz	r3, 85b30 <__register_exitproc+0xa8>
   85aec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85af0:	f3af 8000 	nop.w
   85af4:	4603      	mov	r3, r0
   85af6:	b1d8      	cbz	r0, 85b30 <__register_exitproc+0xa8>
   85af8:	2000      	movs	r0, #0
   85afa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85afe:	f04f 0e01 	mov.w	lr, #1
   85b02:	6058      	str	r0, [r3, #4]
   85b04:	6019      	str	r1, [r3, #0]
   85b06:	4602      	mov	r2, r0
   85b08:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85b0c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85b10:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85b14:	2e00      	cmp	r6, #0
   85b16:	d0dc      	beq.n	85ad2 <__register_exitproc+0x4a>
   85b18:	e7cc      	b.n	85ab4 <__register_exitproc+0x2c>
   85b1a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   85b1e:	4301      	orrs	r1, r0
   85b20:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85b24:	e7d5      	b.n	85ad2 <__register_exitproc+0x4a>
   85b26:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   85b2a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85b2e:	e7bb      	b.n	85aa8 <__register_exitproc+0x20>
   85b30:	6828      	ldr	r0, [r5, #0]
   85b32:	f7fe feeb 	bl	8490c <__retarget_lock_release_recursive>
   85b36:	f04f 30ff 	mov.w	r0, #4294967295
   85b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85b3e:	bf00      	nop
   85b40:	200709f0 	.word	0x200709f0
   85b44:	0008689c 	.word	0x0008689c
   85b48:	00000000 	.word	0x00000000

00085b4c <_calloc_r>:
   85b4c:	b510      	push	{r4, lr}
   85b4e:	fb02 f101 	mul.w	r1, r2, r1
   85b52:	f7fe fedd 	bl	84910 <_malloc_r>
   85b56:	4604      	mov	r4, r0
   85b58:	b1d8      	cbz	r0, 85b92 <_calloc_r+0x46>
   85b5a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   85b5e:	f022 0203 	bic.w	r2, r2, #3
   85b62:	3a04      	subs	r2, #4
   85b64:	2a24      	cmp	r2, #36	; 0x24
   85b66:	d818      	bhi.n	85b9a <_calloc_r+0x4e>
   85b68:	2a13      	cmp	r2, #19
   85b6a:	d914      	bls.n	85b96 <_calloc_r+0x4a>
   85b6c:	2300      	movs	r3, #0
   85b6e:	2a1b      	cmp	r2, #27
   85b70:	6003      	str	r3, [r0, #0]
   85b72:	6043      	str	r3, [r0, #4]
   85b74:	d916      	bls.n	85ba4 <_calloc_r+0x58>
   85b76:	2a24      	cmp	r2, #36	; 0x24
   85b78:	6083      	str	r3, [r0, #8]
   85b7a:	60c3      	str	r3, [r0, #12]
   85b7c:	bf11      	iteee	ne
   85b7e:	f100 0210 	addne.w	r2, r0, #16
   85b82:	6103      	streq	r3, [r0, #16]
   85b84:	6143      	streq	r3, [r0, #20]
   85b86:	f100 0218 	addeq.w	r2, r0, #24
   85b8a:	2300      	movs	r3, #0
   85b8c:	6013      	str	r3, [r2, #0]
   85b8e:	6053      	str	r3, [r2, #4]
   85b90:	6093      	str	r3, [r2, #8]
   85b92:	4620      	mov	r0, r4
   85b94:	bd10      	pop	{r4, pc}
   85b96:	4602      	mov	r2, r0
   85b98:	e7f7      	b.n	85b8a <_calloc_r+0x3e>
   85b9a:	2100      	movs	r1, #0
   85b9c:	f7fc fa6e 	bl	8207c <memset>
   85ba0:	4620      	mov	r0, r4
   85ba2:	bd10      	pop	{r4, pc}
   85ba4:	f100 0208 	add.w	r2, r0, #8
   85ba8:	e7ef      	b.n	85b8a <_calloc_r+0x3e>
   85baa:	bf00      	nop

00085bac <__aeabi_drsub>:
   85bac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   85bb0:	e002      	b.n	85bb8 <__adddf3>
   85bb2:	bf00      	nop

00085bb4 <__aeabi_dsub>:
   85bb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085bb8 <__adddf3>:
   85bb8:	b530      	push	{r4, r5, lr}
   85bba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85bbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   85bc2:	ea94 0f05 	teq	r4, r5
   85bc6:	bf08      	it	eq
   85bc8:	ea90 0f02 	teqeq	r0, r2
   85bcc:	bf1f      	itttt	ne
   85bce:	ea54 0c00 	orrsne.w	ip, r4, r0
   85bd2:	ea55 0c02 	orrsne.w	ip, r5, r2
   85bd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   85bda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85bde:	f000 80e2 	beq.w	85da6 <__adddf3+0x1ee>
   85be2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   85be6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   85bea:	bfb8      	it	lt
   85bec:	426d      	neglt	r5, r5
   85bee:	dd0c      	ble.n	85c0a <__adddf3+0x52>
   85bf0:	442c      	add	r4, r5
   85bf2:	ea80 0202 	eor.w	r2, r0, r2
   85bf6:	ea81 0303 	eor.w	r3, r1, r3
   85bfa:	ea82 0000 	eor.w	r0, r2, r0
   85bfe:	ea83 0101 	eor.w	r1, r3, r1
   85c02:	ea80 0202 	eor.w	r2, r0, r2
   85c06:	ea81 0303 	eor.w	r3, r1, r3
   85c0a:	2d36      	cmp	r5, #54	; 0x36
   85c0c:	bf88      	it	hi
   85c0e:	bd30      	pophi	{r4, r5, pc}
   85c10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85c14:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85c18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   85c1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85c20:	d002      	beq.n	85c28 <__adddf3+0x70>
   85c22:	4240      	negs	r0, r0
   85c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85c28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   85c2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85c30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   85c34:	d002      	beq.n	85c3c <__adddf3+0x84>
   85c36:	4252      	negs	r2, r2
   85c38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85c3c:	ea94 0f05 	teq	r4, r5
   85c40:	f000 80a7 	beq.w	85d92 <__adddf3+0x1da>
   85c44:	f1a4 0401 	sub.w	r4, r4, #1
   85c48:	f1d5 0e20 	rsbs	lr, r5, #32
   85c4c:	db0d      	blt.n	85c6a <__adddf3+0xb2>
   85c4e:	fa02 fc0e 	lsl.w	ip, r2, lr
   85c52:	fa22 f205 	lsr.w	r2, r2, r5
   85c56:	1880      	adds	r0, r0, r2
   85c58:	f141 0100 	adc.w	r1, r1, #0
   85c5c:	fa03 f20e 	lsl.w	r2, r3, lr
   85c60:	1880      	adds	r0, r0, r2
   85c62:	fa43 f305 	asr.w	r3, r3, r5
   85c66:	4159      	adcs	r1, r3
   85c68:	e00e      	b.n	85c88 <__adddf3+0xd0>
   85c6a:	f1a5 0520 	sub.w	r5, r5, #32
   85c6e:	f10e 0e20 	add.w	lr, lr, #32
   85c72:	2a01      	cmp	r2, #1
   85c74:	fa03 fc0e 	lsl.w	ip, r3, lr
   85c78:	bf28      	it	cs
   85c7a:	f04c 0c02 	orrcs.w	ip, ip, #2
   85c7e:	fa43 f305 	asr.w	r3, r3, r5
   85c82:	18c0      	adds	r0, r0, r3
   85c84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   85c88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85c8c:	d507      	bpl.n	85c9e <__adddf3+0xe6>
   85c8e:	f04f 0e00 	mov.w	lr, #0
   85c92:	f1dc 0c00 	rsbs	ip, ip, #0
   85c96:	eb7e 0000 	sbcs.w	r0, lr, r0
   85c9a:	eb6e 0101 	sbc.w	r1, lr, r1
   85c9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   85ca2:	d31b      	bcc.n	85cdc <__adddf3+0x124>
   85ca4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   85ca8:	d30c      	bcc.n	85cc4 <__adddf3+0x10c>
   85caa:	0849      	lsrs	r1, r1, #1
   85cac:	ea5f 0030 	movs.w	r0, r0, rrx
   85cb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   85cb4:	f104 0401 	add.w	r4, r4, #1
   85cb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   85cbc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   85cc0:	f080 809a 	bcs.w	85df8 <__adddf3+0x240>
   85cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85cc8:	bf08      	it	eq
   85cca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85cce:	f150 0000 	adcs.w	r0, r0, #0
   85cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85cd6:	ea41 0105 	orr.w	r1, r1, r5
   85cda:	bd30      	pop	{r4, r5, pc}
   85cdc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   85ce0:	4140      	adcs	r0, r0
   85ce2:	eb41 0101 	adc.w	r1, r1, r1
   85ce6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85cea:	f1a4 0401 	sub.w	r4, r4, #1
   85cee:	d1e9      	bne.n	85cc4 <__adddf3+0x10c>
   85cf0:	f091 0f00 	teq	r1, #0
   85cf4:	bf04      	itt	eq
   85cf6:	4601      	moveq	r1, r0
   85cf8:	2000      	moveq	r0, #0
   85cfa:	fab1 f381 	clz	r3, r1
   85cfe:	bf08      	it	eq
   85d00:	3320      	addeq	r3, #32
   85d02:	f1a3 030b 	sub.w	r3, r3, #11
   85d06:	f1b3 0220 	subs.w	r2, r3, #32
   85d0a:	da0c      	bge.n	85d26 <__adddf3+0x16e>
   85d0c:	320c      	adds	r2, #12
   85d0e:	dd08      	ble.n	85d22 <__adddf3+0x16a>
   85d10:	f102 0c14 	add.w	ip, r2, #20
   85d14:	f1c2 020c 	rsb	r2, r2, #12
   85d18:	fa01 f00c 	lsl.w	r0, r1, ip
   85d1c:	fa21 f102 	lsr.w	r1, r1, r2
   85d20:	e00c      	b.n	85d3c <__adddf3+0x184>
   85d22:	f102 0214 	add.w	r2, r2, #20
   85d26:	bfd8      	it	le
   85d28:	f1c2 0c20 	rsble	ip, r2, #32
   85d2c:	fa01 f102 	lsl.w	r1, r1, r2
   85d30:	fa20 fc0c 	lsr.w	ip, r0, ip
   85d34:	bfdc      	itt	le
   85d36:	ea41 010c 	orrle.w	r1, r1, ip
   85d3a:	4090      	lslle	r0, r2
   85d3c:	1ae4      	subs	r4, r4, r3
   85d3e:	bfa2      	ittt	ge
   85d40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   85d44:	4329      	orrge	r1, r5
   85d46:	bd30      	popge	{r4, r5, pc}
   85d48:	ea6f 0404 	mvn.w	r4, r4
   85d4c:	3c1f      	subs	r4, #31
   85d4e:	da1c      	bge.n	85d8a <__adddf3+0x1d2>
   85d50:	340c      	adds	r4, #12
   85d52:	dc0e      	bgt.n	85d72 <__adddf3+0x1ba>
   85d54:	f104 0414 	add.w	r4, r4, #20
   85d58:	f1c4 0220 	rsb	r2, r4, #32
   85d5c:	fa20 f004 	lsr.w	r0, r0, r4
   85d60:	fa01 f302 	lsl.w	r3, r1, r2
   85d64:	ea40 0003 	orr.w	r0, r0, r3
   85d68:	fa21 f304 	lsr.w	r3, r1, r4
   85d6c:	ea45 0103 	orr.w	r1, r5, r3
   85d70:	bd30      	pop	{r4, r5, pc}
   85d72:	f1c4 040c 	rsb	r4, r4, #12
   85d76:	f1c4 0220 	rsb	r2, r4, #32
   85d7a:	fa20 f002 	lsr.w	r0, r0, r2
   85d7e:	fa01 f304 	lsl.w	r3, r1, r4
   85d82:	ea40 0003 	orr.w	r0, r0, r3
   85d86:	4629      	mov	r1, r5
   85d88:	bd30      	pop	{r4, r5, pc}
   85d8a:	fa21 f004 	lsr.w	r0, r1, r4
   85d8e:	4629      	mov	r1, r5
   85d90:	bd30      	pop	{r4, r5, pc}
   85d92:	f094 0f00 	teq	r4, #0
   85d96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   85d9a:	bf06      	itte	eq
   85d9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   85da0:	3401      	addeq	r4, #1
   85da2:	3d01      	subne	r5, #1
   85da4:	e74e      	b.n	85c44 <__adddf3+0x8c>
   85da6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85daa:	bf18      	it	ne
   85dac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85db0:	d029      	beq.n	85e06 <__adddf3+0x24e>
   85db2:	ea94 0f05 	teq	r4, r5
   85db6:	bf08      	it	eq
   85db8:	ea90 0f02 	teqeq	r0, r2
   85dbc:	d005      	beq.n	85dca <__adddf3+0x212>
   85dbe:	ea54 0c00 	orrs.w	ip, r4, r0
   85dc2:	bf04      	itt	eq
   85dc4:	4619      	moveq	r1, r3
   85dc6:	4610      	moveq	r0, r2
   85dc8:	bd30      	pop	{r4, r5, pc}
   85dca:	ea91 0f03 	teq	r1, r3
   85dce:	bf1e      	ittt	ne
   85dd0:	2100      	movne	r1, #0
   85dd2:	2000      	movne	r0, #0
   85dd4:	bd30      	popne	{r4, r5, pc}
   85dd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   85dda:	d105      	bne.n	85de8 <__adddf3+0x230>
   85ddc:	0040      	lsls	r0, r0, #1
   85dde:	4149      	adcs	r1, r1
   85de0:	bf28      	it	cs
   85de2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   85de6:	bd30      	pop	{r4, r5, pc}
   85de8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   85dec:	bf3c      	itt	cc
   85dee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   85df2:	bd30      	popcc	{r4, r5, pc}
   85df4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85df8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   85dfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85e00:	f04f 0000 	mov.w	r0, #0
   85e04:	bd30      	pop	{r4, r5, pc}
   85e06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85e0a:	bf1a      	itte	ne
   85e0c:	4619      	movne	r1, r3
   85e0e:	4610      	movne	r0, r2
   85e10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   85e14:	bf1c      	itt	ne
   85e16:	460b      	movne	r3, r1
   85e18:	4602      	movne	r2, r0
   85e1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85e1e:	bf06      	itte	eq
   85e20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   85e24:	ea91 0f03 	teqeq	r1, r3
   85e28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   85e2c:	bd30      	pop	{r4, r5, pc}
   85e2e:	bf00      	nop

00085e30 <__aeabi_ui2d>:
   85e30:	f090 0f00 	teq	r0, #0
   85e34:	bf04      	itt	eq
   85e36:	2100      	moveq	r1, #0
   85e38:	4770      	bxeq	lr
   85e3a:	b530      	push	{r4, r5, lr}
   85e3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85e40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85e44:	f04f 0500 	mov.w	r5, #0
   85e48:	f04f 0100 	mov.w	r1, #0
   85e4c:	e750      	b.n	85cf0 <__adddf3+0x138>
   85e4e:	bf00      	nop

00085e50 <__aeabi_i2d>:
   85e50:	f090 0f00 	teq	r0, #0
   85e54:	bf04      	itt	eq
   85e56:	2100      	moveq	r1, #0
   85e58:	4770      	bxeq	lr
   85e5a:	b530      	push	{r4, r5, lr}
   85e5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85e60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85e64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   85e68:	bf48      	it	mi
   85e6a:	4240      	negmi	r0, r0
   85e6c:	f04f 0100 	mov.w	r1, #0
   85e70:	e73e      	b.n	85cf0 <__adddf3+0x138>
   85e72:	bf00      	nop

00085e74 <__aeabi_f2d>:
   85e74:	0042      	lsls	r2, r0, #1
   85e76:	ea4f 01e2 	mov.w	r1, r2, asr #3
   85e7a:	ea4f 0131 	mov.w	r1, r1, rrx
   85e7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   85e82:	bf1f      	itttt	ne
   85e84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   85e88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85e8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   85e90:	4770      	bxne	lr
   85e92:	f092 0f00 	teq	r2, #0
   85e96:	bf14      	ite	ne
   85e98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85e9c:	4770      	bxeq	lr
   85e9e:	b530      	push	{r4, r5, lr}
   85ea0:	f44f 7460 	mov.w	r4, #896	; 0x380
   85ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85eac:	e720      	b.n	85cf0 <__adddf3+0x138>
   85eae:	bf00      	nop

00085eb0 <__aeabi_ul2d>:
   85eb0:	ea50 0201 	orrs.w	r2, r0, r1
   85eb4:	bf08      	it	eq
   85eb6:	4770      	bxeq	lr
   85eb8:	b530      	push	{r4, r5, lr}
   85eba:	f04f 0500 	mov.w	r5, #0
   85ebe:	e00a      	b.n	85ed6 <__aeabi_l2d+0x16>

00085ec0 <__aeabi_l2d>:
   85ec0:	ea50 0201 	orrs.w	r2, r0, r1
   85ec4:	bf08      	it	eq
   85ec6:	4770      	bxeq	lr
   85ec8:	b530      	push	{r4, r5, lr}
   85eca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   85ece:	d502      	bpl.n	85ed6 <__aeabi_l2d+0x16>
   85ed0:	4240      	negs	r0, r0
   85ed2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85ed6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85eda:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85ede:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   85ee2:	f43f aedc 	beq.w	85c9e <__adddf3+0xe6>
   85ee6:	f04f 0203 	mov.w	r2, #3
   85eea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85eee:	bf18      	it	ne
   85ef0:	3203      	addne	r2, #3
   85ef2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85ef6:	bf18      	it	ne
   85ef8:	3203      	addne	r2, #3
   85efa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   85efe:	f1c2 0320 	rsb	r3, r2, #32
   85f02:	fa00 fc03 	lsl.w	ip, r0, r3
   85f06:	fa20 f002 	lsr.w	r0, r0, r2
   85f0a:	fa01 fe03 	lsl.w	lr, r1, r3
   85f0e:	ea40 000e 	orr.w	r0, r0, lr
   85f12:	fa21 f102 	lsr.w	r1, r1, r2
   85f16:	4414      	add	r4, r2
   85f18:	e6c1      	b.n	85c9e <__adddf3+0xe6>
   85f1a:	bf00      	nop

00085f1c <__aeabi_dmul>:
   85f1c:	b570      	push	{r4, r5, r6, lr}
   85f1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85f22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   85f26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   85f2a:	bf1d      	ittte	ne
   85f2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   85f30:	ea94 0f0c 	teqne	r4, ip
   85f34:	ea95 0f0c 	teqne	r5, ip
   85f38:	f000 f8de 	bleq	860f8 <__aeabi_dmul+0x1dc>
   85f3c:	442c      	add	r4, r5
   85f3e:	ea81 0603 	eor.w	r6, r1, r3
   85f42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   85f46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   85f4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   85f4e:	bf18      	it	ne
   85f50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   85f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85f58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   85f5c:	d038      	beq.n	85fd0 <__aeabi_dmul+0xb4>
   85f5e:	fba0 ce02 	umull	ip, lr, r0, r2
   85f62:	f04f 0500 	mov.w	r5, #0
   85f66:	fbe1 e502 	umlal	lr, r5, r1, r2
   85f6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   85f6e:	fbe0 e503 	umlal	lr, r5, r0, r3
   85f72:	f04f 0600 	mov.w	r6, #0
   85f76:	fbe1 5603 	umlal	r5, r6, r1, r3
   85f7a:	f09c 0f00 	teq	ip, #0
   85f7e:	bf18      	it	ne
   85f80:	f04e 0e01 	orrne.w	lr, lr, #1
   85f84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   85f88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   85f8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   85f90:	d204      	bcs.n	85f9c <__aeabi_dmul+0x80>
   85f92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   85f96:	416d      	adcs	r5, r5
   85f98:	eb46 0606 	adc.w	r6, r6, r6
   85f9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   85fa0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   85fa4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   85fa8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   85fac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   85fb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   85fb4:	bf88      	it	hi
   85fb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   85fba:	d81e      	bhi.n	85ffa <__aeabi_dmul+0xde>
   85fbc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   85fc0:	bf08      	it	eq
   85fc2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   85fc6:	f150 0000 	adcs.w	r0, r0, #0
   85fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85fce:	bd70      	pop	{r4, r5, r6, pc}
   85fd0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   85fd4:	ea46 0101 	orr.w	r1, r6, r1
   85fd8:	ea40 0002 	orr.w	r0, r0, r2
   85fdc:	ea81 0103 	eor.w	r1, r1, r3
   85fe0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   85fe4:	bfc2      	ittt	gt
   85fe6:	ebd4 050c 	rsbsgt	r5, r4, ip
   85fea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85fee:	bd70      	popgt	{r4, r5, r6, pc}
   85ff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85ff4:	f04f 0e00 	mov.w	lr, #0
   85ff8:	3c01      	subs	r4, #1
   85ffa:	f300 80ab 	bgt.w	86154 <__aeabi_dmul+0x238>
   85ffe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   86002:	bfde      	ittt	le
   86004:	2000      	movle	r0, #0
   86006:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8600a:	bd70      	pople	{r4, r5, r6, pc}
   8600c:	f1c4 0400 	rsb	r4, r4, #0
   86010:	3c20      	subs	r4, #32
   86012:	da35      	bge.n	86080 <__aeabi_dmul+0x164>
   86014:	340c      	adds	r4, #12
   86016:	dc1b      	bgt.n	86050 <__aeabi_dmul+0x134>
   86018:	f104 0414 	add.w	r4, r4, #20
   8601c:	f1c4 0520 	rsb	r5, r4, #32
   86020:	fa00 f305 	lsl.w	r3, r0, r5
   86024:	fa20 f004 	lsr.w	r0, r0, r4
   86028:	fa01 f205 	lsl.w	r2, r1, r5
   8602c:	ea40 0002 	orr.w	r0, r0, r2
   86030:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   86034:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   86038:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8603c:	fa21 f604 	lsr.w	r6, r1, r4
   86040:	eb42 0106 	adc.w	r1, r2, r6
   86044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86048:	bf08      	it	eq
   8604a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8604e:	bd70      	pop	{r4, r5, r6, pc}
   86050:	f1c4 040c 	rsb	r4, r4, #12
   86054:	f1c4 0520 	rsb	r5, r4, #32
   86058:	fa00 f304 	lsl.w	r3, r0, r4
   8605c:	fa20 f005 	lsr.w	r0, r0, r5
   86060:	fa01 f204 	lsl.w	r2, r1, r4
   86064:	ea40 0002 	orr.w	r0, r0, r2
   86068:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8606c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   86070:	f141 0100 	adc.w	r1, r1, #0
   86074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86078:	bf08      	it	eq
   8607a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8607e:	bd70      	pop	{r4, r5, r6, pc}
   86080:	f1c4 0520 	rsb	r5, r4, #32
   86084:	fa00 f205 	lsl.w	r2, r0, r5
   86088:	ea4e 0e02 	orr.w	lr, lr, r2
   8608c:	fa20 f304 	lsr.w	r3, r0, r4
   86090:	fa01 f205 	lsl.w	r2, r1, r5
   86094:	ea43 0302 	orr.w	r3, r3, r2
   86098:	fa21 f004 	lsr.w	r0, r1, r4
   8609c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   860a0:	fa21 f204 	lsr.w	r2, r1, r4
   860a4:	ea20 0002 	bic.w	r0, r0, r2
   860a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   860ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   860b0:	bf08      	it	eq
   860b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   860b6:	bd70      	pop	{r4, r5, r6, pc}
   860b8:	f094 0f00 	teq	r4, #0
   860bc:	d10f      	bne.n	860de <__aeabi_dmul+0x1c2>
   860be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   860c2:	0040      	lsls	r0, r0, #1
   860c4:	eb41 0101 	adc.w	r1, r1, r1
   860c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   860cc:	bf08      	it	eq
   860ce:	3c01      	subeq	r4, #1
   860d0:	d0f7      	beq.n	860c2 <__aeabi_dmul+0x1a6>
   860d2:	ea41 0106 	orr.w	r1, r1, r6
   860d6:	f095 0f00 	teq	r5, #0
   860da:	bf18      	it	ne
   860dc:	4770      	bxne	lr
   860de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   860e2:	0052      	lsls	r2, r2, #1
   860e4:	eb43 0303 	adc.w	r3, r3, r3
   860e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   860ec:	bf08      	it	eq
   860ee:	3d01      	subeq	r5, #1
   860f0:	d0f7      	beq.n	860e2 <__aeabi_dmul+0x1c6>
   860f2:	ea43 0306 	orr.w	r3, r3, r6
   860f6:	4770      	bx	lr
   860f8:	ea94 0f0c 	teq	r4, ip
   860fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   86100:	bf18      	it	ne
   86102:	ea95 0f0c 	teqne	r5, ip
   86106:	d00c      	beq.n	86122 <__aeabi_dmul+0x206>
   86108:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8610c:	bf18      	it	ne
   8610e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   86112:	d1d1      	bne.n	860b8 <__aeabi_dmul+0x19c>
   86114:	ea81 0103 	eor.w	r1, r1, r3
   86118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8611c:	f04f 0000 	mov.w	r0, #0
   86120:	bd70      	pop	{r4, r5, r6, pc}
   86122:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   86126:	bf06      	itte	eq
   86128:	4610      	moveq	r0, r2
   8612a:	4619      	moveq	r1, r3
   8612c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   86130:	d019      	beq.n	86166 <__aeabi_dmul+0x24a>
   86132:	ea94 0f0c 	teq	r4, ip
   86136:	d102      	bne.n	8613e <__aeabi_dmul+0x222>
   86138:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8613c:	d113      	bne.n	86166 <__aeabi_dmul+0x24a>
   8613e:	ea95 0f0c 	teq	r5, ip
   86142:	d105      	bne.n	86150 <__aeabi_dmul+0x234>
   86144:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   86148:	bf1c      	itt	ne
   8614a:	4610      	movne	r0, r2
   8614c:	4619      	movne	r1, r3
   8614e:	d10a      	bne.n	86166 <__aeabi_dmul+0x24a>
   86150:	ea81 0103 	eor.w	r1, r1, r3
   86154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86158:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8615c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   86160:	f04f 0000 	mov.w	r0, #0
   86164:	bd70      	pop	{r4, r5, r6, pc}
   86166:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8616a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8616e:	bd70      	pop	{r4, r5, r6, pc}

00086170 <__aeabi_ddiv>:
   86170:	b570      	push	{r4, r5, r6, lr}
   86172:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8617a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8617e:	bf1d      	ittte	ne
   86180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   86184:	ea94 0f0c 	teqne	r4, ip
   86188:	ea95 0f0c 	teqne	r5, ip
   8618c:	f000 f8a7 	bleq	862de <__aeabi_ddiv+0x16e>
   86190:	eba4 0405 	sub.w	r4, r4, r5
   86194:	ea81 0e03 	eor.w	lr, r1, r3
   86198:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8619c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   861a0:	f000 8088 	beq.w	862b4 <__aeabi_ddiv+0x144>
   861a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   861a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   861ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   861b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   861b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   861b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   861bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   861c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   861c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   861c8:	429d      	cmp	r5, r3
   861ca:	bf08      	it	eq
   861cc:	4296      	cmpeq	r6, r2
   861ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   861d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   861d6:	d202      	bcs.n	861de <__aeabi_ddiv+0x6e>
   861d8:	085b      	lsrs	r3, r3, #1
   861da:	ea4f 0232 	mov.w	r2, r2, rrx
   861de:	1ab6      	subs	r6, r6, r2
   861e0:	eb65 0503 	sbc.w	r5, r5, r3
   861e4:	085b      	lsrs	r3, r3, #1
   861e6:	ea4f 0232 	mov.w	r2, r2, rrx
   861ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   861ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   861f2:	ebb6 0e02 	subs.w	lr, r6, r2
   861f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   861fa:	bf22      	ittt	cs
   861fc:	1ab6      	subcs	r6, r6, r2
   861fe:	4675      	movcs	r5, lr
   86200:	ea40 000c 	orrcs.w	r0, r0, ip
   86204:	085b      	lsrs	r3, r3, #1
   86206:	ea4f 0232 	mov.w	r2, r2, rrx
   8620a:	ebb6 0e02 	subs.w	lr, r6, r2
   8620e:	eb75 0e03 	sbcs.w	lr, r5, r3
   86212:	bf22      	ittt	cs
   86214:	1ab6      	subcs	r6, r6, r2
   86216:	4675      	movcs	r5, lr
   86218:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8621c:	085b      	lsrs	r3, r3, #1
   8621e:	ea4f 0232 	mov.w	r2, r2, rrx
   86222:	ebb6 0e02 	subs.w	lr, r6, r2
   86226:	eb75 0e03 	sbcs.w	lr, r5, r3
   8622a:	bf22      	ittt	cs
   8622c:	1ab6      	subcs	r6, r6, r2
   8622e:	4675      	movcs	r5, lr
   86230:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86234:	085b      	lsrs	r3, r3, #1
   86236:	ea4f 0232 	mov.w	r2, r2, rrx
   8623a:	ebb6 0e02 	subs.w	lr, r6, r2
   8623e:	eb75 0e03 	sbcs.w	lr, r5, r3
   86242:	bf22      	ittt	cs
   86244:	1ab6      	subcs	r6, r6, r2
   86246:	4675      	movcs	r5, lr
   86248:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8624c:	ea55 0e06 	orrs.w	lr, r5, r6
   86250:	d018      	beq.n	86284 <__aeabi_ddiv+0x114>
   86252:	ea4f 1505 	mov.w	r5, r5, lsl #4
   86256:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8625a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8625e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   86262:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   86266:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8626a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8626e:	d1c0      	bne.n	861f2 <__aeabi_ddiv+0x82>
   86270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86274:	d10b      	bne.n	8628e <__aeabi_ddiv+0x11e>
   86276:	ea41 0100 	orr.w	r1, r1, r0
   8627a:	f04f 0000 	mov.w	r0, #0
   8627e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   86282:	e7b6      	b.n	861f2 <__aeabi_ddiv+0x82>
   86284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86288:	bf04      	itt	eq
   8628a:	4301      	orreq	r1, r0
   8628c:	2000      	moveq	r0, #0
   8628e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   86292:	bf88      	it	hi
   86294:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   86298:	f63f aeaf 	bhi.w	85ffa <__aeabi_dmul+0xde>
   8629c:	ebb5 0c03 	subs.w	ip, r5, r3
   862a0:	bf04      	itt	eq
   862a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   862a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   862aa:	f150 0000 	adcs.w	r0, r0, #0
   862ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   862b2:	bd70      	pop	{r4, r5, r6, pc}
   862b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   862b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   862bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   862c0:	bfc2      	ittt	gt
   862c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   862c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   862ca:	bd70      	popgt	{r4, r5, r6, pc}
   862cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   862d0:	f04f 0e00 	mov.w	lr, #0
   862d4:	3c01      	subs	r4, #1
   862d6:	e690      	b.n	85ffa <__aeabi_dmul+0xde>
   862d8:	ea45 0e06 	orr.w	lr, r5, r6
   862dc:	e68d      	b.n	85ffa <__aeabi_dmul+0xde>
   862de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   862e2:	ea94 0f0c 	teq	r4, ip
   862e6:	bf08      	it	eq
   862e8:	ea95 0f0c 	teqeq	r5, ip
   862ec:	f43f af3b 	beq.w	86166 <__aeabi_dmul+0x24a>
   862f0:	ea94 0f0c 	teq	r4, ip
   862f4:	d10a      	bne.n	8630c <__aeabi_ddiv+0x19c>
   862f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   862fa:	f47f af34 	bne.w	86166 <__aeabi_dmul+0x24a>
   862fe:	ea95 0f0c 	teq	r5, ip
   86302:	f47f af25 	bne.w	86150 <__aeabi_dmul+0x234>
   86306:	4610      	mov	r0, r2
   86308:	4619      	mov	r1, r3
   8630a:	e72c      	b.n	86166 <__aeabi_dmul+0x24a>
   8630c:	ea95 0f0c 	teq	r5, ip
   86310:	d106      	bne.n	86320 <__aeabi_ddiv+0x1b0>
   86312:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   86316:	f43f aefd 	beq.w	86114 <__aeabi_dmul+0x1f8>
   8631a:	4610      	mov	r0, r2
   8631c:	4619      	mov	r1, r3
   8631e:	e722      	b.n	86166 <__aeabi_dmul+0x24a>
   86320:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   86324:	bf18      	it	ne
   86326:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8632a:	f47f aec5 	bne.w	860b8 <__aeabi_dmul+0x19c>
   8632e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   86332:	f47f af0d 	bne.w	86150 <__aeabi_dmul+0x234>
   86336:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8633a:	f47f aeeb 	bne.w	86114 <__aeabi_dmul+0x1f8>
   8633e:	e712      	b.n	86166 <__aeabi_dmul+0x24a>

00086340 <__gedf2>:
   86340:	f04f 3cff 	mov.w	ip, #4294967295
   86344:	e006      	b.n	86354 <__cmpdf2+0x4>
   86346:	bf00      	nop

00086348 <__ledf2>:
   86348:	f04f 0c01 	mov.w	ip, #1
   8634c:	e002      	b.n	86354 <__cmpdf2+0x4>
   8634e:	bf00      	nop

00086350 <__cmpdf2>:
   86350:	f04f 0c01 	mov.w	ip, #1
   86354:	f84d cd04 	str.w	ip, [sp, #-4]!
   86358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8635c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   86364:	bf18      	it	ne
   86366:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8636a:	d01b      	beq.n	863a4 <__cmpdf2+0x54>
   8636c:	b001      	add	sp, #4
   8636e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   86372:	bf0c      	ite	eq
   86374:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   86378:	ea91 0f03 	teqne	r1, r3
   8637c:	bf02      	ittt	eq
   8637e:	ea90 0f02 	teqeq	r0, r2
   86382:	2000      	moveq	r0, #0
   86384:	4770      	bxeq	lr
   86386:	f110 0f00 	cmn.w	r0, #0
   8638a:	ea91 0f03 	teq	r1, r3
   8638e:	bf58      	it	pl
   86390:	4299      	cmppl	r1, r3
   86392:	bf08      	it	eq
   86394:	4290      	cmpeq	r0, r2
   86396:	bf2c      	ite	cs
   86398:	17d8      	asrcs	r0, r3, #31
   8639a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8639e:	f040 0001 	orr.w	r0, r0, #1
   863a2:	4770      	bx	lr
   863a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   863a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   863ac:	d102      	bne.n	863b4 <__cmpdf2+0x64>
   863ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   863b2:	d107      	bne.n	863c4 <__cmpdf2+0x74>
   863b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   863b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   863bc:	d1d6      	bne.n	8636c <__cmpdf2+0x1c>
   863be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   863c2:	d0d3      	beq.n	8636c <__cmpdf2+0x1c>
   863c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   863c8:	4770      	bx	lr
   863ca:	bf00      	nop

000863cc <__aeabi_cdrcmple>:
   863cc:	4684      	mov	ip, r0
   863ce:	4610      	mov	r0, r2
   863d0:	4662      	mov	r2, ip
   863d2:	468c      	mov	ip, r1
   863d4:	4619      	mov	r1, r3
   863d6:	4663      	mov	r3, ip
   863d8:	e000      	b.n	863dc <__aeabi_cdcmpeq>
   863da:	bf00      	nop

000863dc <__aeabi_cdcmpeq>:
   863dc:	b501      	push	{r0, lr}
   863de:	f7ff ffb7 	bl	86350 <__cmpdf2>
   863e2:	2800      	cmp	r0, #0
   863e4:	bf48      	it	mi
   863e6:	f110 0f00 	cmnmi.w	r0, #0
   863ea:	bd01      	pop	{r0, pc}

000863ec <__aeabi_dcmpeq>:
   863ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   863f0:	f7ff fff4 	bl	863dc <__aeabi_cdcmpeq>
   863f4:	bf0c      	ite	eq
   863f6:	2001      	moveq	r0, #1
   863f8:	2000      	movne	r0, #0
   863fa:	f85d fb08 	ldr.w	pc, [sp], #8
   863fe:	bf00      	nop

00086400 <__aeabi_dcmplt>:
   86400:	f84d ed08 	str.w	lr, [sp, #-8]!
   86404:	f7ff ffea 	bl	863dc <__aeabi_cdcmpeq>
   86408:	bf34      	ite	cc
   8640a:	2001      	movcc	r0, #1
   8640c:	2000      	movcs	r0, #0
   8640e:	f85d fb08 	ldr.w	pc, [sp], #8
   86412:	bf00      	nop

00086414 <__aeabi_dcmple>:
   86414:	f84d ed08 	str.w	lr, [sp, #-8]!
   86418:	f7ff ffe0 	bl	863dc <__aeabi_cdcmpeq>
   8641c:	bf94      	ite	ls
   8641e:	2001      	movls	r0, #1
   86420:	2000      	movhi	r0, #0
   86422:	f85d fb08 	ldr.w	pc, [sp], #8
   86426:	bf00      	nop

00086428 <__aeabi_dcmpge>:
   86428:	f84d ed08 	str.w	lr, [sp, #-8]!
   8642c:	f7ff ffce 	bl	863cc <__aeabi_cdrcmple>
   86430:	bf94      	ite	ls
   86432:	2001      	movls	r0, #1
   86434:	2000      	movhi	r0, #0
   86436:	f85d fb08 	ldr.w	pc, [sp], #8
   8643a:	bf00      	nop

0008643c <__aeabi_dcmpgt>:
   8643c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86440:	f7ff ffc4 	bl	863cc <__aeabi_cdrcmple>
   86444:	bf34      	ite	cc
   86446:	2001      	movcc	r0, #1
   86448:	2000      	movcs	r0, #0
   8644a:	f85d fb08 	ldr.w	pc, [sp], #8
   8644e:	bf00      	nop

00086450 <__aeabi_dcmpun>:
   86450:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   86454:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86458:	d102      	bne.n	86460 <__aeabi_dcmpun+0x10>
   8645a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8645e:	d10a      	bne.n	86476 <__aeabi_dcmpun+0x26>
   86460:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   86464:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   86468:	d102      	bne.n	86470 <__aeabi_dcmpun+0x20>
   8646a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8646e:	d102      	bne.n	86476 <__aeabi_dcmpun+0x26>
   86470:	f04f 0000 	mov.w	r0, #0
   86474:	4770      	bx	lr
   86476:	f04f 0001 	mov.w	r0, #1
   8647a:	4770      	bx	lr

0008647c <__aeabi_d2iz>:
   8647c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   86480:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   86484:	d215      	bcs.n	864b2 <__aeabi_d2iz+0x36>
   86486:	d511      	bpl.n	864ac <__aeabi_d2iz+0x30>
   86488:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8648c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   86490:	d912      	bls.n	864b8 <__aeabi_d2iz+0x3c>
   86492:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   86496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8649a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8649e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   864a2:	fa23 f002 	lsr.w	r0, r3, r2
   864a6:	bf18      	it	ne
   864a8:	4240      	negne	r0, r0
   864aa:	4770      	bx	lr
   864ac:	f04f 0000 	mov.w	r0, #0
   864b0:	4770      	bx	lr
   864b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   864b6:	d105      	bne.n	864c4 <__aeabi_d2iz+0x48>
   864b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   864bc:	bf08      	it	eq
   864be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   864c2:	4770      	bx	lr
   864c4:	f04f 0000 	mov.w	r0, #0
   864c8:	4770      	bx	lr
   864ca:	bf00      	nop

000864cc <__aeabi_uldivmod>:
   864cc:	b953      	cbnz	r3, 864e4 <__aeabi_uldivmod+0x18>
   864ce:	b94a      	cbnz	r2, 864e4 <__aeabi_uldivmod+0x18>
   864d0:	2900      	cmp	r1, #0
   864d2:	bf08      	it	eq
   864d4:	2800      	cmpeq	r0, #0
   864d6:	bf1c      	itt	ne
   864d8:	f04f 31ff 	movne.w	r1, #4294967295
   864dc:	f04f 30ff 	movne.w	r0, #4294967295
   864e0:	f000 b97a 	b.w	867d8 <__aeabi_idiv0>
   864e4:	f1ad 0c08 	sub.w	ip, sp, #8
   864e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   864ec:	f000 f806 	bl	864fc <__udivmoddi4>
   864f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   864f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   864f8:	b004      	add	sp, #16
   864fa:	4770      	bx	lr

000864fc <__udivmoddi4>:
   864fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86500:	468c      	mov	ip, r1
   86502:	460e      	mov	r6, r1
   86504:	4604      	mov	r4, r0
   86506:	9d08      	ldr	r5, [sp, #32]
   86508:	2b00      	cmp	r3, #0
   8650a:	d150      	bne.n	865ae <__udivmoddi4+0xb2>
   8650c:	428a      	cmp	r2, r1
   8650e:	4617      	mov	r7, r2
   86510:	d96c      	bls.n	865ec <__udivmoddi4+0xf0>
   86512:	fab2 fe82 	clz	lr, r2
   86516:	f1be 0f00 	cmp.w	lr, #0
   8651a:	d00b      	beq.n	86534 <__udivmoddi4+0x38>
   8651c:	f1ce 0c20 	rsb	ip, lr, #32
   86520:	fa01 f60e 	lsl.w	r6, r1, lr
   86524:	fa20 fc0c 	lsr.w	ip, r0, ip
   86528:	fa02 f70e 	lsl.w	r7, r2, lr
   8652c:	ea4c 0c06 	orr.w	ip, ip, r6
   86530:	fa00 f40e 	lsl.w	r4, r0, lr
   86534:	0c3a      	lsrs	r2, r7, #16
   86536:	fbbc f9f2 	udiv	r9, ip, r2
   8653a:	b2bb      	uxth	r3, r7
   8653c:	fb02 cc19 	mls	ip, r2, r9, ip
   86540:	fb09 fa03 	mul.w	sl, r9, r3
   86544:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86548:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8654c:	45b2      	cmp	sl, r6
   8654e:	d90a      	bls.n	86566 <__udivmoddi4+0x6a>
   86550:	19f6      	adds	r6, r6, r7
   86552:	f109 31ff 	add.w	r1, r9, #4294967295
   86556:	f080 8125 	bcs.w	867a4 <__udivmoddi4+0x2a8>
   8655a:	45b2      	cmp	sl, r6
   8655c:	f240 8122 	bls.w	867a4 <__udivmoddi4+0x2a8>
   86560:	f1a9 0902 	sub.w	r9, r9, #2
   86564:	443e      	add	r6, r7
   86566:	eba6 060a 	sub.w	r6, r6, sl
   8656a:	fbb6 f0f2 	udiv	r0, r6, r2
   8656e:	fb02 6610 	mls	r6, r2, r0, r6
   86572:	fb00 f303 	mul.w	r3, r0, r3
   86576:	b2a4      	uxth	r4, r4
   86578:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8657c:	42a3      	cmp	r3, r4
   8657e:	d909      	bls.n	86594 <__udivmoddi4+0x98>
   86580:	19e4      	adds	r4, r4, r7
   86582:	f100 32ff 	add.w	r2, r0, #4294967295
   86586:	f080 810b 	bcs.w	867a0 <__udivmoddi4+0x2a4>
   8658a:	42a3      	cmp	r3, r4
   8658c:	f240 8108 	bls.w	867a0 <__udivmoddi4+0x2a4>
   86590:	3802      	subs	r0, #2
   86592:	443c      	add	r4, r7
   86594:	2100      	movs	r1, #0
   86596:	1ae4      	subs	r4, r4, r3
   86598:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8659c:	2d00      	cmp	r5, #0
   8659e:	d062      	beq.n	86666 <__udivmoddi4+0x16a>
   865a0:	2300      	movs	r3, #0
   865a2:	fa24 f40e 	lsr.w	r4, r4, lr
   865a6:	602c      	str	r4, [r5, #0]
   865a8:	606b      	str	r3, [r5, #4]
   865aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   865ae:	428b      	cmp	r3, r1
   865b0:	d907      	bls.n	865c2 <__udivmoddi4+0xc6>
   865b2:	2d00      	cmp	r5, #0
   865b4:	d055      	beq.n	86662 <__udivmoddi4+0x166>
   865b6:	2100      	movs	r1, #0
   865b8:	e885 0041 	stmia.w	r5, {r0, r6}
   865bc:	4608      	mov	r0, r1
   865be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   865c2:	fab3 f183 	clz	r1, r3
   865c6:	2900      	cmp	r1, #0
   865c8:	f040 808f 	bne.w	866ea <__udivmoddi4+0x1ee>
   865cc:	42b3      	cmp	r3, r6
   865ce:	d302      	bcc.n	865d6 <__udivmoddi4+0xda>
   865d0:	4282      	cmp	r2, r0
   865d2:	f200 80fc 	bhi.w	867ce <__udivmoddi4+0x2d2>
   865d6:	1a84      	subs	r4, r0, r2
   865d8:	eb66 0603 	sbc.w	r6, r6, r3
   865dc:	2001      	movs	r0, #1
   865de:	46b4      	mov	ip, r6
   865e0:	2d00      	cmp	r5, #0
   865e2:	d040      	beq.n	86666 <__udivmoddi4+0x16a>
   865e4:	e885 1010 	stmia.w	r5, {r4, ip}
   865e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   865ec:	b912      	cbnz	r2, 865f4 <__udivmoddi4+0xf8>
   865ee:	2701      	movs	r7, #1
   865f0:	fbb7 f7f2 	udiv	r7, r7, r2
   865f4:	fab7 fe87 	clz	lr, r7
   865f8:	f1be 0f00 	cmp.w	lr, #0
   865fc:	d135      	bne.n	8666a <__udivmoddi4+0x16e>
   865fe:	2101      	movs	r1, #1
   86600:	1bf6      	subs	r6, r6, r7
   86602:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86606:	fa1f f887 	uxth.w	r8, r7
   8660a:	fbb6 f2fc 	udiv	r2, r6, ip
   8660e:	fb0c 6612 	mls	r6, ip, r2, r6
   86612:	fb08 f002 	mul.w	r0, r8, r2
   86616:	0c23      	lsrs	r3, r4, #16
   86618:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8661c:	42b0      	cmp	r0, r6
   8661e:	d907      	bls.n	86630 <__udivmoddi4+0x134>
   86620:	19f6      	adds	r6, r6, r7
   86622:	f102 33ff 	add.w	r3, r2, #4294967295
   86626:	d202      	bcs.n	8662e <__udivmoddi4+0x132>
   86628:	42b0      	cmp	r0, r6
   8662a:	f200 80d2 	bhi.w	867d2 <__udivmoddi4+0x2d6>
   8662e:	461a      	mov	r2, r3
   86630:	1a36      	subs	r6, r6, r0
   86632:	fbb6 f0fc 	udiv	r0, r6, ip
   86636:	fb0c 6610 	mls	r6, ip, r0, r6
   8663a:	fb08 f800 	mul.w	r8, r8, r0
   8663e:	b2a3      	uxth	r3, r4
   86640:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   86644:	45a0      	cmp	r8, r4
   86646:	d907      	bls.n	86658 <__udivmoddi4+0x15c>
   86648:	19e4      	adds	r4, r4, r7
   8664a:	f100 33ff 	add.w	r3, r0, #4294967295
   8664e:	d202      	bcs.n	86656 <__udivmoddi4+0x15a>
   86650:	45a0      	cmp	r8, r4
   86652:	f200 80b9 	bhi.w	867c8 <__udivmoddi4+0x2cc>
   86656:	4618      	mov	r0, r3
   86658:	eba4 0408 	sub.w	r4, r4, r8
   8665c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86660:	e79c      	b.n	8659c <__udivmoddi4+0xa0>
   86662:	4629      	mov	r1, r5
   86664:	4628      	mov	r0, r5
   86666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8666a:	fa07 f70e 	lsl.w	r7, r7, lr
   8666e:	f1ce 0320 	rsb	r3, lr, #32
   86672:	fa26 f203 	lsr.w	r2, r6, r3
   86676:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8667a:	fbb2 f1fc 	udiv	r1, r2, ip
   8667e:	fa1f f887 	uxth.w	r8, r7
   86682:	fb0c 2211 	mls	r2, ip, r1, r2
   86686:	fa06 f60e 	lsl.w	r6, r6, lr
   8668a:	fa20 f303 	lsr.w	r3, r0, r3
   8668e:	fb01 f908 	mul.w	r9, r1, r8
   86692:	4333      	orrs	r3, r6
   86694:	0c1e      	lsrs	r6, r3, #16
   86696:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8669a:	45b1      	cmp	r9, r6
   8669c:	fa00 f40e 	lsl.w	r4, r0, lr
   866a0:	d909      	bls.n	866b6 <__udivmoddi4+0x1ba>
   866a2:	19f6      	adds	r6, r6, r7
   866a4:	f101 32ff 	add.w	r2, r1, #4294967295
   866a8:	f080 808c 	bcs.w	867c4 <__udivmoddi4+0x2c8>
   866ac:	45b1      	cmp	r9, r6
   866ae:	f240 8089 	bls.w	867c4 <__udivmoddi4+0x2c8>
   866b2:	3902      	subs	r1, #2
   866b4:	443e      	add	r6, r7
   866b6:	eba6 0609 	sub.w	r6, r6, r9
   866ba:	fbb6 f0fc 	udiv	r0, r6, ip
   866be:	fb0c 6210 	mls	r2, ip, r0, r6
   866c2:	fb00 f908 	mul.w	r9, r0, r8
   866c6:	b29e      	uxth	r6, r3
   866c8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   866cc:	45b1      	cmp	r9, r6
   866ce:	d907      	bls.n	866e0 <__udivmoddi4+0x1e4>
   866d0:	19f6      	adds	r6, r6, r7
   866d2:	f100 33ff 	add.w	r3, r0, #4294967295
   866d6:	d271      	bcs.n	867bc <__udivmoddi4+0x2c0>
   866d8:	45b1      	cmp	r9, r6
   866da:	d96f      	bls.n	867bc <__udivmoddi4+0x2c0>
   866dc:	3802      	subs	r0, #2
   866de:	443e      	add	r6, r7
   866e0:	eba6 0609 	sub.w	r6, r6, r9
   866e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   866e8:	e78f      	b.n	8660a <__udivmoddi4+0x10e>
   866ea:	f1c1 0720 	rsb	r7, r1, #32
   866ee:	fa22 f807 	lsr.w	r8, r2, r7
   866f2:	408b      	lsls	r3, r1
   866f4:	ea48 0303 	orr.w	r3, r8, r3
   866f8:	fa26 f407 	lsr.w	r4, r6, r7
   866fc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86700:	fbb4 f9fe 	udiv	r9, r4, lr
   86704:	fa1f fc83 	uxth.w	ip, r3
   86708:	fb0e 4419 	mls	r4, lr, r9, r4
   8670c:	408e      	lsls	r6, r1
   8670e:	fa20 f807 	lsr.w	r8, r0, r7
   86712:	fb09 fa0c 	mul.w	sl, r9, ip
   86716:	ea48 0806 	orr.w	r8, r8, r6
   8671a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8671e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   86722:	45a2      	cmp	sl, r4
   86724:	fa02 f201 	lsl.w	r2, r2, r1
   86728:	fa00 f601 	lsl.w	r6, r0, r1
   8672c:	d908      	bls.n	86740 <__udivmoddi4+0x244>
   8672e:	18e4      	adds	r4, r4, r3
   86730:	f109 30ff 	add.w	r0, r9, #4294967295
   86734:	d244      	bcs.n	867c0 <__udivmoddi4+0x2c4>
   86736:	45a2      	cmp	sl, r4
   86738:	d942      	bls.n	867c0 <__udivmoddi4+0x2c4>
   8673a:	f1a9 0902 	sub.w	r9, r9, #2
   8673e:	441c      	add	r4, r3
   86740:	eba4 040a 	sub.w	r4, r4, sl
   86744:	fbb4 f0fe 	udiv	r0, r4, lr
   86748:	fb0e 4410 	mls	r4, lr, r0, r4
   8674c:	fb00 fc0c 	mul.w	ip, r0, ip
   86750:	fa1f f888 	uxth.w	r8, r8
   86754:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86758:	45a4      	cmp	ip, r4
   8675a:	d907      	bls.n	8676c <__udivmoddi4+0x270>
   8675c:	18e4      	adds	r4, r4, r3
   8675e:	f100 3eff 	add.w	lr, r0, #4294967295
   86762:	d229      	bcs.n	867b8 <__udivmoddi4+0x2bc>
   86764:	45a4      	cmp	ip, r4
   86766:	d927      	bls.n	867b8 <__udivmoddi4+0x2bc>
   86768:	3802      	subs	r0, #2
   8676a:	441c      	add	r4, r3
   8676c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86770:	fba0 8902 	umull	r8, r9, r0, r2
   86774:	eba4 0c0c 	sub.w	ip, r4, ip
   86778:	45cc      	cmp	ip, r9
   8677a:	46c2      	mov	sl, r8
   8677c:	46ce      	mov	lr, r9
   8677e:	d315      	bcc.n	867ac <__udivmoddi4+0x2b0>
   86780:	d012      	beq.n	867a8 <__udivmoddi4+0x2ac>
   86782:	b155      	cbz	r5, 8679a <__udivmoddi4+0x29e>
   86784:	ebb6 030a 	subs.w	r3, r6, sl
   86788:	eb6c 060e 	sbc.w	r6, ip, lr
   8678c:	fa06 f707 	lsl.w	r7, r6, r7
   86790:	40cb      	lsrs	r3, r1
   86792:	431f      	orrs	r7, r3
   86794:	40ce      	lsrs	r6, r1
   86796:	602f      	str	r7, [r5, #0]
   86798:	606e      	str	r6, [r5, #4]
   8679a:	2100      	movs	r1, #0
   8679c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   867a0:	4610      	mov	r0, r2
   867a2:	e6f7      	b.n	86594 <__udivmoddi4+0x98>
   867a4:	4689      	mov	r9, r1
   867a6:	e6de      	b.n	86566 <__udivmoddi4+0x6a>
   867a8:	4546      	cmp	r6, r8
   867aa:	d2ea      	bcs.n	86782 <__udivmoddi4+0x286>
   867ac:	ebb8 0a02 	subs.w	sl, r8, r2
   867b0:	eb69 0e03 	sbc.w	lr, r9, r3
   867b4:	3801      	subs	r0, #1
   867b6:	e7e4      	b.n	86782 <__udivmoddi4+0x286>
   867b8:	4670      	mov	r0, lr
   867ba:	e7d7      	b.n	8676c <__udivmoddi4+0x270>
   867bc:	4618      	mov	r0, r3
   867be:	e78f      	b.n	866e0 <__udivmoddi4+0x1e4>
   867c0:	4681      	mov	r9, r0
   867c2:	e7bd      	b.n	86740 <__udivmoddi4+0x244>
   867c4:	4611      	mov	r1, r2
   867c6:	e776      	b.n	866b6 <__udivmoddi4+0x1ba>
   867c8:	3802      	subs	r0, #2
   867ca:	443c      	add	r4, r7
   867cc:	e744      	b.n	86658 <__udivmoddi4+0x15c>
   867ce:	4608      	mov	r0, r1
   867d0:	e706      	b.n	865e0 <__udivmoddi4+0xe4>
   867d2:	3a02      	subs	r2, #2
   867d4:	443e      	add	r6, r7
   867d6:	e72b      	b.n	86630 <__udivmoddi4+0x134>

000867d8 <__aeabi_idiv0>:
   867d8:	4770      	bx	lr
   867da:	bf00      	nop
   867dc:	74697257 	.word	0x74697257
   867e0:	20676e69 	.word	0x20676e69
   867e4:	66206f74 	.word	0x66206f74
   867e8:	6873616c 	.word	0x6873616c
   867ec:	0000000a 	.word	0x0000000a
   867f0:	20646142 	.word	0x20646142
   867f4:	6f6c6e75 	.word	0x6f6c6e75
   867f8:	000a6b63 	.word	0x000a6b63
   867fc:	20646142 	.word	0x20646142
   86800:	74697277 	.word	0x74697277
   86804:	00000a65 	.word	0x00000a65
   86808:	20646142 	.word	0x20646142
   8680c:	6b636f6c 	.word	0x6b636f6c
   86810:	0000000a 	.word	0x0000000a
   86814:	6f727245 	.word	0x6f727245
   86818:	000a3372 	.word	0x000a3372
   8681c:	646e6553 	.word	0x646e6553
   86820:	20465220 	.word	0x20465220
   86824:	0000000a 	.word	0x0000000a

00086828 <pipe0>:
   86828:	00f000f0 00f000f0 000000f1 64616572     ............read
   86838:	67657220 20752520 206c6176 25207525      reg %u val %u %
   86848:	75252075 20752520 000a7525 64616572     u %u %u %u..read
   86858:	67657220 20752520 206c6176 0a207525      reg %u val %u .
   86868:	00000000 6f727245 000a3272 6f727245     ....Error2..Erro
   86878:	00000a72 74697257 6f742065 616c6620     r...Write to fla
   86888:	000a6873 74617453 68632065 65676e61     sh..State change
   86898:	0000000a                                ....

0008689c <_global_impure_ptr>:
   8689c:	200705c8 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   868ac:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   868bc:	46454443 00000000 33323130 37363534     CDEF....01234567
   868cc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   868dc:	0000296c 00000030                       l)..0...

000868e4 <blanks.7223>:
   868e4:	20202020 20202020 20202020 20202020                     

000868f4 <zeroes.7224>:
   868f4:	30303030 30303030 30303030 30303030     0000000000000000
   86904:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   86914:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   86924:	00000000                                ....

00086928 <__mprec_bigtens>:
   86928:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   86938:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   86948:	7f73bf3c 75154fdd                       <.s..O.u

00086950 <__mprec_tens>:
   86950:	00000000 3ff00000 00000000 40240000     .......?......$@
   86960:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   86970:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   86980:	00000000 412e8480 00000000 416312d0     .......A......cA
   86990:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   869a0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   869b0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   869c0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   869d0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   869e0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   869f0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   86a00:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   86a10:	79d99db4 44ea7843                       ...yCx.D

00086a18 <p05.6055>:
   86a18:	00000005 00000019 0000007d              ........}...

00086a24 <_ctype_>:
   86a24:	20202000 20202020 28282020 20282828     .         ((((( 
   86a34:	20202020 20202020 20202020 20202020                     
   86a44:	10108820 10101010 10101010 10101010      ...............
   86a54:	04040410 04040404 10040404 10101010     ................
   86a64:	41411010 41414141 01010101 01010101     ..AAAAAA........
   86a74:	01010101 01010101 01010101 10101010     ................
   86a84:	42421010 42424242 02020202 02020202     ..BBBBBB........
   86a94:	02020202 02020202 02020202 10101010     ................
   86aa4:	00000020 00000000 00000000 00000000      ...............
	...

00086b28 <_init>:
   86b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86b2a:	bf00      	nop
   86b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86b2e:	bc08      	pop	{r3}
   86b30:	469e      	mov	lr, r3
   86b32:	4770      	bx	lr

00086b34 <__init_array_start>:
   86b34:	000836c1 	.word	0x000836c1

00086b38 <__frame_dummy_init_array_entry>:
   86b38:	00080119                                ....

00086b3c <_fini>:
   86b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86b3e:	bf00      	nop
   86b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86b42:	bc08      	pop	{r3}
   86b44:	469e      	mov	lr, r3
   86b46:	4770      	bx	lr

00086b48 <__fini_array_start>:
   86b48:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b470      	push	{r4, r5, r6}
20070002:	b083      	sub	sp, #12
20070004:	9e06      	ldr	r6, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070006:	4d1b      	ldr	r5, [pc, #108]	; (20070074 <efc_perform_read_sequence+0x74>)
20070008:	42a8      	cmp	r0, r5
2007000a:	bf0c      	ite	eq
2007000c:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
20070010:	f44f 2540 	movne.w	r5, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070014:	b35b      	cbz	r3, 2007006e <efc_perform_read_sequence+0x6e>
20070016:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070018:	6803      	ldr	r3, [r0, #0]
2007001a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2007001e:	6003      	str	r3, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070020:	b2c9      	uxtb	r1, r1
20070022:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070026:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070028:	6883      	ldr	r3, [r0, #8]
2007002a:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007002c:	9b01      	ldr	r3, [sp, #4]
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d1f9      	bne.n	20070028 <efc_perform_read_sequence+0x28>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070034:	b14e      	cbz	r6, 2007004a <efc_perform_read_sequence+0x4a>
20070036:	4629      	mov	r1, r5
20070038:	1f23      	subs	r3, r4, #4
2007003a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007003e:	f851 4b04 	ldr.w	r4, [r1], #4
20070042:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070046:	42a9      	cmp	r1, r5
20070048:	d1f9      	bne.n	2007003e <efc_perform_read_sequence+0x3e>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007004a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2007004c:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20070050:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070052:	6883      	ldr	r3, [r0, #8]
20070054:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070056:	9b01      	ldr	r3, [sp, #4]
20070058:	f013 0f01 	tst.w	r3, #1
2007005c:	d0f9      	beq.n	20070052 <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007005e:	6803      	ldr	r3, [r0, #0]
20070060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070064:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070066:	2000      	movs	r0, #0
}
20070068:	b003      	add	sp, #12
2007006a:	bc70      	pop	{r4, r5, r6}
2007006c:	4770      	bx	lr
		return EFC_RC_INVALID;
2007006e:	2002      	movs	r0, #2
20070070:	e7fa      	b.n	20070068 <efc_perform_read_sequence+0x68>
20070072:	bf00      	nop
20070074:	400e0a00 	.word	0x400e0a00

20070078 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070078:	6001      	str	r1, [r0, #0]
2007007a:	4770      	bx	lr

2007007c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007007c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007007e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20070080:	6883      	ldr	r3, [r0, #8]
20070082:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070084:	9b01      	ldr	r3, [sp, #4]
20070086:	f013 0f01 	tst.w	r3, #1
2007008a:	d0f9      	beq.n	20070080 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2007008c:	9801      	ldr	r0, [sp, #4]
}
2007008e:	f000 0006 	and.w	r0, r0, #6
20070092:	b002      	add	sp, #8
20070094:	4770      	bx	lr
20070096:	bf00      	nop

20070098 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070098:	f44f 6380 	mov.w	r3, #1024	; 0x400
2007009c:	4a20      	ldr	r2, [pc, #128]	; (20070120 <SystemInit+0x88>)
2007009e:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700a4:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700a6:	4b1f      	ldr	r3, [pc, #124]	; (20070124 <SystemInit+0x8c>)
200700a8:	6a1b      	ldr	r3, [r3, #32]
200700aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700ae:	d107      	bne.n	200700c0 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700b0:	4a1d      	ldr	r2, [pc, #116]	; (20070128 <SystemInit+0x90>)
200700b2:	4b1c      	ldr	r3, [pc, #112]	; (20070124 <SystemInit+0x8c>)
200700b4:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700b6:	461a      	mov	r2, r3
200700b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ba:	f013 0f01 	tst.w	r3, #1
200700be:	d0fb      	beq.n	200700b8 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c0:	4a1a      	ldr	r2, [pc, #104]	; (2007012c <SystemInit+0x94>)
200700c2:	4b18      	ldr	r3, [pc, #96]	; (20070124 <SystemInit+0x8c>)
200700c4:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700c6:	461a      	mov	r2, r3
200700c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700ce:	d0fb      	beq.n	200700c8 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700d0:	4a14      	ldr	r2, [pc, #80]	; (20070124 <SystemInit+0x8c>)
200700d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700d4:	f023 0303 	bic.w	r3, r3, #3
200700d8:	f043 0301 	orr.w	r3, r3, #1
200700dc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700de:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700e0:	f013 0f08 	tst.w	r3, #8
200700e4:	d0fb      	beq.n	200700de <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700e6:	4a12      	ldr	r2, [pc, #72]	; (20070130 <SystemInit+0x98>)
200700e8:	4b0e      	ldr	r3, [pc, #56]	; (20070124 <SystemInit+0x8c>)
200700ea:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700ec:	461a      	mov	r2, r3
200700ee:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700f0:	f013 0f02 	tst.w	r3, #2
200700f4:	d0fb      	beq.n	200700ee <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200700f6:	2211      	movs	r2, #17
200700f8:	4b0a      	ldr	r3, [pc, #40]	; (20070124 <SystemInit+0x8c>)
200700fa:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700fc:	461a      	mov	r2, r3
200700fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070100:	f013 0f08 	tst.w	r3, #8
20070104:	d0fb      	beq.n	200700fe <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070106:	2212      	movs	r2, #18
20070108:	4b06      	ldr	r3, [pc, #24]	; (20070124 <SystemInit+0x8c>)
2007010a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007010c:	461a      	mov	r2, r3
2007010e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070110:	f013 0f08 	tst.w	r3, #8
20070114:	d0fb      	beq.n	2007010e <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070116:	4a07      	ldr	r2, [pc, #28]	; (20070134 <SystemInit+0x9c>)
20070118:	4b07      	ldr	r3, [pc, #28]	; (20070138 <SystemInit+0xa0>)
2007011a:	601a      	str	r2, [r3, #0]
2007011c:	4770      	bx	lr
2007011e:	bf00      	nop
20070120:	400e0a00 	.word	0x400e0a00
20070124:	400e0600 	.word	0x400e0600
20070128:	00370809 	.word	0x00370809
2007012c:	01370809 	.word	0x01370809
20070130:	200d3f01 	.word	0x200d3f01
20070134:	0501bd00 	.word	0x0501bd00
20070138:	200705b0 	.word	0x200705b0

2007013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007013c:	4b1b      	ldr	r3, [pc, #108]	; (200701ac <system_init_flash+0x70>)
2007013e:	4298      	cmp	r0, r3
20070140:	d915      	bls.n	2007016e <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20070142:	4b1b      	ldr	r3, [pc, #108]	; (200701b0 <system_init_flash+0x74>)
20070144:	4298      	cmp	r0, r3
20070146:	d919      	bls.n	2007017c <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070148:	4b1a      	ldr	r3, [pc, #104]	; (200701b4 <system_init_flash+0x78>)
2007014a:	4298      	cmp	r0, r3
2007014c:	d91e      	bls.n	2007018c <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2007014e:	4b1a      	ldr	r3, [pc, #104]	; (200701b8 <system_init_flash+0x7c>)
20070150:	4298      	cmp	r0, r3
20070152:	d923      	bls.n	2007019c <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070154:	4b19      	ldr	r3, [pc, #100]	; (200701bc <system_init_flash+0x80>)
20070156:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070158:	bf94      	ite	ls
2007015a:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070162:	4a17      	ldr	r2, [pc, #92]	; (200701c0 <system_init_flash+0x84>)
20070164:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070166:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007016a:	6013      	str	r3, [r2, #0]
2007016c:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2007016e:	2300      	movs	r3, #0
20070170:	4a13      	ldr	r2, [pc, #76]	; (200701c0 <system_init_flash+0x84>)
20070172:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070174:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070178:	6013      	str	r3, [r2, #0]
2007017a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
2007017c:	f44f 7380 	mov.w	r3, #256	; 0x100
20070180:	4a0f      	ldr	r2, [pc, #60]	; (200701c0 <system_init_flash+0x84>)
20070182:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070184:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070188:	6013      	str	r3, [r2, #0]
2007018a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
2007018c:	f44f 7300 	mov.w	r3, #512	; 0x200
20070190:	4a0b      	ldr	r2, [pc, #44]	; (200701c0 <system_init_flash+0x84>)
20070192:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070194:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070198:	6013      	str	r3, [r2, #0]
2007019a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007019c:	f44f 7340 	mov.w	r3, #768	; 0x300
200701a0:	4a07      	ldr	r2, [pc, #28]	; (200701c0 <system_init_flash+0x84>)
200701a2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701a4:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701a8:	6013      	str	r3, [r2, #0]
200701aa:	4770      	bx	lr
200701ac:	0121eabf 	.word	0x0121eabf
200701b0:	02faf07f 	.word	0x02faf07f
200701b4:	03d08fff 	.word	0x03d08fff
200701b8:	04c4b3ff 	.word	0x04c4b3ff
200701bc:	055d4a7f 	.word	0x055d4a7f
200701c0:	400e0a00 	.word	0x400e0a00

200701c4 <ADC_Handler>:

__no_inline
RAMFUNC
ISR(ADC_Handler)
{	
	if(ADC->ADC_ISR & ADC_IER_ENDRX)
200701c4:	4b8b      	ldr	r3, [pc, #556]	; (200703f4 <ADC_Handler+0x230>)
200701c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200701c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
200701cc:	d100      	bne.n	200701d0 <ADC_Handler+0xc>
200701ce:	4770      	bx	lr
{	
200701d0:	b570      	push	{r4, r5, r6, lr}
		//float Inp;
		//pio_set_pin_high(LED2_GPIO); //for real time debug	
		uint32_t OutDataToDAC0;
		uint32_t OutDataToDAC1;
	//	uint32_t Energy;
		pio_set_pin_high(PIO_PA7_IDX);
200701d2:	2007      	movs	r0, #7
200701d4:	4b88      	ldr	r3, [pc, #544]	; (200703f8 <ADC_Handler+0x234>)
200701d6:	4798      	blx	r3
		
		ADC->ADC_RNPR =  (uint32_t)ADCC_GlobalRawData;
200701d8:	4b88      	ldr	r3, [pc, #544]	; (200703fc <ADC_Handler+0x238>)
200701da:	4a86      	ldr	r2, [pc, #536]	; (200703f4 <ADC_Handler+0x230>)
200701dc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
		ADC->ADC_RNCR = ADC_NUM_CHANNELS;
200701e0:	2103      	movs	r1, #3
200701e2:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
		Data = ADCC_GlobalRawData[0] - MAX_ADC/2;;
200701e6:	881a      	ldrh	r2, [r3, #0]
200701e8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
200701ec:	4b84      	ldr	r3, [pc, #528]	; (20070400 <ADC_Handler+0x23c>)
200701ee:	601a      	str	r2, [r3, #0]

void FIFO_Init(XFifo* Fifo );

inline void FIFO_Insert(XFifo* Fifo, int32_t input)
{
	Fifo->Data[Fifo->WriteInx] = input;
200701f0:	4984      	ldr	r1, [pc, #528]	; (20070404 <ADC_Handler+0x240>)
200701f2:	680b      	ldr	r3, [r1, #0]
200701f4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
200701f8:	60c2      	str	r2, [r0, #12]
	Fifo->WriteInx = Fifo->WriteInx + 1;
200701fa:	3301      	adds	r3, #1
200701fc:	600b      	str	r3, [r1, #0]
	if(Fifo->WriteInx == 3)
200701fe:	2b03      	cmp	r3, #3
20070200:	d007      	beq.n	20070212 <ADC_Handler+0x4e>


inline int32_t FIFO_Filter(XFifo* Fifo)
{
	int32_t Xn,Xnp,Xnpp;	
	switch(Fifo->WriteInx)
20070202:	b143      	cbz	r3, 20070216 <ADC_Handler+0x52>
20070204:	2b01      	cmp	r3, #1
20070206:	d013      	beq.n	20070230 <ADC_Handler+0x6c>
		Xn = Fifo->Data[0];
		Xnp = Fifo->Data[2];
		Xnpp = Fifo->Data[1];
		break;
		default: // 2
		Xn = Fifo->Data[1];
20070208:	4b7e      	ldr	r3, [pc, #504]	; (20070404 <ADC_Handler+0x240>)
2007020a:	6919      	ldr	r1, [r3, #16]
		Xnp = Fifo->Data[0];
2007020c:	68d8      	ldr	r0, [r3, #12]
		Xnpp = Fifo->Data[2];
2007020e:	695b      	ldr	r3, [r3, #20]
20070210:	e005      	b.n	2007021e <ADC_Handler+0x5a>
		Fifo->WriteInx = 0;
20070212:	2200      	movs	r2, #0
20070214:	600a      	str	r2, [r1, #0]
		Xn = Fifo->Data[2];
20070216:	4b7b      	ldr	r3, [pc, #492]	; (20070404 <ADC_Handler+0x240>)
20070218:	6959      	ldr	r1, [r3, #20]
		Xnp = Fifo->Data[1];
2007021a:	6918      	ldr	r0, [r3, #16]
		Xnpp = Fifo->Data[0];
2007021c:	68db      	ldr	r3, [r3, #12]
	switch(Fifo->WriteIndxY)
2007021e:	4a79      	ldr	r2, [pc, #484]	; (20070404 <ADC_Handler+0x240>)
20070220:	6892      	ldr	r2, [r2, #8]
20070222:	b152      	cbz	r2, 2007023a <ADC_Handler+0x76>
20070224:	2a01      	cmp	r2, #1
20070226:	d035      	beq.n	20070294 <ADC_Handler+0xd0>
		Yp = Fifo->FilterY[1];
20070228:	4c76      	ldr	r4, [pc, #472]	; (20070404 <ADC_Handler+0x240>)
2007022a:	69e5      	ldr	r5, [r4, #28]
		Ypp = Fifo->FilterY[0];
2007022c:	69a4      	ldr	r4, [r4, #24]
2007022e:	e007      	b.n	20070240 <ADC_Handler+0x7c>
		Xn = Fifo->Data[0];
20070230:	4b74      	ldr	r3, [pc, #464]	; (20070404 <ADC_Handler+0x240>)
20070232:	68d9      	ldr	r1, [r3, #12]
		Xnp = Fifo->Data[2];
20070234:	6958      	ldr	r0, [r3, #20]
		Xnpp = Fifo->Data[1];
20070236:	691b      	ldr	r3, [r3, #16]
20070238:	e7f1      	b.n	2007021e <ADC_Handler+0x5a>
		Yp = Fifo->FilterY[2];
2007023a:	4c72      	ldr	r4, [pc, #456]	; (20070404 <ADC_Handler+0x240>)
2007023c:	6a25      	ldr	r5, [r4, #32]
		Ypp = Fifo->FilterY[1];
2007023e:	69e4      	ldr	r4, [r4, #28]
	Out = (Xn*BETA_MUL2_Q - 2*BETA_MUL2_Q*Xnp + BETA_MUL2_Q*Xnpp + Fifo->BetaMul2Q*Yp - Ypp*BETA_MUL2_Q)*(Fifo->BetaSQRTInvQ); // The second order filter HPF*/
20070240:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
20070244:	4419      	add	r1, r3
20070246:	486f      	ldr	r0, [pc, #444]	; (20070404 <ADC_Handler+0x240>)
20070248:	6b43      	ldr	r3, [r0, #52]	; 0x34
2007024a:	fb03 f305 	mul.w	r3, r3, r5
2007024e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
20070252:	eba3 1304 	sub.w	r3, r3, r4, lsl #4
20070256:	6b81      	ldr	r1, [r0, #56]	; 0x38
20070258:	fb01 f303 	mul.w	r3, r1, r3
	Fifo->FilterY[Fifo->WriteIndxY] = input;
2007025c:	1d91      	adds	r1, r2, #6
	FIFO_YInsert(Fifo, (Out>>(4+13)) );
2007025e:	145c      	asrs	r4, r3, #17
	Fifo->FilterY[Fifo->WriteIndxY] = input;
20070260:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
20070264:	3201      	adds	r2, #1
	if(Fifo->WriteIndxY == 3)
20070266:	2a03      	cmp	r2, #3
20070268:	d018      	beq.n	2007029c <ADC_Handler+0xd8>
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
2007026a:	6082      	str	r2, [r0, #8]
		//Data = ADC->ADC_CDR[0]-MAX_ADC/2;
		
		//Energy = FIFO2_Insert(&WaveArray, Data);
		FIFO_Insert(&Fifo,Data);
		OutData = FIFO_Filter(&Fifo);
		OutData = abs(OutData);
2007026c:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
20070270:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
20070274:	4b64      	ldr	r3, [pc, #400]	; (20070408 <ADC_Handler+0x244>)
20070276:	601c      	str	r4, [r3, #0]
		//SoundSum = FIFO2_Insert(&Fifo2p1, OutData);		
		//FIFO2_Insert(&fifoDebug,SoundSum);
		switch(FilterState)		
20070278:	4b64      	ldr	r3, [pc, #400]	; (2007040c <ADC_Handler+0x248>)
2007027a:	681b      	ldr	r3, [r3, #0]
2007027c:	2b06      	cmp	r3, #6
2007027e:	f200 815d 	bhi.w	2007053c <ADC_Handler+0x378>
20070282:	e8df f013 	tbh	[pc, r3, lsl #1]
20070286:	000f      	.short	0x000f
20070288:	0071003c 	.word	0x0071003c
2007028c:	012300e7 	.word	0x012300e7
20070290:	014f013e 	.word	0x014f013e
		Yp = Fifo->FilterY[0];
20070294:	4c5b      	ldr	r4, [pc, #364]	; (20070404 <ADC_Handler+0x240>)
20070296:	69a5      	ldr	r5, [r4, #24]
		Ypp = Fifo->FilterY[2];
20070298:	6a24      	ldr	r4, [r4, #32]
2007029a:	e7d1      	b.n	20070240 <ADC_Handler+0x7c>
		Fifo->WriteIndxY = 0;
2007029c:	2100      	movs	r1, #0
2007029e:	4a59      	ldr	r2, [pc, #356]	; (20070404 <ADC_Handler+0x240>)
200702a0:	6091      	str	r1, [r2, #8]
200702a2:	e7e3      	b.n	2007026c <ADC_Handler+0xa8>
		{
			case 0: // Listening to trigger
				SecondDetVal = 0;
200702a4:	2300      	movs	r3, #0
200702a6:	4a5a      	ldr	r2, [pc, #360]	; (20070410 <ADC_Handler+0x24c>)
200702a8:	6013      	str	r3, [r2, #0]
				FirstDetVal = 0;
200702aa:	4a5a      	ldr	r2, [pc, #360]	; (20070414 <ADC_Handler+0x250>)
200702ac:	6013      	str	r3, [r2, #0]
				//MaxEnergy = 0;
				if(OutData>MaxAllowedFirstVal)
200702ae:	4b5a      	ldr	r3, [pc, #360]	; (20070418 <ADC_Handler+0x254>)
200702b0:	681b      	ldr	r3, [r3, #0]
200702b2:	429c      	cmp	r4, r3
200702b4:	d906      	bls.n	200702c4 <ADC_Handler+0x100>
				{
					FilterState = 5;
200702b6:	2205      	movs	r2, #5
200702b8:	4b54      	ldr	r3, [pc, #336]	; (2007040c <ADC_Handler+0x248>)
200702ba:	601a      	str	r2, [r3, #0]
					delay = 0;
200702bc:	2200      	movs	r2, #0
200702be:	4b57      	ldr	r3, [pc, #348]	; (2007041c <ADC_Handler+0x258>)
200702c0:	601a      	str	r2, [r3, #0]
200702c2:	e13b      	b.n	2007053c <ADC_Handler+0x378>
				}
				else if(OutData>Threshold)
200702c4:	4b56      	ldr	r3, [pc, #344]	; (20070420 <ADC_Handler+0x25c>)
200702c6:	681b      	ldr	r3, [r3, #0]
200702c8:	429c      	cmp	r4, r3
200702ca:	f240 8137 	bls.w	2007053c <ADC_Handler+0x378>
				{
					//Det_flag = 1;
					//adc_disable_interrupt(ADC,ADC_IER_EOC0);;
					FirstDetVal = OutData;
200702ce:	4b51      	ldr	r3, [pc, #324]	; (20070414 <ADC_Handler+0x250>)
200702d0:	601c      	str	r4, [r3, #0]
					//MaxEnergy = Energy;
					FilterState = 1;
200702d2:	2201      	movs	r2, #1
200702d4:	4b4d      	ldr	r3, [pc, #308]	; (2007040c <ADC_Handler+0x248>)
200702d6:	601a      	str	r2, [r3, #0]
					delay = 0;	
200702d8:	2200      	movs	r2, #0
200702da:	4b50      	ldr	r3, [pc, #320]	; (2007041c <ADC_Handler+0x258>)
200702dc:	601a      	str	r2, [r3, #0]
					State1Rec = 3.3f;	
200702de:	4a51      	ldr	r2, [pc, #324]	; (20070424 <ADC_Handler+0x260>)
200702e0:	4b51      	ldr	r3, [pc, #324]	; (20070428 <ADC_Handler+0x264>)
200702e2:	601a      	str	r2, [r3, #0]
					State0Rec = __ADC_GET_CH2_FLOAT();
200702e4:	4b45      	ldr	r3, [pc, #276]	; (200703fc <ADC_Handler+0x238>)
200702e6:	8898      	ldrh	r0, [r3, #4]
200702e8:	4b50      	ldr	r3, [pc, #320]	; (2007042c <ADC_Handler+0x268>)
200702ea:	4798      	blx	r3
200702ec:	4950      	ldr	r1, [pc, #320]	; (20070430 <ADC_Handler+0x26c>)
200702ee:	4b51      	ldr	r3, [pc, #324]	; (20070434 <ADC_Handler+0x270>)
200702f0:	4798      	blx	r3
200702f2:	4951      	ldr	r1, [pc, #324]	; (20070438 <ADC_Handler+0x274>)
200702f4:	4b51      	ldr	r3, [pc, #324]	; (2007043c <ADC_Handler+0x278>)
200702f6:	4798      	blx	r3
200702f8:	4b51      	ldr	r3, [pc, #324]	; (20070440 <ADC_Handler+0x27c>)
200702fa:	6018      	str	r0, [r3, #0]
200702fc:	e11e      	b.n	2007053c <ADC_Handler+0x378>
				}	
			break;
			
			case 1: // Detect Max pulse
				State1Rec = min(__ADC_GET_CH2_FLOAT(),State1Rec);
200702fe:	4b3f      	ldr	r3, [pc, #252]	; (200703fc <ADC_Handler+0x238>)
20070300:	8898      	ldrh	r0, [r3, #4]
20070302:	4b4a      	ldr	r3, [pc, #296]	; (2007042c <ADC_Handler+0x268>)
20070304:	4798      	blx	r3
20070306:	494a      	ldr	r1, [pc, #296]	; (20070430 <ADC_Handler+0x26c>)
20070308:	4b4a      	ldr	r3, [pc, #296]	; (20070434 <ADC_Handler+0x270>)
2007030a:	4798      	blx	r3
2007030c:	494a      	ldr	r1, [pc, #296]	; (20070438 <ADC_Handler+0x274>)
2007030e:	4b4b      	ldr	r3, [pc, #300]	; (2007043c <ADC_Handler+0x278>)
20070310:	4798      	blx	r3
20070312:	4605      	mov	r5, r0
20070314:	4b44      	ldr	r3, [pc, #272]	; (20070428 <ADC_Handler+0x264>)
20070316:	681e      	ldr	r6, [r3, #0]
20070318:	4631      	mov	r1, r6
2007031a:	4b4a      	ldr	r3, [pc, #296]	; (20070444 <ADC_Handler+0x280>)
2007031c:	4798      	blx	r3
2007031e:	b900      	cbnz	r0, 20070322 <ADC_Handler+0x15e>
20070320:	4635      	mov	r5, r6
20070322:	4b41      	ldr	r3, [pc, #260]	; (20070428 <ADC_Handler+0x264>)
20070324:	601d      	str	r5, [r3, #0]
				if(OutData>MaxAllowedFirstVal)
20070326:	4b3c      	ldr	r3, [pc, #240]	; (20070418 <ADC_Handler+0x254>)
20070328:	681b      	ldr	r3, [r3, #0]
2007032a:	429c      	cmp	r4, r3
2007032c:	d906      	bls.n	2007033c <ADC_Handler+0x178>
				{
					FilterState = 5;
2007032e:	2205      	movs	r2, #5
20070330:	4b36      	ldr	r3, [pc, #216]	; (2007040c <ADC_Handler+0x248>)
20070332:	601a      	str	r2, [r3, #0]
					delay = 0;
20070334:	2200      	movs	r2, #0
20070336:	4b39      	ldr	r3, [pc, #228]	; (2007041c <ADC_Handler+0x258>)
20070338:	601a      	str	r2, [r3, #0]
2007033a:	e0ff      	b.n	2007053c <ADC_Handler+0x378>
				}
				else
				{
					if(FirstDetVal<(OutData))
2007033c:	4b35      	ldr	r3, [pc, #212]	; (20070414 <ADC_Handler+0x250>)
2007033e:	681b      	ldr	r3, [r3, #0]
20070340:	429c      	cmp	r4, r3
					{					
						FirstDetVal	= OutData; // finding the max FirstDetVal					
20070342:	bfc4      	itt	gt
20070344:	4b33      	ldrgt	r3, [pc, #204]	; (20070414 <ADC_Handler+0x250>)
20070346:	601c      	strgt	r4, [r3, #0]
					}				
					delay++;
20070348:	4a34      	ldr	r2, [pc, #208]	; (2007041c <ADC_Handler+0x258>)
2007034a:	6813      	ldr	r3, [r2, #0]
2007034c:	3301      	adds	r3, #1
2007034e:	6013      	str	r3, [r2, #0]
					if(delay>=2600)
20070350:	f640 2227 	movw	r2, #2599	; 0xa27
20070354:	4293      	cmp	r3, r2
20070356:	f240 80f1 	bls.w	2007053c <ADC_Handler+0x378>
					{
						FilterState = 2;
2007035a:	2202      	movs	r2, #2
2007035c:	4b2b      	ldr	r3, [pc, #172]	; (2007040c <ADC_Handler+0x248>)
2007035e:	601a      	str	r2, [r3, #0]
						delay = 0;
20070360:	2200      	movs	r2, #0
20070362:	4b2e      	ldr	r3, [pc, #184]	; (2007041c <ADC_Handler+0x258>)
20070364:	601a      	str	r2, [r3, #0]
20070366:	e0e9      	b.n	2007053c <ADC_Handler+0x378>
				/*if(Energy > MaxEnergy)
					MaxEnergy = Energy;*/
			break;
				
			case 2: // Delay state
				State1Rec = min(__ADC_GET_CH2_FLOAT(),State1Rec);
20070368:	4b24      	ldr	r3, [pc, #144]	; (200703fc <ADC_Handler+0x238>)
2007036a:	8898      	ldrh	r0, [r3, #4]
2007036c:	4b2f      	ldr	r3, [pc, #188]	; (2007042c <ADC_Handler+0x268>)
2007036e:	4798      	blx	r3
20070370:	492f      	ldr	r1, [pc, #188]	; (20070430 <ADC_Handler+0x26c>)
20070372:	4b30      	ldr	r3, [pc, #192]	; (20070434 <ADC_Handler+0x270>)
20070374:	4798      	blx	r3
20070376:	4930      	ldr	r1, [pc, #192]	; (20070438 <ADC_Handler+0x274>)
20070378:	4b30      	ldr	r3, [pc, #192]	; (2007043c <ADC_Handler+0x278>)
2007037a:	4798      	blx	r3
2007037c:	4605      	mov	r5, r0
2007037e:	4b2a      	ldr	r3, [pc, #168]	; (20070428 <ADC_Handler+0x264>)
20070380:	681e      	ldr	r6, [r3, #0]
20070382:	4631      	mov	r1, r6
20070384:	4b2f      	ldr	r3, [pc, #188]	; (20070444 <ADC_Handler+0x280>)
20070386:	4798      	blx	r3
20070388:	b900      	cbnz	r0, 2007038c <ADC_Handler+0x1c8>
2007038a:	4635      	mov	r5, r6
2007038c:	4b26      	ldr	r3, [pc, #152]	; (20070428 <ADC_Handler+0x264>)
2007038e:	601d      	str	r5, [r3, #0]
				if(OutData>FirstDetVal)
20070390:	4b20      	ldr	r3, [pc, #128]	; (20070414 <ADC_Handler+0x250>)
20070392:	681b      	ldr	r3, [r3, #0]
20070394:	429c      	cmp	r4, r3
20070396:	dd06      	ble.n	200703a6 <ADC_Handler+0x1e2>
				{
					FilterState = 5;
20070398:	2205      	movs	r2, #5
2007039a:	4b1c      	ldr	r3, [pc, #112]	; (2007040c <ADC_Handler+0x248>)
2007039c:	601a      	str	r2, [r3, #0]
					delay = 0;
2007039e:	2200      	movs	r2, #0
200703a0:	4b1e      	ldr	r3, [pc, #120]	; (2007041c <ADC_Handler+0x258>)
200703a2:	601a      	str	r2, [r3, #0]
200703a4:	e0ca      	b.n	2007053c <ADC_Handler+0x378>
				}				
				else if(delay<9000)
200703a6:	4b1d      	ldr	r3, [pc, #116]	; (2007041c <ADC_Handler+0x258>)
200703a8:	681b      	ldr	r3, [r3, #0]
200703aa:	f242 3227 	movw	r2, #8999	; 0x2327
200703ae:	4293      	cmp	r3, r2
200703b0:	d803      	bhi.n	200703ba <ADC_Handler+0x1f6>
				{
					delay++;
200703b2:	3301      	adds	r3, #1
200703b4:	4a19      	ldr	r2, [pc, #100]	; (2007041c <ADC_Handler+0x258>)
200703b6:	6013      	str	r3, [r2, #0]
200703b8:	e0c0      	b.n	2007053c <ADC_Handler+0x378>
				}
				else if( ((State0Rec - State1Rec) > 0.5f) || (State0Rec < 0.2f)) //Energy consideration
200703ba:	4b21      	ldr	r3, [pc, #132]	; (20070440 <ADC_Handler+0x27c>)
200703bc:	681c      	ldr	r4, [r3, #0]
200703be:	4629      	mov	r1, r5
200703c0:	4620      	mov	r0, r4
200703c2:	4b21      	ldr	r3, [pc, #132]	; (20070448 <ADC_Handler+0x284>)
200703c4:	4798      	blx	r3
200703c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
200703ca:	4b20      	ldr	r3, [pc, #128]	; (2007044c <ADC_Handler+0x288>)
200703cc:	4798      	blx	r3
200703ce:	b920      	cbnz	r0, 200703da <ADC_Handler+0x216>
200703d0:	491f      	ldr	r1, [pc, #124]	; (20070450 <ADC_Handler+0x28c>)
200703d2:	4620      	mov	r0, r4
200703d4:	4b1b      	ldr	r3, [pc, #108]	; (20070444 <ADC_Handler+0x280>)
200703d6:	4798      	blx	r3
200703d8:	b130      	cbz	r0, 200703e8 <ADC_Handler+0x224>
				{
					FilterState = 3;
200703da:	2203      	movs	r2, #3
200703dc:	4b0b      	ldr	r3, [pc, #44]	; (2007040c <ADC_Handler+0x248>)
200703de:	601a      	str	r2, [r3, #0]
					delay = 0;
200703e0:	2200      	movs	r2, #0
200703e2:	4b0e      	ldr	r3, [pc, #56]	; (2007041c <ADC_Handler+0x258>)
200703e4:	601a      	str	r2, [r3, #0]
200703e6:	e0a9      	b.n	2007053c <ADC_Handler+0x378>
				}			
				else // Minimum energy fault
				{
					FilterState = 0;
200703e8:	2300      	movs	r3, #0
200703ea:	4a08      	ldr	r2, [pc, #32]	; (2007040c <ADC_Handler+0x248>)
200703ec:	6013      	str	r3, [r2, #0]
					delay = 0;
200703ee:	4a0b      	ldr	r2, [pc, #44]	; (2007041c <ADC_Handler+0x258>)
200703f0:	6013      	str	r3, [r2, #0]
200703f2:	e0a3      	b.n	2007053c <ADC_Handler+0x378>
200703f4:	400c0000 	.word	0x400c0000
200703f8:	00081177 	.word	0x00081177
200703fc:	20071140 	.word	0x20071140
20070400:	20071158 	.word	0x20071158
20070404:	20071174 	.word	0x20071174
20070408:	20071108 	.word	0x20071108
2007040c:	200705b4 	.word	0x200705b4
20070410:	2007116c 	.word	0x2007116c
20070414:	20071164 	.word	0x20071164
20070418:	200705b8 	.word	0x200705b8
2007041c:	20071168 	.word	0x20071168
20070420:	200705bc 	.word	0x200705bc
20070424:	40533333 	.word	0x40533333
20070428:	20071150 	.word	0x20071150
2007042c:	00081b05 	.word	0x00081b05
20070430:	40551eb8 	.word	0x40551eb8
20070434:	00081bb5 	.word	0x00081bb5
20070438:	457ff000 	.word	0x457ff000
2007043c:	00081d1d 	.word	0x00081d1d
20070440:	2007115c 	.word	0x2007115c
20070444:	00081ef1 	.word	0x00081ef1
20070448:	000819a1 	.word	0x000819a1
2007044c:	00081f2d 	.word	0x00081f2d
20070450:	3e4ccccd 	.word	0x3e4ccccd
				}	
			break;
			
			case 3: // Detect second max pulse
				if(delay<10000)
20070454:	4b47      	ldr	r3, [pc, #284]	; (20070574 <ADC_Handler+0x3b0>)
20070456:	681b      	ldr	r3, [r3, #0]
20070458:	f242 720f 	movw	r2, #9999	; 0x270f
2007045c:	4293      	cmp	r3, r2
2007045e:	d809      	bhi.n	20070474 <ADC_Handler+0x2b0>
				{
					delay++;
20070460:	3301      	adds	r3, #1
20070462:	4a44      	ldr	r2, [pc, #272]	; (20070574 <ADC_Handler+0x3b0>)
20070464:	6013      	str	r3, [r2, #0]
					if(SecondDetVal<OutData)					
20070466:	4b44      	ldr	r3, [pc, #272]	; (20070578 <ADC_Handler+0x3b4>)
20070468:	681b      	ldr	r3, [r3, #0]
2007046a:	429c      	cmp	r4, r3
2007046c:	dd66      	ble.n	2007053c <ADC_Handler+0x378>
						SecondDetVal = OutData;
2007046e:	4b42      	ldr	r3, [pc, #264]	; (20070578 <ADC_Handler+0x3b4>)
20070470:	601c      	str	r4, [r3, #0]
20070472:	e063      	b.n	2007053c <ADC_Handler+0x378>
				}
				else
				{
					if( ((SecondDetVal/5)<=(FirstDetVal/2)) && ((SecondDetVal/126)>=(FirstDetVal/100)) )  //last working value = 1.25
20070474:	4b40      	ldr	r3, [pc, #256]	; (20070578 <ADC_Handler+0x3b4>)
20070476:	681b      	ldr	r3, [r3, #0]
20070478:	4a40      	ldr	r2, [pc, #256]	; (2007057c <ADC_Handler+0x3b8>)
2007047a:	6812      	ldr	r2, [r2, #0]
2007047c:	4840      	ldr	r0, [pc, #256]	; (20070580 <ADC_Handler+0x3bc>)
2007047e:	fb80 1003 	smull	r1, r0, r0, r3
20070482:	17d9      	asrs	r1, r3, #31
20070484:	ebc1 0160 	rsb	r1, r1, r0, asr #1
20070488:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
2007048c:	ebb1 0f60 	cmp.w	r1, r0, asr #1
20070490:	dc15      	bgt.n	200704be <ADC_Handler+0x2fa>
20070492:	493c      	ldr	r1, [pc, #240]	; (20070584 <ADC_Handler+0x3c0>)
20070494:	fb81 0103 	smull	r0, r1, r1, r3
20070498:	4419      	add	r1, r3
2007049a:	17db      	asrs	r3, r3, #31
2007049c:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
200704a0:	4939      	ldr	r1, [pc, #228]	; (20070588 <ADC_Handler+0x3c4>)
200704a2:	fb81 0102 	smull	r0, r1, r1, r2
200704a6:	17d2      	asrs	r2, r2, #31
200704a8:	ebc2 1261 	rsb	r2, r2, r1, asr #5
200704ac:	4293      	cmp	r3, r2
200704ae:	db06      	blt.n	200704be <ADC_Handler+0x2fa>
					{
						FilterState = 4;
200704b0:	2204      	movs	r2, #4
200704b2:	4b36      	ldr	r3, [pc, #216]	; (2007058c <ADC_Handler+0x3c8>)
200704b4:	601a      	str	r2, [r3, #0]
						delay = 0;
200704b6:	2200      	movs	r2, #0
200704b8:	4b2e      	ldr	r3, [pc, #184]	; (20070574 <ADC_Handler+0x3b0>)
200704ba:	601a      	str	r2, [r3, #0]
200704bc:	e03e      	b.n	2007053c <ADC_Handler+0x378>
					}
					else
					{
						FilterState = 5;
200704be:	2205      	movs	r2, #5
200704c0:	4b32      	ldr	r3, [pc, #200]	; (2007058c <ADC_Handler+0x3c8>)
200704c2:	601a      	str	r2, [r3, #0]
						delay = 0;
200704c4:	2200      	movs	r2, #0
200704c6:	4b2b      	ldr	r3, [pc, #172]	; (20070574 <ADC_Handler+0x3b0>)
200704c8:	601a      	str	r2, [r3, #0]
200704ca:	e037      	b.n	2007053c <ADC_Handler+0x378>
					}
				}				
			break;
			
			case 4: // Bell door detect
				if(delay<250)
200704cc:	4b29      	ldr	r3, [pc, #164]	; (20070574 <ADC_Handler+0x3b0>)
200704ce:	681b      	ldr	r3, [r3, #0]
200704d0:	2bf9      	cmp	r3, #249	; 0xf9
200704d2:	d803      	bhi.n	200704dc <ADC_Handler+0x318>
				{
					delay++;					
200704d4:	3301      	adds	r3, #1
200704d6:	4a27      	ldr	r2, [pc, #156]	; (20070574 <ADC_Handler+0x3b0>)
200704d8:	6013      	str	r3, [r2, #0]
200704da:	e02f      	b.n	2007053c <ADC_Handler+0x378>
				}
				else
				{
					Det_flag = 1;
200704dc:	2201      	movs	r2, #1
200704de:	4b2c      	ldr	r3, [pc, #176]	; (20070590 <ADC_Handler+0x3cc>)
200704e0:	601a      	str	r2, [r3, #0]
					FilterState = 6;
200704e2:	2206      	movs	r2, #6
200704e4:	4b29      	ldr	r3, [pc, #164]	; (2007058c <ADC_Handler+0x3c8>)
200704e6:	601a      	str	r2, [r3, #0]
					delay = 0;
200704e8:	2200      	movs	r2, #0
200704ea:	4b22      	ldr	r3, [pc, #136]	; (20070574 <ADC_Handler+0x3b0>)
200704ec:	601a      	str	r2, [r3, #0]
					adc_disable_interrupt(ADC,ADC_IER_ENDRX);
200704ee:	4c29      	ldr	r4, [pc, #164]	; (20070594 <ADC_Handler+0x3d0>)
200704f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
200704f4:	4620      	mov	r0, r4
200704f6:	4b28      	ldr	r3, [pc, #160]	; (20070598 <ADC_Handler+0x3d4>)
200704f8:	4798      	blx	r3
					adc_reset(ADC);
200704fa:	4620      	mov	r0, r4
200704fc:	4b27      	ldr	r3, [pc, #156]	; (2007059c <ADC_Handler+0x3d8>)
200704fe:	4798      	blx	r3
20070500:	e01c      	b.n	2007053c <ADC_Handler+0x378>
				}				
			break;
			
			case 5: // Noise state
				if(delay<50000) //1 seconds hold off due noise
20070502:	4b1c      	ldr	r3, [pc, #112]	; (20070574 <ADC_Handler+0x3b0>)
20070504:	681b      	ldr	r3, [r3, #0]
20070506:	f24c 324f 	movw	r2, #49999	; 0xc34f
2007050a:	4293      	cmp	r3, r2
2007050c:	d803      	bhi.n	20070516 <ADC_Handler+0x352>
				{					
					delay++;
2007050e:	3301      	adds	r3, #1
20070510:	4a18      	ldr	r2, [pc, #96]	; (20070574 <ADC_Handler+0x3b0>)
20070512:	6013      	str	r3, [r2, #0]
20070514:	e012      	b.n	2007053c <ADC_Handler+0x378>
				}
				else
				{					
					FilterState = 6;
20070516:	2206      	movs	r2, #6
20070518:	4b1c      	ldr	r3, [pc, #112]	; (2007058c <ADC_Handler+0x3c8>)
2007051a:	601a      	str	r2, [r3, #0]
					delay = 0;
2007051c:	2200      	movs	r2, #0
2007051e:	4b15      	ldr	r3, [pc, #84]	; (20070574 <ADC_Handler+0x3b0>)
20070520:	601a      	str	r2, [r3, #0]
20070522:	e00b      	b.n	2007053c <ADC_Handler+0x378>
				}			
			break;
			
			case 6: // Init state
				if(delay<25000) //0.5 seconds to stable the filter
20070524:	4b13      	ldr	r3, [pc, #76]	; (20070574 <ADC_Handler+0x3b0>)
20070526:	681b      	ldr	r3, [r3, #0]
20070528:	f246 12a7 	movw	r2, #24999	; 0x61a7
2007052c:	4293      	cmp	r3, r2
				{
					delay++;
2007052e:	bf91      	iteee	ls
20070530:	3301      	addls	r3, #1
				}
				else
				{
					FilterState = 0;
20070532:	2300      	movhi	r3, #0
20070534:	4a15      	ldrhi	r2, [pc, #84]	; (2007058c <ADC_Handler+0x3c8>)
20070536:	6013      	strhi	r3, [r2, #0]
					delay = 0;
20070538:	4a0e      	ldr	r2, [pc, #56]	; (20070574 <ADC_Handler+0x3b0>)
2007053a:	6013      	str	r3, [r2, #0]
				break;
			default:break;
			
		}	
		//pio_set_pin_low(LED2_GPIO);// for real time debug
		if(!pio_get_pin_value(PIO_PA15_IDX))
2007053c:	200f      	movs	r0, #15
2007053e:	4b18      	ldr	r3, [pc, #96]	; (200705a0 <ADC_Handler+0x3dc>)
20070540:	4798      	blx	r3
20070542:	b988      	cbnz	r0, 20070568 <ADC_Handler+0x3a4>
		{
			OutDataToDAC0  = (FirstDetVal>>9)&0xfff;			
20070544:	4b0d      	ldr	r3, [pc, #52]	; (2007057c <ADC_Handler+0x3b8>)
20070546:	6818      	ldr	r0, [r3, #0]
20070548:	f3c0 204b 	ubfx	r0, r0, #9, #12
			OutDataToDAC1  = ((SecondDetVal>>9)&0xfff)|(1<<12);			
2007054c:	4b0a      	ldr	r3, [pc, #40]	; (20070578 <ADC_Handler+0x3b4>)
2007054e:	681c      	ldr	r4, [r3, #0]
20070550:	f3c4 244b 	ubfx	r4, r4, #9, #12
20070554:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		{
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
			OutDataToDAC1  = ((MAX_SIGNAL)<<(17-9))|(1<<12);
			//OutDataToDAC1  = (1<<(28-18))|(1<<12);
		}
		DAC3X8E_write(OutDataToDAC0);
20070558:	4d12      	ldr	r5, [pc, #72]	; (200705a4 <ADC_Handler+0x3e0>)
2007055a:	47a8      	blx	r5
		DAC3X8E_write(OutDataToDAC1);
2007055c:	4620      	mov	r0, r4
2007055e:	47a8      	blx	r5
		pio_set_pin_low(PIO_PA7_IDX);
20070560:	2007      	movs	r0, #7
20070562:	4b11      	ldr	r3, [pc, #68]	; (200705a8 <ADC_Handler+0x3e4>)
20070564:	4798      	blx	r3
20070566:	bd70      	pop	{r4, r5, r6, pc}
			OutDataToDAC1  = ((MAX_SIGNAL)<<(17-9))|(1<<12);
20070568:	f44f 54c8 	mov.w	r4, #6400	; 0x1900
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
2007056c:	f44f 6010 	mov.w	r0, #2304	; 0x900
20070570:	e7f2      	b.n	20070558 <ADC_Handler+0x394>
20070572:	bf00      	nop
20070574:	20071168 	.word	0x20071168
20070578:	2007116c 	.word	0x2007116c
2007057c:	20071164 	.word	0x20071164
20070580:	66666667 	.word	0x66666667
20070584:	82082083 	.word	0x82082083
20070588:	51eb851f 	.word	0x51eb851f
2007058c:	200705b4 	.word	0x200705b4
20070590:	20071104 	.word	0x20071104
20070594:	400c0000 	.word	0x400c0000
20070598:	000801f1 	.word	0x000801f1
2007059c:	000801d5 	.word	0x000801d5
200705a0:	0008115b 	.word	0x0008115b
200705a4:	00080321 	.word	0x00080321
200705a8:	00081191 	.word	0x00081191

200705ac <g_interrupt_enabled>:
200705ac:	00000001                                ....

200705b0 <SystemCoreClock>:
200705b0:	003d0900                                ..=.

200705b4 <FilterState>:
200705b4:	00000006                                ....

200705b8 <MaxAllowedFirstVal>:
200705b8:	ffffffff                                ....

200705bc <Threshold>:
200705bc:	00000fa0                                ....

200705c0 <_impure_ptr>:
200705c0:	200705c8 00000000                       ... ....

200705c8 <impure_data>:
200705c8:	00000000 200708b4 2007091c 20070984     ....... ... ... 
	...
20070670:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070680:	0005deec 0000000b 00000000 00000000     ................
	...

200709f0 <__atexit_recursive_mutex>:
200709f0:	200711b0                                ... 

200709f4 <__global_locale>:
200709f4:	00000043 00000000 00000000 00000000     C...............
	...
20070a14:	00000043 00000000 00000000 00000000     C...............
	...
20070a34:	00000043 00000000 00000000 00000000     C...............
	...
20070a54:	00000043 00000000 00000000 00000000     C...............
	...
20070a74:	00000043 00000000 00000000 00000000     C...............
	...
20070a94:	00000043 00000000 00000000 00000000     C...............
	...
20070ab4:	00000043 00000000 00000000 00000000     C...............
	...
20070ad4:	00085a71 00084e55 00000000 00086a24     qZ..UN......$j..
20070ae4:	00086920 00086868 00086868 00086868      i..hh..hh..hh..
20070af4:	00086868 00086868 00086868 00086868     hh..hh..hh..hh..
20070b04:	00086868 00086868 ffffffff ffffffff     hh..hh..........
20070b14:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070b3c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070b60 <__malloc_av_>:
	...
20070b68:	20070b60 20070b60 20070b68 20070b68     `.. `.. h.. h.. 
20070b78:	20070b70 20070b70 20070b78 20070b78     p.. p.. x.. x.. 
20070b88:	20070b80 20070b80 20070b88 20070b88     ... ... ... ... 
20070b98:	20070b90 20070b90 20070b98 20070b98     ... ... ... ... 
20070ba8:	20070ba0 20070ba0 20070ba8 20070ba8     ... ... ... ... 
20070bb8:	20070bb0 20070bb0 20070bb8 20070bb8     ... ... ... ... 
20070bc8:	20070bc0 20070bc0 20070bc8 20070bc8     ... ... ... ... 
20070bd8:	20070bd0 20070bd0 20070bd8 20070bd8     ... ... ... ... 
20070be8:	20070be0 20070be0 20070be8 20070be8     ... ... ... ... 
20070bf8:	20070bf0 20070bf0 20070bf8 20070bf8     ... ... ... ... 
20070c08:	20070c00 20070c00 20070c08 20070c08     ... ... ... ... 
20070c18:	20070c10 20070c10 20070c18 20070c18     ... ... ... ... 
20070c28:	20070c20 20070c20 20070c28 20070c28      ..  .. (.. (.. 
20070c38:	20070c30 20070c30 20070c38 20070c38     0.. 0.. 8.. 8.. 
20070c48:	20070c40 20070c40 20070c48 20070c48     @.. @.. H.. H.. 
20070c58:	20070c50 20070c50 20070c58 20070c58     P.. P.. X.. X.. 
20070c68:	20070c60 20070c60 20070c68 20070c68     `.. `.. h.. h.. 
20070c78:	20070c70 20070c70 20070c78 20070c78     p.. p.. x.. x.. 
20070c88:	20070c80 20070c80 20070c88 20070c88     ... ... ... ... 
20070c98:	20070c90 20070c90 20070c98 20070c98     ... ... ... ... 
20070ca8:	20070ca0 20070ca0 20070ca8 20070ca8     ... ... ... ... 
20070cb8:	20070cb0 20070cb0 20070cb8 20070cb8     ... ... ... ... 
20070cc8:	20070cc0 20070cc0 20070cc8 20070cc8     ... ... ... ... 
20070cd8:	20070cd0 20070cd0 20070cd8 20070cd8     ... ... ... ... 
20070ce8:	20070ce0 20070ce0 20070ce8 20070ce8     ... ... ... ... 
20070cf8:	20070cf0 20070cf0 20070cf8 20070cf8     ... ... ... ... 
20070d08:	20070d00 20070d00 20070d08 20070d08     ... ... ... ... 
20070d18:	20070d10 20070d10 20070d18 20070d18     ... ... ... ... 
20070d28:	20070d20 20070d20 20070d28 20070d28      ..  .. (.. (.. 
20070d38:	20070d30 20070d30 20070d38 20070d38     0.. 0.. 8.. 8.. 
20070d48:	20070d40 20070d40 20070d48 20070d48     @.. @.. H.. H.. 
20070d58:	20070d50 20070d50 20070d58 20070d58     P.. P.. X.. X.. 
20070d68:	20070d60 20070d60 20070d68 20070d68     `.. `.. h.. h.. 
20070d78:	20070d70 20070d70 20070d78 20070d78     p.. p.. x.. x.. 
20070d88:	20070d80 20070d80 20070d88 20070d88     ... ... ... ... 
20070d98:	20070d90 20070d90 20070d98 20070d98     ... ... ... ... 
20070da8:	20070da0 20070da0 20070da8 20070da8     ... ... ... ... 
20070db8:	20070db0 20070db0 20070db8 20070db8     ... ... ... ... 
20070dc8:	20070dc0 20070dc0 20070dc8 20070dc8     ... ... ... ... 
20070dd8:	20070dd0 20070dd0 20070dd8 20070dd8     ... ... ... ... 
20070de8:	20070de0 20070de0 20070de8 20070de8     ... ... ... ... 
20070df8:	20070df0 20070df0 20070df8 20070df8     ... ... ... ... 
20070e08:	20070e00 20070e00 20070e08 20070e08     ... ... ... ... 
20070e18:	20070e10 20070e10 20070e18 20070e18     ... ... ... ... 
20070e28:	20070e20 20070e20 20070e28 20070e28      ..  .. (.. (.. 
20070e38:	20070e30 20070e30 20070e38 20070e38     0.. 0.. 8.. 8.. 
20070e48:	20070e40 20070e40 20070e48 20070e48     @.. @.. H.. H.. 
20070e58:	20070e50 20070e50 20070e58 20070e58     P.. P.. X.. X.. 
20070e68:	20070e60 20070e60 20070e68 20070e68     `.. `.. h.. h.. 
20070e78:	20070e70 20070e70 20070e78 20070e78     p.. p.. x.. x.. 
20070e88:	20070e80 20070e80 20070e88 20070e88     ... ... ... ... 
20070e98:	20070e90 20070e90 20070e98 20070e98     ... ... ... ... 
20070ea8:	20070ea0 20070ea0 20070ea8 20070ea8     ... ... ... ... 
20070eb8:	20070eb0 20070eb0 20070eb8 20070eb8     ... ... ... ... 
20070ec8:	20070ec0 20070ec0 20070ec8 20070ec8     ... ... ... ... 
20070ed8:	20070ed0 20070ed0 20070ed8 20070ed8     ... ... ... ... 
20070ee8:	20070ee0 20070ee0 20070ee8 20070ee8     ... ... ... ... 
20070ef8:	20070ef0 20070ef0 20070ef8 20070ef8     ... ... ... ... 
20070f08:	20070f00 20070f00 20070f08 20070f08     ... ... ... ... 
20070f18:	20070f10 20070f10 20070f18 20070f18     ... ... ... ... 
20070f28:	20070f20 20070f20 20070f28 20070f28      ..  .. (.. (.. 
20070f38:	20070f30 20070f30 20070f38 20070f38     0.. 0.. 8.. 8.. 
20070f48:	20070f40 20070f40 20070f48 20070f48     @.. @.. H.. H.. 
20070f58:	20070f50 20070f50 20070f58 20070f58     P.. P.. X.. X.. 

20070f68 <__malloc_sbrk_base>:
20070f68:	ffffffff                                ....

20070f6c <__malloc_trim_threshold>:
20070f6c:	00020000                                ....
