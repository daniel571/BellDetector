
BellDetectorDue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006acc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086acc  00086acc  00016acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e78  20070000  00086ad4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000284  20070e78  0008794c  00020e78  2**2
                  ALLOC
  4 .stack        00002004  200710fc  00087bd0  00020e78  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020ea1  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a72e  00000000  00000000  00020efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004099  00000000  00000000  0003b628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000503b  00000000  00000000  0003f6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a90  00000000  00000000  000446fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009d0  00000000  00000000  0004518c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b254  00000000  00000000  00045b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001282c  00000000  00000000  00060db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066247  00000000  00000000  000735dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000231c  00000000  00000000  000d9824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 31 07 20 f5 14 08 00 f1 14 08 00 f1 14 08 00     .1. ............
   80010:	f1 14 08 00 f1 14 08 00 f1 14 08 00 00 00 00 00     ................
	...
   8002c:	f1 14 08 00 f1 14 08 00 00 00 00 00 f1 14 08 00     ................
   8003c:	f1 14 08 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................
   8004c:	f1 14 08 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................
   8005c:	f1 14 08 00 f1 14 08 00 f1 14 08 00 00 00 00 00     ................
   8006c:	99 13 08 00 ad 13 08 00 c1 13 08 00 d5 13 08 00     ................
	...
   80084:	f1 14 08 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................
   80094:	f1 14 08 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................
   800a4:	00 00 00 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................
   800b4:	f1 14 08 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................
   800c4:	f1 14 08 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................
   800d4:	c5 01 07 20 f1 14 08 00 f1 14 08 00 f1 14 08 00     ... ............
   800e4:	f1 14 08 00 f1 14 08 00 f1 14 08 00 f1 14 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070e78 	.word	0x20070e78
   80110:	00000000 	.word	0x00000000
   80114:	00086ad4 	.word	0x00086ad4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00086ad4 	.word	0x00086ad4
   80154:	20070e7c 	.word	0x20070e7c
   80158:	00086ad4 	.word	0x00086ad4
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80162:	2401      	movs	r4, #1
   80164:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80166:	2400      	movs	r4, #0
   80168:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8016a:	f240 2502 	movw	r5, #514	; 0x202
   8016e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80172:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80176:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8017a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8017c:	0052      	lsls	r2, r2, #1
   8017e:	fbb1 f2f2 	udiv	r2, r1, r2
   80182:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80184:	0212      	lsls	r2, r2, #8
   80186:	b292      	uxth	r2, r2
   80188:	432b      	orrs	r3, r5
   8018a:	431a      	orrs	r2, r3
   8018c:	6042      	str	r2, [r0, #4]
	return 0;
}
   8018e:	4620      	mov	r0, r4
   80190:	bc30      	pop	{r4, r5}
   80192:	4770      	bx	lr

00080194 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80194:	6843      	ldr	r3, [r0, #4]
   80196:	f023 0310 	bic.w	r3, r3, #16
   8019a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8019c:	6843      	ldr	r3, [r0, #4]
   8019e:	4319      	orrs	r1, r3
   801a0:	6041      	str	r1, [r0, #4]
   801a2:	4770      	bx	lr

000801a4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801a4:	6843      	ldr	r3, [r0, #4]
   801a6:	01d2      	lsls	r2, r2, #7
   801a8:	b2d2      	uxtb	r2, r2
   801aa:	4319      	orrs	r1, r3
   801ac:	430a      	orrs	r2, r1
   801ae:	6042      	str	r2, [r0, #4]
   801b0:	4770      	bx	lr

000801b2 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801b2:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801b4:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   801b6:	0609      	lsls	r1, r1, #24
   801b8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801bc:	4321      	orrs	r1, r4
   801be:	430a      	orrs	r2, r1
   801c0:	0719      	lsls	r1, r3, #28
   801c2:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   801c6:	4311      	orrs	r1, r2
   801c8:	6041      	str	r1, [r0, #4]
}
   801ca:	bc10      	pop	{r4}
   801cc:	4770      	bx	lr

000801ce <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   801ce:	2302      	movs	r3, #2
   801d0:	6003      	str	r3, [r0, #0]
   801d2:	4770      	bx	lr

000801d4 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   801d4:	2301      	movs	r3, #1
   801d6:	fa03 f101 	lsl.w	r1, r3, r1
   801da:	6101      	str	r1, [r0, #16]
   801dc:	4770      	bx	lr

000801de <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
   801de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801e2:	6143      	str	r3, [r0, #20]
   801e4:	4770      	bx	lr

000801e6 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   801e6:	6241      	str	r1, [r0, #36]	; 0x24
   801e8:	4770      	bx	lr

000801ea <adc_disable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IDR = ul_source;
   801ea:	6281      	str	r1, [r0, #40]	; 0x28
   801ec:	4770      	bx	lr

000801ee <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   801ee:	6800      	ldr	r0, [r0, #0]
}
   801f0:	f3c0 2003 	ubfx	r0, r0, #8, #4
   801f4:	4770      	bx	lr
	...

000801f8 <efc_init>:
{
   801f8:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   801fa:	0212      	lsls	r2, r2, #8
   801fc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   80200:	4311      	orrs	r1, r2
   80202:	4b02      	ldr	r3, [pc, #8]	; (8020c <efc_init+0x14>)
   80204:	4798      	blx	r3
}
   80206:	2000      	movs	r0, #0
   80208:	bd08      	pop	{r3, pc}
   8020a:	bf00      	nop
   8020c:	20070079 	.word	0x20070079

00080210 <efc_set_wait_state>:
{
   80210:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   80212:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   80214:	0209      	lsls	r1, r1, #8
   80216:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   8021a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   8021e:	4319      	orrs	r1, r3
   80220:	4b01      	ldr	r3, [pc, #4]	; (80228 <efc_set_wait_state+0x18>)
   80222:	4798      	blx	r3
   80224:	bd08      	pop	{r3, pc}
   80226:	bf00      	nop
   80228:	20070079 	.word	0x20070079

0008022c <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   8022c:	f1a1 030e 	sub.w	r3, r1, #14
   80230:	2b01      	cmp	r3, #1
   80232:	d802      	bhi.n	8023a <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   80234:	f04f 30ff 	mov.w	r0, #4294967295
   80238:	4770      	bx	lr
{
   8023a:	b510      	push	{r4, lr}
   8023c:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8023e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80242:	fab3 f383 	clz	r3, r3
   80246:	095b      	lsrs	r3, r3, #5
   80248:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8024a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8024c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80250:	2400      	movs	r4, #0
   80252:	4b0b      	ldr	r3, [pc, #44]	; (80280 <efc_perform_command+0x54>)
   80254:	701c      	strb	r4, [r3, #0]
	return flags;
   80256:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   80258:	0212      	lsls	r2, r2, #8
   8025a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   8025e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   80262:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   80266:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   80268:	4311      	orrs	r1, r2
   8026a:	4b06      	ldr	r3, [pc, #24]	; (80284 <efc_perform_command+0x58>)
   8026c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8026e:	b12c      	cbz	r4, 8027c <efc_perform_command+0x50>
		cpu_irq_enable();
   80270:	2201      	movs	r2, #1
   80272:	4b03      	ldr	r3, [pc, #12]	; (80280 <efc_perform_command+0x54>)
   80274:	701a      	strb	r2, [r3, #0]
   80276:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8027a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   8027c:	b002      	add	sp, #8
   8027e:	bd10      	pop	{r4, pc}
   80280:	200704b8 	.word	0x200704b8
   80284:	2007007d 	.word	0x2007007d

00080288 <FIFO_Init>:

int32_t AlphaQ,BetaQ,BetaSQrtQ,BetaMul2Q,BetaSQRTInvQ;

void FIFO_Init(XFifo* Fifo1 )
{
	Fifo1->WriteInx = 0;
   80288:	2300      	movs	r3, #0
   8028a:	6003      	str	r3, [r0, #0]
	Fifo1->ReadInx = 0;
   8028c:	6043      	str	r3, [r0, #4]
	Fifo1->Data[0] = 0;
   8028e:	60c3      	str	r3, [r0, #12]
	Fifo1->Data[1] = 0;
   80290:	6103      	str	r3, [r0, #16]
	Fifo1->Data[2] = 0;
   80292:	6143      	str	r3, [r0, #20]
	Fifo1->FilterY[0] = 0;
   80294:	6183      	str	r3, [r0, #24]
	Fifo1->FilterY[1] = 0;
   80296:	61c3      	str	r3, [r0, #28]
	Fifo1->FilterY[2] = 0;
   80298:	6203      	str	r3, [r0, #32]
	Fifo1->WriteIndxY = 0;
   8029a:	6083      	str	r3, [r0, #8]
	
	Fifo1->AlphaQ = (int32_t)(ALPHA * BETA_MUL2_Q);
   8029c:	6283      	str	r3, [r0, #40]	; 0x28
	Fifo1->BetaQ =  (int32_t)(BETA * BETA_MUL2_Q);
   8029e:	2369      	movs	r3, #105	; 0x69
   802a0:	62c3      	str	r3, [r0, #44]	; 0x2c
	Fifo1->BetaSQrtQ = (int32_t)(BETA_SQRT * BETA_MUL2_Q);
   802a2:	f240 23b6 	movw	r3, #694	; 0x2b6
   802a6:	6303      	str	r3, [r0, #48]	; 0x30
	Fifo1->BetaMul2Q =  (int32_t)(BETA_MUL2 * BETA_MUL2_Q);
   802a8:	23d2      	movs	r3, #210	; 0xd2
   802aa:	6343      	str	r3, [r0, #52]	; 0x34
	Fifo1->BetaSQRTInvQ =  (int32_t)(BETA_SQRT_INV * BETA_SQRT_INV_Q);
   802ac:	23bd      	movs	r3, #189	; 0xbd
   802ae:	6383      	str	r3, [r0, #56]	; 0x38
   802b0:	4770      	bx	lr
	...

000802b4 <FIFO2_Init>:


// Fifo2p1 located at 0x20072de0 after malloc - stack section end in 20072dd8 (8 bytes dif)
// Fifo2p2 located at 0x20077438 after malloc
void FIFO2_Init(XFifo2* Fifo2, int len)
{
   802b4:	b538      	push	{r3, r4, r5, lr}
   802b6:	4604      	mov	r4, r0
   802b8:	460d      	mov	r5, r1
	int i;
	Fifo2->OldestInd = 0;
   802ba:	2300      	movs	r3, #0
   802bc:	6003      	str	r3, [r0, #0]
	Fifo2->len = len;
   802be:	60c1      	str	r1, [r0, #12]
	Fifo2->Sound = (float*)malloc(sizeof(float)*len);
   802c0:	0088      	lsls	r0, r1, #2
   802c2:	4b08      	ldr	r3, [pc, #32]	; (802e4 <FIFO2_Init+0x30>)
   802c4:	4798      	blx	r3
   802c6:	6060      	str	r0, [r4, #4]
	
	for (i=0;i<len;i++)
   802c8:	2d00      	cmp	r5, #0
   802ca:	dd07      	ble.n	802dc <FIFO2_Init+0x28>
   802cc:	2300      	movs	r3, #0
	{
		Fifo2->Sound[i] = 0.0;	
   802ce:	2100      	movs	r1, #0
   802d0:	6862      	ldr	r2, [r4, #4]
   802d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<len;i++)
   802d6:	3301      	adds	r3, #1
   802d8:	429d      	cmp	r5, r3
   802da:	d1f9      	bne.n	802d0 <FIFO2_Init+0x1c>
	}
	Fifo2->Sum = 0;
   802dc:	2300      	movs	r3, #0
   802de:	60a3      	str	r3, [r4, #8]
   802e0:	bd38      	pop	{r3, r4, r5, pc}
   802e2:	bf00      	nop
   802e4:	00081efd 	.word	0x00081efd

000802e8 <FIFO2_Reset>:
}

void FIFO2_Reset(XFifo2* Fifo2)
{
	int i;
	Fifo2->OldestInd = 0;	
   802e8:	2300      	movs	r3, #0
   802ea:	6003      	str	r3, [r0, #0]
	
	for (i=0;i<Fifo2->len;i++)
   802ec:	68c3      	ldr	r3, [r0, #12]
   802ee:	2b00      	cmp	r3, #0
   802f0:	dd08      	ble.n	80304 <FIFO2_Reset+0x1c>
   802f2:	2300      	movs	r3, #0
	{
		Fifo2->Sound[i] = 0.0;
   802f4:	2100      	movs	r1, #0
   802f6:	6842      	ldr	r2, [r0, #4]
   802f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<Fifo2->len;i++)
   802fc:	3301      	adds	r3, #1
   802fe:	68c2      	ldr	r2, [r0, #12]
   80300:	429a      	cmp	r2, r3
   80302:	dcf8      	bgt.n	802f6 <FIFO2_Reset+0xe>
	}
	Fifo2->Sum = 0;
   80304:	2300      	movs	r3, #0
   80306:	6083      	str	r3, [r0, #8]
   80308:	4770      	bx	lr
	...

0008030c <DAC3X8E_Init>:
#include "DAC3X8E.h"
#include "sam3x8e.h"
#include "pmc.h"

void DAC3X8E_Init()
{
   8030c:	b508      	push	{r3, lr}
	uint32_t mr;
	pmc_enable_periph_clk(ID_DACC);
   8030e:	2026      	movs	r0, #38	; 0x26
   80310:	4b15      	ldr	r3, [pc, #84]	; (80368 <DAC3X8E_Init+0x5c>)
   80312:	4798      	blx	r3
	
	//disable write protect
	DACC->DACC_CDR = 0;
   80314:	4b15      	ldr	r3, [pc, #84]	; (8036c <DAC3X8E_Init+0x60>)
   80316:	2200      	movs	r2, #0
   80318:	621a      	str	r2, [r3, #32]
	// Set trigger mode 1
	mr = DACC->DACC_MR & (~(DACC_MR_TRGSEL_Msk));
   8031a:	685a      	ldr	r2, [r3, #4]
   8031c:	f022 020e 	bic.w	r2, r2, #14
	DACC->DACC_MR = mr | DACC_MR_TRGEN_EN | DACC_MR_TRGSEL(1);
   80320:	f042 0203 	orr.w	r2, r2, #3
   80324:	605a      	str	r2, [r3, #4]
	
	// Set transfer mode 0 - half word mode
	DACC->DACC_MR &= (~DACC_MR_WORD_WORD);
   80326:	685a      	ldr	r2, [r3, #4]
   80328:	f022 0210 	bic.w	r2, r2, #16
   8032c:	605a      	str	r2, [r3, #4]
	//Set flexible mode
	DACC->DACC_MR |= DACC_MR_TAG;
   8032e:	685a      	ldr	r2, [r3, #4]
   80330:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80334:	605a      	str	r2, [r3, #4]
	// set timing
	mr = DACC->DACC_MR & (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
   80336:	6859      	ldr	r1, [r3, #4]
	mr |= DACC_MR_REFRESH(1);
	mr &= ~DACC_MR_MAXS;
	mr |= (DACC_MR_STARTUP_Msk & ((3) << DACC_MR_STARTUP_Pos));
   80338:	4a0d      	ldr	r2, [pc, #52]	; (80370 <DAC3X8E_Init+0x64>)
   8033a:	400a      	ands	r2, r1
   8033c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
   80340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	DACC->DACC_MR = mr;
   80344:	605a      	str	r2, [r3, #4]
	//set power save off
	DACC->DACC_MR &= (~DACC_MR_SLEEP);
   80346:	685a      	ldr	r2, [r3, #4]
   80348:	f022 0220 	bic.w	r2, r2, #32
   8034c:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR |= DACC_MR_FASTWKUP;
   8034e:	685a      	ldr	r2, [r3, #4]
   80350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80354:	605a      	str	r2, [r3, #4]
	//disable INT
	DACC->DACC_IDR = 0xf;
   80356:	220f      	movs	r2, #15
   80358:	629a      	str	r2, [r3, #40]	; 0x28
	//enable ch0 and ch1
	DACC->DACC_CHER = DACC_CHER_CH0 << 0;
   8035a:	2201      	movs	r2, #1
   8035c:	611a      	str	r2, [r3, #16]
	DACC->DACC_CHER = DACC_CHER_CH0 << 1;
   8035e:	2102      	movs	r1, #2
   80360:	6119      	str	r1, [r3, #16]
	//enable write protect
	DACC->DACC_CDR = 1;
   80362:	621a      	str	r2, [r3, #32]
   80364:	bd08      	pop	{r3, pc}
   80366:	bf00      	nop
   80368:	000814d1 	.word	0x000814d1
   8036c:	400c8000 	.word	0x400c8000
   80370:	c0df00ff 	.word	0xc0df00ff

00080374 <DAC3X8E_write>:
	
	
}
void DAC3X8E_write(uint32_t ul_data)
{
	DACC->DACC_CDR = ul_data;
   80374:	4b01      	ldr	r3, [pc, #4]	; (8037c <DAC3X8E_write+0x8>)
   80376:	6218      	str	r0, [r3, #32]
   80378:	4770      	bx	lr
   8037a:	bf00      	nop
   8037c:	400c8000 	.word	0x400c8000

00080380 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80380:	b430      	push	{r4, r5}
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

	if (ul_addr >= IFLASH1_ADDR) {
   80382:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
   80386:	d30d      	bcc.n	803a4 <translate_address+0x24>
		p_efc = EFC1;
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   80388:	f5a1 2440 	sub.w	r4, r1, #786432	; 0xc0000
   8038c:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   80390:	b2c9      	uxtb	r1, r1
		p_efc = EFC1;
   80392:	4d08      	ldr	r5, [pc, #32]	; (803b4 <translate_address+0x34>)
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
	}

	/* Store values */
	if (pp_efc) {
   80394:	b100      	cbz	r0, 80398 <translate_address+0x18>
		*pp_efc = p_efc;
   80396:	6005      	str	r5, [r0, #0]
	}

	if (pus_page) {
   80398:	b102      	cbz	r2, 8039c <translate_address+0x1c>
		*pus_page = us_page;
   8039a:	8014      	strh	r4, [r2, #0]
	}

	if (pus_offset) {
   8039c:	b103      	cbz	r3, 803a0 <translate_address+0x20>
		*pus_offset = us_offset;
   8039e:	8019      	strh	r1, [r3, #0]
	}
}
   803a0:	bc30      	pop	{r4, r5}
   803a2:	4770      	bx	lr
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   803a4:	f5a1 2400 	sub.w	r4, r1, #524288	; 0x80000
   803a8:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   803ac:	b2c9      	uxtb	r1, r1
		p_efc = EFC0;
   803ae:	4d02      	ldr	r5, [pc, #8]	; (803b8 <translate_address+0x38>)
   803b0:	e7f0      	b.n	80394 <translate_address+0x14>
   803b2:	bf00      	nop
   803b4:	400e0c00 	.word	0x400e0c00
   803b8:	400e0a00 	.word	0x400e0a00

000803bc <FLASH_Init>:



uint32_t FLASH_Init()
{
   803bc:	b508      	push	{r3, lr}
	return efc_init(EFC1,EEFC_FMR_FAM,6);
   803be:	2206      	movs	r2, #6
   803c0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   803c4:	4801      	ldr	r0, [pc, #4]	; (803cc <FLASH_Init+0x10>)
   803c6:	4b02      	ldr	r3, [pc, #8]	; (803d0 <FLASH_Init+0x14>)
   803c8:	4798      	blx	r3
}
   803ca:	bd08      	pop	{r3, pc}
   803cc:	400e0c00 	.word	0x400e0c00
   803d0:	000801f9 	.word	0x000801f9

000803d4 <ReadCalibFromFlash>:

Byte* ReadCalibFromFlash()
{
	return (FLASH_START+4);
}
   803d4:	4800      	ldr	r0, [pc, #0]	; (803d8 <ReadCalibFromFlash+0x4>)
   803d6:	4770      	bx	lr
   803d8:	000c0004 	.word	0x000c0004

000803dc <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   803dc:	b530      	push	{r4, r5, lr}
   803de:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   803e0:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   803e4:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   803e8:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   803ec:	ea6f 3484 	mvn.w	r4, r4, lsl #14
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
   803f0:	b102      	cbz	r2, 803f4 <flash_lock+0x18>
		*pul_actual_start = ul_actual_start;
   803f2:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
   803f4:	b103      	cbz	r3, 803f8 <flash_lock+0x1c>
		*pul_actual_end = ul_actual_end;
   803f6:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   803f8:	2300      	movs	r3, #0
   803fa:	f10d 0202 	add.w	r2, sp, #2
   803fe:	4601      	mov	r1, r0
   80400:	a801      	add	r0, sp, #4
   80402:	4d11      	ldr	r5, [pc, #68]	; (80448 <flash_lock+0x6c>)
   80404:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80406:	2300      	movs	r3, #0
   80408:	466a      	mov	r2, sp
   8040a:	4621      	mov	r1, r4
   8040c:	4618      	mov	r0, r3
   8040e:	47a8      	blx	r5

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80410:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   80414:	f8bd 3000 	ldrh.w	r3, [sp]
   80418:	4293      	cmp	r3, r2
   8041a:	d913      	bls.n	80444 <flash_lock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   8041c:	2508      	movs	r5, #8
   8041e:	4c0b      	ldr	r4, [pc, #44]	; (8044c <flash_lock+0x70>)
   80420:	4629      	mov	r1, r5
   80422:	9801      	ldr	r0, [sp, #4]
   80424:	47a0      	blx	r4

		if (ul_error) {
   80426:	4601      	mov	r1, r0
   80428:	b948      	cbnz	r0, 8043e <flash_lock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   8042a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   8042e:	3240      	adds	r2, #64	; 0x40
   80430:	b292      	uxth	r2, r2
   80432:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   80436:	f8bd 3000 	ldrh.w	r3, [sp]
   8043a:	4293      	cmp	r3, r2
   8043c:	d8f0      	bhi.n	80420 <flash_lock+0x44>
	}

	return FLASH_RC_OK;
}
   8043e:	4608      	mov	r0, r1
   80440:	b003      	add	sp, #12
   80442:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   80444:	2100      	movs	r1, #0
   80446:	e7fa      	b.n	8043e <flash_lock+0x62>
   80448:	00080381 	.word	0x00080381
   8044c:	0008022d 	.word	0x0008022d

00080450 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80450:	b530      	push	{r4, r5, lr}
   80452:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80454:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   80458:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   8045c:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   80460:	ea6f 3484 	mvn.w	r4, r4, lsl #14
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
   80464:	b102      	cbz	r2, 80468 <flash_unlock+0x18>
		*pul_actual_start = ul_actual_start;
   80466:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
   80468:	b103      	cbz	r3, 8046c <flash_unlock+0x1c>
		*pul_actual_end = ul_actual_end;
   8046a:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   8046c:	2300      	movs	r3, #0
   8046e:	f10d 0202 	add.w	r2, sp, #2
   80472:	4601      	mov	r1, r0
   80474:	a801      	add	r0, sp, #4
   80476:	4d11      	ldr	r5, [pc, #68]	; (804bc <flash_unlock+0x6c>)
   80478:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   8047a:	2300      	movs	r3, #0
   8047c:	466a      	mov	r2, sp
   8047e:	4621      	mov	r1, r4
   80480:	4618      	mov	r0, r3
   80482:	47a8      	blx	r5

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80484:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   80488:	f8bd 3000 	ldrh.w	r3, [sp]
   8048c:	4293      	cmp	r3, r2
   8048e:	d913      	bls.n	804b8 <flash_unlock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80490:	2509      	movs	r5, #9
   80492:	4c0b      	ldr	r4, [pc, #44]	; (804c0 <flash_unlock+0x70>)
   80494:	4629      	mov	r1, r5
   80496:	9801      	ldr	r0, [sp, #4]
   80498:	47a0      	blx	r4
				us_start_page);
		if (ul_error) {
   8049a:	4601      	mov	r1, r0
   8049c:	b948      	cbnz	r0, 804b2 <flash_unlock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   8049e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   804a2:	3240      	adds	r2, #64	; 0x40
   804a4:	b292      	uxth	r2, r2
   804a6:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   804aa:	f8bd 3000 	ldrh.w	r3, [sp]
   804ae:	4293      	cmp	r3, r2
   804b0:	d8f0      	bhi.n	80494 <flash_unlock+0x44>
	}

	return FLASH_RC_OK;
}
   804b2:	4608      	mov	r0, r1
   804b4:	b003      	add	sp, #12
   804b6:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   804b8:	2100      	movs	r1, #0
   804ba:	e7fa      	b.n	804b2 <flash_unlock+0x62>
   804bc:	00080381 	.word	0x00080381
   804c0:	0008022d 	.word	0x0008022d

000804c4 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   804c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804c8:	b087      	sub	sp, #28
   804ca:	9101      	str	r1, [sp, #4]
   804cc:	4692      	mov	sl, r2
   804ce:	9302      	str	r3, [sp, #8]
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   804d0:	ab04      	add	r3, sp, #16
   804d2:	f10d 0212 	add.w	r2, sp, #18
   804d6:	4601      	mov	r1, r0
   804d8:	a805      	add	r0, sp, #20
   804da:	4c31      	ldr	r4, [pc, #196]	; (805a0 <flash_write+0xdc>)
   804dc:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   804de:	9805      	ldr	r0, [sp, #20]
   804e0:	4b30      	ldr	r3, [pc, #192]	; (805a4 <flash_write+0xe0>)
   804e2:	4798      	blx	r3
   804e4:	9003      	str	r0, [sp, #12]
	efc_set_wait_state(p_efc, 6);
   804e6:	2106      	movs	r1, #6
   804e8:	9805      	ldr	r0, [sp, #20]
   804ea:	4b2f      	ldr	r3, [pc, #188]	; (805a8 <flash_write+0xe4>)
   804ec:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   804ee:	f1ba 0f00 	cmp.w	sl, #0
   804f2:	d04d      	beq.n	80590 <flash_write+0xcc>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   804f4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 805b0 <flash_write+0xec>
   804f8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 805b4 <flash_write+0xf0>
   804fc:	f109 05fc 	add.w	r5, r9, #252	; 0xfc
   80500:	e015      	b.n	8052e <flash_write+0x6a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   80502:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   80506:	2101      	movs	r1, #1
   80508:	9805      	ldr	r0, [sp, #20]
   8050a:	4b28      	ldr	r3, [pc, #160]	; (805ac <flash_write+0xe8>)
   8050c:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
   8050e:	2800      	cmp	r0, #0
   80510:	d143      	bne.n	8059a <flash_write+0xd6>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80512:	9b01      	ldr	r3, [sp, #4]
   80514:	443b      	add	r3, r7
   80516:	9301      	str	r3, [sp, #4]
		ul_size -= writeSize;
		us_page++;
   80518:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   8051c:	3301      	adds	r3, #1
   8051e:	f8ad 3012 	strh.w	r3, [sp, #18]
		us_offset = 0;
   80522:	2300      	movs	r3, #0
   80524:	f8ad 3010 	strh.w	r3, [sp, #16]
	while (ul_size > 0) {
   80528:	ebba 0a07 	subs.w	sl, sl, r7
   8052c:	d030      	beq.n	80590 <flash_write+0xcc>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   8052e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   80532:	f5c6 7880 	rsb	r8, r6, #256	; 0x100
   80536:	4647      	mov	r7, r8
   80538:	45d0      	cmp	r8, sl
   8053a:	bf28      	it	cs
   8053c:	4657      	movcs	r7, sl
	ul_addr = IFLASH1_ADDR + us_page * IFLASH0_PAGE_SIZE + us_offset;
   8053e:	f8bd 4012 	ldrh.w	r4, [sp, #18]
   80542:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
   80546:	0224      	lsls	r4, r4, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   80548:	4632      	mov	r2, r6
   8054a:	4621      	mov	r1, r4
   8054c:	4648      	mov	r0, r9
   8054e:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   80550:	463a      	mov	r2, r7
   80552:	9901      	ldr	r1, [sp, #4]
   80554:	eb09 0006 	add.w	r0, r9, r6
   80558:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset + writeSize,
   8055a:	19f0      	adds	r0, r6, r7
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   8055c:	eba8 0207 	sub.w	r2, r8, r7
				(void *)(ul_page_addr + us_offset + writeSize),
   80560:	1931      	adds	r1, r6, r4
		memcpy(puc_page_buffer + us_offset + writeSize,
   80562:	b292      	uxth	r2, r2
   80564:	4439      	add	r1, r7
   80566:	4448      	add	r0, r9
   80568:	47d8      	blx	fp
   8056a:	f1a9 0304 	sub.w	r3, r9, #4
   8056e:	3c04      	subs	r4, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80570:	f853 2f04 	ldr.w	r2, [r3, #4]!
   80574:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80578:	42ab      	cmp	r3, r5
   8057a:	d1f9      	bne.n	80570 <flash_write+0xac>
		if (ul_erase_flag) {
   8057c:	9b02      	ldr	r3, [sp, #8]
   8057e:	2b00      	cmp	r3, #0
   80580:	d0bf      	beq.n	80502 <flash_write+0x3e>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   80582:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   80586:	2103      	movs	r1, #3
   80588:	9805      	ldr	r0, [sp, #20]
   8058a:	4b08      	ldr	r3, [pc, #32]	; (805ac <flash_write+0xe8>)
   8058c:	4798      	blx	r3
   8058e:	e7be      	b.n	8050e <flash_write+0x4a>
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80590:	9903      	ldr	r1, [sp, #12]
   80592:	9805      	ldr	r0, [sp, #20]
   80594:	4b04      	ldr	r3, [pc, #16]	; (805a8 <flash_write+0xe4>)
   80596:	4798      	blx	r3

	return FLASH_RC_OK;
   80598:	2000      	movs	r0, #0
}
   8059a:	b007      	add	sp, #28
   8059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   805a0:	00080381 	.word	0x00080381
   805a4:	000801ef 	.word	0x000801ef
   805a8:	00080211 	.word	0x00080211
   805ac:	0008022d 	.word	0x0008022d
   805b0:	20070e94 	.word	0x20070e94
   805b4:	00082451 	.word	0x00082451

000805b8 <WriteCalibToFlash>:
{
   805b8:	b538      	push	{r3, r4, r5, lr}
   805ba:	4604      	mov	r4, r0
	PrintLn("Writing to flash\n");
   805bc:	4812      	ldr	r0, [pc, #72]	; (80608 <WriteCalibToFlash+0x50>)
   805be:	4b13      	ldr	r3, [pc, #76]	; (8060c <WriteCalibToFlash+0x54>)
   805c0:	4798      	blx	r3
	if(flash_unlock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   805c2:	2300      	movs	r3, #0
   805c4:	461a      	mov	r2, r3
   805c6:	4912      	ldr	r1, [pc, #72]	; (80610 <WriteCalibToFlash+0x58>)
   805c8:	4812      	ldr	r0, [pc, #72]	; (80614 <WriteCalibToFlash+0x5c>)
   805ca:	4d13      	ldr	r5, [pc, #76]	; (80618 <WriteCalibToFlash+0x60>)
   805cc:	47a8      	blx	r5
   805ce:	b970      	cbnz	r0, 805ee <WriteCalibToFlash+0x36>
	if(flash_write((uint32_t)FLASH_START+4, Calib, sizeof(uint32_t), 1) != FLASH_RC_OK)
   805d0:	2301      	movs	r3, #1
   805d2:	2204      	movs	r2, #4
   805d4:	4621      	mov	r1, r4
   805d6:	480f      	ldr	r0, [pc, #60]	; (80614 <WriteCalibToFlash+0x5c>)
   805d8:	4c10      	ldr	r4, [pc, #64]	; (8061c <WriteCalibToFlash+0x64>)
   805da:	47a0      	blx	r4
   805dc:	b958      	cbnz	r0, 805f6 <WriteCalibToFlash+0x3e>
	if(flash_lock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   805de:	2300      	movs	r3, #0
   805e0:	461a      	mov	r2, r3
   805e2:	490b      	ldr	r1, [pc, #44]	; (80610 <WriteCalibToFlash+0x58>)
   805e4:	480b      	ldr	r0, [pc, #44]	; (80614 <WriteCalibToFlash+0x5c>)
   805e6:	4c0e      	ldr	r4, [pc, #56]	; (80620 <WriteCalibToFlash+0x68>)
   805e8:	47a0      	blx	r4
   805ea:	b940      	cbnz	r0, 805fe <WriteCalibToFlash+0x46>
   805ec:	bd38      	pop	{r3, r4, r5, pc}
		PrintLn("Bad unlock\n");
   805ee:	480d      	ldr	r0, [pc, #52]	; (80624 <WriteCalibToFlash+0x6c>)
   805f0:	4b06      	ldr	r3, [pc, #24]	; (8060c <WriteCalibToFlash+0x54>)
   805f2:	4798      	blx	r3
   805f4:	e7ec      	b.n	805d0 <WriteCalibToFlash+0x18>
		PrintLn("Bad write\n");
   805f6:	480c      	ldr	r0, [pc, #48]	; (80628 <WriteCalibToFlash+0x70>)
   805f8:	4b04      	ldr	r3, [pc, #16]	; (8060c <WriteCalibToFlash+0x54>)
   805fa:	4798      	blx	r3
   805fc:	e7ef      	b.n	805de <WriteCalibToFlash+0x26>
		PrintLn("Bad lock\n");
   805fe:	480b      	ldr	r0, [pc, #44]	; (8062c <WriteCalibToFlash+0x74>)
   80600:	4b02      	ldr	r3, [pc, #8]	; (8060c <WriteCalibToFlash+0x54>)
   80602:	4798      	blx	r3
}
   80604:	e7f2      	b.n	805ec <WriteCalibToFlash+0x34>
   80606:	bf00      	nop
   80608:	0008675c 	.word	0x0008675c
   8060c:	00080631 	.word	0x00080631
   80610:	000c0003 	.word	0x000c0003
   80614:	000c0004 	.word	0x000c0004
   80618:	00080451 	.word	0x00080451
   8061c:	000804c5 	.word	0x000804c5
   80620:	000803dd 	.word	0x000803dd
   80624:	00086770 	.word	0x00086770
   80628:	0008677c 	.word	0x0008677c
   8062c:	00086788 	.word	0x00086788

00080630 <PrintLn>:

#include "Prints.h"
#include <asf.h>

void PrintLn(const char *str)
{
   80630:	4770      	bx	lr
	...

00080634 <writeByte_register>:

// When writing 0x1234 to SPI only 0x34 will be written

// In multi-byte registers read or write to the MSBit of the LSByte first.
void writeByte_register(uint8_t reg, uint8_t value)
{
   80634:	b500      	push	{lr}
   80636:	b083      	sub	sp, #12
	//uint8_t Test;
	//char out_str2[30] = {0};
	uint16_t Cmd[2];
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   80638:	f000 001f 	and.w	r0, r0, #31
   8063c:	f040 0020 	orr.w	r0, r0, #32
   80640:	f8ad 0004 	strh.w	r0, [sp, #4]
	Cmd[1] = value;
   80644:	f8ad 1006 	strh.w	r1, [sp, #6]
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   80648:	4a06      	ldr	r2, [pc, #24]	; (80664 <writeByte_register+0x30>)
   8064a:	2102      	movs	r1, #2
   8064c:	a801      	add	r0, sp, #4
   8064e:	4b06      	ldr	r3, [pc, #24]	; (80668 <writeByte_register+0x34>)
   80650:	4798      	blx	r3
   80652:	b110      	cbz	r0, 8065a <writeByte_register+0x26>
	}
	#endif*/
	
	//sprintf(out_str2,"Reg %u is %u write data %u\n", reg,Test,value);
	//PrintLn(out_str2);
}
   80654:	b003      	add	sp, #12
   80656:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   8065a:	4804      	ldr	r0, [pc, #16]	; (8066c <writeByte_register+0x38>)
   8065c:	4b04      	ldr	r3, [pc, #16]	; (80670 <writeByte_register+0x3c>)
   8065e:	4798      	blx	r3
}
   80660:	e7f8      	b.n	80654 <writeByte_register+0x20>
   80662:	bf00      	nop
   80664:	20070f94 	.word	0x20070f94
   80668:	00080ddd 	.word	0x00080ddd
   8066c:	000867f4 	.word	0x000867f4
   80670:	00080631 	.word	0x00080631

00080674 <writeBuf_register>:

void writeBuf_register(uint8_t reg, const uint16_t* Buf, int Len)
{
   80674:	b530      	push	{r4, r5, lr}
   80676:	b085      	sub	sp, #20
	int i;
	uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   80678:	f000 001f 	and.w	r0, r0, #31
   8067c:	f040 0020 	orr.w	r0, r0, #32
   80680:	f8ad 0004 	strh.w	r0, [sp, #4]
	for(i=0;i<Len;i++)
   80684:	1e15      	subs	r5, r2, #0
   80686:	dd0a      	ble.n	8069e <writeBuf_register+0x2a>
   80688:	460b      	mov	r3, r1
   8068a:	f10d 0206 	add.w	r2, sp, #6
   8068e:	eb01 0445 	add.w	r4, r1, r5, lsl #1
		Cmd[i+1] = Buf[i];	
   80692:	f833 0b02 	ldrh.w	r0, [r3], #2
   80696:	f822 0b02 	strh.w	r0, [r2], #2
	for(i=0;i<Len;i++)
   8069a:	42a3      	cmp	r3, r4
   8069c:	d1f9      	bne.n	80692 <writeBuf_register+0x1e>
	
	if(!SPIC_Write(Cmd, Len+1, &StatusRegister))
   8069e:	4a06      	ldr	r2, [pc, #24]	; (806b8 <writeBuf_register+0x44>)
   806a0:	1c69      	adds	r1, r5, #1
   806a2:	a801      	add	r0, sp, #4
   806a4:	4b05      	ldr	r3, [pc, #20]	; (806bc <writeBuf_register+0x48>)
   806a6:	4798      	blx	r3
   806a8:	b108      	cbz	r0, 806ae <writeBuf_register+0x3a>
		PrintLn("Error2\n");
	
}
   806aa:	b005      	add	sp, #20
   806ac:	bd30      	pop	{r4, r5, pc}
		PrintLn("Error2\n");
   806ae:	4804      	ldr	r0, [pc, #16]	; (806c0 <writeBuf_register+0x4c>)
   806b0:	4b04      	ldr	r3, [pc, #16]	; (806c4 <writeBuf_register+0x50>)
   806b2:	4798      	blx	r3
}
   806b4:	e7f9      	b.n	806aa <writeBuf_register+0x36>
   806b6:	bf00      	nop
   806b8:	20070f94 	.word	0x20070f94
   806bc:	00080ddd 	.word	0x00080ddd
   806c0:	000867ec 	.word	0x000867ec
   806c4:	00080631 	.word	0x00080631

000806c8 <readByte_register>:

uint8_t readByte_register(uint8_t reg)
{
   806c8:	b530      	push	{r4, r5, lr}
   806ca:	b08b      	sub	sp, #44	; 0x2c
   806cc:	4604      	mov	r4, r0
	uint16_t Resp;
	uint16_t Cmd[2];
	char out_str[30] = {0};
   806ce:	221e      	movs	r2, #30
   806d0:	2100      	movs	r1, #0
   806d2:	4668      	mov	r0, sp
   806d4:	4b0d      	ldr	r3, [pc, #52]	; (8070c <readByte_register+0x44>)
   806d6:	4798      	blx	r3
		
	Cmd[0] = R_REGISTER| (REGISTER_MASK & reg);
   806d8:	f004 031f 	and.w	r3, r4, #31
   806dc:	f8ad 3020 	strh.w	r3, [sp, #32]
	Cmd[1] = 0;
   806e0:	2300      	movs	r3, #0
   806e2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	SPIC_Read(Cmd, 2, &StatusRegister,&Resp);
   806e6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   806ea:	4a09      	ldr	r2, [pc, #36]	; (80710 <readByte_register+0x48>)
   806ec:	2102      	movs	r1, #2
   806ee:	a808      	add	r0, sp, #32
   806f0:	4d08      	ldr	r5, [pc, #32]	; (80714 <readByte_register+0x4c>)
   806f2:	47a8      	blx	r5
	
	sprintf(out_str,"read reg %u val %u \n", reg,Resp);
   806f4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   806f8:	4622      	mov	r2, r4
   806fa:	4907      	ldr	r1, [pc, #28]	; (80718 <readByte_register+0x50>)
   806fc:	4668      	mov	r0, sp
   806fe:	4c07      	ldr	r4, [pc, #28]	; (8071c <readByte_register+0x54>)
   80700:	47a0      	blx	r4
	//PrintLn(out_str);
	return (uint8_t)(Resp);
}
   80702:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   80706:	b00b      	add	sp, #44	; 0x2c
   80708:	bd30      	pop	{r4, r5, pc}
   8070a:	bf00      	nop
   8070c:	0008253d 	.word	0x0008253d
   80710:	20070f94 	.word	0x20070f94
   80714:	00080e99 	.word	0x00080e99
   80718:	000867d4 	.word	0x000867d4
   8071c:	00082615 	.word	0x00082615

00080720 <readBuf_register>:

void readBuf_register(uint8_t reg, uint16_t* Resp)
{
   80720:	b570      	push	{r4, r5, r6, lr}
   80722:	b090      	sub	sp, #64	; 0x40
   80724:	4605      	mov	r5, r0
   80726:	460c      	mov	r4, r1
	int i;
	uint16_t Cmd[6];
	char out_str[30] = {0};
   80728:	221e      	movs	r2, #30
   8072a:	2100      	movs	r1, #0
   8072c:	a805      	add	r0, sp, #20
   8072e:	4b13      	ldr	r3, [pc, #76]	; (8077c <readBuf_register+0x5c>)
   80730:	4798      	blx	r3
	//uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = R_REGISTER | (REGISTER_MASK & reg);
   80732:	f005 031f 	and.w	r3, r5, #31
   80736:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	for(i=0;i<5;i++)
		Cmd[i+1] = 0;
   8073a:	2300      	movs	r3, #0
   8073c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   80740:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   80744:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   80748:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   8074c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	
	SPIC_Read(Cmd, 6, &StatusRegister, Resp);
   80750:	4623      	mov	r3, r4
   80752:	4a0b      	ldr	r2, [pc, #44]	; (80780 <readBuf_register+0x60>)
   80754:	2106      	movs	r1, #6
   80756:	a80d      	add	r0, sp, #52	; 0x34
   80758:	4e0a      	ldr	r6, [pc, #40]	; (80784 <readBuf_register+0x64>)
   8075a:	47b0      	blx	r6
	sprintf(out_str,"read reg %u val %u %u %u %u %u\n", reg,Resp[0],Resp[1],Resp[2],Resp[3],Resp[4]);
   8075c:	8823      	ldrh	r3, [r4, #0]
   8075e:	8922      	ldrh	r2, [r4, #8]
   80760:	9203      	str	r2, [sp, #12]
   80762:	88e2      	ldrh	r2, [r4, #6]
   80764:	9202      	str	r2, [sp, #8]
   80766:	88a2      	ldrh	r2, [r4, #4]
   80768:	9201      	str	r2, [sp, #4]
   8076a:	8862      	ldrh	r2, [r4, #2]
   8076c:	9200      	str	r2, [sp, #0]
   8076e:	462a      	mov	r2, r5
   80770:	4905      	ldr	r1, [pc, #20]	; (80788 <readBuf_register+0x68>)
   80772:	a805      	add	r0, sp, #20
   80774:	4c05      	ldr	r4, [pc, #20]	; (8078c <readBuf_register+0x6c>)
   80776:	47a0      	blx	r4
	//PrintLn(out_str);
}
   80778:	b010      	add	sp, #64	; 0x40
   8077a:	bd70      	pop	{r4, r5, r6, pc}
   8077c:	0008253d 	.word	0x0008253d
   80780:	20070f94 	.word	0x20070f94
   80784:	00080e99 	.word	0x00080e99
   80788:	000867b4 	.word	0x000867b4
   8078c:	00082615 	.word	0x00082615

00080790 <RF_ActiveUp>:

void RF_ActiveUp()
{
   80790:	b508      	push	{r3, lr}
	pio_set_pin_high(LED1_GPIO);
   80792:	2055      	movs	r0, #85	; 0x55
   80794:	4b01      	ldr	r3, [pc, #4]	; (8079c <RF_ActiveUp+0xc>)
   80796:	4798      	blx	r3
   80798:	bd08      	pop	{r3, pc}
   8079a:	bf00      	nop
   8079c:	000811a7 	.word	0x000811a7

000807a0 <RF_DisActive>:
}

void RF_DisActive()
{
   807a0:	b508      	push	{r3, lr}
	pio_set_pin_low(LED1_GPIO);
   807a2:	2055      	movs	r0, #85	; 0x55
   807a4:	4b01      	ldr	r3, [pc, #4]	; (807ac <RF_DisActive+0xc>)
   807a6:	4798      	blx	r3
   807a8:	bd08      	pop	{r3, pc}
   807aa:	bf00      	nop
   807ac:	000811c1 	.word	0x000811c1

000807b0 <RF_PowerUpTXmode>:
}

void RF_PowerUpTXmode()
{
   807b0:	b510      	push	{r4, lr}
	int i;
	writeByte_register(CONFIG,(readByte_register(CONFIG)) | ((1<<PWR_UP) & ~_BV(PRIM_RX)) );
   807b2:	2000      	movs	r0, #0
   807b4:	4c06      	ldr	r4, [pc, #24]	; (807d0 <RF_PowerUpTXmode+0x20>)
   807b6:	47a0      	blx	r4
   807b8:	f040 0102 	orr.w	r1, r0, #2
   807bc:	b2c9      	uxtb	r1, r1
   807be:	2000      	movs	r0, #0
   807c0:	4b04      	ldr	r3, [pc, #16]	; (807d4 <RF_PowerUpTXmode+0x24>)
   807c2:	4798      	blx	r3
	readByte_register(CONFIG);
   807c4:	2000      	movs	r0, #0
   807c6:	47a0      	blx	r4
   807c8:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   807ca:	3b01      	subs	r3, #1
   807cc:	d1fd      	bne.n	807ca <RF_PowerUpTXmode+0x1a>
		__NOP;
}
   807ce:	bd10      	pop	{r4, pc}
   807d0:	000806c9 	.word	0x000806c9
   807d4:	00080635 	.word	0x00080635

000807d8 <RF_SetPALevel>:

void RF_SetPALevel(rf24_pa_dbm_e level)
{
   807d8:	b510      	push	{r4, lr}
   807da:	4604      	mov	r4, r0
	uint8_t setup = readByte_register(RF_SETUP) ;
   807dc:	2006      	movs	r0, #6
   807de:	4b0c      	ldr	r3, [pc, #48]	; (80810 <RF_SetPALevel+0x38>)
   807e0:	4798      	blx	r3
   807e2:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	setup |= (1<<RF_PWR_LOW);
	setup &= ~(1<<RF_PWR_HIGH);

	// switch uses RAM (evil!)
	if ( level == RF24_PA_MAX )
   807e6:	2c03      	cmp	r4, #3
   807e8:	d00b      	beq.n	80802 <RF_SetPALevel+0x2a>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_HIGH )
   807ea:	2c02      	cmp	r4, #2
   807ec:	d00c      	beq.n	80808 <RF_SetPALevel+0x30>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_LOW )
   807ee:	2c04      	cmp	r4, #4
	setup &= ~(1<<RF_PWR_HIGH);
   807f0:	bf14      	ite	ne
   807f2:	f040 0102 	orrne.w	r1, r0, #2
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   807f6:	f040 0106 	orreq.w	r1, r0, #6
	}

	writeByte_register( RF_SETUP, setup ) ;
   807fa:	2006      	movs	r0, #6
   807fc:	4b05      	ldr	r3, [pc, #20]	; (80814 <RF_SetPALevel+0x3c>)
   807fe:	4798      	blx	r3
   80800:	bd10      	pop	{r4, pc}
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   80802:	f040 0106 	orr.w	r1, r0, #6
   80806:	e7f8      	b.n	807fa <RF_SetPALevel+0x22>
		setup |= _BV(RF_PWR_HIGH) ;
   80808:	f040 0106 	orr.w	r1, r0, #6
   8080c:	e7f5      	b.n	807fa <RF_SetPALevel+0x22>
   8080e:	bf00      	nop
   80810:	000806c9 	.word	0x000806c9
   80814:	00080635 	.word	0x00080635

00080818 <RF_setDataRate>:
}


bool RF_setDataRate(rf24_datarate_e speed)
{
   80818:	b510      	push	{r4, lr}
   8081a:	4604      	mov	r4, r0
	bool result = false;
	uint8_t setup = readByte_register(RF_SETUP) ;
   8081c:	2006      	movs	r0, #6
   8081e:	4b09      	ldr	r3, [pc, #36]	; (80844 <RF_setDataRate+0x2c>)
   80820:	4798      	blx	r3

	// HIGH and LOW '00' is 1Mbs - our default
	//wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   80822:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
   80826:	2c02      	cmp	r4, #2
   80828:	d008      	beq.n	8083c <RF_setDataRate+0x24>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
   8082a:	2c01      	cmp	r4, #1
		{
			//wide_band = true ;
			setup |= _BV(RF_DR_HIGH);
   8082c:	bf08      	it	eq
   8082e:	f041 0108 	orreq.w	r1, r1, #8
		{
			// 1Mbs
			//wide_band = false ;
		}
	}
	writeByte_register(RF_SETUP,setup);
   80832:	2006      	movs	r0, #6
   80834:	4b04      	ldr	r3, [pc, #16]	; (80848 <RF_setDataRate+0x30>)
   80836:	4798      	blx	r3
	//	sprintf(out_str2,"Daniel %u setup %u \n", setup2,setup);
		//PrintLn(out_str2);
	}
	#endif*/
	return result;
}
   80838:	2000      	movs	r0, #0
   8083a:	bd10      	pop	{r4, pc}
		setup |= _BV( RF_DR_LOW ) ;
   8083c:	f041 0120 	orr.w	r1, r1, #32
   80840:	e7f7      	b.n	80832 <RF_setDataRate+0x1a>
   80842:	bf00      	nop
   80844:	000806c9 	.word	0x000806c9
   80848:	00080635 	.word	0x00080635

0008084c <RF_setCRCLength>:

void RF_setCRCLength(rf24_crclength_e length)
{
   8084c:	b510      	push	{r4, lr}
   8084e:	4604      	mov	r4, r0
	uint8_t config = readByte_register(CONFIG) & ~( _BV(CRCO) | _BV(EN_CRC)) ;
   80850:	2000      	movs	r0, #0
   80852:	4b07      	ldr	r3, [pc, #28]	; (80870 <RF_setCRCLength+0x24>)
   80854:	4798      	blx	r3
   80856:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	
	// switch uses RAM (evil!)
	if ( length == RF24_CRC_DISABLED )
   8085a:	b12c      	cbz	r4, 80868 <RF_setCRCLength+0x1c>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
   8085c:	2c01      	cmp	r4, #1
	{
		config |= _BV(EN_CRC);
   8085e:	bf0c      	ite	eq
   80860:	f041 0108 	orreq.w	r1, r1, #8
	}
	else
	{
		config |= _BV(EN_CRC);
		config |= _BV( CRCO );
   80864:	f041 010c 	orrne.w	r1, r1, #12
	}
	writeByte_register( CONFIG, config ) ;
   80868:	2000      	movs	r0, #0
   8086a:	4b02      	ldr	r3, [pc, #8]	; (80874 <RF_setCRCLength+0x28>)
   8086c:	4798      	blx	r3
   8086e:	bd10      	pop	{r4, pc}
   80870:	000806c9 	.word	0x000806c9
   80874:	00080635 	.word	0x00080635

00080878 <RF_setChannel>:
}


void RF_setChannel(uint8_t channel)
{
   80878:	b508      	push	{r3, lr}
	//const uint8_t max_channel = 127;
	uint8_t RF_CH2;
	
	writeByte_register(RF_CH,channel);
   8087a:	4601      	mov	r1, r0
   8087c:	2005      	movs	r0, #5
   8087e:	4b03      	ldr	r3, [pc, #12]	; (8088c <RF_setChannel+0x14>)
   80880:	4798      	blx	r3
	// Verify our result
	if ( (RF_CH2=readByte_register(RF_CH)) == channel )
   80882:	2005      	movs	r0, #5
   80884:	4b02      	ldr	r3, [pc, #8]	; (80890 <RF_setChannel+0x18>)
   80886:	4798      	blx	r3
   80888:	bd08      	pop	{r3, pc}
   8088a:	bf00      	nop
   8088c:	00080635 	.word	0x00080635
   80890:	000806c9 	.word	0x000806c9

00080894 <flush_rx>:
	//	PrintLn(out_str2);
	}
	
}
void flush_rx(void)
{
   80894:	b500      	push	{lr}
   80896:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_RX;
   80898:	a802      	add	r0, sp, #8
   8089a:	23e2      	movs	r3, #226	; 0xe2
   8089c:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   808a0:	4a05      	ldr	r2, [pc, #20]	; (808b8 <flush_rx+0x24>)
   808a2:	2101      	movs	r1, #1
   808a4:	4b05      	ldr	r3, [pc, #20]	; (808bc <flush_rx+0x28>)
   808a6:	4798      	blx	r3
   808a8:	b110      	cbz	r0, 808b0 <flush_rx+0x1c>
		PrintLn("Error\n");
}
   808aa:	b003      	add	sp, #12
   808ac:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   808b0:	4803      	ldr	r0, [pc, #12]	; (808c0 <flush_rx+0x2c>)
   808b2:	4b04      	ldr	r3, [pc, #16]	; (808c4 <flush_rx+0x30>)
   808b4:	4798      	blx	r3
}
   808b6:	e7f8      	b.n	808aa <flush_rx+0x16>
   808b8:	20070f94 	.word	0x20070f94
   808bc:	00080ddd 	.word	0x00080ddd
   808c0:	000867f4 	.word	0x000867f4
   808c4:	00080631 	.word	0x00080631

000808c8 <flush_tx>:

/****************************************************************************/

void flush_tx(void)
{
   808c8:	b500      	push	{lr}
   808ca:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_TX;
   808cc:	a802      	add	r0, sp, #8
   808ce:	23e1      	movs	r3, #225	; 0xe1
   808d0:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   808d4:	4a05      	ldr	r2, [pc, #20]	; (808ec <flush_tx+0x24>)
   808d6:	2101      	movs	r1, #1
   808d8:	4b05      	ldr	r3, [pc, #20]	; (808f0 <flush_tx+0x28>)
   808da:	4798      	blx	r3
   808dc:	b110      	cbz	r0, 808e4 <flush_tx+0x1c>
		PrintLn("Error\n");
}
   808de:	b003      	add	sp, #12
   808e0:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   808e4:	4803      	ldr	r0, [pc, #12]	; (808f4 <flush_tx+0x2c>)
   808e6:	4b04      	ldr	r3, [pc, #16]	; (808f8 <flush_tx+0x30>)
   808e8:	4798      	blx	r3
}
   808ea:	e7f8      	b.n	808de <flush_tx+0x16>
   808ec:	20070f94 	.word	0x20070f94
   808f0:	00080ddd 	.word	0x00080ddd
   808f4:	000867f4 	.word	0x000867f4
   808f8:	00080631 	.word	0x00080631

000808fc <RF_OpenWritePipe>:

void RF_OpenWritePipe()
{
   808fc:	b508      	push	{r3, lr}
	writeBuf_register(TX_ADDR, pipe0, 5);
   808fe:	2205      	movs	r2, #5
   80900:	4902      	ldr	r1, [pc, #8]	; (8090c <RF_OpenWritePipe+0x10>)
   80902:	2010      	movs	r0, #16
   80904:	4b02      	ldr	r3, [pc, #8]	; (80910 <RF_OpenWritePipe+0x14>)
   80906:	4798      	blx	r3
   80908:	bd08      	pop	{r3, pc}
   8090a:	bf00      	nop
   8090c:	000867a8 	.word	0x000867a8
   80910:	00080675 	.word	0x00080675

00080914 <RF_InitTX>:
}

void RF_InitTX()
{
   80914:	b510      	push	{r4, lr}
   80916:	b084      	sub	sp, #16
	uint16_t Response[5]= {0,0,0,0,0};
   80918:	2300      	movs	r3, #0
   8091a:	9301      	str	r3, [sp, #4]
   8091c:	9302      	str	r3, [sp, #8]
   8091e:	f8ad 300c 	strh.w	r3, [sp, #12]
	int i;
	RF_DisActive();
   80922:	4b1a      	ldr	r3, [pc, #104]	; (8098c <RF_InitTX+0x78>)
   80924:	4798      	blx	r3
   80926:	23ff      	movs	r3, #255	; 0xff
	//little delay
	for(i=0;i<0xff;i++)
   80928:	3b01      	subs	r3, #1
   8092a:	d1fd      	bne.n	80928 <RF_InitTX+0x14>
		__NOP;
	
	
	// Disable auto-retransmit
	writeByte_register(SETUP_RETR,(0b0100 << ARD) | (0 << ARC));
   8092c:	2140      	movs	r1, #64	; 0x40
   8092e:	2004      	movs	r0, #4
   80930:	4b17      	ldr	r3, [pc, #92]	; (80990 <RF_InitTX+0x7c>)
   80932:	4798      	blx	r3
	// You can configure the RF24 when power-down , stand-by or RX,TX mode
	RF_SetPALevel(RF24_PA_MAX);
   80934:	2003      	movs	r0, #3
   80936:	4b17      	ldr	r3, [pc, #92]	; (80994 <RF_InitTX+0x80>)
   80938:	4798      	blx	r3
	if(!RF_setDataRate(RF24_250KBPS))
   8093a:	2002      	movs	r0, #2
   8093c:	4b16      	ldr	r3, [pc, #88]	; (80998 <RF_InitTX+0x84>)
   8093e:	4798      	blx	r3
   80940:	b1f8      	cbz	r0, 80982 <RF_InitTX+0x6e>
		PrintLn("Error3\n");
	// Initialize no CRC
	RF_setCRCLength(RF24_CRC_DISABLED);
   80942:	2000      	movs	r0, #0
   80944:	4b15      	ldr	r3, [pc, #84]	; (8099c <RF_InitTX+0x88>)
   80946:	4798      	blx	r3
	// Disable dynamic payloads, to match dynamic_payloads_enabled setting
	writeByte_register(DYNPD,0);
   80948:	2100      	movs	r1, #0
   8094a:	201c      	movs	r0, #28
   8094c:	4c10      	ldr	r4, [pc, #64]	; (80990 <RF_InitTX+0x7c>)
   8094e:	47a0      	blx	r4
	// Reset current status
	// Notice reset and flush is the last thing we do
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   80950:	2170      	movs	r1, #112	; 0x70
   80952:	2007      	movs	r0, #7
   80954:	47a0      	blx	r4
	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	RF_setChannel(76);
   80956:	204c      	movs	r0, #76	; 0x4c
   80958:	4b11      	ldr	r3, [pc, #68]	; (809a0 <RF_InitTX+0x8c>)
   8095a:	4798      	blx	r3
	// NO_ACK Mode
	writeByte_register(EN_AA, 0);
   8095c:	2100      	movs	r1, #0
   8095e:	2001      	movs	r0, #1
   80960:	47a0      	blx	r4
	// Flush buffers
	flush_rx();
   80962:	4b10      	ldr	r3, [pc, #64]	; (809a4 <RF_InitTX+0x90>)
   80964:	4798      	blx	r3
	flush_tx();
   80966:	4b10      	ldr	r3, [pc, #64]	; (809a8 <RF_InitTX+0x94>)
   80968:	4798      	blx	r3
	// Route the packet to PTX address at pipe0
	RF_OpenWritePipe();
   8096a:	4b10      	ldr	r3, [pc, #64]	; (809ac <RF_InitTX+0x98>)
   8096c:	4798      	blx	r3
	RF_PowerUpTXmode();
   8096e:	4b10      	ldr	r3, [pc, #64]	; (809b0 <RF_InitTX+0x9c>)
   80970:	4798      	blx	r3
	
	RF_ActiveUp();
   80972:	4b10      	ldr	r3, [pc, #64]	; (809b4 <RF_InitTX+0xa0>)
   80974:	4798      	blx	r3
	readByte_register(RF_CH);
	readByte_register(SETUP_RETR);
	readByte_register(DYNPD);
	readByte_register(STATUS);
	readByte_register(EN_AA);*/
	readBuf_register(TX_ADDR,Response);
   80976:	a901      	add	r1, sp, #4
   80978:	2010      	movs	r0, #16
   8097a:	4b0f      	ldr	r3, [pc, #60]	; (809b8 <RF_InitTX+0xa4>)
   8097c:	4798      	blx	r3
	
}
   8097e:	b004      	add	sp, #16
   80980:	bd10      	pop	{r4, pc}
		PrintLn("Error3\n");
   80982:	480e      	ldr	r0, [pc, #56]	; (809bc <RF_InitTX+0xa8>)
   80984:	4b0e      	ldr	r3, [pc, #56]	; (809c0 <RF_InitTX+0xac>)
   80986:	4798      	blx	r3
   80988:	e7db      	b.n	80942 <RF_InitTX+0x2e>
   8098a:	bf00      	nop
   8098c:	000807a1 	.word	0x000807a1
   80990:	00080635 	.word	0x00080635
   80994:	000807d9 	.word	0x000807d9
   80998:	00080819 	.word	0x00080819
   8099c:	0008084d 	.word	0x0008084d
   809a0:	00080879 	.word	0x00080879
   809a4:	00080895 	.word	0x00080895
   809a8:	000808c9 	.word	0x000808c9
   809ac:	000808fd 	.word	0x000808fd
   809b0:	000807b1 	.word	0x000807b1
   809b4:	00080791 	.word	0x00080791
   809b8:	00080721 	.word	0x00080721
   809bc:	00086794 	.word	0x00086794
   809c0:	00080631 	.word	0x00080631

000809c4 <RF_SendBell>:


void RF_SendBell(uint16_t CmdID)
{
   809c4:	b510      	push	{r4, lr}
   809c6:	b082      	sub	sp, #8
   809c8:	4604      	mov	r4, r0
	uint16_t Cmd[2];
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   809ca:	2170      	movs	r1, #112	; 0x70
   809cc:	2007      	movs	r0, #7
   809ce:	4b0e      	ldr	r3, [pc, #56]	; (80a08 <RF_SendBell+0x44>)
   809d0:	4798      	blx	r3
	Cmd[0] = W_TX_PAYLOAD;
   809d2:	23a0      	movs	r3, #160	; 0xa0
   809d4:	f8ad 3004 	strh.w	r3, [sp, #4]
	Cmd[1] = CmdID;
   809d8:	f8ad 4006 	strh.w	r4, [sp, #6]
	Timer_Sleep(10);
   809dc:	200a      	movs	r0, #10
   809de:	4b0b      	ldr	r3, [pc, #44]	; (80a0c <RF_SendBell+0x48>)
   809e0:	4798      	blx	r3
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   809e2:	4a0b      	ldr	r2, [pc, #44]	; (80a10 <RF_SendBell+0x4c>)
   809e4:	2102      	movs	r1, #2
   809e6:	a801      	add	r0, sp, #4
   809e8:	4b0a      	ldr	r3, [pc, #40]	; (80a14 <RF_SendBell+0x50>)
   809ea:	4798      	blx	r3
   809ec:	b138      	cbz	r0, 809fe <RF_SendBell+0x3a>
		PrintLn("Error\n");
	Timer_Sleep(10);
   809ee:	200a      	movs	r0, #10
   809f0:	4b06      	ldr	r3, [pc, #24]	; (80a0c <RF_SendBell+0x48>)
   809f2:	4798      	blx	r3
	PrintLn("Send RF \n");
   809f4:	4808      	ldr	r0, [pc, #32]	; (80a18 <RF_SendBell+0x54>)
   809f6:	4b09      	ldr	r3, [pc, #36]	; (80a1c <RF_SendBell+0x58>)
   809f8:	4798      	blx	r3
   809fa:	b002      	add	sp, #8
   809fc:	bd10      	pop	{r4, pc}
		PrintLn("Error\n");
   809fe:	4808      	ldr	r0, [pc, #32]	; (80a20 <RF_SendBell+0x5c>)
   80a00:	4b06      	ldr	r3, [pc, #24]	; (80a1c <RF_SendBell+0x58>)
   80a02:	4798      	blx	r3
   80a04:	e7f3      	b.n	809ee <RF_SendBell+0x2a>
   80a06:	bf00      	nop
   80a08:	00080635 	.word	0x00080635
   80a0c:	00080fd5 	.word	0x00080fd5
   80a10:	20070f94 	.word	0x20070f94
   80a14:	00080ddd 	.word	0x00080ddd
   80a18:	0008679c 	.word	0x0008679c
   80a1c:	00080631 	.word	0x00080631
   80a20:	000867f4 	.word	0x000867f4

00080a24 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   80a24:	6843      	ldr	r3, [r0, #4]
   80a26:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80a2a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   80a2c:	6843      	ldr	r3, [r0, #4]
   80a2e:	0409      	lsls	r1, r1, #16
   80a30:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   80a34:	4319      	orrs	r1, r3
   80a36:	6041      	str	r1, [r0, #4]
   80a38:	4770      	bx	lr

00080a3a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   80a3a:	6843      	ldr	r3, [r0, #4]
   80a3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80a40:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   80a42:	6843      	ldr	r3, [r0, #4]
   80a44:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   80a48:	6041      	str	r1, [r0, #4]
   80a4a:	4770      	bx	lr

00080a4c <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80a4c:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80a4e:	f643 2399 	movw	r3, #15001	; 0x3a99
   80a52:	6904      	ldr	r4, [r0, #16]
   80a54:	f014 0f01 	tst.w	r4, #1
   80a58:	d103      	bne.n	80a62 <spi_read+0x16>
		if (!timeout--) {
   80a5a:	3b01      	subs	r3, #1
   80a5c:	d1f9      	bne.n	80a52 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   80a5e:	2001      	movs	r0, #1
   80a60:	e009      	b.n	80a76 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   80a62:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80a64:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80a66:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80a6a:	bf1c      	itt	ne
   80a6c:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   80a70:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80a72:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   80a74:	2000      	movs	r0, #0
}
   80a76:	bc10      	pop	{r4}
   80a78:	4770      	bx	lr

00080a7a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80a7a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80a7c:	f643 2499 	movw	r4, #15001	; 0x3a99
   80a80:	6905      	ldr	r5, [r0, #16]
   80a82:	f015 0f02 	tst.w	r5, #2
   80a86:	d103      	bne.n	80a90 <spi_write+0x16>
		if (!timeout--) {
   80a88:	3c01      	subs	r4, #1
   80a8a:	d1f9      	bne.n	80a80 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   80a8c:	2001      	movs	r0, #1
   80a8e:	e00c      	b.n	80aaa <spi_write+0x30>
   80a90:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   80a92:	f014 0f02 	tst.w	r4, #2
   80a96:	d006      	beq.n	80aa6 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   80a98:	0412      	lsls	r2, r2, #16
   80a9a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80a9e:	4311      	orrs	r1, r2
		if (uc_last) {
   80aa0:	b10b      	cbz	r3, 80aa6 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   80aa2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   80aa6:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   80aa8:	2000      	movs	r0, #0
}
   80aaa:	bc30      	pop	{r4, r5}
   80aac:	4770      	bx	lr

00080aae <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   80aae:	b932      	cbnz	r2, 80abe <spi_set_clock_polarity+0x10>
   80ab0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80ab4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ab6:	f023 0301 	bic.w	r3, r3, #1
   80aba:	6303      	str	r3, [r0, #48]	; 0x30
   80abc:	4770      	bx	lr
   80abe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80ac2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ac4:	f043 0301 	orr.w	r3, r3, #1
   80ac8:	6303      	str	r3, [r0, #48]	; 0x30
   80aca:	4770      	bx	lr

00080acc <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   80acc:	b932      	cbnz	r2, 80adc <spi_set_clock_phase+0x10>
   80ace:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80ad2:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ad4:	f023 0302 	bic.w	r3, r3, #2
   80ad8:	6303      	str	r3, [r0, #48]	; 0x30
   80ada:	4770      	bx	lr
   80adc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80ae0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ae2:	f043 0302 	orr.w	r3, r3, #2
   80ae6:	6303      	str	r3, [r0, #48]	; 0x30
   80ae8:	4770      	bx	lr

00080aea <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   80aea:	2a04      	cmp	r2, #4
   80aec:	d003      	beq.n	80af6 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   80aee:	b16a      	cbz	r2, 80b0c <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   80af0:	2a08      	cmp	r2, #8
   80af2:	d016      	beq.n	80b22 <spi_configure_cs_behavior+0x38>
   80af4:	4770      	bx	lr
   80af6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80afa:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80afc:	f023 0308 	bic.w	r3, r3, #8
   80b00:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   80b02:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b04:	f043 0304 	orr.w	r3, r3, #4
   80b08:	6303      	str	r3, [r0, #48]	; 0x30
   80b0a:	4770      	bx	lr
   80b0c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80b10:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b12:	f023 0308 	bic.w	r3, r3, #8
   80b16:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80b18:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b1a:	f023 0304 	bic.w	r3, r3, #4
   80b1e:	6303      	str	r3, [r0, #48]	; 0x30
   80b20:	4770      	bx	lr
   80b22:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80b26:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b28:	f043 0308 	orr.w	r3, r3, #8
   80b2c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   80b2e:	e7e1      	b.n	80af4 <spi_configure_cs_behavior+0xa>

00080b30 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80b30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80b34:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   80b3a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80b3c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b3e:	431a      	orrs	r2, r3
   80b40:	630a      	str	r2, [r1, #48]	; 0x30
   80b42:	4770      	bx	lr

00080b44 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
   80b44:	b172      	cbz	r2, 80b64 <spi_set_baudrate_div+0x20>
{
   80b46:	b410      	push	{r4}
   80b48:	4614      	mov	r4, r2
   80b4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   80b4e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   80b54:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80b56:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80b58:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   80b5c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   80b5e:	2000      	movs	r0, #0
}
   80b60:	bc10      	pop	{r4}
   80b62:	4770      	bx	lr
        return -1;
   80b64:	f04f 30ff 	mov.w	r0, #4294967295
   80b68:	4770      	bx	lr

00080b6a <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80b6a:	b410      	push	{r4}
   80b6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   80b70:	6b08      	ldr	r0, [r1, #48]	; 0x30
   80b72:	b280      	uxth	r0, r0
   80b74:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80b76:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   80b78:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   80b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   80b80:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   80b82:	bc10      	pop	{r4}
   80b84:	4770      	bx	lr
	...

00080b88 <spi_set_writeprotect>:
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE | SPI_WPCR_SPIWPEN;
	} else {
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE;
	}
#else
	if (ul_enable) {
   80b88:	b919      	cbnz	r1, 80b92 <spi_set_writeprotect+0xa>
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
	} else {
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD;
   80b8a:	4b04      	ldr	r3, [pc, #16]	; (80b9c <spi_set_writeprotect+0x14>)
   80b8c:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b90:	4770      	bx	lr
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
   80b92:	4b03      	ldr	r3, [pc, #12]	; (80ba0 <spi_set_writeprotect+0x18>)
   80b94:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b98:	4770      	bx	lr
   80b9a:	bf00      	nop
   80b9c:	53504900 	.word	0x53504900
   80ba0:	53504901 	.word	0x53504901

00080ba4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80ba4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80ba6:	0189      	lsls	r1, r1, #6
   80ba8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80baa:	2402      	movs	r4, #2
   80bac:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80bae:	f04f 31ff 	mov.w	r1, #4294967295
   80bb2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80bb4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80bb6:	605a      	str	r2, [r3, #4]
}
   80bb8:	bc10      	pop	{r4}
   80bba:	4770      	bx	lr

00080bbc <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80bbc:	0189      	lsls	r1, r1, #6
   80bbe:	2305      	movs	r3, #5
   80bc0:	5043      	str	r3, [r0, r1]
   80bc2:	4770      	bx	lr

00080bc4 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80bc4:	0189      	lsls	r1, r1, #6
   80bc6:	2302      	movs	r3, #2
   80bc8:	5043      	str	r3, [r0, r1]
   80bca:	4770      	bx	lr

00080bcc <tc_set_writeprotect>:
		uint32_t ul_enable)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	if (ul_enable) {
   80bcc:	b919      	cbnz	r1, 80bd6 <tc_set_writeprotect+0xa>
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
	} else {
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
   80bce:	4b04      	ldr	r3, [pc, #16]	; (80be0 <tc_set_writeprotect+0x14>)
   80bd0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80bd4:	4770      	bx	lr
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
   80bd6:	4b03      	ldr	r3, [pc, #12]	; (80be4 <tc_set_writeprotect+0x18>)
   80bd8:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80bdc:	4770      	bx	lr
   80bde:	bf00      	nop
   80be0:	54494d00 	.word	0x54494d00
   80be4:	54494d01 	.word	0x54494d01

00080be8 <ADCC_Init>:
 *  Author: Daniel
 */ 
#include "ADCC.h"

void ADCC_Init()
{
   80be8:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80bea:	2025      	movs	r0, #37	; 0x25
   80bec:	4b19      	ldr	r3, [pc, #100]	; (80c54 <ADCC_Init+0x6c>)
   80bee:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(),sysclk_get_main_hz()/4, ADC_STARTUP_TIME_5);
   80bf0:	4c19      	ldr	r4, [pc, #100]	; (80c58 <ADCC_Init+0x70>)
   80bf2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
   80bf6:	4a19      	ldr	r2, [pc, #100]	; (80c5c <ADCC_Init+0x74>)
   80bf8:	4919      	ldr	r1, [pc, #100]	; (80c60 <ADCC_Init+0x78>)
   80bfa:	4620      	mov	r0, r4
   80bfc:	4d19      	ldr	r5, [pc, #100]	; (80c64 <ADCC_Init+0x7c>)
   80bfe:	47a8      	blx	r5
	adc_configure_timing(ADC,20,ADC_SETTLING_TIME_0,50);
   80c00:	2332      	movs	r3, #50	; 0x32
   80c02:	2200      	movs	r2, #0
   80c04:	2114      	movs	r1, #20
   80c06:	4620      	mov	r0, r4
   80c08:	4d17      	ldr	r5, [pc, #92]	; (80c68 <ADCC_Init+0x80>)
   80c0a:	47a8      	blx	r5
	adc_configure_trigger(ADC,ADC_TRIG_TIO_CH_0,0);
   80c0c:	2200      	movs	r2, #0
   80c0e:	2103      	movs	r1, #3
   80c10:	4620      	mov	r0, r4
   80c12:	4b16      	ldr	r3, [pc, #88]	; (80c6c <ADCC_Init+0x84>)
   80c14:	4798      	blx	r3
	adc_disable_all_channel(ADC);
   80c16:	4620      	mov	r0, r4
   80c18:	4b15      	ldr	r3, [pc, #84]	; (80c70 <ADCC_Init+0x88>)
   80c1a:	4798      	blx	r3
	adc_disable_interrupt(ADC, 0xFFFFFFFF);
   80c1c:	f04f 31ff 	mov.w	r1, #4294967295
   80c20:	4620      	mov	r0, r4
   80c22:	4b14      	ldr	r3, [pc, #80]	; (80c74 <ADCC_Init+0x8c>)
   80c24:	4798      	blx	r3
	adc_set_resolution(ADC, ADC_12_BITS);
   80c26:	2100      	movs	r1, #0
   80c28:	4620      	mov	r0, r4
   80c2a:	4b13      	ldr	r3, [pc, #76]	; (80c78 <ADCC_Init+0x90>)
   80c2c:	4798      	blx	r3
	adc_enable_channel(ADC,ADC_CHANNEL_0);
   80c2e:	2100      	movs	r1, #0
   80c30:	4620      	mov	r0, r4
   80c32:	4d12      	ldr	r5, [pc, #72]	; (80c7c <ADCC_Init+0x94>)
   80c34:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_1);
   80c36:	2101      	movs	r1, #1
   80c38:	4620      	mov	r0, r4
   80c3a:	47a8      	blx	r5
	adc_enable_interrupt(ADC,ADC_IER_EOC0);
   80c3c:	2101      	movs	r1, #1
   80c3e:	4620      	mov	r0, r4
   80c40:	4b0f      	ldr	r3, [pc, #60]	; (80c80 <ADCC_Init+0x98>)
   80c42:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c44:	2220      	movs	r2, #32
   80c46:	4b0f      	ldr	r3, [pc, #60]	; (80c84 <ADCC_Init+0x9c>)
   80c48:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(ADC_IRQn);	
	adc_start(ADC);
   80c4a:	4620      	mov	r0, r4
   80c4c:	4b0e      	ldr	r3, [pc, #56]	; (80c88 <ADCC_Init+0xa0>)
   80c4e:	4798      	blx	r3
   80c50:	bd38      	pop	{r3, r4, r5, pc}
   80c52:	bf00      	nop
   80c54:	000814d1 	.word	0x000814d1
   80c58:	400c0000 	.word	0x400c0000
   80c5c:	0280de80 	.word	0x0280de80
   80c60:	0a037a00 	.word	0x0a037a00
   80c64:	00080161 	.word	0x00080161
   80c68:	000801b3 	.word	0x000801b3
   80c6c:	000801a5 	.word	0x000801a5
   80c70:	000801df 	.word	0x000801df
   80c74:	000801eb 	.word	0x000801eb
   80c78:	00080195 	.word	0x00080195
   80c7c:	000801d5 	.word	0x000801d5
   80c80:	000801e7 	.word	0x000801e7
   80c84:	e000e100 	.word	0xe000e100
   80c88:	000801cf 	.word	0x000801cf

00080c8c <SPI_InitPIO>:
	//Because we are using PORTB.PIN25 in peripheral B mode
	//	we need to enable the clock for that line.
	//PMC->PMC_PCER0 |= _BV(ID_PIOA);
	
	//configure for input
	PIOA->PIO_PDR |= PIO_PA25;
   80c8c:	4b1a      	ldr	r3, [pc, #104]	; (80cf8 <SPI_InitPIO+0x6c>)
   80c8e:	685a      	ldr	r2, [r3, #4]
   80c90:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c94:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ODR |= PIO_PA25;		//Input
   80c96:	695a      	ldr	r2, [r3, #20]
   80c98:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80c9c:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PUER |= PIO_PA25;		//pull-up
   80c9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80ca0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80ca4:	665a      	str	r2, [r3, #100]	; 0x64
	
	PIOA->PIO_PDR |= PIO_PA26;		//MOSI
   80ca6:	685a      	ldr	r2, [r3, #4]
   80ca8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80cac:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA26;		//MOSI	Output
   80cae:	691a      	ldr	r2, [r3, #16]
   80cb0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80cb4:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA26;	//Peripheral A
   80cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cb8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   80cbc:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA27;		//SPCK
   80cbe:	685a      	ldr	r2, [r3, #4]
   80cc0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80cc4:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA27;		//SPCK	Output
   80cc6:	691a      	ldr	r2, [r3, #16]
   80cc8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80ccc:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA27;	//Peripheral A
   80cce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cd0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
   80cd4:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA28;		//NPCS0
   80cd6:	685a      	ldr	r2, [r3, #4]
   80cd8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cdc:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA28;		//NPCS0	Output
   80cde:	691a      	ldr	r2, [r3, #16]
   80ce0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80ce4:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA28;	//Peripheral A
   80ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80ce8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   80cec:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER |= PIO_PA28;		//pull-up
   80cee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80cf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80cf4:	665a      	str	r2, [r3, #100]	; 0x64
   80cf6:	4770      	bx	lr
   80cf8:	400e0e00 	.word	0x400e0e00

00080cfc <SPI_Init>:
}

void SPI_Init(void)
{
   80cfc:	b538      	push	{r3, r4, r5, lr}
	int i;
	pmc_enable_periph_clk(ID_SPI0);
   80cfe:	2018      	movs	r0, #24
   80d00:	4b2a      	ldr	r3, [pc, #168]	; (80dac <SPI_Init+0xb0>)
   80d02:	4798      	blx	r3
	spi_set_writeprotect(SPI0, 0);
   80d04:	4c2a      	ldr	r4, [pc, #168]	; (80db0 <SPI_Init+0xb4>)
   80d06:	2100      	movs	r1, #0
   80d08:	4620      	mov	r0, r4
   80d0a:	4b2a      	ldr	r3, [pc, #168]	; (80db4 <SPI_Init+0xb8>)
   80d0c:	4798      	blx	r3
	SPI_InitPIO();
   80d0e:	4b2a      	ldr	r3, [pc, #168]	; (80db8 <SPI_Init+0xbc>)
   80d10:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80d12:	2380      	movs	r3, #128	; 0x80
   80d14:	6023      	str	r3, [r4, #0]
   80d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
  __ASM volatile ("nop");
   80d1a:	bf00      	nop
	spi_reset(SPI0);	
	for(i=0;i<0xffff;i++)
   80d1c:	3b01      	subs	r3, #1
   80d1e:	d1fc      	bne.n	80d1a <SPI_Init+0x1e>
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80d20:	4c23      	ldr	r4, [pc, #140]	; (80db0 <SPI_Init+0xb4>)
   80d22:	2302      	movs	r3, #2
   80d24:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80d26:	6863      	ldr	r3, [r4, #4]
   80d28:	f043 0301 	orr.w	r3, r3, #1
   80d2c:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80d2e:	6863      	ldr	r3, [r4, #4]
   80d30:	f043 0310 	orr.w	r3, r3, #16
   80d34:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80d36:	6863      	ldr	r3, [r4, #4]
   80d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80d3c:	6063      	str	r3, [r4, #4]
		__NOP();
	spi_disable(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_disable_loopback(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(DEFAULT_CHIP_ID)); //NPCS[3:0]=1110b
   80d3e:	210e      	movs	r1, #14
   80d40:	4620      	mov	r0, r4
   80d42:	4b1e      	ldr	r3, [pc, #120]	; (80dbc <SPI_Init+0xc0>)
   80d44:	4798      	blx	r3
	p_spi->SPI_MR |= SPI_MR_PS;
   80d46:	6863      	ldr	r3, [r4, #4]
   80d48:	f043 0302 	orr.w	r3, r3, #2
   80d4c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80d4e:	6863      	ldr	r3, [r4, #4]
   80d50:	f023 0304 	bic.w	r3, r3, #4
   80d54:	6063      	str	r3, [r4, #4]
	spi_set_variable_peripheral_select(SPI0);
	spi_disable_peripheral_select_decode(SPI0);
	spi_set_delay_between_chip_select(SPI0, 6);
   80d56:	2106      	movs	r1, #6
   80d58:	4620      	mov	r0, r4
   80d5a:	4b19      	ldr	r3, [pc, #100]	; (80dc0 <SPI_Init+0xc4>)
   80d5c:	4798      	blx	r3
	spi_set_clock_polarity(SPI0,0,false);
   80d5e:	2200      	movs	r2, #0
   80d60:	4611      	mov	r1, r2
   80d62:	4620      	mov	r0, r4
   80d64:	4b17      	ldr	r3, [pc, #92]	; (80dc4 <SPI_Init+0xc8>)
   80d66:	4798      	blx	r3
	spi_set_clock_phase(SPI0, 0, true);
   80d68:	2201      	movs	r2, #1
   80d6a:	2100      	movs	r1, #0
   80d6c:	4620      	mov	r0, r4
   80d6e:	4b16      	ldr	r3, [pc, #88]	; (80dc8 <SPI_Init+0xcc>)
   80d70:	4798      	blx	r3
	spi_set_baudrate_div(SPI0,0,21); //SCLK = 4Mhz
   80d72:	2215      	movs	r2, #21
   80d74:	2100      	movs	r1, #0
   80d76:	4620      	mov	r0, r4
   80d78:	4b14      	ldr	r3, [pc, #80]	; (80dcc <SPI_Init+0xd0>)
   80d7a:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0,0,0);
   80d7c:	2200      	movs	r2, #0
   80d7e:	4611      	mov	r1, r2
   80d80:	4620      	mov	r0, r4
   80d82:	4b13      	ldr	r3, [pc, #76]	; (80dd0 <SPI_Init+0xd4>)
   80d84:	4798      	blx	r3
	spi_set_transfer_delay(SPI0,0,10,1); //
   80d86:	2301      	movs	r3, #1
   80d88:	220a      	movs	r2, #10
   80d8a:	2100      	movs	r1, #0
   80d8c:	4620      	mov	r0, r4
   80d8e:	4d11      	ldr	r5, [pc, #68]	; (80dd4 <SPI_Init+0xd8>)
   80d90:	47a8      	blx	r5
	spi_configure_cs_behavior(SPI0, 0, SPI_CS_KEEP_LOW);
   80d92:	2208      	movs	r2, #8
   80d94:	2100      	movs	r1, #0
   80d96:	4620      	mov	r0, r4
   80d98:	4b0f      	ldr	r3, [pc, #60]	; (80dd8 <SPI_Init+0xdc>)
   80d9a:	4798      	blx	r3
	SPI0->SPI_IER = 0;	
   80d9c:	2300      	movs	r3, #0
   80d9e:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80da0:	2101      	movs	r1, #1
   80da2:	6021      	str	r1, [r4, #0]
	spi_enable(SPI0);
	spi_set_writeprotect(SPI0, 1);
   80da4:	4620      	mov	r0, r4
   80da6:	4b03      	ldr	r3, [pc, #12]	; (80db4 <SPI_Init+0xb8>)
   80da8:	4798      	blx	r3
   80daa:	bd38      	pop	{r3, r4, r5, pc}
   80dac:	000814d1 	.word	0x000814d1
   80db0:	40008000 	.word	0x40008000
   80db4:	00080b89 	.word	0x00080b89
   80db8:	00080c8d 	.word	0x00080c8d
   80dbc:	00080a25 	.word	0x00080a25
   80dc0:	00080a3b 	.word	0x00080a3b
   80dc4:	00080aaf 	.word	0x00080aaf
   80dc8:	00080acd 	.word	0x00080acd
   80dcc:	00080b45 	.word	0x00080b45
   80dd0:	00080b31 	.word	0x00080b31
   80dd4:	00080b6b 	.word	0x00080b6b
   80dd8:	00080aeb 	.word	0x00080aeb

00080ddc <SPIC_Write>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Write(uint16_t *data, int length, uint16_t *SR)
{
   80ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80de0:	b085      	sub	sp, #20
   80de2:	4682      	mov	sl, r0
   80de4:	4689      	mov	r9, r1
   80de6:	9201      	str	r2, [sp, #4]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80de8:	4b28      	ldr	r3, [pc, #160]	; (80e8c <SPIC_Write+0xb0>)
   80dea:	691b      	ldr	r3, [r3, #16]
   80dec:	f013 0f01 	tst.w	r3, #1
   80df0:	d12b      	bne.n	80e4a <SPIC_Write+0x6e>
		spi_read(SPI0,SR,&Pcs);	
	if(length>1)
   80df2:	f1b9 0f01 	cmp.w	r9, #1
   80df6:	dd35      	ble.n	80e64 <SPIC_Write+0x88>
	{
		for (i=0; i<(length-1);i++)
   80df8:	f109 33ff 	add.w	r3, r9, #4294967295
   80dfc:	2b00      	cmp	r3, #0
   80dfe:	dd13      	ble.n	80e28 <SPIC_Write+0x4c>
   80e00:	f1aa 0502 	sub.w	r5, sl, #2
   80e04:	4698      	mov	r8, r3
   80e06:	2400      	movs	r4, #0
		{		
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80e08:	4e20      	ldr	r6, [pc, #128]	; (80e8c <SPIC_Write+0xb0>)
   80e0a:	4f21      	ldr	r7, [pc, #132]	; (80e90 <SPIC_Write+0xb4>)
				return 0;
			if(i==0)
				spi_read(SPI0,SR,&Pcs);
   80e0c:	f8df b084 	ldr.w	fp, [pc, #132]	; 80e94 <SPIC_Write+0xb8>
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80e10:	2300      	movs	r3, #0
   80e12:	461a      	mov	r2, r3
   80e14:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   80e18:	4630      	mov	r0, r6
   80e1a:	47b8      	blx	r7
   80e1c:	2800      	cmp	r0, #0
   80e1e:	d133      	bne.n	80e88 <SPIC_Write+0xac>
			if(i==0)
   80e20:	b1d4      	cbz	r4, 80e58 <SPIC_Write+0x7c>
		for (i=0; i<(length-1);i++)
   80e22:	3401      	adds	r4, #1
   80e24:	4544      	cmp	r4, r8
   80e26:	d1f3      	bne.n	80e10 <SPIC_Write+0x34>
		}
		if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)
   80e28:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
   80e2c:	f109 39ff 	add.w	r9, r9, #4294967295
   80e30:	2301      	movs	r3, #1
   80e32:	2200      	movs	r2, #0
   80e34:	f83a 1019 	ldrh.w	r1, [sl, r9, lsl #1]
   80e38:	4814      	ldr	r0, [pc, #80]	; (80e8c <SPIC_Write+0xb0>)
   80e3a:	4c15      	ldr	r4, [pc, #84]	; (80e90 <SPIC_Write+0xb4>)
   80e3c:	47a0      	blx	r4
				return 0;
   80e3e:	fab0 f080 	clz	r0, r0
   80e42:	0940      	lsrs	r0, r0, #5
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
			return 0;
		spi_read(SPI0,SR,&Pcs);
	}
	return 1;
}
   80e44:	b005      	add	sp, #20
   80e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		spi_read(SPI0,SR,&Pcs);	
   80e4a:	f10d 020f 	add.w	r2, sp, #15
   80e4e:	9901      	ldr	r1, [sp, #4]
   80e50:	480e      	ldr	r0, [pc, #56]	; (80e8c <SPIC_Write+0xb0>)
   80e52:	4b10      	ldr	r3, [pc, #64]	; (80e94 <SPIC_Write+0xb8>)
   80e54:	4798      	blx	r3
   80e56:	e7cc      	b.n	80df2 <SPIC_Write+0x16>
				spi_read(SPI0,SR,&Pcs);
   80e58:	f10d 020f 	add.w	r2, sp, #15
   80e5c:	9901      	ldr	r1, [sp, #4]
   80e5e:	4630      	mov	r0, r6
   80e60:	47d8      	blx	fp
   80e62:	e7de      	b.n	80e22 <SPIC_Write+0x46>
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
   80e64:	2301      	movs	r3, #1
   80e66:	2200      	movs	r2, #0
   80e68:	f8ba 1000 	ldrh.w	r1, [sl]
   80e6c:	4807      	ldr	r0, [pc, #28]	; (80e8c <SPIC_Write+0xb0>)
   80e6e:	4c08      	ldr	r4, [pc, #32]	; (80e90 <SPIC_Write+0xb4>)
   80e70:	47a0      	blx	r4
   80e72:	b108      	cbz	r0, 80e78 <SPIC_Write+0x9c>
			return 0;
   80e74:	2000      	movs	r0, #0
   80e76:	e7e5      	b.n	80e44 <SPIC_Write+0x68>
		spi_read(SPI0,SR,&Pcs);
   80e78:	f10d 020f 	add.w	r2, sp, #15
   80e7c:	9901      	ldr	r1, [sp, #4]
   80e7e:	4803      	ldr	r0, [pc, #12]	; (80e8c <SPIC_Write+0xb0>)
   80e80:	4b04      	ldr	r3, [pc, #16]	; (80e94 <SPIC_Write+0xb8>)
   80e82:	4798      	blx	r3
	return 1;
   80e84:	2001      	movs	r0, #1
   80e86:	e7dd      	b.n	80e44 <SPIC_Write+0x68>
				return 0;
   80e88:	2000      	movs	r0, #0
   80e8a:	e7db      	b.n	80e44 <SPIC_Write+0x68>
   80e8c:	40008000 	.word	0x40008000
   80e90:	00080a7b 	.word	0x00080a7b
   80e94:	00080a4d 	.word	0x00080a4d

00080e98 <SPIC_Read>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Read(uint16_t *data, int length, uint16_t *SR, uint16_t *Resp)
{
   80e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e9c:	b087      	sub	sp, #28
   80e9e:	9001      	str	r0, [sp, #4]
   80ea0:	468b      	mov	fp, r1
   80ea2:	9203      	str	r2, [sp, #12]
   80ea4:	9302      	str	r3, [sp, #8]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80ea6:	4b2a      	ldr	r3, [pc, #168]	; (80f50 <SPIC_Read+0xb8>)
   80ea8:	691b      	ldr	r3, [r3, #16]
   80eaa:	f013 0f01 	tst.w	r3, #1
   80eae:	d132      	bne.n	80f16 <SPIC_Read+0x7e>
		spi_read(SPI0,SR,&Pcs);
	for (i=0; i<(length-1);i++)
   80eb0:	f10b 33ff 	add.w	r3, fp, #4294967295
   80eb4:	2b00      	cmp	r3, #0
   80eb6:	dd1d      	ble.n	80ef4 <SPIC_Read+0x5c>
   80eb8:	9b01      	ldr	r3, [sp, #4]
   80eba:	1e9e      	subs	r6, r3, #2
   80ebc:	9b02      	ldr	r3, [sp, #8]
   80ebe:	1e9d      	subs	r5, r3, #2
   80ec0:	f10b 3aff 	add.w	sl, fp, #4294967295
   80ec4:	2400      	movs	r4, #0
	{
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80ec6:	4f22      	ldr	r7, [pc, #136]	; (80f50 <SPIC_Read+0xb8>)
   80ec8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80f54 <SPIC_Read+0xbc>
			return 0;
		if(i==0)
			spi_read(SPI0,SR,&Pcs);
		else
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80ecc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80f58 <SPIC_Read+0xc0>
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80ed0:	2300      	movs	r3, #0
   80ed2:	461a      	mov	r2, r3
   80ed4:	f836 1f02 	ldrh.w	r1, [r6, #2]!
   80ed8:	4638      	mov	r0, r7
   80eda:	47c0      	blx	r8
   80edc:	2800      	cmp	r0, #0
   80ede:	d132      	bne.n	80f46 <SPIC_Read+0xae>
		if(i==0)
   80ee0:	b304      	cbz	r4, 80f24 <SPIC_Read+0x8c>
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80ee2:	f10d 0217 	add.w	r2, sp, #23
   80ee6:	4629      	mov	r1, r5
   80ee8:	4638      	mov	r0, r7
   80eea:	47c8      	blx	r9
	for (i=0; i<(length-1);i++)
   80eec:	3401      	adds	r4, #1
   80eee:	3502      	adds	r5, #2
   80ef0:	4554      	cmp	r4, sl
   80ef2:	d1ed      	bne.n	80ed0 <SPIC_Read+0x38>
	}
	if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)	
   80ef4:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
   80ef8:	f10b 3bff 	add.w	fp, fp, #4294967295
   80efc:	ea4f 044b 	mov.w	r4, fp, lsl #1
   80f00:	2301      	movs	r3, #1
   80f02:	2200      	movs	r2, #0
   80f04:	9901      	ldr	r1, [sp, #4]
   80f06:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
   80f0a:	4811      	ldr	r0, [pc, #68]	; (80f50 <SPIC_Read+0xb8>)
   80f0c:	4d11      	ldr	r5, [pc, #68]	; (80f54 <SPIC_Read+0xbc>)
   80f0e:	47a8      	blx	r5
   80f10:	b170      	cbz	r0, 80f30 <SPIC_Read+0x98>
		return 0;
   80f12:	2000      	movs	r0, #0
   80f14:	e018      	b.n	80f48 <SPIC_Read+0xb0>
		spi_read(SPI0,SR,&Pcs);
   80f16:	f10d 0217 	add.w	r2, sp, #23
   80f1a:	9903      	ldr	r1, [sp, #12]
   80f1c:	480c      	ldr	r0, [pc, #48]	; (80f50 <SPIC_Read+0xb8>)
   80f1e:	4b0e      	ldr	r3, [pc, #56]	; (80f58 <SPIC_Read+0xc0>)
   80f20:	4798      	blx	r3
   80f22:	e7c5      	b.n	80eb0 <SPIC_Read+0x18>
			spi_read(SPI0,SR,&Pcs);
   80f24:	f10d 0217 	add.w	r2, sp, #23
   80f28:	9903      	ldr	r1, [sp, #12]
   80f2a:	4638      	mov	r0, r7
   80f2c:	47c8      	blx	r9
   80f2e:	e7dd      	b.n	80eec <SPIC_Read+0x54>
	spi_read(SPI0,&Resp[length-2],&Pcs);
   80f30:	1ea1      	subs	r1, r4, #2
   80f32:	f10d 0217 	add.w	r2, sp, #23
   80f36:	9b02      	ldr	r3, [sp, #8]
   80f38:	440b      	add	r3, r1
   80f3a:	4619      	mov	r1, r3
   80f3c:	4804      	ldr	r0, [pc, #16]	; (80f50 <SPIC_Read+0xb8>)
   80f3e:	4b06      	ldr	r3, [pc, #24]	; (80f58 <SPIC_Read+0xc0>)
   80f40:	4798      	blx	r3
	return 1;
   80f42:	2001      	movs	r0, #1
   80f44:	e000      	b.n	80f48 <SPIC_Read+0xb0>
			return 0;
   80f46:	2000      	movs	r0, #0
   80f48:	b007      	add	sp, #28
   80f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f4e:	bf00      	nop
   80f50:	40008000 	.word	0x40008000
   80f54:	00080a7b 	.word	0x00080a7b
   80f58:	00080a4d 	.word	0x00080a4d

00080f5c <Timer_init>:
 */ 
#include "Timer.h"
#include "Prints.h"

void Timer_init(void)
{
   80f5c:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_TC0);
   80f5e:	201b      	movs	r0, #27
   80f60:	4c14      	ldr	r4, [pc, #80]	; (80fb4 <Timer_init+0x58>)
   80f62:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_TC1);
   80f64:	201c      	movs	r0, #28
   80f66:	47a0      	blx	r4
	tc_set_writeprotect(TC0,0);
   80f68:	4c13      	ldr	r4, [pc, #76]	; (80fb8 <Timer_init+0x5c>)
   80f6a:	2100      	movs	r1, #0
   80f6c:	4620      	mov	r0, r4
   80f6e:	4b13      	ldr	r3, [pc, #76]	; (80fbc <Timer_init+0x60>)
   80f70:	4798      	blx	r3
	
	REG_PIOB_ABSR |= PIO_ABSR_P25;     // Switch the multiplexer to peripheral B for TIOA0
   80f72:	4a13      	ldr	r2, [pc, #76]	; (80fc0 <Timer_init+0x64>)
   80f74:	6813      	ldr	r3, [r2, #0]
   80f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80f7a:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= PIO_PDR_P25;        // Disable the GPIO on the corresponding pins
   80f7c:	3a6c      	subs	r2, #108	; 0x6c
   80f7e:	6813      	ldr	r3, [r2, #0]
   80f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80f84:	6013      	str	r3, [r2, #0]
	tc_init(TC0,0,TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC|TC_CMR_ACPA_SET|TC_CMR_ACPC_CLEAR|TC_CMR_TCCLKS_TIMER_CLOCK2); // divide MCLK by 8 
   80f86:	4a0f      	ldr	r2, [pc, #60]	; (80fc4 <Timer_init+0x68>)
   80f88:	2100      	movs	r1, #0
   80f8a:	4620      	mov	r0, r4
   80f8c:	4d0e      	ldr	r5, [pc, #56]	; (80fc8 <Timer_init+0x6c>)
   80f8e:	47a8      	blx	r5
	tc_init(TC0,1,TC_CMR_TCCLKS_TIMER_CLOCK4); // divide MCLK by 128
   80f90:	2203      	movs	r2, #3
   80f92:	2101      	movs	r1, #1
   80f94:	4620      	mov	r0, r4
   80f96:	47a8      	blx	r5
	TC0->TC_CHANNEL[0].TC_RC = 210;//238; // 210 cycles of MCLK/8 to reach 50Khz  -- 420 to reach 25KHz -- 230 to 45.6KHz~
   80f98:	23d2      	movs	r3, #210	; 0xd2
   80f9a:	61e3      	str	r3, [r4, #28]
	TC0->TC_CHANNEL[0].TC_RA = 105;//119; // 105 for 50Khz , 210 for 25kH
   80f9c:	2369      	movs	r3, #105	; 0x69
   80f9e:	6163      	str	r3, [r4, #20]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80fa4:	4b09      	ldr	r3, [pc, #36]	; (80fcc <Timer_init+0x70>)
   80fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	NVIC_DisableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC0_IRQn);
	//tc_enable_interrupt(TC0,0,TC_IER_CPCS);
	tc_start(TC0,0);
   80faa:	2100      	movs	r1, #0
   80fac:	4620      	mov	r0, r4
   80fae:	4b08      	ldr	r3, [pc, #32]	; (80fd0 <Timer_init+0x74>)
   80fb0:	4798      	blx	r3
   80fb2:	bd38      	pop	{r3, r4, r5, pc}
   80fb4:	000814d1 	.word	0x000814d1
   80fb8:	40080000 	.word	0x40080000
   80fbc:	00080bcd 	.word	0x00080bcd
   80fc0:	400e1070 	.word	0x400e1070
   80fc4:	0009c001 	.word	0x0009c001
   80fc8:	00080ba5 	.word	0x00080ba5
   80fcc:	e000e100 	.word	0xe000e100
   80fd0:	00080bbd 	.word	0x00080bbd

00080fd4 <Timer_Sleep>:
	
}

void Timer_Sleep(uint32_t msDelay)
{
   80fd4:	b510      	push	{r4, lr}
   80fd6:	4604      	mov	r4, r0
	tc_start(TC0,1);	
   80fd8:	2101      	movs	r1, #1
   80fda:	4808      	ldr	r0, [pc, #32]	; (80ffc <Timer_Sleep+0x28>)
   80fdc:	4b08      	ldr	r3, [pc, #32]	; (81000 <Timer_Sleep+0x2c>)
   80fde:	4798      	blx	r3
	//PrintLn("wait\n");
	while(TC0->TC_CHANNEL[1].TC_CV < 656*msDelay);
   80fe0:	f44f 7024 	mov.w	r0, #656	; 0x290
   80fe4:	fb00 f004 	mul.w	r0, r0, r4
   80fe8:	4a04      	ldr	r2, [pc, #16]	; (80ffc <Timer_Sleep+0x28>)
   80fea:	6d13      	ldr	r3, [r2, #80]	; 0x50
   80fec:	4283      	cmp	r3, r0
   80fee:	d3fc      	bcc.n	80fea <Timer_Sleep+0x16>
	//PrintLn("done wait\n");
	tc_stop(TC0,1);
   80ff0:	2101      	movs	r1, #1
   80ff2:	4802      	ldr	r0, [pc, #8]	; (80ffc <Timer_Sleep+0x28>)
   80ff4:	4b03      	ldr	r3, [pc, #12]	; (81004 <Timer_Sleep+0x30>)
   80ff6:	4798      	blx	r3
   80ff8:	bd10      	pop	{r4, pc}
   80ffa:	bf00      	nop
   80ffc:	40080000 	.word	0x40080000
   81000:	00080bbd 	.word	0x00080bbd
   81004:	00080bc5 	.word	0x00080bc5

00081008 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81008:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8100a:	480e      	ldr	r0, [pc, #56]	; (81044 <sysclk_init+0x3c>)
   8100c:	4b0e      	ldr	r3, [pc, #56]	; (81048 <sysclk_init+0x40>)
   8100e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81010:	213e      	movs	r1, #62	; 0x3e
   81012:	2000      	movs	r0, #0
   81014:	4b0d      	ldr	r3, [pc, #52]	; (8104c <sysclk_init+0x44>)
   81016:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81018:	4c0d      	ldr	r4, [pc, #52]	; (81050 <sysclk_init+0x48>)
   8101a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8101c:	2800      	cmp	r0, #0
   8101e:	d0fc      	beq.n	8101a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81020:	4b0c      	ldr	r3, [pc, #48]	; (81054 <sysclk_init+0x4c>)
   81022:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81024:	4a0c      	ldr	r2, [pc, #48]	; (81058 <sysclk_init+0x50>)
   81026:	4b0d      	ldr	r3, [pc, #52]	; (8105c <sysclk_init+0x54>)
   81028:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8102a:	4c0d      	ldr	r4, [pc, #52]	; (81060 <sysclk_init+0x58>)
   8102c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8102e:	2800      	cmp	r0, #0
   81030:	d0fc      	beq.n	8102c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81032:	2010      	movs	r0, #16
   81034:	4b0b      	ldr	r3, [pc, #44]	; (81064 <sysclk_init+0x5c>)
   81036:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81038:	4b0b      	ldr	r3, [pc, #44]	; (81068 <sysclk_init+0x60>)
   8103a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8103c:	4801      	ldr	r0, [pc, #4]	; (81044 <sysclk_init+0x3c>)
   8103e:	4b02      	ldr	r3, [pc, #8]	; (81048 <sysclk_init+0x40>)
   81040:	4798      	blx	r3
   81042:	bd10      	pop	{r4, pc}
   81044:	0501bd00 	.word	0x0501bd00
   81048:	2007013d 	.word	0x2007013d
   8104c:	0008144d 	.word	0x0008144d
   81050:	000814a1 	.word	0x000814a1
   81054:	000814b1 	.word	0x000814b1
   81058:	200d3f01 	.word	0x200d3f01
   8105c:	400e0600 	.word	0x400e0600
   81060:	000814c1 	.word	0x000814c1
   81064:	000813e9 	.word	0x000813e9
   81068:	0008158d 	.word	0x0008158d

0008106c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8106c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8106e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81072:	4b16      	ldr	r3, [pc, #88]	; (810cc <board_init+0x60>)
   81074:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81076:	200b      	movs	r0, #11
   81078:	4c15      	ldr	r4, [pc, #84]	; (810d0 <board_init+0x64>)
   8107a:	47a0      	blx	r4
   8107c:	200c      	movs	r0, #12
   8107e:	47a0      	blx	r4
   81080:	200d      	movs	r0, #13
   81082:	47a0      	blx	r4
   81084:	200e      	movs	r0, #14
   81086:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81088:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8108c:	203b      	movs	r0, #59	; 0x3b
   8108e:	4c11      	ldr	r4, [pc, #68]	; (810d4 <board_init+0x68>)
   81090:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81092:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81096:	2055      	movs	r0, #85	; 0x55
   81098:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8109a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8109e:	2056      	movs	r0, #86	; 0x56
   810a0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   810a2:	490d      	ldr	r1, [pc, #52]	; (810d8 <board_init+0x6c>)
   810a4:	2068      	movs	r0, #104	; 0x68
   810a6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   810a8:	490c      	ldr	r1, [pc, #48]	; (810dc <board_init+0x70>)
   810aa:	205c      	movs	r0, #92	; 0x5c
   810ac:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   810ae:	4a0c      	ldr	r2, [pc, #48]	; (810e0 <board_init+0x74>)
   810b0:	f44f 7140 	mov.w	r1, #768	; 0x300
   810b4:	480b      	ldr	r0, [pc, #44]	; (810e4 <board_init+0x78>)
   810b6:	4b0c      	ldr	r3, [pc, #48]	; (810e8 <board_init+0x7c>)
   810b8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   810ba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810be:	202b      	movs	r0, #43	; 0x2b
   810c0:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   810c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810c6:	202a      	movs	r0, #42	; 0x2a
   810c8:	47a0      	blx	r4
   810ca:	bd10      	pop	{r4, pc}
   810cc:	400e1a50 	.word	0x400e1a50
   810d0:	000814d1 	.word	0x000814d1
   810d4:	000811dd 	.word	0x000811dd
   810d8:	28000079 	.word	0x28000079
   810dc:	28000001 	.word	0x28000001
   810e0:	08000001 	.word	0x08000001
   810e4:	400e0e00 	.word	0x400e0e00
   810e8:	000812ad 	.word	0x000812ad

000810ec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   810ec:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   810ee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   810f2:	d016      	beq.n	81122 <pio_set_peripheral+0x36>
   810f4:	d80b      	bhi.n	8110e <pio_set_peripheral+0x22>
   810f6:	b149      	cbz	r1, 8110c <pio_set_peripheral+0x20>
   810f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   810fc:	d105      	bne.n	8110a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   810fe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81100:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81102:	400b      	ands	r3, r1
   81104:	ea23 0302 	bic.w	r3, r3, r2
   81108:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8110a:	6042      	str	r2, [r0, #4]
   8110c:	4770      	bx	lr
	switch (ul_type) {
   8110e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81112:	d0fb      	beq.n	8110c <pio_set_peripheral+0x20>
   81114:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81118:	d0f8      	beq.n	8110c <pio_set_peripheral+0x20>
   8111a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8111e:	d1f4      	bne.n	8110a <pio_set_peripheral+0x1e>
   81120:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81122:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81124:	4313      	orrs	r3, r2
   81126:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81128:	e7ef      	b.n	8110a <pio_set_peripheral+0x1e>

0008112a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8112a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8112c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81130:	bf14      	ite	ne
   81132:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81134:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81136:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8113a:	bf14      	ite	ne
   8113c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8113e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81140:	f012 0f02 	tst.w	r2, #2
   81144:	d107      	bne.n	81156 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81146:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8114a:	bf18      	it	ne
   8114c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81150:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81152:	6001      	str	r1, [r0, #0]
   81154:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81156:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8115a:	e7f9      	b.n	81150 <pio_set_input+0x26>

0008115c <pio_set_output>:
{
   8115c:	b410      	push	{r4}
   8115e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81160:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81162:	b944      	cbnz	r4, 81176 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81164:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81166:	b143      	cbz	r3, 8117a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81168:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8116a:	b942      	cbnz	r2, 8117e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8116c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8116e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81170:	6001      	str	r1, [r0, #0]
}
   81172:	bc10      	pop	{r4}
   81174:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81176:	6641      	str	r1, [r0, #100]	; 0x64
   81178:	e7f5      	b.n	81166 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8117a:	6541      	str	r1, [r0, #84]	; 0x54
   8117c:	e7f5      	b.n	8116a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8117e:	6301      	str	r1, [r0, #48]	; 0x30
   81180:	e7f5      	b.n	8116e <pio_set_output+0x12>

00081182 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81182:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81184:	4770      	bx	lr

00081186 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81186:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81188:	4770      	bx	lr

0008118a <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8118a:	0943      	lsrs	r3, r0, #5
   8118c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81190:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81194:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   81196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81198:	f000 001f 	and.w	r0, r0, #31
   8119c:	fa23 f000 	lsr.w	r0, r3, r0
}
   811a0:	f000 0001 	and.w	r0, r0, #1
   811a4:	4770      	bx	lr

000811a6 <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811a6:	0943      	lsrs	r3, r0, #5
   811a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811ac:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811b0:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   811b2:	f000 001f 	and.w	r0, r0, #31
   811b6:	2201      	movs	r2, #1
   811b8:	fa02 f000 	lsl.w	r0, r2, r0
   811bc:	6318      	str	r0, [r3, #48]	; 0x30
   811be:	4770      	bx	lr

000811c0 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811c0:	0943      	lsrs	r3, r0, #5
   811c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811c6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811ca:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   811cc:	f000 001f 	and.w	r0, r0, #31
   811d0:	2201      	movs	r2, #1
   811d2:	fa02 f000 	lsl.w	r0, r2, r0
   811d6:	6358      	str	r0, [r3, #52]	; 0x34
   811d8:	4770      	bx	lr
	...

000811dc <pio_configure_pin>:
{
   811dc:	b570      	push	{r4, r5, r6, lr}
   811de:	b082      	sub	sp, #8
   811e0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811e2:	0943      	lsrs	r3, r0, #5
   811e4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811e8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811ec:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   811ee:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   811f2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   811f6:	d031      	beq.n	8125c <pio_configure_pin+0x80>
   811f8:	d816      	bhi.n	81228 <pio_configure_pin+0x4c>
   811fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   811fe:	d01b      	beq.n	81238 <pio_configure_pin+0x5c>
   81200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81204:	d116      	bne.n	81234 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81206:	f000 001f 	and.w	r0, r0, #31
   8120a:	2601      	movs	r6, #1
   8120c:	4086      	lsls	r6, r0
   8120e:	4632      	mov	r2, r6
   81210:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81214:	4620      	mov	r0, r4
   81216:	4b22      	ldr	r3, [pc, #136]	; (812a0 <pio_configure_pin+0xc4>)
   81218:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8121a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8121e:	bf14      	ite	ne
   81220:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81222:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81224:	2001      	movs	r0, #1
   81226:	e017      	b.n	81258 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8122c:	d021      	beq.n	81272 <pio_configure_pin+0x96>
   8122e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81232:	d01e      	beq.n	81272 <pio_configure_pin+0x96>
		return 0;
   81234:	2000      	movs	r0, #0
   81236:	e00f      	b.n	81258 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81238:	f000 001f 	and.w	r0, r0, #31
   8123c:	2601      	movs	r6, #1
   8123e:	4086      	lsls	r6, r0
   81240:	4632      	mov	r2, r6
   81242:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81246:	4620      	mov	r0, r4
   81248:	4b15      	ldr	r3, [pc, #84]	; (812a0 <pio_configure_pin+0xc4>)
   8124a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8124c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81250:	bf14      	ite	ne
   81252:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81254:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81256:	2001      	movs	r0, #1
}
   81258:	b002      	add	sp, #8
   8125a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8125c:	f000 011f 	and.w	r1, r0, #31
   81260:	2601      	movs	r6, #1
   81262:	462a      	mov	r2, r5
   81264:	fa06 f101 	lsl.w	r1, r6, r1
   81268:	4620      	mov	r0, r4
   8126a:	4b0e      	ldr	r3, [pc, #56]	; (812a4 <pio_configure_pin+0xc8>)
   8126c:	4798      	blx	r3
	return 1;
   8126e:	4630      	mov	r0, r6
		break;
   81270:	e7f2      	b.n	81258 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81272:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81276:	f000 011f 	and.w	r1, r0, #31
   8127a:	2601      	movs	r6, #1
   8127c:	ea05 0306 	and.w	r3, r5, r6
   81280:	9300      	str	r3, [sp, #0]
   81282:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81286:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8128a:	bf14      	ite	ne
   8128c:	2200      	movne	r2, #0
   8128e:	2201      	moveq	r2, #1
   81290:	fa06 f101 	lsl.w	r1, r6, r1
   81294:	4620      	mov	r0, r4
   81296:	4c04      	ldr	r4, [pc, #16]	; (812a8 <pio_configure_pin+0xcc>)
   81298:	47a0      	blx	r4
	return 1;
   8129a:	4630      	mov	r0, r6
		break;
   8129c:	e7dc      	b.n	81258 <pio_configure_pin+0x7c>
   8129e:	bf00      	nop
   812a0:	000810ed 	.word	0x000810ed
   812a4:	0008112b 	.word	0x0008112b
   812a8:	0008115d 	.word	0x0008115d

000812ac <pio_configure_pin_group>:
{
   812ac:	b570      	push	{r4, r5, r6, lr}
   812ae:	b082      	sub	sp, #8
   812b0:	4605      	mov	r5, r0
   812b2:	460e      	mov	r6, r1
   812b4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   812b6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   812ba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   812be:	d027      	beq.n	81310 <pio_configure_pin_group+0x64>
   812c0:	d811      	bhi.n	812e6 <pio_configure_pin_group+0x3a>
   812c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   812c6:	d016      	beq.n	812f6 <pio_configure_pin_group+0x4a>
   812c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   812cc:	d111      	bne.n	812f2 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   812ce:	460a      	mov	r2, r1
   812d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   812d4:	4b19      	ldr	r3, [pc, #100]	; (8133c <pio_configure_pin_group+0x90>)
   812d6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   812d8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   812dc:	bf14      	ite	ne
   812de:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   812e0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   812e2:	2001      	movs	r0, #1
   812e4:	e012      	b.n	8130c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   812e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   812ea:	d015      	beq.n	81318 <pio_configure_pin_group+0x6c>
   812ec:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   812f0:	d012      	beq.n	81318 <pio_configure_pin_group+0x6c>
		return 0;
   812f2:	2000      	movs	r0, #0
   812f4:	e00a      	b.n	8130c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   812f6:	460a      	mov	r2, r1
   812f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   812fc:	4b0f      	ldr	r3, [pc, #60]	; (8133c <pio_configure_pin_group+0x90>)
   812fe:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81300:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81304:	bf14      	ite	ne
   81306:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81308:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8130a:	2001      	movs	r0, #1
}
   8130c:	b002      	add	sp, #8
   8130e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81310:	4b0b      	ldr	r3, [pc, #44]	; (81340 <pio_configure_pin_group+0x94>)
   81312:	4798      	blx	r3
	return 1;
   81314:	2001      	movs	r0, #1
		break;
   81316:	e7f9      	b.n	8130c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81318:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8131c:	f004 0301 	and.w	r3, r4, #1
   81320:	9300      	str	r3, [sp, #0]
   81322:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81326:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8132a:	bf14      	ite	ne
   8132c:	2200      	movne	r2, #0
   8132e:	2201      	moveq	r2, #1
   81330:	4631      	mov	r1, r6
   81332:	4628      	mov	r0, r5
   81334:	4c03      	ldr	r4, [pc, #12]	; (81344 <pio_configure_pin_group+0x98>)
   81336:	47a0      	blx	r4
	return 1;
   81338:	2001      	movs	r0, #1
		break;
   8133a:	e7e7      	b.n	8130c <pio_configure_pin_group+0x60>
   8133c:	000810ed 	.word	0x000810ed
   81340:	0008112b 	.word	0x0008112b
   81344:	0008115d 	.word	0x0008115d

00081348 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8134c:	4604      	mov	r4, r0
   8134e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81350:	4b0e      	ldr	r3, [pc, #56]	; (8138c <pio_handler_process+0x44>)
   81352:	4798      	blx	r3
   81354:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81356:	4620      	mov	r0, r4
   81358:	4b0d      	ldr	r3, [pc, #52]	; (81390 <pio_handler_process+0x48>)
   8135a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8135c:	4005      	ands	r5, r0
   8135e:	d013      	beq.n	81388 <pio_handler_process+0x40>
   81360:	4c0c      	ldr	r4, [pc, #48]	; (81394 <pio_handler_process+0x4c>)
   81362:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81366:	e003      	b.n	81370 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81368:	42b4      	cmp	r4, r6
   8136a:	d00d      	beq.n	81388 <pio_handler_process+0x40>
   8136c:	3410      	adds	r4, #16
		while (status != 0) {
   8136e:	b15d      	cbz	r5, 81388 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81370:	6820      	ldr	r0, [r4, #0]
   81372:	4540      	cmp	r0, r8
   81374:	d1f8      	bne.n	81368 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81376:	6861      	ldr	r1, [r4, #4]
   81378:	4229      	tst	r1, r5
   8137a:	d0f5      	beq.n	81368 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8137c:	68e3      	ldr	r3, [r4, #12]
   8137e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81380:	6863      	ldr	r3, [r4, #4]
   81382:	ea25 0503 	bic.w	r5, r5, r3
   81386:	e7ef      	b.n	81368 <pio_handler_process+0x20>
   81388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8138c:	00081183 	.word	0x00081183
   81390:	00081187 	.word	0x00081187
   81394:	20070f98 	.word	0x20070f98

00081398 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81398:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8139a:	210b      	movs	r1, #11
   8139c:	4801      	ldr	r0, [pc, #4]	; (813a4 <PIOA_Handler+0xc>)
   8139e:	4b02      	ldr	r3, [pc, #8]	; (813a8 <PIOA_Handler+0x10>)
   813a0:	4798      	blx	r3
   813a2:	bd08      	pop	{r3, pc}
   813a4:	400e0e00 	.word	0x400e0e00
   813a8:	00081349 	.word	0x00081349

000813ac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   813ac:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   813ae:	210c      	movs	r1, #12
   813b0:	4801      	ldr	r0, [pc, #4]	; (813b8 <PIOB_Handler+0xc>)
   813b2:	4b02      	ldr	r3, [pc, #8]	; (813bc <PIOB_Handler+0x10>)
   813b4:	4798      	blx	r3
   813b6:	bd08      	pop	{r3, pc}
   813b8:	400e1000 	.word	0x400e1000
   813bc:	00081349 	.word	0x00081349

000813c0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   813c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   813c2:	210d      	movs	r1, #13
   813c4:	4801      	ldr	r0, [pc, #4]	; (813cc <PIOC_Handler+0xc>)
   813c6:	4b02      	ldr	r3, [pc, #8]	; (813d0 <PIOC_Handler+0x10>)
   813c8:	4798      	blx	r3
   813ca:	bd08      	pop	{r3, pc}
   813cc:	400e1200 	.word	0x400e1200
   813d0:	00081349 	.word	0x00081349

000813d4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   813d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   813d6:	210e      	movs	r1, #14
   813d8:	4801      	ldr	r0, [pc, #4]	; (813e0 <PIOD_Handler+0xc>)
   813da:	4b02      	ldr	r3, [pc, #8]	; (813e4 <PIOD_Handler+0x10>)
   813dc:	4798      	blx	r3
   813de:	bd08      	pop	{r3, pc}
   813e0:	400e1400 	.word	0x400e1400
   813e4:	00081349 	.word	0x00081349

000813e8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   813e8:	4a17      	ldr	r2, [pc, #92]	; (81448 <pmc_switch_mck_to_pllack+0x60>)
   813ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
   813ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   813f0:	4318      	orrs	r0, r3
   813f2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   813f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   813f6:	f013 0f08 	tst.w	r3, #8
   813fa:	d10a      	bne.n	81412 <pmc_switch_mck_to_pllack+0x2a>
   813fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81400:	4911      	ldr	r1, [pc, #68]	; (81448 <pmc_switch_mck_to_pllack+0x60>)
   81402:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81404:	f012 0f08 	tst.w	r2, #8
   81408:	d103      	bne.n	81412 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8140a:	3b01      	subs	r3, #1
   8140c:	d1f9      	bne.n	81402 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8140e:	2001      	movs	r0, #1
   81410:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81412:	4a0d      	ldr	r2, [pc, #52]	; (81448 <pmc_switch_mck_to_pllack+0x60>)
   81414:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81416:	f023 0303 	bic.w	r3, r3, #3
   8141a:	f043 0302 	orr.w	r3, r3, #2
   8141e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81420:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81422:	f013 0f08 	tst.w	r3, #8
   81426:	d10a      	bne.n	8143e <pmc_switch_mck_to_pllack+0x56>
   81428:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8142c:	4906      	ldr	r1, [pc, #24]	; (81448 <pmc_switch_mck_to_pllack+0x60>)
   8142e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81430:	f012 0f08 	tst.w	r2, #8
   81434:	d105      	bne.n	81442 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81436:	3b01      	subs	r3, #1
   81438:	d1f9      	bne.n	8142e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8143a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8143c:	4770      	bx	lr
	return 0;
   8143e:	2000      	movs	r0, #0
   81440:	4770      	bx	lr
   81442:	2000      	movs	r0, #0
   81444:	4770      	bx	lr
   81446:	bf00      	nop
   81448:	400e0600 	.word	0x400e0600

0008144c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8144c:	b9c8      	cbnz	r0, 81482 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8144e:	4a11      	ldr	r2, [pc, #68]	; (81494 <pmc_switch_mainck_to_xtal+0x48>)
   81450:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81452:	0209      	lsls	r1, r1, #8
   81454:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81456:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8145a:	f023 0303 	bic.w	r3, r3, #3
   8145e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81462:	f043 0301 	orr.w	r3, r3, #1
   81466:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81468:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8146a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8146c:	f013 0f01 	tst.w	r3, #1
   81470:	d0fb      	beq.n	8146a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81472:	4a08      	ldr	r2, [pc, #32]	; (81494 <pmc_switch_mainck_to_xtal+0x48>)
   81474:	6a13      	ldr	r3, [r2, #32]
   81476:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8147a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8147e:	6213      	str	r3, [r2, #32]
   81480:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81482:	4904      	ldr	r1, [pc, #16]	; (81494 <pmc_switch_mainck_to_xtal+0x48>)
   81484:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81486:	4a04      	ldr	r2, [pc, #16]	; (81498 <pmc_switch_mainck_to_xtal+0x4c>)
   81488:	401a      	ands	r2, r3
   8148a:	4b04      	ldr	r3, [pc, #16]	; (8149c <pmc_switch_mainck_to_xtal+0x50>)
   8148c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8148e:	620b      	str	r3, [r1, #32]
   81490:	4770      	bx	lr
   81492:	bf00      	nop
   81494:	400e0600 	.word	0x400e0600
   81498:	fec8fffc 	.word	0xfec8fffc
   8149c:	01370002 	.word	0x01370002

000814a0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   814a0:	4b02      	ldr	r3, [pc, #8]	; (814ac <pmc_osc_is_ready_mainck+0xc>)
   814a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   814a4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   814a8:	4770      	bx	lr
   814aa:	bf00      	nop
   814ac:	400e0600 	.word	0x400e0600

000814b0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   814b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   814b4:	4b01      	ldr	r3, [pc, #4]	; (814bc <pmc_disable_pllack+0xc>)
   814b6:	629a      	str	r2, [r3, #40]	; 0x28
   814b8:	4770      	bx	lr
   814ba:	bf00      	nop
   814bc:	400e0600 	.word	0x400e0600

000814c0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   814c0:	4b02      	ldr	r3, [pc, #8]	; (814cc <pmc_is_locked_pllack+0xc>)
   814c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   814c4:	f000 0002 	and.w	r0, r0, #2
   814c8:	4770      	bx	lr
   814ca:	bf00      	nop
   814cc:	400e0600 	.word	0x400e0600

000814d0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   814d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   814d4:	4b05      	ldr	r3, [pc, #20]	; (814ec <pmc_enable_periph_clk+0x1c>)
   814d6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   814da:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   814de:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   814e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   814e6:	2000      	movs	r0, #0
   814e8:	4770      	bx	lr
   814ea:	bf00      	nop
   814ec:	400e0600 	.word	0x400e0600

000814f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   814f0:	e7fe      	b.n	814f0 <Dummy_Handler>
	...

000814f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   814f4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   814f6:	4b1c      	ldr	r3, [pc, #112]	; (81568 <Reset_Handler+0x74>)
   814f8:	4a1c      	ldr	r2, [pc, #112]	; (8156c <Reset_Handler+0x78>)
   814fa:	429a      	cmp	r2, r3
   814fc:	d010      	beq.n	81520 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   814fe:	4b1c      	ldr	r3, [pc, #112]	; (81570 <Reset_Handler+0x7c>)
   81500:	4a19      	ldr	r2, [pc, #100]	; (81568 <Reset_Handler+0x74>)
   81502:	429a      	cmp	r2, r3
   81504:	d20c      	bcs.n	81520 <Reset_Handler+0x2c>
   81506:	3b01      	subs	r3, #1
   81508:	1a9b      	subs	r3, r3, r2
   8150a:	f023 0303 	bic.w	r3, r3, #3
   8150e:	3304      	adds	r3, #4
   81510:	4413      	add	r3, r2
   81512:	4916      	ldr	r1, [pc, #88]	; (8156c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   81514:	f851 0b04 	ldr.w	r0, [r1], #4
   81518:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   8151c:	429a      	cmp	r2, r3
   8151e:	d1f9      	bne.n	81514 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81520:	4b14      	ldr	r3, [pc, #80]	; (81574 <Reset_Handler+0x80>)
   81522:	4a15      	ldr	r2, [pc, #84]	; (81578 <Reset_Handler+0x84>)
   81524:	429a      	cmp	r2, r3
   81526:	d20a      	bcs.n	8153e <Reset_Handler+0x4a>
   81528:	3b01      	subs	r3, #1
   8152a:	1a9b      	subs	r3, r3, r2
   8152c:	f023 0303 	bic.w	r3, r3, #3
   81530:	3304      	adds	r3, #4
   81532:	4413      	add	r3, r2
		*pDest++ = 0;
   81534:	2100      	movs	r1, #0
   81536:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   8153a:	4293      	cmp	r3, r2
   8153c:	d1fb      	bne.n	81536 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8153e:	4b0f      	ldr	r3, [pc, #60]	; (8157c <Reset_Handler+0x88>)
   81540:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81544:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81548:	490d      	ldr	r1, [pc, #52]	; (81580 <Reset_Handler+0x8c>)
   8154a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8154c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   81554:	d203      	bcs.n	8155e <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81556:	688b      	ldr	r3, [r1, #8]
   81558:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8155c:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8155e:	4b09      	ldr	r3, [pc, #36]	; (81584 <Reset_Handler+0x90>)
   81560:	4798      	blx	r3

	/* Branch to main function */
	main();
   81562:	4b09      	ldr	r3, [pc, #36]	; (81588 <Reset_Handler+0x94>)
   81564:	4798      	blx	r3
   81566:	e7fe      	b.n	81566 <Reset_Handler+0x72>
   81568:	20070000 	.word	0x20070000
   8156c:	00086ad4 	.word	0x00086ad4
   81570:	20070e78 	.word	0x20070e78
   81574:	200710fc 	.word	0x200710fc
   81578:	20070e78 	.word	0x20070e78
   8157c:	00080000 	.word	0x00080000
   81580:	e000ed00 	.word	0xe000ed00
   81584:	00081ead 	.word	0x00081ead
   81588:	00081731 	.word	0x00081731

0008158c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8158c:	4b3d      	ldr	r3, [pc, #244]	; (81684 <SystemCoreClockUpdate+0xf8>)
   8158e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81590:	f003 0303 	and.w	r3, r3, #3
   81594:	2b03      	cmp	r3, #3
   81596:	d80e      	bhi.n	815b6 <SystemCoreClockUpdate+0x2a>
   81598:	e8df f003 	tbb	[pc, r3]
   8159c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   815a0:	4b39      	ldr	r3, [pc, #228]	; (81688 <SystemCoreClockUpdate+0xfc>)
   815a2:	695b      	ldr	r3, [r3, #20]
   815a4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   815a8:	bf14      	ite	ne
   815aa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   815ae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   815b2:	4b36      	ldr	r3, [pc, #216]	; (8168c <SystemCoreClockUpdate+0x100>)
   815b4:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   815b6:	4b33      	ldr	r3, [pc, #204]	; (81684 <SystemCoreClockUpdate+0xf8>)
   815b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   815ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   815be:	2b70      	cmp	r3, #112	; 0x70
   815c0:	d057      	beq.n	81672 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   815c2:	4b30      	ldr	r3, [pc, #192]	; (81684 <SystemCoreClockUpdate+0xf8>)
   815c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   815c6:	4931      	ldr	r1, [pc, #196]	; (8168c <SystemCoreClockUpdate+0x100>)
   815c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   815cc:	680b      	ldr	r3, [r1, #0]
   815ce:	40d3      	lsrs	r3, r2
   815d0:	600b      	str	r3, [r1, #0]
   815d2:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   815d4:	4b2b      	ldr	r3, [pc, #172]	; (81684 <SystemCoreClockUpdate+0xf8>)
   815d6:	6a1b      	ldr	r3, [r3, #32]
   815d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   815dc:	d003      	beq.n	815e6 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   815de:	4a2c      	ldr	r2, [pc, #176]	; (81690 <SystemCoreClockUpdate+0x104>)
   815e0:	4b2a      	ldr	r3, [pc, #168]	; (8168c <SystemCoreClockUpdate+0x100>)
   815e2:	601a      	str	r2, [r3, #0]
   815e4:	e7e7      	b.n	815b6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   815e6:	4a2b      	ldr	r2, [pc, #172]	; (81694 <SystemCoreClockUpdate+0x108>)
   815e8:	4b28      	ldr	r3, [pc, #160]	; (8168c <SystemCoreClockUpdate+0x100>)
   815ea:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   815ec:	4b25      	ldr	r3, [pc, #148]	; (81684 <SystemCoreClockUpdate+0xf8>)
   815ee:	6a1b      	ldr	r3, [r3, #32]
   815f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   815f4:	2b10      	cmp	r3, #16
   815f6:	d005      	beq.n	81604 <SystemCoreClockUpdate+0x78>
   815f8:	2b20      	cmp	r3, #32
   815fa:	d1dc      	bne.n	815b6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   815fc:	4a24      	ldr	r2, [pc, #144]	; (81690 <SystemCoreClockUpdate+0x104>)
   815fe:	4b23      	ldr	r3, [pc, #140]	; (8168c <SystemCoreClockUpdate+0x100>)
   81600:	601a      	str	r2, [r3, #0]
				break;
   81602:	e7d8      	b.n	815b6 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81604:	4a24      	ldr	r2, [pc, #144]	; (81698 <SystemCoreClockUpdate+0x10c>)
   81606:	4b21      	ldr	r3, [pc, #132]	; (8168c <SystemCoreClockUpdate+0x100>)
   81608:	601a      	str	r2, [r3, #0]
				break;
   8160a:	e7d4      	b.n	815b6 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8160c:	4b1d      	ldr	r3, [pc, #116]	; (81684 <SystemCoreClockUpdate+0xf8>)
   8160e:	6a1b      	ldr	r3, [r3, #32]
   81610:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81614:	d00c      	beq.n	81630 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81616:	4a1e      	ldr	r2, [pc, #120]	; (81690 <SystemCoreClockUpdate+0x104>)
   81618:	4b1c      	ldr	r3, [pc, #112]	; (8168c <SystemCoreClockUpdate+0x100>)
   8161a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8161c:	4b19      	ldr	r3, [pc, #100]	; (81684 <SystemCoreClockUpdate+0xf8>)
   8161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81620:	f003 0303 	and.w	r3, r3, #3
   81624:	2b02      	cmp	r3, #2
   81626:	d016      	beq.n	81656 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81628:	4a1c      	ldr	r2, [pc, #112]	; (8169c <SystemCoreClockUpdate+0x110>)
   8162a:	4b18      	ldr	r3, [pc, #96]	; (8168c <SystemCoreClockUpdate+0x100>)
   8162c:	601a      	str	r2, [r3, #0]
   8162e:	e7c2      	b.n	815b6 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81630:	4a18      	ldr	r2, [pc, #96]	; (81694 <SystemCoreClockUpdate+0x108>)
   81632:	4b16      	ldr	r3, [pc, #88]	; (8168c <SystemCoreClockUpdate+0x100>)
   81634:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81636:	4b13      	ldr	r3, [pc, #76]	; (81684 <SystemCoreClockUpdate+0xf8>)
   81638:	6a1b      	ldr	r3, [r3, #32]
   8163a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8163e:	2b10      	cmp	r3, #16
   81640:	d005      	beq.n	8164e <SystemCoreClockUpdate+0xc2>
   81642:	2b20      	cmp	r3, #32
   81644:	d1ea      	bne.n	8161c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   81646:	4a12      	ldr	r2, [pc, #72]	; (81690 <SystemCoreClockUpdate+0x104>)
   81648:	4b10      	ldr	r3, [pc, #64]	; (8168c <SystemCoreClockUpdate+0x100>)
   8164a:	601a      	str	r2, [r3, #0]
				break;
   8164c:	e7e6      	b.n	8161c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8164e:	4a12      	ldr	r2, [pc, #72]	; (81698 <SystemCoreClockUpdate+0x10c>)
   81650:	4b0e      	ldr	r3, [pc, #56]	; (8168c <SystemCoreClockUpdate+0x100>)
   81652:	601a      	str	r2, [r3, #0]
				break;
   81654:	e7e2      	b.n	8161c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81656:	4a0b      	ldr	r2, [pc, #44]	; (81684 <SystemCoreClockUpdate+0xf8>)
   81658:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8165a:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8165c:	480b      	ldr	r0, [pc, #44]	; (8168c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8165e:	f3c1 410a 	ubfx	r1, r1, #16, #11
   81662:	6803      	ldr	r3, [r0, #0]
   81664:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81668:	b2d2      	uxtb	r2, r2
   8166a:	fbb3 f3f2 	udiv	r3, r3, r2
   8166e:	6003      	str	r3, [r0, #0]
   81670:	e7a1      	b.n	815b6 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81672:	4a06      	ldr	r2, [pc, #24]	; (8168c <SystemCoreClockUpdate+0x100>)
   81674:	6813      	ldr	r3, [r2, #0]
   81676:	490a      	ldr	r1, [pc, #40]	; (816a0 <SystemCoreClockUpdate+0x114>)
   81678:	fba1 1303 	umull	r1, r3, r1, r3
   8167c:	085b      	lsrs	r3, r3, #1
   8167e:	6013      	str	r3, [r2, #0]
   81680:	4770      	bx	lr
   81682:	bf00      	nop
   81684:	400e0600 	.word	0x400e0600
   81688:	400e1a10 	.word	0x400e1a10
   8168c:	200704bc 	.word	0x200704bc
   81690:	00b71b00 	.word	0x00b71b00
   81694:	003d0900 	.word	0x003d0900
   81698:	007a1200 	.word	0x007a1200
   8169c:	0e4e1c00 	.word	0x0e4e1c00
   816a0:	aaaaaaab 	.word	0xaaaaaaab

000816a4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   816a4:	4b0a      	ldr	r3, [pc, #40]	; (816d0 <_sbrk+0x2c>)
   816a6:	681b      	ldr	r3, [r3, #0]
   816a8:	b153      	cbz	r3, 816c0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   816aa:	4b09      	ldr	r3, [pc, #36]	; (816d0 <_sbrk+0x2c>)
   816ac:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   816ae:	181a      	adds	r2, r3, r0
   816b0:	4908      	ldr	r1, [pc, #32]	; (816d4 <_sbrk+0x30>)
   816b2:	4291      	cmp	r1, r2
   816b4:	db08      	blt.n	816c8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   816b6:	4610      	mov	r0, r2
   816b8:	4a05      	ldr	r2, [pc, #20]	; (816d0 <_sbrk+0x2c>)
   816ba:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   816bc:	4618      	mov	r0, r3
   816be:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   816c0:	4a05      	ldr	r2, [pc, #20]	; (816d8 <_sbrk+0x34>)
   816c2:	4b03      	ldr	r3, [pc, #12]	; (816d0 <_sbrk+0x2c>)
   816c4:	601a      	str	r2, [r3, #0]
   816c6:	e7f0      	b.n	816aa <_sbrk+0x6>
		return (caddr_t) -1;	
   816c8:	f04f 30ff 	mov.w	r0, #4294967295
}
   816cc:	4770      	bx	lr
   816ce:	bf00      	nop
   816d0:	20071008 	.word	0x20071008
   816d4:	20087ffc 	.word	0x20087ffc
   816d8:	20073100 	.word	0x20073100

000816dc <GetDetectState>:

uint GetDetectState(void);
void Detector_Calib2Regular(void);

uint GetDetectState()
{
   816dc:	b508      	push	{r3, lr}
	uint32_t inputpin;
	uint RetVal;
	inputpin = pio_get_pin_value(PIO_PB26_IDX);
   816de:	203a      	movs	r0, #58	; 0x3a
   816e0:	4b04      	ldr	r3, [pc, #16]	; (816f4 <GetDetectState+0x18>)
   816e2:	4798      	blx	r3
	switch(inputpin)
   816e4:	b120      	cbz	r0, 816f0 <GetDetectState+0x14>
		break;
		case CALIBRATE_Detector:
		RetVal = CALIBRATE_Detector;
		break;
		default:
		RetVal = UNKNOWN_Detector;
   816e6:	2801      	cmp	r0, #1
   816e8:	bf0c      	ite	eq
   816ea:	2001      	moveq	r0, #1
   816ec:	2002      	movne	r0, #2
   816ee:	bd08      	pop	{r3, pc}
		RetVal = REGULAR_Detector;
   816f0:	2000      	movs	r0, #0
		break;
	}
	return RetVal;
}
   816f2:	bd08      	pop	{r3, pc}
   816f4:	0008118b 	.word	0x0008118b

000816f8 <Detector_Calib2Regular>:

void Detector_Calib2Regular()
{
   816f8:	b500      	push	{lr}
   816fa:	b085      	sub	sp, #20
	// stop ADC channel 1 
	// save Calibration in FLASH (NFC)	
	Byte b2[10];
	FilterState = 6;
   816fc:	2206      	movs	r2, #6
   816fe:	4b07      	ldr	r3, [pc, #28]	; (8171c <Detector_Calib2Regular+0x24>)
   81700:	601a      	str	r2, [r3, #0]
	memcpy(b2,&Threshold,sizeof(uint32_t));
   81702:	4b07      	ldr	r3, [pc, #28]	; (81720 <Detector_Calib2Regular+0x28>)
   81704:	681b      	ldr	r3, [r3, #0]
   81706:	a804      	add	r0, sp, #16
   81708:	f840 3d0c 	str.w	r3, [r0, #-12]!
	//memcpy(b2,&TTest,sizeof(uint32_t));
	WriteCalibToFlash(b2);
   8170c:	4b05      	ldr	r3, [pc, #20]	; (81724 <Detector_Calib2Regular+0x2c>)
   8170e:	4798      	blx	r3
	PrintLn("Write to flash\n");
   81710:	4805      	ldr	r0, [pc, #20]	; (81728 <Detector_Calib2Regular+0x30>)
   81712:	4b06      	ldr	r3, [pc, #24]	; (8172c <Detector_Calib2Regular+0x34>)
   81714:	4798      	blx	r3
//	adc_disable_interrupt(ADC,ADC_IER_EOC0);	
	
}
   81716:	b005      	add	sp, #20
   81718:	f85d fb04 	ldr.w	pc, [sp], #4
   8171c:	200704c0 	.word	0x200704c0
   81720:	200704c8 	.word	0x200704c8
   81724:	000805b9 	.word	0x000805b9
   81728:	000867fc 	.word	0x000867fc
   8172c:	00080631 	.word	0x00080631

00081730 <main>:
	// start ADC Channel 1 
	// Update Calibration according to potentiometer ADC ch1	
}*/

int main (void)
{
   81730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	char out_str[70] = {0};
	int i;	


	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   81734:	4b85      	ldr	r3, [pc, #532]	; (8194c <main+0x21c>)
   81736:	4798      	blx	r3
	//Allow UART to control PB2 and PB3
	pio_set_peripheral(PIOA, PIO_PERIPH_A, PINS_UART);
	//Enable UART1 Clock	
	sysclk_enable_peripheral_clock(ID_UART);
	#endif
	gpio_configure_group(PIOB, PIO_PB26, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 22
   81738:	4e85      	ldr	r6, [pc, #532]	; (81950 <main+0x220>)
   8173a:	4d86      	ldr	r5, [pc, #536]	; (81954 <main+0x224>)
   8173c:	4632      	mov	r2, r6
   8173e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   81742:	4628      	mov	r0, r5
   81744:	4c84      	ldr	r4, [pc, #528]	; (81958 <main+0x228>)
   81746:	47a0      	blx	r4
	gpio_configure_group(PIOD, PIO_PD1, PIO_OUTPUT_0); // arduino due pin # 26 OUTPUT red LED error
   81748:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   8174c:	2102      	movs	r1, #2
   8174e:	4883      	ldr	r0, [pc, #524]	; (8195c <main+0x22c>)
   81750:	47a0      	blx	r4
	gpio_configure_group(PIOB, PIO_PB21, PIO_OUTPUT_0); // arduino Blue LED
   81752:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   81756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8175a:	4628      	mov	r0, r5
   8175c:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA7, PIO_OUTPUT_0); // arduino RT meas
   8175e:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
   81762:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   81766:	2180      	movs	r1, #128	; 0x80
   81768:	4628      	mov	r0, r5
   8176a:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA15, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 24 BUTTON
   8176c:	4632      	mov	r2, r6
   8176e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81772:	4628      	mov	r0, r5
   81774:	47a0      	blx	r4
	// might conister to use pull down instead of debouncer
	board_init();
   81776:	4b7a      	ldr	r3, [pc, #488]	; (81960 <main+0x230>)
   81778:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);	
   8177a:	2056      	movs	r0, #86	; 0x56
   8177c:	4c79      	ldr	r4, [pc, #484]	; (81964 <main+0x234>)
   8177e:	47a0      	blx	r4
	pio_set_pin_low(PIO_PD1_IDX);
   81780:	2061      	movs	r0, #97	; 0x61
   81782:	47a0      	blx	r4
	pio_set_pin_low(PIO_PB21_IDX);
   81784:	2035      	movs	r0, #53	; 0x35
   81786:	47a0      	blx	r4
	pio_set_pin_low(PIO_PA7_IDX);
   81788:	2007      	movs	r0, #7
   8178a:	47a0      	blx	r4
	
	
	// Init FIFO's
	FIFO_Init(&Fifo);
   8178c:	4876      	ldr	r0, [pc, #472]	; (81968 <main+0x238>)
   8178e:	4b77      	ldr	r3, [pc, #476]	; (8196c <main+0x23c>)
   81790:	4798      	blx	r3
	FIFO2_Init(&Fifo2p1,FIFO2_LEN);
   81792:	4d77      	ldr	r5, [pc, #476]	; (81970 <main+0x240>)
   81794:	2103      	movs	r1, #3
   81796:	4628      	mov	r0, r5
   81798:	4c76      	ldr	r4, [pc, #472]	; (81974 <main+0x244>)
   8179a:	47a0      	blx	r4
	Fifo2LenAverage = 1.0f/((float)Fifo2p1.len);
   8179c:	68e8      	ldr	r0, [r5, #12]
   8179e:	4b76      	ldr	r3, [pc, #472]	; (81978 <main+0x248>)
   817a0:	4798      	blx	r3
   817a2:	4601      	mov	r1, r0
   817a4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   817a8:	4b74      	ldr	r3, [pc, #464]	; (8197c <main+0x24c>)
   817aa:	4798      	blx	r3
   817ac:	4b74      	ldr	r3, [pc, #464]	; (81980 <main+0x250>)
   817ae:	6018      	str	r0, [r3, #0]
	//FIFO2_Init(&Fifo2p2,5435);
	FIFO2_Init(&fifoDebug,3000);
   817b0:	f640 31b8 	movw	r1, #3000	; 0xbb8
   817b4:	4873      	ldr	r0, [pc, #460]	; (81984 <main+0x254>)
   817b6:	47a0      	blx	r4
		
	
	Timer_init();
   817b8:	4b73      	ldr	r3, [pc, #460]	; (81988 <main+0x258>)
   817ba:	4798      	blx	r3
	
	SPI_Init();
   817bc:	4b73      	ldr	r3, [pc, #460]	; (8198c <main+0x25c>)
   817be:	4798      	blx	r3
	FLASH_Init();
   817c0:	4b73      	ldr	r3, [pc, #460]	; (81990 <main+0x260>)
   817c2:	4798      	blx	r3
	#if DEBUG_UART
	uart_init(UART, &uart1Settings);
	//irq_register_handler(UART_IRQn, 0);
	#endif
	
	RF_InitTX();
   817c4:	4b73      	ldr	r3, [pc, #460]	; (81994 <main+0x264>)
   817c6:	4798      	blx	r3
   817c8:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   817ca:	3b01      	subs	r3, #1
   817cc:	d1fd      	bne.n	817ca <main+0x9a>
		__NOP;
	RF_SendBell(RF24_TEST);
   817ce:	2000      	movs	r0, #0
   817d0:	4b71      	ldr	r3, [pc, #452]	; (81998 <main+0x268>)
   817d2:	4798      	blx	r3
	pio_set_pin_high(LED2_GPIO);
   817d4:	2056      	movs	r0, #86	; 0x56
   817d6:	4c71      	ldr	r4, [pc, #452]	; (8199c <main+0x26c>)
   817d8:	47a0      	blx	r4
	pio_set_pin_high(PIO_PD1_IDX);
   817da:	2061      	movs	r0, #97	; 0x61
   817dc:	47a0      	blx	r4
	pio_set_pin_high(PIO_PB21_IDX);
   817de:	2035      	movs	r0, #53	; 0x35
   817e0:	47a0      	blx	r4
	Timer_Sleep(1000);
   817e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   817e6:	4b6e      	ldr	r3, [pc, #440]	; (819a0 <main+0x270>)
   817e8:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);
   817ea:	2056      	movs	r0, #86	; 0x56
   817ec:	4c5d      	ldr	r4, [pc, #372]	; (81964 <main+0x234>)
   817ee:	47a0      	blx	r4
	pio_set_pin_low(PIO_PD1_IDX);
   817f0:	2061      	movs	r0, #97	; 0x61
   817f2:	47a0      	blx	r4
	pio_set_pin_low(PIO_PB21_IDX);
   817f4:	2035      	movs	r0, #53	; 0x35
   817f6:	47a0      	blx	r4
	
	//Timer_Sleep(10000);
	DetectorState = GetDetectState();
   817f8:	4b6a      	ldr	r3, [pc, #424]	; (819a4 <main+0x274>)
   817fa:	4798      	blx	r3
   817fc:	b2c0      	uxtb	r0, r0
   817fe:	4b6a      	ldr	r3, [pc, #424]	; (819a8 <main+0x278>)
   81800:	7018      	strb	r0, [r3, #0]
	PrevDetectorState = DetectorState;
   81802:	4b6a      	ldr	r3, [pc, #424]	; (819ac <main+0x27c>)
   81804:	7018      	strb	r0, [r3, #0]

	if(DetectorState == REGULAR_Detector)
   81806:	b138      	cbz	r0, 81818 <main+0xe8>
		Byte *p;
		p = ReadCalibFromFlash();
		memcpy(&Threshold,p,sizeof(uint32_t));
	}
		
	ADCC_Init();
   81808:	4b69      	ldr	r3, [pc, #420]	; (819b0 <main+0x280>)
   8180a:	4798      	blx	r3
	DAC3X8E_Init();
   8180c:	4b69      	ldr	r3, [pc, #420]	; (819b4 <main+0x284>)
   8180e:	4798      	blx	r3
	
	/*
	Insert application code here, after the board has been initialized. */
	while(1)
	{	
		Calibration = ADC->ADC_CDR[1];		
   81810:	4f69      	ldr	r7, [pc, #420]	; (819b8 <main+0x288>)
		DetectorState = GetDetectState();
   81812:	4d65      	ldr	r5, [pc, #404]	; (819a8 <main+0x278>)
			FIFO_Init(&Fifo);
			FIFO2_Reset(&Fifo2p1);
			FilterState = 6;
			delay = 0;
			//FIFO2_Reset(&Fifo2p2);
			Timer_Sleep(20);
   81814:	4e62      	ldr	r6, [pc, #392]	; (819a0 <main+0x270>)
   81816:	e047      	b.n	818a8 <main+0x178>
		p = ReadCalibFromFlash();
   81818:	4b68      	ldr	r3, [pc, #416]	; (819bc <main+0x28c>)
   8181a:	4798      	blx	r3
		memcpy(&Threshold,p,sizeof(uint32_t));
   8181c:	6802      	ldr	r2, [r0, #0]
   8181e:	4b68      	ldr	r3, [pc, #416]	; (819c0 <main+0x290>)
   81820:	601a      	str	r2, [r3, #0]
   81822:	e7f1      	b.n	81808 <main+0xd8>
				Detector_Calib2Regular();
   81824:	4b67      	ldr	r3, [pc, #412]	; (819c4 <main+0x294>)
   81826:	4798      	blx	r3
			PrevDetectorState = DetectorState;
   81828:	782a      	ldrb	r2, [r5, #0]
   8182a:	4b60      	ldr	r3, [pc, #384]	; (819ac <main+0x27c>)
   8182c:	701a      	strb	r2, [r3, #0]
		switch(DetectorState)
   8182e:	782b      	ldrb	r3, [r5, #0]
   81830:	b14b      	cbz	r3, 81846 <main+0x116>
   81832:	2b01      	cmp	r3, #1
   81834:	d10d      	bne.n	81852 <main+0x122>
			pio_set_pin_low(PIO_PD1_IDX);
   81836:	2061      	movs	r0, #97	; 0x61
   81838:	4b4a      	ldr	r3, [pc, #296]	; (81964 <main+0x234>)
   8183a:	4798      	blx	r3
			MaxAllowedFirstVal = UINT32_MAX;
   8183c:	f04f 32ff 	mov.w	r2, #4294967295
   81840:	4b61      	ldr	r3, [pc, #388]	; (819c8 <main+0x298>)
   81842:	601a      	str	r2, [r3, #0]
			break;
   81844:	e005      	b.n	81852 <main+0x122>
			MaxAllowedFirstVal = Threshold + (4<<17);//(29<<17)/10;
   81846:	4b5e      	ldr	r3, [pc, #376]	; (819c0 <main+0x290>)
   81848:	681b      	ldr	r3, [r3, #0]
   8184a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   8184e:	4a5e      	ldr	r2, [pc, #376]	; (819c8 <main+0x298>)
   81850:	6013      	str	r3, [r2, #0]
		if(FilterState == 5)
   81852:	4b5e      	ldr	r3, [pc, #376]	; (819cc <main+0x29c>)
   81854:	681b      	ldr	r3, [r3, #0]
   81856:	2b05      	cmp	r3, #5
			pio_set_pin_high(PIO_PD1_IDX);
   81858:	f04f 0061 	mov.w	r0, #97	; 0x61
   8185c:	bf0c      	ite	eq
   8185e:	4b4f      	ldreq	r3, [pc, #316]	; (8199c <main+0x26c>)
			pio_set_pin_low(PIO_PD1_IDX);
   81860:	4b40      	ldrne	r3, [pc, #256]	; (81964 <main+0x234>)
   81862:	4798      	blx	r3
		if(Det_flag)
   81864:	4b5a      	ldr	r3, [pc, #360]	; (819d0 <main+0x2a0>)
   81866:	681b      	ldr	r3, [r3, #0]
   81868:	b1cb      	cbz	r3, 8189e <main+0x16e>
			Det_flag = 0;				
   8186a:	2200      	movs	r2, #0
   8186c:	4b58      	ldr	r3, [pc, #352]	; (819d0 <main+0x2a0>)
   8186e:	601a      	str	r2, [r3, #0]
			switch (DetectorState)
   81870:	782b      	ldrb	r3, [r5, #0]
   81872:	2b00      	cmp	r3, #0
   81874:	d030      	beq.n	818d8 <main+0x1a8>
   81876:	2b01      	cmp	r3, #1
   81878:	d043      	beq.n	81902 <main+0x1d2>
			FIFO_Init(&Fifo);
   8187a:	483b      	ldr	r0, [pc, #236]	; (81968 <main+0x238>)
   8187c:	4b3b      	ldr	r3, [pc, #236]	; (8196c <main+0x23c>)
   8187e:	4798      	blx	r3
			FIFO2_Reset(&Fifo2p1);
   81880:	483b      	ldr	r0, [pc, #236]	; (81970 <main+0x240>)
   81882:	4b54      	ldr	r3, [pc, #336]	; (819d4 <main+0x2a4>)
   81884:	4798      	blx	r3
			FilterState = 6;
   81886:	2206      	movs	r2, #6
   81888:	4b50      	ldr	r3, [pc, #320]	; (819cc <main+0x29c>)
   8188a:	601a      	str	r2, [r3, #0]
			delay = 0;
   8188c:	2200      	movs	r2, #0
   8188e:	4b52      	ldr	r3, [pc, #328]	; (819d8 <main+0x2a8>)
   81890:	601a      	str	r2, [r3, #0]
			Timer_Sleep(20);
   81892:	2014      	movs	r0, #20
   81894:	47b0      	blx	r6
			adc_enable_interrupt(ADC,ADC_IER_EOC0);
   81896:	2101      	movs	r1, #1
   81898:	4638      	mov	r0, r7
   8189a:	4b50      	ldr	r3, [pc, #320]	; (819dc <main+0x2ac>)
   8189c:	4798      	blx	r3
		}
		if(DetectorState == CALIBRATE_Detector){
   8189e:	782b      	ldrb	r3, [r5, #0]
   818a0:	2b01      	cmp	r3, #1
   818a2:	d04a      	beq.n	8193a <main+0x20a>
		#if DEBUG_UART
		Timer_Sleep(10);
		sprintf(out_str,"%lu\n", FilterState);
		PrintLn(out_str);		
		#endif
		Timer_Sleep(100);
   818a4:	2064      	movs	r0, #100	; 0x64
   818a6:	47b0      	blx	r6
		Calibration = ADC->ADC_CDR[1];		
   818a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   818aa:	4b4d      	ldr	r3, [pc, #308]	; (819e0 <main+0x2b0>)
   818ac:	601a      	str	r2, [r3, #0]
		DetectorState = GetDetectState();
   818ae:	4b3d      	ldr	r3, [pc, #244]	; (819a4 <main+0x274>)
   818b0:	4798      	blx	r3
   818b2:	b2c0      	uxtb	r0, r0
   818b4:	7028      	strb	r0, [r5, #0]
		if((DetectorState != UNKNOWN_Detector) &&(DetectorState != PrevDetectorState)) // State changed
   818b6:	2802      	cmp	r0, #2
   818b8:	d0cb      	beq.n	81852 <main+0x122>
   818ba:	4b3c      	ldr	r3, [pc, #240]	; (819ac <main+0x27c>)
   818bc:	781b      	ldrb	r3, [r3, #0]
   818be:	4283      	cmp	r3, r0
   818c0:	d0b5      	beq.n	8182e <main+0xfe>
			PrintLn("State change\n");
   818c2:	4848      	ldr	r0, [pc, #288]	; (819e4 <main+0x2b4>)
   818c4:	4b48      	ldr	r3, [pc, #288]	; (819e8 <main+0x2b8>)
   818c6:	4798      	blx	r3
			switch(DetectorState)
   818c8:	782b      	ldrb	r3, [r5, #0]
   818ca:	2b00      	cmp	r3, #0
   818cc:	d0aa      	beq.n	81824 <main+0xf4>
   818ce:	2b01      	cmp	r3, #1
   818d0:	d0aa      	beq.n	81828 <main+0xf8>
				Detector_Calib2Regular();
   818d2:	4b3c      	ldr	r3, [pc, #240]	; (819c4 <main+0x294>)
   818d4:	4798      	blx	r3
   818d6:	e7a7      	b.n	81828 <main+0xf8>
			switch (DetectorState)
   818d8:	240a      	movs	r4, #10
					Timer_Sleep(20);				
   818da:	f04f 0914 	mov.w	r9, #20
					RF_SendBell(RF24_BELLDOOR);
   818de:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 81998 <main+0x268>
					Timer_Sleep(20);				
   818e2:	4648      	mov	r0, r9
   818e4:	47b0      	blx	r6
					RF_SendBell(RF24_BELLDOOR);
   818e6:	2001      	movs	r0, #1
   818e8:	47c0      	blx	r8
				for(i=0;i<10;i++)
   818ea:	3c01      	subs	r4, #1
   818ec:	d1f9      	bne.n	818e2 <main+0x1b2>
				pio_set_pin_high(LED2_GPIO);
   818ee:	2056      	movs	r0, #86	; 0x56
   818f0:	4b2a      	ldr	r3, [pc, #168]	; (8199c <main+0x26c>)
   818f2:	4798      	blx	r3
				Timer_Sleep(500);
   818f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   818f8:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   818fa:	2056      	movs	r0, #86	; 0x56
   818fc:	4b19      	ldr	r3, [pc, #100]	; (81964 <main+0x234>)
   818fe:	4798      	blx	r3
				break;
   81900:	e7bb      	b.n	8187a <main+0x14a>
				pio_set_pin_high(LED2_GPIO);
   81902:	2056      	movs	r0, #86	; 0x56
   81904:	4b25      	ldr	r3, [pc, #148]	; (8199c <main+0x26c>)
   81906:	4798      	blx	r3
				if((FirstDetVal>(Threshold+(1<<17))) && (FirstDetVal<(Threshold+(3<<17))))
   81908:	4b2d      	ldr	r3, [pc, #180]	; (819c0 <main+0x290>)
   8190a:	681b      	ldr	r3, [r3, #0]
   8190c:	4a37      	ldr	r2, [pc, #220]	; (819ec <main+0x2bc>)
   8190e:	6812      	ldr	r2, [r2, #0]
   81910:	f503 3100 	add.w	r1, r3, #131072	; 0x20000
   81914:	4291      	cmp	r1, r2
   81916:	d203      	bcs.n	81920 <main+0x1f0>
   81918:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
   8191c:	429a      	cmp	r2, r3
   8191e:	d308      	bcc.n	81932 <main+0x202>
				Timer_Sleep(3000);				
   81920:	f640 30b8 	movw	r0, #3000	; 0xbb8
   81924:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   81926:	2056      	movs	r0, #86	; 0x56
   81928:	4c0e      	ldr	r4, [pc, #56]	; (81964 <main+0x234>)
   8192a:	47a0      	blx	r4
				pio_set_pin_low(PIO_PB21_IDX);
   8192c:	2035      	movs	r0, #53	; 0x35
   8192e:	47a0      	blx	r4
				break;
   81930:	e7a3      	b.n	8187a <main+0x14a>
					pio_set_pin_high(PIO_PB21_IDX);
   81932:	2035      	movs	r0, #53	; 0x35
   81934:	4b19      	ldr	r3, [pc, #100]	; (8199c <main+0x26c>)
   81936:	4798      	blx	r3
   81938:	e7f2      	b.n	81920 <main+0x1f0>
			Threshold = Calibration*(1<<5)*MAX_CALIBRATION;
   8193a:	4b29      	ldr	r3, [pc, #164]	; (819e0 <main+0x2b0>)
   8193c:	681b      	ldr	r3, [r3, #0]
   8193e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   81942:	019b      	lsls	r3, r3, #6
   81944:	4a1e      	ldr	r2, [pc, #120]	; (819c0 <main+0x290>)
   81946:	6013      	str	r3, [r2, #0]
   81948:	e7ac      	b.n	818a4 <main+0x174>
   8194a:	bf00      	nop
   8194c:	00081009 	.word	0x00081009
   81950:	28000008 	.word	0x28000008
   81954:	400e1000 	.word	0x400e1000
   81958:	000812ad 	.word	0x000812ad
   8195c:	400e1400 	.word	0x400e1400
   81960:	0008106d 	.word	0x0008106d
   81964:	000811c1 	.word	0x000811c1
   81968:	20071088 	.word	0x20071088
   8196c:	00080289 	.word	0x00080289
   81970:	20071048 	.word	0x20071048
   81974:	000802b5 	.word	0x000802b5
   81978:	00081b65 	.word	0x00081b65
   8197c:	00081d75 	.word	0x00081d75
   81980:	20071070 	.word	0x20071070
   81984:	200710c4 	.word	0x200710c4
   81988:	00080f5d 	.word	0x00080f5d
   8198c:	00080cfd 	.word	0x00080cfd
   81990:	000803bd 	.word	0x000803bd
   81994:	00080915 	.word	0x00080915
   81998:	000809c5 	.word	0x000809c5
   8199c:	000811a7 	.word	0x000811a7
   819a0:	00080fd5 	.word	0x00080fd5
   819a4:	000816dd 	.word	0x000816dd
   819a8:	20071078 	.word	0x20071078
   819ac:	20071058 	.word	0x20071058
   819b0:	00080be9 	.word	0x00080be9
   819b4:	0008030d 	.word	0x0008030d
   819b8:	400c0000 	.word	0x400c0000
   819bc:	000803d5 	.word	0x000803d5
   819c0:	200704c8 	.word	0x200704c8
   819c4:	000816f9 	.word	0x000816f9
   819c8:	200704c4 	.word	0x200704c4
   819cc:	200704c0 	.word	0x200704c0
   819d0:	2007100c 	.word	0x2007100c
   819d4:	000802e9 	.word	0x000802e9
   819d8:	20071080 	.word	0x20071080
   819dc:	000801e7 	.word	0x000801e7
   819e0:	2007106c 	.word	0x2007106c
   819e4:	0008680c 	.word	0x0008680c
   819e8:	00080631 	.word	0x00080631
   819ec:	2007107c 	.word	0x2007107c

000819f0 <__aeabi_frsub>:
   819f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   819f4:	e002      	b.n	819fc <__addsf3>
   819f6:	bf00      	nop

000819f8 <__aeabi_fsub>:
   819f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000819fc <__addsf3>:
   819fc:	0042      	lsls	r2, r0, #1
   819fe:	bf1f      	itttt	ne
   81a00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81a04:	ea92 0f03 	teqne	r2, r3
   81a08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81a0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81a10:	d06a      	beq.n	81ae8 <__addsf3+0xec>
   81a12:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81a16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81a1a:	bfc1      	itttt	gt
   81a1c:	18d2      	addgt	r2, r2, r3
   81a1e:	4041      	eorgt	r1, r0
   81a20:	4048      	eorgt	r0, r1
   81a22:	4041      	eorgt	r1, r0
   81a24:	bfb8      	it	lt
   81a26:	425b      	neglt	r3, r3
   81a28:	2b19      	cmp	r3, #25
   81a2a:	bf88      	it	hi
   81a2c:	4770      	bxhi	lr
   81a2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81a32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81a3a:	bf18      	it	ne
   81a3c:	4240      	negne	r0, r0
   81a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81a42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81a46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   81a4a:	bf18      	it	ne
   81a4c:	4249      	negne	r1, r1
   81a4e:	ea92 0f03 	teq	r2, r3
   81a52:	d03f      	beq.n	81ad4 <__addsf3+0xd8>
   81a54:	f1a2 0201 	sub.w	r2, r2, #1
   81a58:	fa41 fc03 	asr.w	ip, r1, r3
   81a5c:	eb10 000c 	adds.w	r0, r0, ip
   81a60:	f1c3 0320 	rsb	r3, r3, #32
   81a64:	fa01 f103 	lsl.w	r1, r1, r3
   81a68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81a6c:	d502      	bpl.n	81a74 <__addsf3+0x78>
   81a6e:	4249      	negs	r1, r1
   81a70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81a74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81a78:	d313      	bcc.n	81aa2 <__addsf3+0xa6>
   81a7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   81a7e:	d306      	bcc.n	81a8e <__addsf3+0x92>
   81a80:	0840      	lsrs	r0, r0, #1
   81a82:	ea4f 0131 	mov.w	r1, r1, rrx
   81a86:	f102 0201 	add.w	r2, r2, #1
   81a8a:	2afe      	cmp	r2, #254	; 0xfe
   81a8c:	d251      	bcs.n	81b32 <__addsf3+0x136>
   81a8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   81a92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81a96:	bf08      	it	eq
   81a98:	f020 0001 	biceq.w	r0, r0, #1
   81a9c:	ea40 0003 	orr.w	r0, r0, r3
   81aa0:	4770      	bx	lr
   81aa2:	0049      	lsls	r1, r1, #1
   81aa4:	eb40 0000 	adc.w	r0, r0, r0
   81aa8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81aac:	f1a2 0201 	sub.w	r2, r2, #1
   81ab0:	d1ed      	bne.n	81a8e <__addsf3+0x92>
   81ab2:	fab0 fc80 	clz	ip, r0
   81ab6:	f1ac 0c08 	sub.w	ip, ip, #8
   81aba:	ebb2 020c 	subs.w	r2, r2, ip
   81abe:	fa00 f00c 	lsl.w	r0, r0, ip
   81ac2:	bfaa      	itet	ge
   81ac4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81ac8:	4252      	neglt	r2, r2
   81aca:	4318      	orrge	r0, r3
   81acc:	bfbc      	itt	lt
   81ace:	40d0      	lsrlt	r0, r2
   81ad0:	4318      	orrlt	r0, r3
   81ad2:	4770      	bx	lr
   81ad4:	f092 0f00 	teq	r2, #0
   81ad8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81adc:	bf06      	itte	eq
   81ade:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81ae2:	3201      	addeq	r2, #1
   81ae4:	3b01      	subne	r3, #1
   81ae6:	e7b5      	b.n	81a54 <__addsf3+0x58>
   81ae8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81aec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81af0:	bf18      	it	ne
   81af2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81af6:	d021      	beq.n	81b3c <__addsf3+0x140>
   81af8:	ea92 0f03 	teq	r2, r3
   81afc:	d004      	beq.n	81b08 <__addsf3+0x10c>
   81afe:	f092 0f00 	teq	r2, #0
   81b02:	bf08      	it	eq
   81b04:	4608      	moveq	r0, r1
   81b06:	4770      	bx	lr
   81b08:	ea90 0f01 	teq	r0, r1
   81b0c:	bf1c      	itt	ne
   81b0e:	2000      	movne	r0, #0
   81b10:	4770      	bxne	lr
   81b12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81b16:	d104      	bne.n	81b22 <__addsf3+0x126>
   81b18:	0040      	lsls	r0, r0, #1
   81b1a:	bf28      	it	cs
   81b1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81b20:	4770      	bx	lr
   81b22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81b26:	bf3c      	itt	cc
   81b28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81b2c:	4770      	bxcc	lr
   81b2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81b32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81b3a:	4770      	bx	lr
   81b3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81b40:	bf16      	itet	ne
   81b42:	4608      	movne	r0, r1
   81b44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81b48:	4601      	movne	r1, r0
   81b4a:	0242      	lsls	r2, r0, #9
   81b4c:	bf06      	itte	eq
   81b4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   81b52:	ea90 0f01 	teqeq	r0, r1
   81b56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81b5a:	4770      	bx	lr

00081b5c <__aeabi_ui2f>:
   81b5c:	f04f 0300 	mov.w	r3, #0
   81b60:	e004      	b.n	81b6c <__aeabi_i2f+0x8>
   81b62:	bf00      	nop

00081b64 <__aeabi_i2f>:
   81b64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81b68:	bf48      	it	mi
   81b6a:	4240      	negmi	r0, r0
   81b6c:	ea5f 0c00 	movs.w	ip, r0
   81b70:	bf08      	it	eq
   81b72:	4770      	bxeq	lr
   81b74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81b78:	4601      	mov	r1, r0
   81b7a:	f04f 0000 	mov.w	r0, #0
   81b7e:	e01c      	b.n	81bba <__aeabi_l2f+0x2a>

00081b80 <__aeabi_ul2f>:
   81b80:	ea50 0201 	orrs.w	r2, r0, r1
   81b84:	bf08      	it	eq
   81b86:	4770      	bxeq	lr
   81b88:	f04f 0300 	mov.w	r3, #0
   81b8c:	e00a      	b.n	81ba4 <__aeabi_l2f+0x14>
   81b8e:	bf00      	nop

00081b90 <__aeabi_l2f>:
   81b90:	ea50 0201 	orrs.w	r2, r0, r1
   81b94:	bf08      	it	eq
   81b96:	4770      	bxeq	lr
   81b98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81b9c:	d502      	bpl.n	81ba4 <__aeabi_l2f+0x14>
   81b9e:	4240      	negs	r0, r0
   81ba0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81ba4:	ea5f 0c01 	movs.w	ip, r1
   81ba8:	bf02      	ittt	eq
   81baa:	4684      	moveq	ip, r0
   81bac:	4601      	moveq	r1, r0
   81bae:	2000      	moveq	r0, #0
   81bb0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81bb4:	bf08      	it	eq
   81bb6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81bba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81bbe:	fabc f28c 	clz	r2, ip
   81bc2:	3a08      	subs	r2, #8
   81bc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81bc8:	db10      	blt.n	81bec <__aeabi_l2f+0x5c>
   81bca:	fa01 fc02 	lsl.w	ip, r1, r2
   81bce:	4463      	add	r3, ip
   81bd0:	fa00 fc02 	lsl.w	ip, r0, r2
   81bd4:	f1c2 0220 	rsb	r2, r2, #32
   81bd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81bdc:	fa20 f202 	lsr.w	r2, r0, r2
   81be0:	eb43 0002 	adc.w	r0, r3, r2
   81be4:	bf08      	it	eq
   81be6:	f020 0001 	biceq.w	r0, r0, #1
   81bea:	4770      	bx	lr
   81bec:	f102 0220 	add.w	r2, r2, #32
   81bf0:	fa01 fc02 	lsl.w	ip, r1, r2
   81bf4:	f1c2 0220 	rsb	r2, r2, #32
   81bf8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81bfc:	fa21 f202 	lsr.w	r2, r1, r2
   81c00:	eb43 0002 	adc.w	r0, r3, r2
   81c04:	bf08      	it	eq
   81c06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81c0a:	4770      	bx	lr

00081c0c <__aeabi_fmul>:
   81c0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81c10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81c14:	bf1e      	ittt	ne
   81c16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81c1a:	ea92 0f0c 	teqne	r2, ip
   81c1e:	ea93 0f0c 	teqne	r3, ip
   81c22:	d06f      	beq.n	81d04 <__aeabi_fmul+0xf8>
   81c24:	441a      	add	r2, r3
   81c26:	ea80 0c01 	eor.w	ip, r0, r1
   81c2a:	0240      	lsls	r0, r0, #9
   81c2c:	bf18      	it	ne
   81c2e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   81c32:	d01e      	beq.n	81c72 <__aeabi_fmul+0x66>
   81c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81c38:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81c3c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81c40:	fba0 3101 	umull	r3, r1, r0, r1
   81c44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81c48:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81c4c:	bf3e      	ittt	cc
   81c4e:	0049      	lslcc	r1, r1, #1
   81c50:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81c54:	005b      	lslcc	r3, r3, #1
   81c56:	ea40 0001 	orr.w	r0, r0, r1
   81c5a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81c5e:	2afd      	cmp	r2, #253	; 0xfd
   81c60:	d81d      	bhi.n	81c9e <__aeabi_fmul+0x92>
   81c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81c6a:	bf08      	it	eq
   81c6c:	f020 0001 	biceq.w	r0, r0, #1
   81c70:	4770      	bx	lr
   81c72:	f090 0f00 	teq	r0, #0
   81c76:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81c7a:	bf08      	it	eq
   81c7c:	0249      	lsleq	r1, r1, #9
   81c7e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81c82:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81c86:	3a7f      	subs	r2, #127	; 0x7f
   81c88:	bfc2      	ittt	gt
   81c8a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81c8e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81c92:	4770      	bxgt	lr
   81c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81c98:	f04f 0300 	mov.w	r3, #0
   81c9c:	3a01      	subs	r2, #1
   81c9e:	dc5d      	bgt.n	81d5c <__aeabi_fmul+0x150>
   81ca0:	f112 0f19 	cmn.w	r2, #25
   81ca4:	bfdc      	itt	le
   81ca6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81caa:	4770      	bxle	lr
   81cac:	f1c2 0200 	rsb	r2, r2, #0
   81cb0:	0041      	lsls	r1, r0, #1
   81cb2:	fa21 f102 	lsr.w	r1, r1, r2
   81cb6:	f1c2 0220 	rsb	r2, r2, #32
   81cba:	fa00 fc02 	lsl.w	ip, r0, r2
   81cbe:	ea5f 0031 	movs.w	r0, r1, rrx
   81cc2:	f140 0000 	adc.w	r0, r0, #0
   81cc6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81cca:	bf08      	it	eq
   81ccc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81cd0:	4770      	bx	lr
   81cd2:	f092 0f00 	teq	r2, #0
   81cd6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81cda:	bf02      	ittt	eq
   81cdc:	0040      	lsleq	r0, r0, #1
   81cde:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81ce2:	3a01      	subeq	r2, #1
   81ce4:	d0f9      	beq.n	81cda <__aeabi_fmul+0xce>
   81ce6:	ea40 000c 	orr.w	r0, r0, ip
   81cea:	f093 0f00 	teq	r3, #0
   81cee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81cf2:	bf02      	ittt	eq
   81cf4:	0049      	lsleq	r1, r1, #1
   81cf6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81cfa:	3b01      	subeq	r3, #1
   81cfc:	d0f9      	beq.n	81cf2 <__aeabi_fmul+0xe6>
   81cfe:	ea41 010c 	orr.w	r1, r1, ip
   81d02:	e78f      	b.n	81c24 <__aeabi_fmul+0x18>
   81d04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81d08:	ea92 0f0c 	teq	r2, ip
   81d0c:	bf18      	it	ne
   81d0e:	ea93 0f0c 	teqne	r3, ip
   81d12:	d00a      	beq.n	81d2a <__aeabi_fmul+0x11e>
   81d14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81d18:	bf18      	it	ne
   81d1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81d1e:	d1d8      	bne.n	81cd2 <__aeabi_fmul+0xc6>
   81d20:	ea80 0001 	eor.w	r0, r0, r1
   81d24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81d28:	4770      	bx	lr
   81d2a:	f090 0f00 	teq	r0, #0
   81d2e:	bf17      	itett	ne
   81d30:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81d34:	4608      	moveq	r0, r1
   81d36:	f091 0f00 	teqne	r1, #0
   81d3a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81d3e:	d014      	beq.n	81d6a <__aeabi_fmul+0x15e>
   81d40:	ea92 0f0c 	teq	r2, ip
   81d44:	d101      	bne.n	81d4a <__aeabi_fmul+0x13e>
   81d46:	0242      	lsls	r2, r0, #9
   81d48:	d10f      	bne.n	81d6a <__aeabi_fmul+0x15e>
   81d4a:	ea93 0f0c 	teq	r3, ip
   81d4e:	d103      	bne.n	81d58 <__aeabi_fmul+0x14c>
   81d50:	024b      	lsls	r3, r1, #9
   81d52:	bf18      	it	ne
   81d54:	4608      	movne	r0, r1
   81d56:	d108      	bne.n	81d6a <__aeabi_fmul+0x15e>
   81d58:	ea80 0001 	eor.w	r0, r0, r1
   81d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81d60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81d64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81d68:	4770      	bx	lr
   81d6a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81d6e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81d72:	4770      	bx	lr

00081d74 <__aeabi_fdiv>:
   81d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81d7c:	bf1e      	ittt	ne
   81d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81d82:	ea92 0f0c 	teqne	r2, ip
   81d86:	ea93 0f0c 	teqne	r3, ip
   81d8a:	d069      	beq.n	81e60 <__aeabi_fdiv+0xec>
   81d8c:	eba2 0203 	sub.w	r2, r2, r3
   81d90:	ea80 0c01 	eor.w	ip, r0, r1
   81d94:	0249      	lsls	r1, r1, #9
   81d96:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81d9a:	d037      	beq.n	81e0c <__aeabi_fdiv+0x98>
   81d9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81da0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81da4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81da8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81dac:	428b      	cmp	r3, r1
   81dae:	bf38      	it	cc
   81db0:	005b      	lslcc	r3, r3, #1
   81db2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81db6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81dba:	428b      	cmp	r3, r1
   81dbc:	bf24      	itt	cs
   81dbe:	1a5b      	subcs	r3, r3, r1
   81dc0:	ea40 000c 	orrcs.w	r0, r0, ip
   81dc4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81dc8:	bf24      	itt	cs
   81dca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81dce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81dd2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81dd6:	bf24      	itt	cs
   81dd8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81ddc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81de0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81de4:	bf24      	itt	cs
   81de6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81dea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81dee:	011b      	lsls	r3, r3, #4
   81df0:	bf18      	it	ne
   81df2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81df6:	d1e0      	bne.n	81dba <__aeabi_fdiv+0x46>
   81df8:	2afd      	cmp	r2, #253	; 0xfd
   81dfa:	f63f af50 	bhi.w	81c9e <__aeabi_fmul+0x92>
   81dfe:	428b      	cmp	r3, r1
   81e00:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81e04:	bf08      	it	eq
   81e06:	f020 0001 	biceq.w	r0, r0, #1
   81e0a:	4770      	bx	lr
   81e0c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81e10:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81e14:	327f      	adds	r2, #127	; 0x7f
   81e16:	bfc2      	ittt	gt
   81e18:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81e1c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81e20:	4770      	bxgt	lr
   81e22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81e26:	f04f 0300 	mov.w	r3, #0
   81e2a:	3a01      	subs	r2, #1
   81e2c:	e737      	b.n	81c9e <__aeabi_fmul+0x92>
   81e2e:	f092 0f00 	teq	r2, #0
   81e32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81e36:	bf02      	ittt	eq
   81e38:	0040      	lsleq	r0, r0, #1
   81e3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81e3e:	3a01      	subeq	r2, #1
   81e40:	d0f9      	beq.n	81e36 <__aeabi_fdiv+0xc2>
   81e42:	ea40 000c 	orr.w	r0, r0, ip
   81e46:	f093 0f00 	teq	r3, #0
   81e4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81e4e:	bf02      	ittt	eq
   81e50:	0049      	lsleq	r1, r1, #1
   81e52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81e56:	3b01      	subeq	r3, #1
   81e58:	d0f9      	beq.n	81e4e <__aeabi_fdiv+0xda>
   81e5a:	ea41 010c 	orr.w	r1, r1, ip
   81e5e:	e795      	b.n	81d8c <__aeabi_fdiv+0x18>
   81e60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81e64:	ea92 0f0c 	teq	r2, ip
   81e68:	d108      	bne.n	81e7c <__aeabi_fdiv+0x108>
   81e6a:	0242      	lsls	r2, r0, #9
   81e6c:	f47f af7d 	bne.w	81d6a <__aeabi_fmul+0x15e>
   81e70:	ea93 0f0c 	teq	r3, ip
   81e74:	f47f af70 	bne.w	81d58 <__aeabi_fmul+0x14c>
   81e78:	4608      	mov	r0, r1
   81e7a:	e776      	b.n	81d6a <__aeabi_fmul+0x15e>
   81e7c:	ea93 0f0c 	teq	r3, ip
   81e80:	d104      	bne.n	81e8c <__aeabi_fdiv+0x118>
   81e82:	024b      	lsls	r3, r1, #9
   81e84:	f43f af4c 	beq.w	81d20 <__aeabi_fmul+0x114>
   81e88:	4608      	mov	r0, r1
   81e8a:	e76e      	b.n	81d6a <__aeabi_fmul+0x15e>
   81e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81e90:	bf18      	it	ne
   81e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81e96:	d1ca      	bne.n	81e2e <__aeabi_fdiv+0xba>
   81e98:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81e9c:	f47f af5c 	bne.w	81d58 <__aeabi_fmul+0x14c>
   81ea0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81ea4:	f47f af3c 	bne.w	81d20 <__aeabi_fmul+0x114>
   81ea8:	e75f      	b.n	81d6a <__aeabi_fmul+0x15e>
   81eaa:	bf00      	nop

00081eac <__libc_init_array>:
   81eac:	b570      	push	{r4, r5, r6, lr}
   81eae:	4e0f      	ldr	r6, [pc, #60]	; (81eec <__libc_init_array+0x40>)
   81eb0:	4d0f      	ldr	r5, [pc, #60]	; (81ef0 <__libc_init_array+0x44>)
   81eb2:	1b76      	subs	r6, r6, r5
   81eb4:	10b6      	asrs	r6, r6, #2
   81eb6:	bf18      	it	ne
   81eb8:	2400      	movne	r4, #0
   81eba:	d005      	beq.n	81ec8 <__libc_init_array+0x1c>
   81ebc:	3401      	adds	r4, #1
   81ebe:	f855 3b04 	ldr.w	r3, [r5], #4
   81ec2:	4798      	blx	r3
   81ec4:	42a6      	cmp	r6, r4
   81ec6:	d1f9      	bne.n	81ebc <__libc_init_array+0x10>
   81ec8:	4e0a      	ldr	r6, [pc, #40]	; (81ef4 <__libc_init_array+0x48>)
   81eca:	4d0b      	ldr	r5, [pc, #44]	; (81ef8 <__libc_init_array+0x4c>)
   81ecc:	f004 fdec 	bl	86aa8 <_init>
   81ed0:	1b76      	subs	r6, r6, r5
   81ed2:	10b6      	asrs	r6, r6, #2
   81ed4:	bf18      	it	ne
   81ed6:	2400      	movne	r4, #0
   81ed8:	d006      	beq.n	81ee8 <__libc_init_array+0x3c>
   81eda:	3401      	adds	r4, #1
   81edc:	f855 3b04 	ldr.w	r3, [r5], #4
   81ee0:	4798      	blx	r3
   81ee2:	42a6      	cmp	r6, r4
   81ee4:	d1f9      	bne.n	81eda <__libc_init_array+0x2e>
   81ee6:	bd70      	pop	{r4, r5, r6, pc}
   81ee8:	bd70      	pop	{r4, r5, r6, pc}
   81eea:	bf00      	nop
   81eec:	00086ab4 	.word	0x00086ab4
   81ef0:	00086ab4 	.word	0x00086ab4
   81ef4:	00086abc 	.word	0x00086abc
   81ef8:	00086ab4 	.word	0x00086ab4

00081efc <malloc>:
   81efc:	4b02      	ldr	r3, [pc, #8]	; (81f08 <malloc+0xc>)
   81efe:	4601      	mov	r1, r0
   81f00:	6818      	ldr	r0, [r3, #0]
   81f02:	f000 b803 	b.w	81f0c <_malloc_r>
   81f06:	bf00      	nop
   81f08:	200704cc 	.word	0x200704cc

00081f0c <_malloc_r>:
   81f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81f10:	f101 060b 	add.w	r6, r1, #11
   81f14:	2e16      	cmp	r6, #22
   81f16:	b083      	sub	sp, #12
   81f18:	4605      	mov	r5, r0
   81f1a:	f240 809e 	bls.w	8205a <_malloc_r+0x14e>
   81f1e:	f036 0607 	bics.w	r6, r6, #7
   81f22:	f100 80bd 	bmi.w	820a0 <_malloc_r+0x194>
   81f26:	42b1      	cmp	r1, r6
   81f28:	f200 80ba 	bhi.w	820a0 <_malloc_r+0x194>
   81f2c:	f000 fb54 	bl	825d8 <__malloc_lock>
   81f30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81f34:	f0c0 8285 	bcc.w	82442 <_malloc_r+0x536>
   81f38:	0a73      	lsrs	r3, r6, #9
   81f3a:	f000 80b8 	beq.w	820ae <_malloc_r+0x1a2>
   81f3e:	2b04      	cmp	r3, #4
   81f40:	f200 816c 	bhi.w	8221c <_malloc_r+0x310>
   81f44:	09b3      	lsrs	r3, r6, #6
   81f46:	f103 0039 	add.w	r0, r3, #57	; 0x39
   81f4a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   81f4e:	00c1      	lsls	r1, r0, #3
   81f50:	4fb8      	ldr	r7, [pc, #736]	; (82234 <_malloc_r+0x328>)
   81f52:	4439      	add	r1, r7
   81f54:	684c      	ldr	r4, [r1, #4]
   81f56:	3908      	subs	r1, #8
   81f58:	42a1      	cmp	r1, r4
   81f5a:	d106      	bne.n	81f6a <_malloc_r+0x5e>
   81f5c:	e00c      	b.n	81f78 <_malloc_r+0x6c>
   81f5e:	2a00      	cmp	r2, #0
   81f60:	f280 80ab 	bge.w	820ba <_malloc_r+0x1ae>
   81f64:	68e4      	ldr	r4, [r4, #12]
   81f66:	42a1      	cmp	r1, r4
   81f68:	d006      	beq.n	81f78 <_malloc_r+0x6c>
   81f6a:	6863      	ldr	r3, [r4, #4]
   81f6c:	f023 0303 	bic.w	r3, r3, #3
   81f70:	1b9a      	subs	r2, r3, r6
   81f72:	2a0f      	cmp	r2, #15
   81f74:	ddf3      	ble.n	81f5e <_malloc_r+0x52>
   81f76:	4670      	mov	r0, lr
   81f78:	693c      	ldr	r4, [r7, #16]
   81f7a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82248 <_malloc_r+0x33c>
   81f7e:	4574      	cmp	r4, lr
   81f80:	f000 819e 	beq.w	822c0 <_malloc_r+0x3b4>
   81f84:	6863      	ldr	r3, [r4, #4]
   81f86:	f023 0303 	bic.w	r3, r3, #3
   81f8a:	1b9a      	subs	r2, r3, r6
   81f8c:	2a0f      	cmp	r2, #15
   81f8e:	f300 8183 	bgt.w	82298 <_malloc_r+0x38c>
   81f92:	2a00      	cmp	r2, #0
   81f94:	f8c7 e014 	str.w	lr, [r7, #20]
   81f98:	f8c7 e010 	str.w	lr, [r7, #16]
   81f9c:	f280 8091 	bge.w	820c2 <_malloc_r+0x1b6>
   81fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81fa4:	f080 8154 	bcs.w	82250 <_malloc_r+0x344>
   81fa8:	2201      	movs	r2, #1
   81faa:	08db      	lsrs	r3, r3, #3
   81fac:	6879      	ldr	r1, [r7, #4]
   81fae:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81fb2:	4413      	add	r3, r2
   81fb4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81fb8:	fa02 f20c 	lsl.w	r2, r2, ip
   81fbc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   81fc0:	430a      	orrs	r2, r1
   81fc2:	f1ac 0108 	sub.w	r1, ip, #8
   81fc6:	60e1      	str	r1, [r4, #12]
   81fc8:	f8c4 8008 	str.w	r8, [r4, #8]
   81fcc:	607a      	str	r2, [r7, #4]
   81fce:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   81fd2:	f8c8 400c 	str.w	r4, [r8, #12]
   81fd6:	2401      	movs	r4, #1
   81fd8:	1083      	asrs	r3, r0, #2
   81fda:	409c      	lsls	r4, r3
   81fdc:	4294      	cmp	r4, r2
   81fde:	d87d      	bhi.n	820dc <_malloc_r+0x1d0>
   81fe0:	4214      	tst	r4, r2
   81fe2:	d106      	bne.n	81ff2 <_malloc_r+0xe6>
   81fe4:	f020 0003 	bic.w	r0, r0, #3
   81fe8:	0064      	lsls	r4, r4, #1
   81fea:	4214      	tst	r4, r2
   81fec:	f100 0004 	add.w	r0, r0, #4
   81ff0:	d0fa      	beq.n	81fe8 <_malloc_r+0xdc>
   81ff2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   81ff6:	46cc      	mov	ip, r9
   81ff8:	4680      	mov	r8, r0
   81ffa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81ffe:	459c      	cmp	ip, r3
   82000:	d107      	bne.n	82012 <_malloc_r+0x106>
   82002:	e15f      	b.n	822c4 <_malloc_r+0x3b8>
   82004:	2a00      	cmp	r2, #0
   82006:	f280 816d 	bge.w	822e4 <_malloc_r+0x3d8>
   8200a:	68db      	ldr	r3, [r3, #12]
   8200c:	459c      	cmp	ip, r3
   8200e:	f000 8159 	beq.w	822c4 <_malloc_r+0x3b8>
   82012:	6859      	ldr	r1, [r3, #4]
   82014:	f021 0103 	bic.w	r1, r1, #3
   82018:	1b8a      	subs	r2, r1, r6
   8201a:	2a0f      	cmp	r2, #15
   8201c:	ddf2      	ble.n	82004 <_malloc_r+0xf8>
   8201e:	68dc      	ldr	r4, [r3, #12]
   82020:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82024:	f046 0801 	orr.w	r8, r6, #1
   82028:	4628      	mov	r0, r5
   8202a:	441e      	add	r6, r3
   8202c:	f042 0501 	orr.w	r5, r2, #1
   82030:	f8c3 8004 	str.w	r8, [r3, #4]
   82034:	f8cc 400c 	str.w	r4, [ip, #12]
   82038:	f8c4 c008 	str.w	ip, [r4, #8]
   8203c:	617e      	str	r6, [r7, #20]
   8203e:	613e      	str	r6, [r7, #16]
   82040:	f8c6 e00c 	str.w	lr, [r6, #12]
   82044:	f8c6 e008 	str.w	lr, [r6, #8]
   82048:	6075      	str	r5, [r6, #4]
   8204a:	505a      	str	r2, [r3, r1]
   8204c:	9300      	str	r3, [sp, #0]
   8204e:	f000 fac9 	bl	825e4 <__malloc_unlock>
   82052:	9b00      	ldr	r3, [sp, #0]
   82054:	f103 0408 	add.w	r4, r3, #8
   82058:	e01e      	b.n	82098 <_malloc_r+0x18c>
   8205a:	2910      	cmp	r1, #16
   8205c:	d820      	bhi.n	820a0 <_malloc_r+0x194>
   8205e:	f000 fabb 	bl	825d8 <__malloc_lock>
   82062:	2610      	movs	r6, #16
   82064:	2318      	movs	r3, #24
   82066:	2002      	movs	r0, #2
   82068:	4f72      	ldr	r7, [pc, #456]	; (82234 <_malloc_r+0x328>)
   8206a:	443b      	add	r3, r7
   8206c:	685c      	ldr	r4, [r3, #4]
   8206e:	f1a3 0208 	sub.w	r2, r3, #8
   82072:	4294      	cmp	r4, r2
   82074:	f000 812f 	beq.w	822d6 <_malloc_r+0x3ca>
   82078:	6863      	ldr	r3, [r4, #4]
   8207a:	68e1      	ldr	r1, [r4, #12]
   8207c:	f023 0303 	bic.w	r3, r3, #3
   82080:	4423      	add	r3, r4
   82082:	685a      	ldr	r2, [r3, #4]
   82084:	68a6      	ldr	r6, [r4, #8]
   82086:	f042 0201 	orr.w	r2, r2, #1
   8208a:	60f1      	str	r1, [r6, #12]
   8208c:	4628      	mov	r0, r5
   8208e:	608e      	str	r6, [r1, #8]
   82090:	605a      	str	r2, [r3, #4]
   82092:	f000 faa7 	bl	825e4 <__malloc_unlock>
   82096:	3408      	adds	r4, #8
   82098:	4620      	mov	r0, r4
   8209a:	b003      	add	sp, #12
   8209c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820a0:	2400      	movs	r4, #0
   820a2:	230c      	movs	r3, #12
   820a4:	4620      	mov	r0, r4
   820a6:	602b      	str	r3, [r5, #0]
   820a8:	b003      	add	sp, #12
   820aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820ae:	2040      	movs	r0, #64	; 0x40
   820b0:	f44f 7100 	mov.w	r1, #512	; 0x200
   820b4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   820b8:	e74a      	b.n	81f50 <_malloc_r+0x44>
   820ba:	4423      	add	r3, r4
   820bc:	685a      	ldr	r2, [r3, #4]
   820be:	68e1      	ldr	r1, [r4, #12]
   820c0:	e7e0      	b.n	82084 <_malloc_r+0x178>
   820c2:	4423      	add	r3, r4
   820c4:	685a      	ldr	r2, [r3, #4]
   820c6:	4628      	mov	r0, r5
   820c8:	f042 0201 	orr.w	r2, r2, #1
   820cc:	605a      	str	r2, [r3, #4]
   820ce:	3408      	adds	r4, #8
   820d0:	f000 fa88 	bl	825e4 <__malloc_unlock>
   820d4:	4620      	mov	r0, r4
   820d6:	b003      	add	sp, #12
   820d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820dc:	68bc      	ldr	r4, [r7, #8]
   820de:	6863      	ldr	r3, [r4, #4]
   820e0:	f023 0803 	bic.w	r8, r3, #3
   820e4:	45b0      	cmp	r8, r6
   820e6:	d304      	bcc.n	820f2 <_malloc_r+0x1e6>
   820e8:	eba8 0306 	sub.w	r3, r8, r6
   820ec:	2b0f      	cmp	r3, #15
   820ee:	f300 8085 	bgt.w	821fc <_malloc_r+0x2f0>
   820f2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8224c <_malloc_r+0x340>
   820f6:	4b50      	ldr	r3, [pc, #320]	; (82238 <_malloc_r+0x32c>)
   820f8:	f8d9 2000 	ldr.w	r2, [r9]
   820fc:	681b      	ldr	r3, [r3, #0]
   820fe:	3201      	adds	r2, #1
   82100:	4433      	add	r3, r6
   82102:	eb04 0a08 	add.w	sl, r4, r8
   82106:	f000 8154 	beq.w	823b2 <_malloc_r+0x4a6>
   8210a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8210e:	330f      	adds	r3, #15
   82110:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82114:	f02b 0b0f 	bic.w	fp, fp, #15
   82118:	4659      	mov	r1, fp
   8211a:	4628      	mov	r0, r5
   8211c:	f000 fa68 	bl	825f0 <_sbrk_r>
   82120:	1c41      	adds	r1, r0, #1
   82122:	4602      	mov	r2, r0
   82124:	f000 80fb 	beq.w	8231e <_malloc_r+0x412>
   82128:	4582      	cmp	sl, r0
   8212a:	f200 80f6 	bhi.w	8231a <_malloc_r+0x40e>
   8212e:	4b43      	ldr	r3, [pc, #268]	; (8223c <_malloc_r+0x330>)
   82130:	6819      	ldr	r1, [r3, #0]
   82132:	4459      	add	r1, fp
   82134:	6019      	str	r1, [r3, #0]
   82136:	f000 814c 	beq.w	823d2 <_malloc_r+0x4c6>
   8213a:	f8d9 0000 	ldr.w	r0, [r9]
   8213e:	3001      	adds	r0, #1
   82140:	bf1b      	ittet	ne
   82142:	eba2 0a0a 	subne.w	sl, r2, sl
   82146:	4451      	addne	r1, sl
   82148:	f8c9 2000 	streq.w	r2, [r9]
   8214c:	6019      	strne	r1, [r3, #0]
   8214e:	f012 0107 	ands.w	r1, r2, #7
   82152:	f000 8114 	beq.w	8237e <_malloc_r+0x472>
   82156:	f1c1 0008 	rsb	r0, r1, #8
   8215a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8215e:	4402      	add	r2, r0
   82160:	3108      	adds	r1, #8
   82162:	eb02 090b 	add.w	r9, r2, fp
   82166:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8216a:	eba1 0909 	sub.w	r9, r1, r9
   8216e:	4649      	mov	r1, r9
   82170:	4628      	mov	r0, r5
   82172:	9301      	str	r3, [sp, #4]
   82174:	9200      	str	r2, [sp, #0]
   82176:	f000 fa3b 	bl	825f0 <_sbrk_r>
   8217a:	1c43      	adds	r3, r0, #1
   8217c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82180:	f000 8142 	beq.w	82408 <_malloc_r+0x4fc>
   82184:	1a80      	subs	r0, r0, r2
   82186:	4448      	add	r0, r9
   82188:	f040 0001 	orr.w	r0, r0, #1
   8218c:	6819      	ldr	r1, [r3, #0]
   8218e:	42bc      	cmp	r4, r7
   82190:	4449      	add	r1, r9
   82192:	60ba      	str	r2, [r7, #8]
   82194:	6019      	str	r1, [r3, #0]
   82196:	6050      	str	r0, [r2, #4]
   82198:	d017      	beq.n	821ca <_malloc_r+0x2be>
   8219a:	f1b8 0f0f 	cmp.w	r8, #15
   8219e:	f240 80fa 	bls.w	82396 <_malloc_r+0x48a>
   821a2:	f04f 0c05 	mov.w	ip, #5
   821a6:	6862      	ldr	r2, [r4, #4]
   821a8:	f1a8 000c 	sub.w	r0, r8, #12
   821ac:	f020 0007 	bic.w	r0, r0, #7
   821b0:	f002 0201 	and.w	r2, r2, #1
   821b4:	eb04 0e00 	add.w	lr, r4, r0
   821b8:	4302      	orrs	r2, r0
   821ba:	280f      	cmp	r0, #15
   821bc:	6062      	str	r2, [r4, #4]
   821be:	f8ce c004 	str.w	ip, [lr, #4]
   821c2:	f8ce c008 	str.w	ip, [lr, #8]
   821c6:	f200 8116 	bhi.w	823f6 <_malloc_r+0x4ea>
   821ca:	4b1d      	ldr	r3, [pc, #116]	; (82240 <_malloc_r+0x334>)
   821cc:	68bc      	ldr	r4, [r7, #8]
   821ce:	681a      	ldr	r2, [r3, #0]
   821d0:	4291      	cmp	r1, r2
   821d2:	bf88      	it	hi
   821d4:	6019      	strhi	r1, [r3, #0]
   821d6:	4b1b      	ldr	r3, [pc, #108]	; (82244 <_malloc_r+0x338>)
   821d8:	681a      	ldr	r2, [r3, #0]
   821da:	4291      	cmp	r1, r2
   821dc:	6862      	ldr	r2, [r4, #4]
   821de:	bf88      	it	hi
   821e0:	6019      	strhi	r1, [r3, #0]
   821e2:	f022 0203 	bic.w	r2, r2, #3
   821e6:	4296      	cmp	r6, r2
   821e8:	eba2 0306 	sub.w	r3, r2, r6
   821ec:	d801      	bhi.n	821f2 <_malloc_r+0x2e6>
   821ee:	2b0f      	cmp	r3, #15
   821f0:	dc04      	bgt.n	821fc <_malloc_r+0x2f0>
   821f2:	4628      	mov	r0, r5
   821f4:	f000 f9f6 	bl	825e4 <__malloc_unlock>
   821f8:	2400      	movs	r4, #0
   821fa:	e74d      	b.n	82098 <_malloc_r+0x18c>
   821fc:	f046 0201 	orr.w	r2, r6, #1
   82200:	f043 0301 	orr.w	r3, r3, #1
   82204:	4426      	add	r6, r4
   82206:	6062      	str	r2, [r4, #4]
   82208:	4628      	mov	r0, r5
   8220a:	60be      	str	r6, [r7, #8]
   8220c:	3408      	adds	r4, #8
   8220e:	6073      	str	r3, [r6, #4]
   82210:	f000 f9e8 	bl	825e4 <__malloc_unlock>
   82214:	4620      	mov	r0, r4
   82216:	b003      	add	sp, #12
   82218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8221c:	2b14      	cmp	r3, #20
   8221e:	d970      	bls.n	82302 <_malloc_r+0x3f6>
   82220:	2b54      	cmp	r3, #84	; 0x54
   82222:	f200 80a2 	bhi.w	8236a <_malloc_r+0x45e>
   82226:	0b33      	lsrs	r3, r6, #12
   82228:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8222c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82230:	00c1      	lsls	r1, r0, #3
   82232:	e68d      	b.n	81f50 <_malloc_r+0x44>
   82234:	200708f8 	.word	0x200708f8
   82238:	20071044 	.word	0x20071044
   8223c:	20071014 	.word	0x20071014
   82240:	2007103c 	.word	0x2007103c
   82244:	20071040 	.word	0x20071040
   82248:	20070900 	.word	0x20070900
   8224c:	20070d00 	.word	0x20070d00
   82250:	0a5a      	lsrs	r2, r3, #9
   82252:	2a04      	cmp	r2, #4
   82254:	d95b      	bls.n	8230e <_malloc_r+0x402>
   82256:	2a14      	cmp	r2, #20
   82258:	f200 80ae 	bhi.w	823b8 <_malloc_r+0x4ac>
   8225c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82260:	00c9      	lsls	r1, r1, #3
   82262:	325b      	adds	r2, #91	; 0x5b
   82264:	eb07 0c01 	add.w	ip, r7, r1
   82268:	5879      	ldr	r1, [r7, r1]
   8226a:	f1ac 0c08 	sub.w	ip, ip, #8
   8226e:	458c      	cmp	ip, r1
   82270:	f000 8088 	beq.w	82384 <_malloc_r+0x478>
   82274:	684a      	ldr	r2, [r1, #4]
   82276:	f022 0203 	bic.w	r2, r2, #3
   8227a:	4293      	cmp	r3, r2
   8227c:	d273      	bcs.n	82366 <_malloc_r+0x45a>
   8227e:	6889      	ldr	r1, [r1, #8]
   82280:	458c      	cmp	ip, r1
   82282:	d1f7      	bne.n	82274 <_malloc_r+0x368>
   82284:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82288:	687a      	ldr	r2, [r7, #4]
   8228a:	60e3      	str	r3, [r4, #12]
   8228c:	f8c4 c008 	str.w	ip, [r4, #8]
   82290:	609c      	str	r4, [r3, #8]
   82292:	f8cc 400c 	str.w	r4, [ip, #12]
   82296:	e69e      	b.n	81fd6 <_malloc_r+0xca>
   82298:	f046 0c01 	orr.w	ip, r6, #1
   8229c:	f042 0101 	orr.w	r1, r2, #1
   822a0:	4426      	add	r6, r4
   822a2:	f8c4 c004 	str.w	ip, [r4, #4]
   822a6:	4628      	mov	r0, r5
   822a8:	617e      	str	r6, [r7, #20]
   822aa:	613e      	str	r6, [r7, #16]
   822ac:	f8c6 e00c 	str.w	lr, [r6, #12]
   822b0:	f8c6 e008 	str.w	lr, [r6, #8]
   822b4:	6071      	str	r1, [r6, #4]
   822b6:	50e2      	str	r2, [r4, r3]
   822b8:	f000 f994 	bl	825e4 <__malloc_unlock>
   822bc:	3408      	adds	r4, #8
   822be:	e6eb      	b.n	82098 <_malloc_r+0x18c>
   822c0:	687a      	ldr	r2, [r7, #4]
   822c2:	e688      	b.n	81fd6 <_malloc_r+0xca>
   822c4:	f108 0801 	add.w	r8, r8, #1
   822c8:	f018 0f03 	tst.w	r8, #3
   822cc:	f10c 0c08 	add.w	ip, ip, #8
   822d0:	f47f ae93 	bne.w	81ffa <_malloc_r+0xee>
   822d4:	e02d      	b.n	82332 <_malloc_r+0x426>
   822d6:	68dc      	ldr	r4, [r3, #12]
   822d8:	42a3      	cmp	r3, r4
   822da:	bf08      	it	eq
   822dc:	3002      	addeq	r0, #2
   822de:	f43f ae4b 	beq.w	81f78 <_malloc_r+0x6c>
   822e2:	e6c9      	b.n	82078 <_malloc_r+0x16c>
   822e4:	461c      	mov	r4, r3
   822e6:	4419      	add	r1, r3
   822e8:	684a      	ldr	r2, [r1, #4]
   822ea:	68db      	ldr	r3, [r3, #12]
   822ec:	f854 6f08 	ldr.w	r6, [r4, #8]!
   822f0:	f042 0201 	orr.w	r2, r2, #1
   822f4:	604a      	str	r2, [r1, #4]
   822f6:	4628      	mov	r0, r5
   822f8:	60f3      	str	r3, [r6, #12]
   822fa:	609e      	str	r6, [r3, #8]
   822fc:	f000 f972 	bl	825e4 <__malloc_unlock>
   82300:	e6ca      	b.n	82098 <_malloc_r+0x18c>
   82302:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   82306:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8230a:	00c1      	lsls	r1, r0, #3
   8230c:	e620      	b.n	81f50 <_malloc_r+0x44>
   8230e:	099a      	lsrs	r2, r3, #6
   82310:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82314:	00c9      	lsls	r1, r1, #3
   82316:	3238      	adds	r2, #56	; 0x38
   82318:	e7a4      	b.n	82264 <_malloc_r+0x358>
   8231a:	42bc      	cmp	r4, r7
   8231c:	d054      	beq.n	823c8 <_malloc_r+0x4bc>
   8231e:	68bc      	ldr	r4, [r7, #8]
   82320:	6862      	ldr	r2, [r4, #4]
   82322:	f022 0203 	bic.w	r2, r2, #3
   82326:	e75e      	b.n	821e6 <_malloc_r+0x2da>
   82328:	f859 3908 	ldr.w	r3, [r9], #-8
   8232c:	4599      	cmp	r9, r3
   8232e:	f040 8086 	bne.w	8243e <_malloc_r+0x532>
   82332:	f010 0f03 	tst.w	r0, #3
   82336:	f100 30ff 	add.w	r0, r0, #4294967295
   8233a:	d1f5      	bne.n	82328 <_malloc_r+0x41c>
   8233c:	687b      	ldr	r3, [r7, #4]
   8233e:	ea23 0304 	bic.w	r3, r3, r4
   82342:	607b      	str	r3, [r7, #4]
   82344:	0064      	lsls	r4, r4, #1
   82346:	429c      	cmp	r4, r3
   82348:	f63f aec8 	bhi.w	820dc <_malloc_r+0x1d0>
   8234c:	2c00      	cmp	r4, #0
   8234e:	f43f aec5 	beq.w	820dc <_malloc_r+0x1d0>
   82352:	421c      	tst	r4, r3
   82354:	4640      	mov	r0, r8
   82356:	f47f ae4c 	bne.w	81ff2 <_malloc_r+0xe6>
   8235a:	0064      	lsls	r4, r4, #1
   8235c:	421c      	tst	r4, r3
   8235e:	f100 0004 	add.w	r0, r0, #4
   82362:	d0fa      	beq.n	8235a <_malloc_r+0x44e>
   82364:	e645      	b.n	81ff2 <_malloc_r+0xe6>
   82366:	468c      	mov	ip, r1
   82368:	e78c      	b.n	82284 <_malloc_r+0x378>
   8236a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8236e:	d815      	bhi.n	8239c <_malloc_r+0x490>
   82370:	0bf3      	lsrs	r3, r6, #15
   82372:	f103 0078 	add.w	r0, r3, #120	; 0x78
   82376:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8237a:	00c1      	lsls	r1, r0, #3
   8237c:	e5e8      	b.n	81f50 <_malloc_r+0x44>
   8237e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82382:	e6ee      	b.n	82162 <_malloc_r+0x256>
   82384:	2101      	movs	r1, #1
   82386:	687b      	ldr	r3, [r7, #4]
   82388:	1092      	asrs	r2, r2, #2
   8238a:	fa01 f202 	lsl.w	r2, r1, r2
   8238e:	431a      	orrs	r2, r3
   82390:	607a      	str	r2, [r7, #4]
   82392:	4663      	mov	r3, ip
   82394:	e779      	b.n	8228a <_malloc_r+0x37e>
   82396:	2301      	movs	r3, #1
   82398:	6053      	str	r3, [r2, #4]
   8239a:	e72a      	b.n	821f2 <_malloc_r+0x2e6>
   8239c:	f240 5254 	movw	r2, #1364	; 0x554
   823a0:	4293      	cmp	r3, r2
   823a2:	d822      	bhi.n	823ea <_malloc_r+0x4de>
   823a4:	0cb3      	lsrs	r3, r6, #18
   823a6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   823aa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   823ae:	00c1      	lsls	r1, r0, #3
   823b0:	e5ce      	b.n	81f50 <_malloc_r+0x44>
   823b2:	f103 0b10 	add.w	fp, r3, #16
   823b6:	e6af      	b.n	82118 <_malloc_r+0x20c>
   823b8:	2a54      	cmp	r2, #84	; 0x54
   823ba:	d829      	bhi.n	82410 <_malloc_r+0x504>
   823bc:	0b1a      	lsrs	r2, r3, #12
   823be:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   823c2:	00c9      	lsls	r1, r1, #3
   823c4:	326e      	adds	r2, #110	; 0x6e
   823c6:	e74d      	b.n	82264 <_malloc_r+0x358>
   823c8:	4b20      	ldr	r3, [pc, #128]	; (8244c <_malloc_r+0x540>)
   823ca:	6819      	ldr	r1, [r3, #0]
   823cc:	4459      	add	r1, fp
   823ce:	6019      	str	r1, [r3, #0]
   823d0:	e6b3      	b.n	8213a <_malloc_r+0x22e>
   823d2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   823d6:	2800      	cmp	r0, #0
   823d8:	f47f aeaf 	bne.w	8213a <_malloc_r+0x22e>
   823dc:	eb08 030b 	add.w	r3, r8, fp
   823e0:	68ba      	ldr	r2, [r7, #8]
   823e2:	f043 0301 	orr.w	r3, r3, #1
   823e6:	6053      	str	r3, [r2, #4]
   823e8:	e6ef      	b.n	821ca <_malloc_r+0x2be>
   823ea:	207f      	movs	r0, #127	; 0x7f
   823ec:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   823f0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   823f4:	e5ac      	b.n	81f50 <_malloc_r+0x44>
   823f6:	f104 0108 	add.w	r1, r4, #8
   823fa:	4628      	mov	r0, r5
   823fc:	9300      	str	r3, [sp, #0]
   823fe:	f002 fc0f 	bl	84c20 <_free_r>
   82402:	9b00      	ldr	r3, [sp, #0]
   82404:	6819      	ldr	r1, [r3, #0]
   82406:	e6e0      	b.n	821ca <_malloc_r+0x2be>
   82408:	2001      	movs	r0, #1
   8240a:	f04f 0900 	mov.w	r9, #0
   8240e:	e6bd      	b.n	8218c <_malloc_r+0x280>
   82410:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82414:	d805      	bhi.n	82422 <_malloc_r+0x516>
   82416:	0bda      	lsrs	r2, r3, #15
   82418:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8241c:	00c9      	lsls	r1, r1, #3
   8241e:	3277      	adds	r2, #119	; 0x77
   82420:	e720      	b.n	82264 <_malloc_r+0x358>
   82422:	f240 5154 	movw	r1, #1364	; 0x554
   82426:	428a      	cmp	r2, r1
   82428:	d805      	bhi.n	82436 <_malloc_r+0x52a>
   8242a:	0c9a      	lsrs	r2, r3, #18
   8242c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   82430:	00c9      	lsls	r1, r1, #3
   82432:	327c      	adds	r2, #124	; 0x7c
   82434:	e716      	b.n	82264 <_malloc_r+0x358>
   82436:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8243a:	227e      	movs	r2, #126	; 0x7e
   8243c:	e712      	b.n	82264 <_malloc_r+0x358>
   8243e:	687b      	ldr	r3, [r7, #4]
   82440:	e780      	b.n	82344 <_malloc_r+0x438>
   82442:	08f0      	lsrs	r0, r6, #3
   82444:	f106 0308 	add.w	r3, r6, #8
   82448:	e60e      	b.n	82068 <_malloc_r+0x15c>
   8244a:	bf00      	nop
   8244c:	20071014 	.word	0x20071014

00082450 <memcpy>:
   82450:	4684      	mov	ip, r0
   82452:	ea41 0300 	orr.w	r3, r1, r0
   82456:	f013 0303 	ands.w	r3, r3, #3
   8245a:	d149      	bne.n	824f0 <memcpy+0xa0>
   8245c:	3a40      	subs	r2, #64	; 0x40
   8245e:	d323      	bcc.n	824a8 <memcpy+0x58>
   82460:	680b      	ldr	r3, [r1, #0]
   82462:	6003      	str	r3, [r0, #0]
   82464:	684b      	ldr	r3, [r1, #4]
   82466:	6043      	str	r3, [r0, #4]
   82468:	688b      	ldr	r3, [r1, #8]
   8246a:	6083      	str	r3, [r0, #8]
   8246c:	68cb      	ldr	r3, [r1, #12]
   8246e:	60c3      	str	r3, [r0, #12]
   82470:	690b      	ldr	r3, [r1, #16]
   82472:	6103      	str	r3, [r0, #16]
   82474:	694b      	ldr	r3, [r1, #20]
   82476:	6143      	str	r3, [r0, #20]
   82478:	698b      	ldr	r3, [r1, #24]
   8247a:	6183      	str	r3, [r0, #24]
   8247c:	69cb      	ldr	r3, [r1, #28]
   8247e:	61c3      	str	r3, [r0, #28]
   82480:	6a0b      	ldr	r3, [r1, #32]
   82482:	6203      	str	r3, [r0, #32]
   82484:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82486:	6243      	str	r3, [r0, #36]	; 0x24
   82488:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8248a:	6283      	str	r3, [r0, #40]	; 0x28
   8248c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8248e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82490:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82492:	6303      	str	r3, [r0, #48]	; 0x30
   82494:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82496:	6343      	str	r3, [r0, #52]	; 0x34
   82498:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8249a:	6383      	str	r3, [r0, #56]	; 0x38
   8249c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8249e:	63c3      	str	r3, [r0, #60]	; 0x3c
   824a0:	3040      	adds	r0, #64	; 0x40
   824a2:	3140      	adds	r1, #64	; 0x40
   824a4:	3a40      	subs	r2, #64	; 0x40
   824a6:	d2db      	bcs.n	82460 <memcpy+0x10>
   824a8:	3230      	adds	r2, #48	; 0x30
   824aa:	d30b      	bcc.n	824c4 <memcpy+0x74>
   824ac:	680b      	ldr	r3, [r1, #0]
   824ae:	6003      	str	r3, [r0, #0]
   824b0:	684b      	ldr	r3, [r1, #4]
   824b2:	6043      	str	r3, [r0, #4]
   824b4:	688b      	ldr	r3, [r1, #8]
   824b6:	6083      	str	r3, [r0, #8]
   824b8:	68cb      	ldr	r3, [r1, #12]
   824ba:	60c3      	str	r3, [r0, #12]
   824bc:	3010      	adds	r0, #16
   824be:	3110      	adds	r1, #16
   824c0:	3a10      	subs	r2, #16
   824c2:	d2f3      	bcs.n	824ac <memcpy+0x5c>
   824c4:	320c      	adds	r2, #12
   824c6:	d305      	bcc.n	824d4 <memcpy+0x84>
   824c8:	f851 3b04 	ldr.w	r3, [r1], #4
   824cc:	f840 3b04 	str.w	r3, [r0], #4
   824d0:	3a04      	subs	r2, #4
   824d2:	d2f9      	bcs.n	824c8 <memcpy+0x78>
   824d4:	3204      	adds	r2, #4
   824d6:	d008      	beq.n	824ea <memcpy+0x9a>
   824d8:	07d2      	lsls	r2, r2, #31
   824da:	bf1c      	itt	ne
   824dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   824e0:	f800 3b01 	strbne.w	r3, [r0], #1
   824e4:	d301      	bcc.n	824ea <memcpy+0x9a>
   824e6:	880b      	ldrh	r3, [r1, #0]
   824e8:	8003      	strh	r3, [r0, #0]
   824ea:	4660      	mov	r0, ip
   824ec:	4770      	bx	lr
   824ee:	bf00      	nop
   824f0:	2a08      	cmp	r2, #8
   824f2:	d313      	bcc.n	8251c <memcpy+0xcc>
   824f4:	078b      	lsls	r3, r1, #30
   824f6:	d0b1      	beq.n	8245c <memcpy+0xc>
   824f8:	f010 0303 	ands.w	r3, r0, #3
   824fc:	d0ae      	beq.n	8245c <memcpy+0xc>
   824fe:	f1c3 0304 	rsb	r3, r3, #4
   82502:	1ad2      	subs	r2, r2, r3
   82504:	07db      	lsls	r3, r3, #31
   82506:	bf1c      	itt	ne
   82508:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8250c:	f800 3b01 	strbne.w	r3, [r0], #1
   82510:	d3a4      	bcc.n	8245c <memcpy+0xc>
   82512:	f831 3b02 	ldrh.w	r3, [r1], #2
   82516:	f820 3b02 	strh.w	r3, [r0], #2
   8251a:	e79f      	b.n	8245c <memcpy+0xc>
   8251c:	3a04      	subs	r2, #4
   8251e:	d3d9      	bcc.n	824d4 <memcpy+0x84>
   82520:	3a01      	subs	r2, #1
   82522:	f811 3b01 	ldrb.w	r3, [r1], #1
   82526:	f800 3b01 	strb.w	r3, [r0], #1
   8252a:	d2f9      	bcs.n	82520 <memcpy+0xd0>
   8252c:	780b      	ldrb	r3, [r1, #0]
   8252e:	7003      	strb	r3, [r0, #0]
   82530:	784b      	ldrb	r3, [r1, #1]
   82532:	7043      	strb	r3, [r0, #1]
   82534:	788b      	ldrb	r3, [r1, #2]
   82536:	7083      	strb	r3, [r0, #2]
   82538:	4660      	mov	r0, ip
   8253a:	4770      	bx	lr

0008253c <memset>:
   8253c:	b470      	push	{r4, r5, r6}
   8253e:	0786      	lsls	r6, r0, #30
   82540:	d046      	beq.n	825d0 <memset+0x94>
   82542:	1e54      	subs	r4, r2, #1
   82544:	2a00      	cmp	r2, #0
   82546:	d041      	beq.n	825cc <memset+0x90>
   82548:	b2ca      	uxtb	r2, r1
   8254a:	4603      	mov	r3, r0
   8254c:	e002      	b.n	82554 <memset+0x18>
   8254e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82552:	d33b      	bcc.n	825cc <memset+0x90>
   82554:	f803 2b01 	strb.w	r2, [r3], #1
   82558:	079d      	lsls	r5, r3, #30
   8255a:	d1f8      	bne.n	8254e <memset+0x12>
   8255c:	2c03      	cmp	r4, #3
   8255e:	d92e      	bls.n	825be <memset+0x82>
   82560:	b2cd      	uxtb	r5, r1
   82562:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82566:	2c0f      	cmp	r4, #15
   82568:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8256c:	d919      	bls.n	825a2 <memset+0x66>
   8256e:	4626      	mov	r6, r4
   82570:	f103 0210 	add.w	r2, r3, #16
   82574:	3e10      	subs	r6, #16
   82576:	2e0f      	cmp	r6, #15
   82578:	f842 5c10 	str.w	r5, [r2, #-16]
   8257c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82580:	f842 5c08 	str.w	r5, [r2, #-8]
   82584:	f842 5c04 	str.w	r5, [r2, #-4]
   82588:	f102 0210 	add.w	r2, r2, #16
   8258c:	d8f2      	bhi.n	82574 <memset+0x38>
   8258e:	f1a4 0210 	sub.w	r2, r4, #16
   82592:	f022 020f 	bic.w	r2, r2, #15
   82596:	f004 040f 	and.w	r4, r4, #15
   8259a:	3210      	adds	r2, #16
   8259c:	2c03      	cmp	r4, #3
   8259e:	4413      	add	r3, r2
   825a0:	d90d      	bls.n	825be <memset+0x82>
   825a2:	461e      	mov	r6, r3
   825a4:	4622      	mov	r2, r4
   825a6:	3a04      	subs	r2, #4
   825a8:	2a03      	cmp	r2, #3
   825aa:	f846 5b04 	str.w	r5, [r6], #4
   825ae:	d8fa      	bhi.n	825a6 <memset+0x6a>
   825b0:	1f22      	subs	r2, r4, #4
   825b2:	f022 0203 	bic.w	r2, r2, #3
   825b6:	3204      	adds	r2, #4
   825b8:	4413      	add	r3, r2
   825ba:	f004 0403 	and.w	r4, r4, #3
   825be:	b12c      	cbz	r4, 825cc <memset+0x90>
   825c0:	b2c9      	uxtb	r1, r1
   825c2:	441c      	add	r4, r3
   825c4:	f803 1b01 	strb.w	r1, [r3], #1
   825c8:	429c      	cmp	r4, r3
   825ca:	d1fb      	bne.n	825c4 <memset+0x88>
   825cc:	bc70      	pop	{r4, r5, r6}
   825ce:	4770      	bx	lr
   825d0:	4614      	mov	r4, r2
   825d2:	4603      	mov	r3, r0
   825d4:	e7c2      	b.n	8255c <memset+0x20>
   825d6:	bf00      	nop

000825d8 <__malloc_lock>:
   825d8:	4801      	ldr	r0, [pc, #4]	; (825e0 <__malloc_lock+0x8>)
   825da:	f002 bc15 	b.w	84e08 <__retarget_lock_acquire_recursive>
   825de:	bf00      	nop
   825e0:	200710e4 	.word	0x200710e4

000825e4 <__malloc_unlock>:
   825e4:	4801      	ldr	r0, [pc, #4]	; (825ec <__malloc_unlock+0x8>)
   825e6:	f002 bc11 	b.w	84e0c <__retarget_lock_release_recursive>
   825ea:	bf00      	nop
   825ec:	200710e4 	.word	0x200710e4

000825f0 <_sbrk_r>:
   825f0:	b538      	push	{r3, r4, r5, lr}
   825f2:	2300      	movs	r3, #0
   825f4:	4c06      	ldr	r4, [pc, #24]	; (82610 <_sbrk_r+0x20>)
   825f6:	4605      	mov	r5, r0
   825f8:	4608      	mov	r0, r1
   825fa:	6023      	str	r3, [r4, #0]
   825fc:	f7ff f852 	bl	816a4 <_sbrk>
   82600:	1c43      	adds	r3, r0, #1
   82602:	d000      	beq.n	82606 <_sbrk_r+0x16>
   82604:	bd38      	pop	{r3, r4, r5, pc}
   82606:	6823      	ldr	r3, [r4, #0]
   82608:	2b00      	cmp	r3, #0
   8260a:	d0fb      	beq.n	82604 <_sbrk_r+0x14>
   8260c:	602b      	str	r3, [r5, #0]
   8260e:	bd38      	pop	{r3, r4, r5, pc}
   82610:	200710f8 	.word	0x200710f8

00082614 <sprintf>:
   82614:	b40e      	push	{r1, r2, r3}
   82616:	4601      	mov	r1, r0
   82618:	b5f0      	push	{r4, r5, r6, r7, lr}
   8261a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8261e:	f44f 7702 	mov.w	r7, #520	; 0x208
   82622:	f64f 76ff 	movw	r6, #65535	; 0xffff
   82626:	b09c      	sub	sp, #112	; 0x70
   82628:	ac21      	add	r4, sp, #132	; 0x84
   8262a:	f854 2b04 	ldr.w	r2, [r4], #4
   8262e:	4b0b      	ldr	r3, [pc, #44]	; (8265c <sprintf+0x48>)
   82630:	9102      	str	r1, [sp, #8]
   82632:	9106      	str	r1, [sp, #24]
   82634:	6818      	ldr	r0, [r3, #0]
   82636:	a902      	add	r1, sp, #8
   82638:	4623      	mov	r3, r4
   8263a:	9401      	str	r4, [sp, #4]
   8263c:	f8ad 7014 	strh.w	r7, [sp, #20]
   82640:	9504      	str	r5, [sp, #16]
   82642:	9507      	str	r5, [sp, #28]
   82644:	f8ad 6016 	strh.w	r6, [sp, #22]
   82648:	f000 f838 	bl	826bc <_svfprintf_r>
   8264c:	2200      	movs	r2, #0
   8264e:	9b02      	ldr	r3, [sp, #8]
   82650:	701a      	strb	r2, [r3, #0]
   82652:	b01c      	add	sp, #112	; 0x70
   82654:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   82658:	b003      	add	sp, #12
   8265a:	4770      	bx	lr
   8265c:	200704cc 	.word	0x200704cc

00082660 <strlen>:
   82660:	f020 0103 	bic.w	r1, r0, #3
   82664:	f010 0003 	ands.w	r0, r0, #3
   82668:	f1c0 0000 	rsb	r0, r0, #0
   8266c:	f851 3b04 	ldr.w	r3, [r1], #4
   82670:	f100 0c04 	add.w	ip, r0, #4
   82674:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82678:	f06f 0200 	mvn.w	r2, #0
   8267c:	bf1c      	itt	ne
   8267e:	fa22 f20c 	lsrne.w	r2, r2, ip
   82682:	4313      	orrne	r3, r2
   82684:	f04f 0c01 	mov.w	ip, #1
   82688:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8268c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82690:	eba3 020c 	sub.w	r2, r3, ip
   82694:	ea22 0203 	bic.w	r2, r2, r3
   82698:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8269c:	bf04      	itt	eq
   8269e:	f851 3b04 	ldreq.w	r3, [r1], #4
   826a2:	3004      	addeq	r0, #4
   826a4:	d0f4      	beq.n	82690 <strlen+0x30>
   826a6:	f1c2 0100 	rsb	r1, r2, #0
   826aa:	ea02 0201 	and.w	r2, r2, r1
   826ae:	fab2 f282 	clz	r2, r2
   826b2:	f1c2 021f 	rsb	r2, r2, #31
   826b6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   826ba:	4770      	bx	lr

000826bc <_svfprintf_r>:
   826bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826c0:	b0c3      	sub	sp, #268	; 0x10c
   826c2:	460c      	mov	r4, r1
   826c4:	910b      	str	r1, [sp, #44]	; 0x2c
   826c6:	4692      	mov	sl, r2
   826c8:	930f      	str	r3, [sp, #60]	; 0x3c
   826ca:	900c      	str	r0, [sp, #48]	; 0x30
   826cc:	f002 fb8e 	bl	84dec <_localeconv_r>
   826d0:	6803      	ldr	r3, [r0, #0]
   826d2:	4618      	mov	r0, r3
   826d4:	931a      	str	r3, [sp, #104]	; 0x68
   826d6:	f7ff ffc3 	bl	82660 <strlen>
   826da:	89a3      	ldrh	r3, [r4, #12]
   826dc:	9019      	str	r0, [sp, #100]	; 0x64
   826de:	0619      	lsls	r1, r3, #24
   826e0:	d503      	bpl.n	826ea <_svfprintf_r+0x2e>
   826e2:	6923      	ldr	r3, [r4, #16]
   826e4:	2b00      	cmp	r3, #0
   826e6:	f001 8035 	beq.w	83754 <_svfprintf_r+0x1098>
   826ea:	2300      	movs	r3, #0
   826ec:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   826f0:	46c8      	mov	r8, r9
   826f2:	9315      	str	r3, [sp, #84]	; 0x54
   826f4:	9313      	str	r3, [sp, #76]	; 0x4c
   826f6:	9314      	str	r3, [sp, #80]	; 0x50
   826f8:	9318      	str	r3, [sp, #96]	; 0x60
   826fa:	931b      	str	r3, [sp, #108]	; 0x6c
   826fc:	9309      	str	r3, [sp, #36]	; 0x24
   826fe:	9316      	str	r3, [sp, #88]	; 0x58
   82700:	9317      	str	r3, [sp, #92]	; 0x5c
   82702:	9327      	str	r3, [sp, #156]	; 0x9c
   82704:	9326      	str	r3, [sp, #152]	; 0x98
   82706:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   8270a:	f89a 3000 	ldrb.w	r3, [sl]
   8270e:	4654      	mov	r4, sl
   82710:	b1eb      	cbz	r3, 8274e <_svfprintf_r+0x92>
   82712:	2b25      	cmp	r3, #37	; 0x25
   82714:	d102      	bne.n	8271c <_svfprintf_r+0x60>
   82716:	e01a      	b.n	8274e <_svfprintf_r+0x92>
   82718:	2b25      	cmp	r3, #37	; 0x25
   8271a:	d003      	beq.n	82724 <_svfprintf_r+0x68>
   8271c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82720:	2b00      	cmp	r3, #0
   82722:	d1f9      	bne.n	82718 <_svfprintf_r+0x5c>
   82724:	eba4 050a 	sub.w	r5, r4, sl
   82728:	b18d      	cbz	r5, 8274e <_svfprintf_r+0x92>
   8272a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8272c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8272e:	3301      	adds	r3, #1
   82730:	442a      	add	r2, r5
   82732:	2b07      	cmp	r3, #7
   82734:	f8c8 a000 	str.w	sl, [r8]
   82738:	f8c8 5004 	str.w	r5, [r8, #4]
   8273c:	9227      	str	r2, [sp, #156]	; 0x9c
   8273e:	9326      	str	r3, [sp, #152]	; 0x98
   82740:	f300 808a 	bgt.w	82858 <_svfprintf_r+0x19c>
   82744:	f108 0808 	add.w	r8, r8, #8
   82748:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8274a:	442b      	add	r3, r5
   8274c:	9309      	str	r3, [sp, #36]	; 0x24
   8274e:	7823      	ldrb	r3, [r4, #0]
   82750:	2b00      	cmp	r3, #0
   82752:	f000 8089 	beq.w	82868 <_svfprintf_r+0x1ac>
   82756:	2300      	movs	r3, #0
   82758:	f04f 30ff 	mov.w	r0, #4294967295
   8275c:	461a      	mov	r2, r3
   8275e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82762:	4619      	mov	r1, r3
   82764:	930d      	str	r3, [sp, #52]	; 0x34
   82766:	469b      	mov	fp, r3
   82768:	7863      	ldrb	r3, [r4, #1]
   8276a:	f104 0a01 	add.w	sl, r4, #1
   8276e:	900a      	str	r0, [sp, #40]	; 0x28
   82770:	f10a 0a01 	add.w	sl, sl, #1
   82774:	f1a3 0020 	sub.w	r0, r3, #32
   82778:	2858      	cmp	r0, #88	; 0x58
   8277a:	f200 83b7 	bhi.w	82eec <_svfprintf_r+0x830>
   8277e:	e8df f010 	tbh	[pc, r0, lsl #1]
   82782:	034c      	.short	0x034c
   82784:	03b503b5 	.word	0x03b503b5
   82788:	03b50354 	.word	0x03b50354
   8278c:	03b503b5 	.word	0x03b503b5
   82790:	03b503b5 	.word	0x03b503b5
   82794:	005903b5 	.word	0x005903b5
   82798:	03b50359 	.word	0x03b50359
   8279c:	02140066 	.word	0x02140066
   827a0:	022f03b5 	.word	0x022f03b5
   827a4:	03a503a5 	.word	0x03a503a5
   827a8:	03a503a5 	.word	0x03a503a5
   827ac:	03a503a5 	.word	0x03a503a5
   827b0:	03a503a5 	.word	0x03a503a5
   827b4:	03b503a5 	.word	0x03b503a5
   827b8:	03b503b5 	.word	0x03b503b5
   827bc:	03b503b5 	.word	0x03b503b5
   827c0:	03b503b5 	.word	0x03b503b5
   827c4:	03b503b5 	.word	0x03b503b5
   827c8:	028b03b5 	.word	0x028b03b5
   827cc:	03b502d3 	.word	0x03b502d3
   827d0:	03b502d3 	.word	0x03b502d3
   827d4:	03b503b5 	.word	0x03b503b5
   827d8:	031b03b5 	.word	0x031b03b5
   827dc:	03b503b5 	.word	0x03b503b5
   827e0:	03b50320 	.word	0x03b50320
   827e4:	03b503b5 	.word	0x03b503b5
   827e8:	03b503b5 	.word	0x03b503b5
   827ec:	03b50234 	.word	0x03b50234
   827f0:	024b03b5 	.word	0x024b03b5
   827f4:	03b503b5 	.word	0x03b503b5
   827f8:	03b503b5 	.word	0x03b503b5
   827fc:	03b503b5 	.word	0x03b503b5
   82800:	03b503b5 	.word	0x03b503b5
   82804:	03b503b5 	.word	0x03b503b5
   82808:	039e0276 	.word	0x039e0276
   8280c:	02d302d3 	.word	0x02d302d3
   82810:	036302d3 	.word	0x036302d3
   82814:	03b5039e 	.word	0x03b5039e
   82818:	036803b5 	.word	0x036803b5
   8281c:	037503b5 	.word	0x037503b5
   82820:	038c01dd 	.word	0x038c01dd
   82824:	03b5035e 	.word	0x03b5035e
   82828:	03b501f2 	.word	0x03b501f2
   8282c:	03b50087 	.word	0x03b50087
   82830:	033203b5 	.word	0x033203b5
   82834:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82836:	6823      	ldr	r3, [r4, #0]
   82838:	4618      	mov	r0, r3
   8283a:	930d      	str	r3, [sp, #52]	; 0x34
   8283c:	4623      	mov	r3, r4
   8283e:	2800      	cmp	r0, #0
   82840:	f103 0304 	add.w	r3, r3, #4
   82844:	930f      	str	r3, [sp, #60]	; 0x3c
   82846:	da04      	bge.n	82852 <_svfprintf_r+0x196>
   82848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8284a:	425b      	negs	r3, r3
   8284c:	930d      	str	r3, [sp, #52]	; 0x34
   8284e:	f04b 0b04 	orr.w	fp, fp, #4
   82852:	f89a 3000 	ldrb.w	r3, [sl]
   82856:	e78b      	b.n	82770 <_svfprintf_r+0xb4>
   82858:	aa25      	add	r2, sp, #148	; 0x94
   8285a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8285c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8285e:	f003 f849 	bl	858f4 <__ssprint_r>
   82862:	b940      	cbnz	r0, 82876 <_svfprintf_r+0x1ba>
   82864:	46c8      	mov	r8, r9
   82866:	e76f      	b.n	82748 <_svfprintf_r+0x8c>
   82868:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   8286a:	b123      	cbz	r3, 82876 <_svfprintf_r+0x1ba>
   8286c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8286e:	aa25      	add	r2, sp, #148	; 0x94
   82870:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82872:	f003 f83f 	bl	858f4 <__ssprint_r>
   82876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82878:	899b      	ldrh	r3, [r3, #12]
   8287a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8287e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82880:	bf18      	it	ne
   82882:	f04f 33ff 	movne.w	r3, #4294967295
   82886:	9309      	str	r3, [sp, #36]	; 0x24
   82888:	9809      	ldr	r0, [sp, #36]	; 0x24
   8288a:	b043      	add	sp, #268	; 0x10c
   8288c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82890:	f01b 0f20 	tst.w	fp, #32
   82894:	9311      	str	r3, [sp, #68]	; 0x44
   82896:	f040 81af 	bne.w	82bf8 <_svfprintf_r+0x53c>
   8289a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8289c:	f01b 0f10 	tst.w	fp, #16
   828a0:	4613      	mov	r3, r2
   828a2:	f040 859a 	bne.w	833da <_svfprintf_r+0xd1e>
   828a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   828aa:	f000 8596 	beq.w	833da <_svfprintf_r+0xd1e>
   828ae:	2500      	movs	r5, #0
   828b0:	2301      	movs	r3, #1
   828b2:	8814      	ldrh	r4, [r2, #0]
   828b4:	3204      	adds	r2, #4
   828b6:	920f      	str	r2, [sp, #60]	; 0x3c
   828b8:	2200      	movs	r2, #0
   828ba:	4617      	mov	r7, r2
   828bc:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   828c0:	990a      	ldr	r1, [sp, #40]	; 0x28
   828c2:	1c4a      	adds	r2, r1, #1
   828c4:	f000 8210 	beq.w	82ce8 <_svfprintf_r+0x62c>
   828c8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   828cc:	9207      	str	r2, [sp, #28]
   828ce:	ea54 0205 	orrs.w	r2, r4, r5
   828d2:	f040 820f 	bne.w	82cf4 <_svfprintf_r+0x638>
   828d6:	2900      	cmp	r1, #0
   828d8:	f040 8431 	bne.w	8313e <_svfprintf_r+0xa82>
   828dc:	2b00      	cmp	r3, #0
   828de:	f040 8539 	bne.w	83354 <_svfprintf_r+0xc98>
   828e2:	f01b 0301 	ands.w	r3, fp, #1
   828e6:	930e      	str	r3, [sp, #56]	; 0x38
   828e8:	f000 8662 	beq.w	835b0 <_svfprintf_r+0xef4>
   828ec:	2330      	movs	r3, #48	; 0x30
   828ee:	ae42      	add	r6, sp, #264	; 0x108
   828f0:	f806 3d41 	strb.w	r3, [r6, #-65]!
   828f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   828f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   828f8:	4293      	cmp	r3, r2
   828fa:	bfb8      	it	lt
   828fc:	4613      	movlt	r3, r2
   828fe:	9308      	str	r3, [sp, #32]
   82900:	2300      	movs	r3, #0
   82902:	9312      	str	r3, [sp, #72]	; 0x48
   82904:	b117      	cbz	r7, 8290c <_svfprintf_r+0x250>
   82906:	9b08      	ldr	r3, [sp, #32]
   82908:	3301      	adds	r3, #1
   8290a:	9308      	str	r3, [sp, #32]
   8290c:	9b07      	ldr	r3, [sp, #28]
   8290e:	f013 0302 	ands.w	r3, r3, #2
   82912:	9310      	str	r3, [sp, #64]	; 0x40
   82914:	d002      	beq.n	8291c <_svfprintf_r+0x260>
   82916:	9b08      	ldr	r3, [sp, #32]
   82918:	3302      	adds	r3, #2
   8291a:	9308      	str	r3, [sp, #32]
   8291c:	9b07      	ldr	r3, [sp, #28]
   8291e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   82922:	f040 8310 	bne.w	82f46 <_svfprintf_r+0x88a>
   82926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82928:	9a08      	ldr	r2, [sp, #32]
   8292a:	eba3 0b02 	sub.w	fp, r3, r2
   8292e:	f1bb 0f00 	cmp.w	fp, #0
   82932:	f340 8308 	ble.w	82f46 <_svfprintf_r+0x88a>
   82936:	f1bb 0f10 	cmp.w	fp, #16
   8293a:	f340 87b2 	ble.w	838a2 <_svfprintf_r+0x11e6>
   8293e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82940:	4643      	mov	r3, r8
   82942:	4621      	mov	r1, r4
   82944:	46a8      	mov	r8, r5
   82946:	2710      	movs	r7, #16
   82948:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8294a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8294c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8294e:	e006      	b.n	8295e <_svfprintf_r+0x2a2>
   82950:	f1ab 0b10 	sub.w	fp, fp, #16
   82954:	f1bb 0f10 	cmp.w	fp, #16
   82958:	f103 0308 	add.w	r3, r3, #8
   8295c:	dd18      	ble.n	82990 <_svfprintf_r+0x2d4>
   8295e:	3201      	adds	r2, #1
   82960:	48ab      	ldr	r0, [pc, #684]	; (82c10 <_svfprintf_r+0x554>)
   82962:	3110      	adds	r1, #16
   82964:	2a07      	cmp	r2, #7
   82966:	9127      	str	r1, [sp, #156]	; 0x9c
   82968:	9226      	str	r2, [sp, #152]	; 0x98
   8296a:	e883 0081 	stmia.w	r3, {r0, r7}
   8296e:	ddef      	ble.n	82950 <_svfprintf_r+0x294>
   82970:	aa25      	add	r2, sp, #148	; 0x94
   82972:	4629      	mov	r1, r5
   82974:	4620      	mov	r0, r4
   82976:	f002 ffbd 	bl	858f4 <__ssprint_r>
   8297a:	2800      	cmp	r0, #0
   8297c:	f47f af7b 	bne.w	82876 <_svfprintf_r+0x1ba>
   82980:	f1ab 0b10 	sub.w	fp, fp, #16
   82984:	f1bb 0f10 	cmp.w	fp, #16
   82988:	464b      	mov	r3, r9
   8298a:	9927      	ldr	r1, [sp, #156]	; 0x9c
   8298c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8298e:	dce6      	bgt.n	8295e <_svfprintf_r+0x2a2>
   82990:	4645      	mov	r5, r8
   82992:	460c      	mov	r4, r1
   82994:	4698      	mov	r8, r3
   82996:	3201      	adds	r2, #1
   82998:	4b9d      	ldr	r3, [pc, #628]	; (82c10 <_svfprintf_r+0x554>)
   8299a:	445c      	add	r4, fp
   8299c:	2a07      	cmp	r2, #7
   8299e:	9427      	str	r4, [sp, #156]	; 0x9c
   829a0:	9226      	str	r2, [sp, #152]	; 0x98
   829a2:	e888 0808 	stmia.w	r8, {r3, fp}
   829a6:	f300 82c3 	bgt.w	82f30 <_svfprintf_r+0x874>
   829aa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   829ae:	f108 0808 	add.w	r8, r8, #8
   829b2:	b187      	cbz	r7, 829d6 <_svfprintf_r+0x31a>
   829b4:	2101      	movs	r1, #1
   829b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   829b8:	440c      	add	r4, r1
   829ba:	440b      	add	r3, r1
   829bc:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   829c0:	2b07      	cmp	r3, #7
   829c2:	9427      	str	r4, [sp, #156]	; 0x9c
   829c4:	9326      	str	r3, [sp, #152]	; 0x98
   829c6:	f8c8 1004 	str.w	r1, [r8, #4]
   829ca:	f8c8 2000 	str.w	r2, [r8]
   829ce:	f300 83cd 	bgt.w	8316c <_svfprintf_r+0xab0>
   829d2:	f108 0808 	add.w	r8, r8, #8
   829d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   829d8:	b17b      	cbz	r3, 829fa <_svfprintf_r+0x33e>
   829da:	2102      	movs	r1, #2
   829dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   829de:	440c      	add	r4, r1
   829e0:	3301      	adds	r3, #1
   829e2:	aa1e      	add	r2, sp, #120	; 0x78
   829e4:	2b07      	cmp	r3, #7
   829e6:	9427      	str	r4, [sp, #156]	; 0x9c
   829e8:	9326      	str	r3, [sp, #152]	; 0x98
   829ea:	f8c8 1004 	str.w	r1, [r8, #4]
   829ee:	f8c8 2000 	str.w	r2, [r8]
   829f2:	f300 8411 	bgt.w	83218 <_svfprintf_r+0xb5c>
   829f6:	f108 0808 	add.w	r8, r8, #8
   829fa:	2d80      	cmp	r5, #128	; 0x80
   829fc:	f000 8304 	beq.w	83008 <_svfprintf_r+0x94c>
   82a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82a04:	1a9f      	subs	r7, r3, r2
   82a06:	2f00      	cmp	r7, #0
   82a08:	dd37      	ble.n	82a7a <_svfprintf_r+0x3be>
   82a0a:	2f10      	cmp	r7, #16
   82a0c:	f340 8679 	ble.w	83702 <_svfprintf_r+0x1046>
   82a10:	4d80      	ldr	r5, [pc, #512]	; (82c14 <_svfprintf_r+0x558>)
   82a12:	4642      	mov	r2, r8
   82a14:	4621      	mov	r1, r4
   82a16:	46b0      	mov	r8, r6
   82a18:	f04f 0b10 	mov.w	fp, #16
   82a1c:	462e      	mov	r6, r5
   82a1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82a20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82a22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82a24:	e004      	b.n	82a30 <_svfprintf_r+0x374>
   82a26:	3f10      	subs	r7, #16
   82a28:	2f10      	cmp	r7, #16
   82a2a:	f102 0208 	add.w	r2, r2, #8
   82a2e:	dd15      	ble.n	82a5c <_svfprintf_r+0x3a0>
   82a30:	3301      	adds	r3, #1
   82a32:	3110      	adds	r1, #16
   82a34:	2b07      	cmp	r3, #7
   82a36:	9127      	str	r1, [sp, #156]	; 0x9c
   82a38:	9326      	str	r3, [sp, #152]	; 0x98
   82a3a:	e882 0840 	stmia.w	r2, {r6, fp}
   82a3e:	ddf2      	ble.n	82a26 <_svfprintf_r+0x36a>
   82a40:	aa25      	add	r2, sp, #148	; 0x94
   82a42:	4629      	mov	r1, r5
   82a44:	4620      	mov	r0, r4
   82a46:	f002 ff55 	bl	858f4 <__ssprint_r>
   82a4a:	2800      	cmp	r0, #0
   82a4c:	f47f af13 	bne.w	82876 <_svfprintf_r+0x1ba>
   82a50:	3f10      	subs	r7, #16
   82a52:	2f10      	cmp	r7, #16
   82a54:	464a      	mov	r2, r9
   82a56:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82a58:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82a5a:	dce9      	bgt.n	82a30 <_svfprintf_r+0x374>
   82a5c:	4635      	mov	r5, r6
   82a5e:	460c      	mov	r4, r1
   82a60:	4646      	mov	r6, r8
   82a62:	4690      	mov	r8, r2
   82a64:	3301      	adds	r3, #1
   82a66:	443c      	add	r4, r7
   82a68:	2b07      	cmp	r3, #7
   82a6a:	9427      	str	r4, [sp, #156]	; 0x9c
   82a6c:	9326      	str	r3, [sp, #152]	; 0x98
   82a6e:	e888 00a0 	stmia.w	r8, {r5, r7}
   82a72:	f300 8370 	bgt.w	83156 <_svfprintf_r+0xa9a>
   82a76:	f108 0808 	add.w	r8, r8, #8
   82a7a:	9b07      	ldr	r3, [sp, #28]
   82a7c:	05df      	lsls	r7, r3, #23
   82a7e:	f100 8264 	bmi.w	82f4a <_svfprintf_r+0x88e>
   82a82:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82a84:	990e      	ldr	r1, [sp, #56]	; 0x38
   82a86:	3301      	adds	r3, #1
   82a88:	440c      	add	r4, r1
   82a8a:	2b07      	cmp	r3, #7
   82a8c:	9427      	str	r4, [sp, #156]	; 0x9c
   82a8e:	f8c8 6000 	str.w	r6, [r8]
   82a92:	f8c8 1004 	str.w	r1, [r8, #4]
   82a96:	9326      	str	r3, [sp, #152]	; 0x98
   82a98:	f300 83b3 	bgt.w	83202 <_svfprintf_r+0xb46>
   82a9c:	f108 0808 	add.w	r8, r8, #8
   82aa0:	9b07      	ldr	r3, [sp, #28]
   82aa2:	075b      	lsls	r3, r3, #29
   82aa4:	d53b      	bpl.n	82b1e <_svfprintf_r+0x462>
   82aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82aa8:	9a08      	ldr	r2, [sp, #32]
   82aaa:	1a9d      	subs	r5, r3, r2
   82aac:	2d00      	cmp	r5, #0
   82aae:	dd36      	ble.n	82b1e <_svfprintf_r+0x462>
   82ab0:	2d10      	cmp	r5, #16
   82ab2:	f340 8721 	ble.w	838f8 <_svfprintf_r+0x123c>
   82ab6:	2610      	movs	r6, #16
   82ab8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82aba:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   82abc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   82ac0:	e004      	b.n	82acc <_svfprintf_r+0x410>
   82ac2:	3d10      	subs	r5, #16
   82ac4:	2d10      	cmp	r5, #16
   82ac6:	f108 0808 	add.w	r8, r8, #8
   82aca:	dd16      	ble.n	82afa <_svfprintf_r+0x43e>
   82acc:	3301      	adds	r3, #1
   82ace:	4a50      	ldr	r2, [pc, #320]	; (82c10 <_svfprintf_r+0x554>)
   82ad0:	3410      	adds	r4, #16
   82ad2:	2b07      	cmp	r3, #7
   82ad4:	9427      	str	r4, [sp, #156]	; 0x9c
   82ad6:	9326      	str	r3, [sp, #152]	; 0x98
   82ad8:	e888 0044 	stmia.w	r8, {r2, r6}
   82adc:	ddf1      	ble.n	82ac2 <_svfprintf_r+0x406>
   82ade:	aa25      	add	r2, sp, #148	; 0x94
   82ae0:	4659      	mov	r1, fp
   82ae2:	4638      	mov	r0, r7
   82ae4:	f002 ff06 	bl	858f4 <__ssprint_r>
   82ae8:	2800      	cmp	r0, #0
   82aea:	f47f aec4 	bne.w	82876 <_svfprintf_r+0x1ba>
   82aee:	3d10      	subs	r5, #16
   82af0:	2d10      	cmp	r5, #16
   82af2:	46c8      	mov	r8, r9
   82af4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82af6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82af8:	dce8      	bgt.n	82acc <_svfprintf_r+0x410>
   82afa:	3301      	adds	r3, #1
   82afc:	4a44      	ldr	r2, [pc, #272]	; (82c10 <_svfprintf_r+0x554>)
   82afe:	442c      	add	r4, r5
   82b00:	2b07      	cmp	r3, #7
   82b02:	9427      	str	r4, [sp, #156]	; 0x9c
   82b04:	9326      	str	r3, [sp, #152]	; 0x98
   82b06:	e888 0024 	stmia.w	r8, {r2, r5}
   82b0a:	dd08      	ble.n	82b1e <_svfprintf_r+0x462>
   82b0c:	aa25      	add	r2, sp, #148	; 0x94
   82b0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82b10:	980c      	ldr	r0, [sp, #48]	; 0x30
   82b12:	f002 feef 	bl	858f4 <__ssprint_r>
   82b16:	2800      	cmp	r0, #0
   82b18:	f47f aead 	bne.w	82876 <_svfprintf_r+0x1ba>
   82b1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   82b22:	9908      	ldr	r1, [sp, #32]
   82b24:	428a      	cmp	r2, r1
   82b26:	bfac      	ite	ge
   82b28:	189b      	addge	r3, r3, r2
   82b2a:	185b      	addlt	r3, r3, r1
   82b2c:	9309      	str	r3, [sp, #36]	; 0x24
   82b2e:	2c00      	cmp	r4, #0
   82b30:	f040 82fb 	bne.w	8312a <_svfprintf_r+0xa6e>
   82b34:	2300      	movs	r3, #0
   82b36:	46c8      	mov	r8, r9
   82b38:	9326      	str	r3, [sp, #152]	; 0x98
   82b3a:	e5e6      	b.n	8270a <_svfprintf_r+0x4e>
   82b3c:	9311      	str	r3, [sp, #68]	; 0x44
   82b3e:	f01b 0320 	ands.w	r3, fp, #32
   82b42:	f040 8145 	bne.w	82dd0 <_svfprintf_r+0x714>
   82b46:	f01b 0210 	ands.w	r2, fp, #16
   82b4a:	f040 8466 	bne.w	8341a <_svfprintf_r+0xd5e>
   82b4e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   82b52:	f000 8462 	beq.w	8341a <_svfprintf_r+0xd5e>
   82b56:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82b58:	4613      	mov	r3, r2
   82b5a:	460a      	mov	r2, r1
   82b5c:	3204      	adds	r2, #4
   82b5e:	880c      	ldrh	r4, [r1, #0]
   82b60:	2500      	movs	r5, #0
   82b62:	920f      	str	r2, [sp, #60]	; 0x3c
   82b64:	e6a8      	b.n	828b8 <_svfprintf_r+0x1fc>
   82b66:	2500      	movs	r5, #0
   82b68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82b6a:	9311      	str	r3, [sp, #68]	; 0x44
   82b6c:	6816      	ldr	r6, [r2, #0]
   82b6e:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   82b72:	1d14      	adds	r4, r2, #4
   82b74:	2e00      	cmp	r6, #0
   82b76:	f000 86cd 	beq.w	83914 <_svfprintf_r+0x1258>
   82b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   82b7c:	1c53      	adds	r3, r2, #1
   82b7e:	f000 861b 	beq.w	837b8 <_svfprintf_r+0x10fc>
   82b82:	4629      	mov	r1, r5
   82b84:	4630      	mov	r0, r6
   82b86:	f002 f959 	bl	84e3c <memchr>
   82b8a:	2800      	cmp	r0, #0
   82b8c:	f000 870d 	beq.w	839aa <_svfprintf_r+0x12ee>
   82b90:	1b83      	subs	r3, r0, r6
   82b92:	950a      	str	r5, [sp, #40]	; 0x28
   82b94:	930e      	str	r3, [sp, #56]	; 0x38
   82b96:	940f      	str	r4, [sp, #60]	; 0x3c
   82b98:	f8cd b01c 	str.w	fp, [sp, #28]
   82b9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   82ba0:	9308      	str	r3, [sp, #32]
   82ba2:	9512      	str	r5, [sp, #72]	; 0x48
   82ba4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82ba8:	e6ac      	b.n	82904 <_svfprintf_r+0x248>
   82baa:	f89a 3000 	ldrb.w	r3, [sl]
   82bae:	f10a 0401 	add.w	r4, sl, #1
   82bb2:	2b2a      	cmp	r3, #42	; 0x2a
   82bb4:	f000 87c2 	beq.w	83b3c <_svfprintf_r+0x1480>
   82bb8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82bbc:	2809      	cmp	r0, #9
   82bbe:	46a2      	mov	sl, r4
   82bc0:	f200 8718 	bhi.w	839f4 <_svfprintf_r+0x1338>
   82bc4:	2300      	movs	r3, #0
   82bc6:	461c      	mov	r4, r3
   82bc8:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82bcc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82bd0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82bd4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82bd8:	2809      	cmp	r0, #9
   82bda:	d9f5      	bls.n	82bc8 <_svfprintf_r+0x50c>
   82bdc:	940a      	str	r4, [sp, #40]	; 0x28
   82bde:	e5c9      	b.n	82774 <_svfprintf_r+0xb8>
   82be0:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   82be4:	f89a 3000 	ldrb.w	r3, [sl]
   82be8:	e5c2      	b.n	82770 <_svfprintf_r+0xb4>
   82bea:	f04b 0b10 	orr.w	fp, fp, #16
   82bee:	f01b 0f20 	tst.w	fp, #32
   82bf2:	9311      	str	r3, [sp, #68]	; 0x44
   82bf4:	f43f ae51 	beq.w	8289a <_svfprintf_r+0x1de>
   82bf8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82bfa:	3407      	adds	r4, #7
   82bfc:	f024 0307 	bic.w	r3, r4, #7
   82c00:	f103 0208 	add.w	r2, r3, #8
   82c04:	e9d3 4500 	ldrd	r4, r5, [r3]
   82c08:	920f      	str	r2, [sp, #60]	; 0x3c
   82c0a:	2301      	movs	r3, #1
   82c0c:	e654      	b.n	828b8 <_svfprintf_r+0x1fc>
   82c0e:	bf00      	nop
   82c10:	00086864 	.word	0x00086864
   82c14:	00086874 	.word	0x00086874
   82c18:	9311      	str	r3, [sp, #68]	; 0x44
   82c1a:	2a00      	cmp	r2, #0
   82c1c:	f040 87ad 	bne.w	83b7a <_svfprintf_r+0x14be>
   82c20:	4bbe      	ldr	r3, [pc, #760]	; (82f1c <_svfprintf_r+0x860>)
   82c22:	f01b 0f20 	tst.w	fp, #32
   82c26:	9318      	str	r3, [sp, #96]	; 0x60
   82c28:	f040 80e7 	bne.w	82dfa <_svfprintf_r+0x73e>
   82c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82c2e:	f01b 0f10 	tst.w	fp, #16
   82c32:	4613      	mov	r3, r2
   82c34:	f040 83d8 	bne.w	833e8 <_svfprintf_r+0xd2c>
   82c38:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82c3c:	f000 83d4 	beq.w	833e8 <_svfprintf_r+0xd2c>
   82c40:	2500      	movs	r5, #0
   82c42:	3304      	adds	r3, #4
   82c44:	8814      	ldrh	r4, [r2, #0]
   82c46:	930f      	str	r3, [sp, #60]	; 0x3c
   82c48:	f01b 0f01 	tst.w	fp, #1
   82c4c:	f000 80e3 	beq.w	82e16 <_svfprintf_r+0x75a>
   82c50:	ea54 0305 	orrs.w	r3, r4, r5
   82c54:	f000 80df 	beq.w	82e16 <_svfprintf_r+0x75a>
   82c58:	2330      	movs	r3, #48	; 0x30
   82c5a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   82c5e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   82c62:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   82c66:	f04b 0b02 	orr.w	fp, fp, #2
   82c6a:	2302      	movs	r3, #2
   82c6c:	e624      	b.n	828b8 <_svfprintf_r+0x1fc>
   82c6e:	2201      	movs	r2, #1
   82c70:	9311      	str	r3, [sp, #68]	; 0x44
   82c72:	2300      	movs	r3, #0
   82c74:	4611      	mov	r1, r2
   82c76:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82c78:	9208      	str	r2, [sp, #32]
   82c7a:	6802      	ldr	r2, [r0, #0]
   82c7c:	461f      	mov	r7, r3
   82c7e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82c82:	930a      	str	r3, [sp, #40]	; 0x28
   82c84:	9312      	str	r3, [sp, #72]	; 0x48
   82c86:	1d03      	adds	r3, r0, #4
   82c88:	f8cd b01c 	str.w	fp, [sp, #28]
   82c8c:	910e      	str	r1, [sp, #56]	; 0x38
   82c8e:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82c92:	930f      	str	r3, [sp, #60]	; 0x3c
   82c94:	ae28      	add	r6, sp, #160	; 0xa0
   82c96:	e639      	b.n	8290c <_svfprintf_r+0x250>
   82c98:	9311      	str	r3, [sp, #68]	; 0x44
   82c9a:	2a00      	cmp	r2, #0
   82c9c:	f040 8784 	bne.w	83ba8 <_svfprintf_r+0x14ec>
   82ca0:	f04b 0b10 	orr.w	fp, fp, #16
   82ca4:	f01b 0f20 	tst.w	fp, #32
   82ca8:	f040 8475 	bne.w	83596 <_svfprintf_r+0xeda>
   82cac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82cae:	f01b 0f10 	tst.w	fp, #16
   82cb2:	4613      	mov	r3, r2
   82cb4:	f040 839d 	bne.w	833f2 <_svfprintf_r+0xd36>
   82cb8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82cbc:	f000 8399 	beq.w	833f2 <_svfprintf_r+0xd36>
   82cc0:	f9b2 4000 	ldrsh.w	r4, [r2]
   82cc4:	3304      	adds	r3, #4
   82cc6:	17e5      	asrs	r5, r4, #31
   82cc8:	930f      	str	r3, [sp, #60]	; 0x3c
   82cca:	4622      	mov	r2, r4
   82ccc:	462b      	mov	r3, r5
   82cce:	2a00      	cmp	r2, #0
   82cd0:	f173 0300 	sbcs.w	r3, r3, #0
   82cd4:	f2c0 8398 	blt.w	83408 <_svfprintf_r+0xd4c>
   82cd8:	990a      	ldr	r1, [sp, #40]	; 0x28
   82cda:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82cde:	1c4a      	adds	r2, r1, #1
   82ce0:	f04f 0301 	mov.w	r3, #1
   82ce4:	f47f adf0 	bne.w	828c8 <_svfprintf_r+0x20c>
   82ce8:	ea54 0205 	orrs.w	r2, r4, r5
   82cec:	f000 8229 	beq.w	83142 <_svfprintf_r+0xa86>
   82cf0:	f8cd b01c 	str.w	fp, [sp, #28]
   82cf4:	2b01      	cmp	r3, #1
   82cf6:	f000 830e 	beq.w	83316 <_svfprintf_r+0xc5a>
   82cfa:	2b02      	cmp	r3, #2
   82cfc:	f040 829c 	bne.w	83238 <_svfprintf_r+0xb7c>
   82d00:	464e      	mov	r6, r9
   82d02:	9818      	ldr	r0, [sp, #96]	; 0x60
   82d04:	0923      	lsrs	r3, r4, #4
   82d06:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   82d0a:	0929      	lsrs	r1, r5, #4
   82d0c:	f004 020f 	and.w	r2, r4, #15
   82d10:	460d      	mov	r5, r1
   82d12:	461c      	mov	r4, r3
   82d14:	5c83      	ldrb	r3, [r0, r2]
   82d16:	f806 3d01 	strb.w	r3, [r6, #-1]!
   82d1a:	ea54 0305 	orrs.w	r3, r4, r5
   82d1e:	d1f1      	bne.n	82d04 <_svfprintf_r+0x648>
   82d20:	eba9 0306 	sub.w	r3, r9, r6
   82d24:	930e      	str	r3, [sp, #56]	; 0x38
   82d26:	e5e5      	b.n	828f4 <_svfprintf_r+0x238>
   82d28:	9311      	str	r3, [sp, #68]	; 0x44
   82d2a:	2a00      	cmp	r2, #0
   82d2c:	f040 8738 	bne.w	83ba0 <_svfprintf_r+0x14e4>
   82d30:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82d32:	f01b 0f08 	tst.w	fp, #8
   82d36:	f104 0407 	add.w	r4, r4, #7
   82d3a:	f000 84cf 	beq.w	836dc <_svfprintf_r+0x1020>
   82d3e:	f024 0307 	bic.w	r3, r4, #7
   82d42:	f103 0208 	add.w	r2, r3, #8
   82d46:	920f      	str	r2, [sp, #60]	; 0x3c
   82d48:	681a      	ldr	r2, [r3, #0]
   82d4a:	685b      	ldr	r3, [r3, #4]
   82d4c:	9215      	str	r2, [sp, #84]	; 0x54
   82d4e:	9314      	str	r3, [sp, #80]	; 0x50
   82d50:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82d52:	9d15      	ldr	r5, [sp, #84]	; 0x54
   82d54:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   82d58:	4628      	mov	r0, r5
   82d5a:	4621      	mov	r1, r4
   82d5c:	f04f 32ff 	mov.w	r2, #4294967295
   82d60:	4b6f      	ldr	r3, [pc, #444]	; (82f20 <_svfprintf_r+0x864>)
   82d62:	f003 fb35 	bl	863d0 <__aeabi_dcmpun>
   82d66:	2800      	cmp	r0, #0
   82d68:	f040 8434 	bne.w	835d4 <_svfprintf_r+0xf18>
   82d6c:	4628      	mov	r0, r5
   82d6e:	4621      	mov	r1, r4
   82d70:	f04f 32ff 	mov.w	r2, #4294967295
   82d74:	4b6a      	ldr	r3, [pc, #424]	; (82f20 <_svfprintf_r+0x864>)
   82d76:	f003 fb0d 	bl	86394 <__aeabi_dcmple>
   82d7a:	2800      	cmp	r0, #0
   82d7c:	f040 842a 	bne.w	835d4 <_svfprintf_r+0xf18>
   82d80:	a815      	add	r0, sp, #84	; 0x54
   82d82:	c80d      	ldmia	r0, {r0, r2, r3}
   82d84:	9914      	ldr	r1, [sp, #80]	; 0x50
   82d86:	f003 fafb 	bl	86380 <__aeabi_dcmplt>
   82d8a:	2800      	cmp	r0, #0
   82d8c:	f040 85d4 	bne.w	83938 <_svfprintf_r+0x127c>
   82d90:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82d94:	2303      	movs	r3, #3
   82d96:	461a      	mov	r2, r3
   82d98:	9308      	str	r3, [sp, #32]
   82d9a:	2300      	movs	r3, #0
   82d9c:	4e61      	ldr	r6, [pc, #388]	; (82f24 <_svfprintf_r+0x868>)
   82d9e:	4619      	mov	r1, r3
   82da0:	930a      	str	r3, [sp, #40]	; 0x28
   82da2:	4b61      	ldr	r3, [pc, #388]	; (82f28 <_svfprintf_r+0x86c>)
   82da4:	920e      	str	r2, [sp, #56]	; 0x38
   82da6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82da8:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   82dac:	9007      	str	r0, [sp, #28]
   82dae:	9112      	str	r1, [sp, #72]	; 0x48
   82db0:	2a47      	cmp	r2, #71	; 0x47
   82db2:	bfd8      	it	le
   82db4:	461e      	movle	r6, r3
   82db6:	e5a5      	b.n	82904 <_svfprintf_r+0x248>
   82db8:	f04b 0b08 	orr.w	fp, fp, #8
   82dbc:	f89a 3000 	ldrb.w	r3, [sl]
   82dc0:	e4d6      	b.n	82770 <_svfprintf_r+0xb4>
   82dc2:	f04b 0b10 	orr.w	fp, fp, #16
   82dc6:	9311      	str	r3, [sp, #68]	; 0x44
   82dc8:	f01b 0320 	ands.w	r3, fp, #32
   82dcc:	f43f aebb 	beq.w	82b46 <_svfprintf_r+0x48a>
   82dd0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82dd2:	3407      	adds	r4, #7
   82dd4:	f024 0307 	bic.w	r3, r4, #7
   82dd8:	f103 0208 	add.w	r2, r3, #8
   82ddc:	e9d3 4500 	ldrd	r4, r5, [r3]
   82de0:	920f      	str	r2, [sp, #60]	; 0x3c
   82de2:	2300      	movs	r3, #0
   82de4:	e568      	b.n	828b8 <_svfprintf_r+0x1fc>
   82de6:	9311      	str	r3, [sp, #68]	; 0x44
   82de8:	2a00      	cmp	r2, #0
   82dea:	f040 86c2 	bne.w	83b72 <_svfprintf_r+0x14b6>
   82dee:	4b4f      	ldr	r3, [pc, #316]	; (82f2c <_svfprintf_r+0x870>)
   82df0:	f01b 0f20 	tst.w	fp, #32
   82df4:	9318      	str	r3, [sp, #96]	; 0x60
   82df6:	f43f af19 	beq.w	82c2c <_svfprintf_r+0x570>
   82dfa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82dfc:	f01b 0f01 	tst.w	fp, #1
   82e00:	f104 0407 	add.w	r4, r4, #7
   82e04:	f024 0307 	bic.w	r3, r4, #7
   82e08:	f103 0208 	add.w	r2, r3, #8
   82e0c:	920f      	str	r2, [sp, #60]	; 0x3c
   82e0e:	e9d3 4500 	ldrd	r4, r5, [r3]
   82e12:	f47f af1d 	bne.w	82c50 <_svfprintf_r+0x594>
   82e16:	2302      	movs	r3, #2
   82e18:	e54e      	b.n	828b8 <_svfprintf_r+0x1fc>
   82e1a:	f89a 3000 	ldrb.w	r3, [sl]
   82e1e:	2900      	cmp	r1, #0
   82e20:	f47f aca6 	bne.w	82770 <_svfprintf_r+0xb4>
   82e24:	2201      	movs	r2, #1
   82e26:	2120      	movs	r1, #32
   82e28:	e4a2      	b.n	82770 <_svfprintf_r+0xb4>
   82e2a:	f04b 0b01 	orr.w	fp, fp, #1
   82e2e:	f89a 3000 	ldrb.w	r3, [sl]
   82e32:	e49d      	b.n	82770 <_svfprintf_r+0xb4>
   82e34:	f89a 3000 	ldrb.w	r3, [sl]
   82e38:	2201      	movs	r2, #1
   82e3a:	212b      	movs	r1, #43	; 0x2b
   82e3c:	e498      	b.n	82770 <_svfprintf_r+0xb4>
   82e3e:	f04b 0b20 	orr.w	fp, fp, #32
   82e42:	f89a 3000 	ldrb.w	r3, [sl]
   82e46:	e493      	b.n	82770 <_svfprintf_r+0xb4>
   82e48:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   82e4c:	f89a 3000 	ldrb.w	r3, [sl]
   82e50:	e48e      	b.n	82770 <_svfprintf_r+0xb4>
   82e52:	f89a 3000 	ldrb.w	r3, [sl]
   82e56:	2b6c      	cmp	r3, #108	; 0x6c
   82e58:	bf03      	ittte	eq
   82e5a:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   82e5e:	f04b 0b20 	orreq.w	fp, fp, #32
   82e62:	f10a 0a01 	addeq.w	sl, sl, #1
   82e66:	f04b 0b10 	orrne.w	fp, fp, #16
   82e6a:	e481      	b.n	82770 <_svfprintf_r+0xb4>
   82e6c:	2a00      	cmp	r2, #0
   82e6e:	f040 867c 	bne.w	83b6a <_svfprintf_r+0x14ae>
   82e72:	f01b 0f20 	tst.w	fp, #32
   82e76:	f040 8452 	bne.w	8371e <_svfprintf_r+0x1062>
   82e7a:	f01b 0f10 	tst.w	fp, #16
   82e7e:	f040 8438 	bne.w	836f2 <_svfprintf_r+0x1036>
   82e82:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82e86:	f000 8434 	beq.w	836f2 <_svfprintf_r+0x1036>
   82e8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   82e8c:	6813      	ldr	r3, [r2, #0]
   82e8e:	3204      	adds	r2, #4
   82e90:	920f      	str	r2, [sp, #60]	; 0x3c
   82e92:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   82e96:	801a      	strh	r2, [r3, #0]
   82e98:	e437      	b.n	8270a <_svfprintf_r+0x4e>
   82e9a:	2378      	movs	r3, #120	; 0x78
   82e9c:	2230      	movs	r2, #48	; 0x30
   82e9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   82ea0:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   82ea4:	9311      	str	r3, [sp, #68]	; 0x44
   82ea6:	1d03      	adds	r3, r0, #4
   82ea8:	930f      	str	r3, [sp, #60]	; 0x3c
   82eaa:	4b20      	ldr	r3, [pc, #128]	; (82f2c <_svfprintf_r+0x870>)
   82eac:	6804      	ldr	r4, [r0, #0]
   82eae:	9318      	str	r3, [sp, #96]	; 0x60
   82eb0:	f04b 0b02 	orr.w	fp, fp, #2
   82eb4:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   82eb8:	2500      	movs	r5, #0
   82eba:	2302      	movs	r3, #2
   82ebc:	e4fc      	b.n	828b8 <_svfprintf_r+0x1fc>
   82ebe:	9311      	str	r3, [sp, #68]	; 0x44
   82ec0:	2a00      	cmp	r2, #0
   82ec2:	f43f aeef 	beq.w	82ca4 <_svfprintf_r+0x5e8>
   82ec6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   82eca:	e6eb      	b.n	82ca4 <_svfprintf_r+0x5e8>
   82ecc:	2000      	movs	r0, #0
   82ece:	4604      	mov	r4, r0
   82ed0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82ed4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82ed8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82edc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82ee0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82ee4:	2809      	cmp	r0, #9
   82ee6:	d9f5      	bls.n	82ed4 <_svfprintf_r+0x818>
   82ee8:	940d      	str	r4, [sp, #52]	; 0x34
   82eea:	e443      	b.n	82774 <_svfprintf_r+0xb8>
   82eec:	9311      	str	r3, [sp, #68]	; 0x44
   82eee:	2a00      	cmp	r2, #0
   82ef0:	f040 864a 	bne.w	83b88 <_svfprintf_r+0x14cc>
   82ef4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ef6:	2a00      	cmp	r2, #0
   82ef8:	f43f acb6 	beq.w	82868 <_svfprintf_r+0x1ac>
   82efc:	2300      	movs	r3, #0
   82efe:	2101      	movs	r1, #1
   82f00:	461f      	mov	r7, r3
   82f02:	9108      	str	r1, [sp, #32]
   82f04:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82f08:	f8cd b01c 	str.w	fp, [sp, #28]
   82f0c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82f10:	930a      	str	r3, [sp, #40]	; 0x28
   82f12:	9312      	str	r3, [sp, #72]	; 0x48
   82f14:	910e      	str	r1, [sp, #56]	; 0x38
   82f16:	ae28      	add	r6, sp, #160	; 0xa0
   82f18:	e4f8      	b.n	8290c <_svfprintf_r+0x250>
   82f1a:	bf00      	nop
   82f1c:	00086830 	.word	0x00086830
   82f20:	7fefffff 	.word	0x7fefffff
   82f24:	00086824 	.word	0x00086824
   82f28:	00086820 	.word	0x00086820
   82f2c:	00086844 	.word	0x00086844
   82f30:	aa25      	add	r2, sp, #148	; 0x94
   82f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82f34:	980c      	ldr	r0, [sp, #48]	; 0x30
   82f36:	f002 fcdd 	bl	858f4 <__ssprint_r>
   82f3a:	2800      	cmp	r0, #0
   82f3c:	f47f ac9b 	bne.w	82876 <_svfprintf_r+0x1ba>
   82f40:	46c8      	mov	r8, r9
   82f42:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82f46:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82f48:	e533      	b.n	829b2 <_svfprintf_r+0x2f6>
   82f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82f4c:	2b65      	cmp	r3, #101	; 0x65
   82f4e:	f340 809a 	ble.w	83086 <_svfprintf_r+0x9ca>
   82f52:	a815      	add	r0, sp, #84	; 0x54
   82f54:	c80d      	ldmia	r0, {r0, r2, r3}
   82f56:	9914      	ldr	r1, [sp, #80]	; 0x50
   82f58:	f003 fa08 	bl	8636c <__aeabi_dcmpeq>
   82f5c:	2800      	cmp	r0, #0
   82f5e:	f000 8193 	beq.w	83288 <_svfprintf_r+0xbcc>
   82f62:	2101      	movs	r1, #1
   82f64:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f66:	4ab5      	ldr	r2, [pc, #724]	; (8323c <_svfprintf_r+0xb80>)
   82f68:	440b      	add	r3, r1
   82f6a:	440c      	add	r4, r1
   82f6c:	2b07      	cmp	r3, #7
   82f6e:	9427      	str	r4, [sp, #156]	; 0x9c
   82f70:	9326      	str	r3, [sp, #152]	; 0x98
   82f72:	f8c8 1004 	str.w	r1, [r8, #4]
   82f76:	f8c8 2000 	str.w	r2, [r8]
   82f7a:	f300 83c6 	bgt.w	8370a <_svfprintf_r+0x104e>
   82f7e:	f108 0808 	add.w	r8, r8, #8
   82f82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82f84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82f86:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82f88:	4293      	cmp	r3, r2
   82f8a:	db03      	blt.n	82f94 <_svfprintf_r+0x8d8>
   82f8c:	9b07      	ldr	r3, [sp, #28]
   82f8e:	07dd      	lsls	r5, r3, #31
   82f90:	f57f ad86 	bpl.w	82aa0 <_svfprintf_r+0x3e4>
   82f94:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82f96:	9919      	ldr	r1, [sp, #100]	; 0x64
   82f98:	3301      	adds	r3, #1
   82f9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82f9c:	440c      	add	r4, r1
   82f9e:	2b07      	cmp	r3, #7
   82fa0:	f8c8 2000 	str.w	r2, [r8]
   82fa4:	f8c8 1004 	str.w	r1, [r8, #4]
   82fa8:	9427      	str	r4, [sp, #156]	; 0x9c
   82faa:	9326      	str	r3, [sp, #152]	; 0x98
   82fac:	f300 83c4 	bgt.w	83738 <_svfprintf_r+0x107c>
   82fb0:	f108 0808 	add.w	r8, r8, #8
   82fb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82fb6:	1e5e      	subs	r6, r3, #1
   82fb8:	2e00      	cmp	r6, #0
   82fba:	f77f ad71 	ble.w	82aa0 <_svfprintf_r+0x3e4>
   82fbe:	2e10      	cmp	r6, #16
   82fc0:	f340 8575 	ble.w	83aae <_svfprintf_r+0x13f2>
   82fc4:	4622      	mov	r2, r4
   82fc6:	2710      	movs	r7, #16
   82fc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82fca:	4d9d      	ldr	r5, [pc, #628]	; (83240 <_svfprintf_r+0xb84>)
   82fcc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82fd0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82fd2:	e005      	b.n	82fe0 <_svfprintf_r+0x924>
   82fd4:	f108 0808 	add.w	r8, r8, #8
   82fd8:	3e10      	subs	r6, #16
   82fda:	2e10      	cmp	r6, #16
   82fdc:	f340 8225 	ble.w	8342a <_svfprintf_r+0xd6e>
   82fe0:	3301      	adds	r3, #1
   82fe2:	3210      	adds	r2, #16
   82fe4:	2b07      	cmp	r3, #7
   82fe6:	9227      	str	r2, [sp, #156]	; 0x9c
   82fe8:	9326      	str	r3, [sp, #152]	; 0x98
   82fea:	e888 00a0 	stmia.w	r8, {r5, r7}
   82fee:	ddf1      	ble.n	82fd4 <_svfprintf_r+0x918>
   82ff0:	aa25      	add	r2, sp, #148	; 0x94
   82ff2:	4621      	mov	r1, r4
   82ff4:	4658      	mov	r0, fp
   82ff6:	f002 fc7d 	bl	858f4 <__ssprint_r>
   82ffa:	2800      	cmp	r0, #0
   82ffc:	f47f ac3b 	bne.w	82876 <_svfprintf_r+0x1ba>
   83000:	46c8      	mov	r8, r9
   83002:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83004:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83006:	e7e7      	b.n	82fd8 <_svfprintf_r+0x91c>
   83008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8300a:	9a08      	ldr	r2, [sp, #32]
   8300c:	1a9f      	subs	r7, r3, r2
   8300e:	2f00      	cmp	r7, #0
   83010:	f77f acf6 	ble.w	82a00 <_svfprintf_r+0x344>
   83014:	2f10      	cmp	r7, #16
   83016:	f340 84a8 	ble.w	8396a <_svfprintf_r+0x12ae>
   8301a:	4d89      	ldr	r5, [pc, #548]	; (83240 <_svfprintf_r+0xb84>)
   8301c:	4642      	mov	r2, r8
   8301e:	4621      	mov	r1, r4
   83020:	46b0      	mov	r8, r6
   83022:	f04f 0b10 	mov.w	fp, #16
   83026:	462e      	mov	r6, r5
   83028:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8302a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8302c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8302e:	e004      	b.n	8303a <_svfprintf_r+0x97e>
   83030:	3f10      	subs	r7, #16
   83032:	2f10      	cmp	r7, #16
   83034:	f102 0208 	add.w	r2, r2, #8
   83038:	dd15      	ble.n	83066 <_svfprintf_r+0x9aa>
   8303a:	3301      	adds	r3, #1
   8303c:	3110      	adds	r1, #16
   8303e:	2b07      	cmp	r3, #7
   83040:	9127      	str	r1, [sp, #156]	; 0x9c
   83042:	9326      	str	r3, [sp, #152]	; 0x98
   83044:	e882 0840 	stmia.w	r2, {r6, fp}
   83048:	ddf2      	ble.n	83030 <_svfprintf_r+0x974>
   8304a:	aa25      	add	r2, sp, #148	; 0x94
   8304c:	4629      	mov	r1, r5
   8304e:	4620      	mov	r0, r4
   83050:	f002 fc50 	bl	858f4 <__ssprint_r>
   83054:	2800      	cmp	r0, #0
   83056:	f47f ac0e 	bne.w	82876 <_svfprintf_r+0x1ba>
   8305a:	3f10      	subs	r7, #16
   8305c:	2f10      	cmp	r7, #16
   8305e:	464a      	mov	r2, r9
   83060:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83062:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83064:	dce9      	bgt.n	8303a <_svfprintf_r+0x97e>
   83066:	4635      	mov	r5, r6
   83068:	460c      	mov	r4, r1
   8306a:	4646      	mov	r6, r8
   8306c:	4690      	mov	r8, r2
   8306e:	3301      	adds	r3, #1
   83070:	443c      	add	r4, r7
   83072:	2b07      	cmp	r3, #7
   83074:	9427      	str	r4, [sp, #156]	; 0x9c
   83076:	9326      	str	r3, [sp, #152]	; 0x98
   83078:	e888 00a0 	stmia.w	r8, {r5, r7}
   8307c:	f300 829e 	bgt.w	835bc <_svfprintf_r+0xf00>
   83080:	f108 0808 	add.w	r8, r8, #8
   83084:	e4bc      	b.n	82a00 <_svfprintf_r+0x344>
   83086:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83088:	2b01      	cmp	r3, #1
   8308a:	f340 824f 	ble.w	8352c <_svfprintf_r+0xe70>
   8308e:	2301      	movs	r3, #1
   83090:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83092:	441c      	add	r4, r3
   83094:	441f      	add	r7, r3
   83096:	2f07      	cmp	r7, #7
   83098:	9427      	str	r4, [sp, #156]	; 0x9c
   8309a:	f8c8 6000 	str.w	r6, [r8]
   8309e:	9726      	str	r7, [sp, #152]	; 0x98
   830a0:	f8c8 3004 	str.w	r3, [r8, #4]
   830a4:	f300 825f 	bgt.w	83566 <_svfprintf_r+0xeaa>
   830a8:	f108 0808 	add.w	r8, r8, #8
   830ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
   830ae:	3701      	adds	r7, #1
   830b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   830b2:	4414      	add	r4, r2
   830b4:	2f07      	cmp	r7, #7
   830b6:	9427      	str	r4, [sp, #156]	; 0x9c
   830b8:	9726      	str	r7, [sp, #152]	; 0x98
   830ba:	f8c8 3000 	str.w	r3, [r8]
   830be:	f8c8 2004 	str.w	r2, [r8, #4]
   830c2:	f300 825c 	bgt.w	8357e <_svfprintf_r+0xec2>
   830c6:	f108 0808 	add.w	r8, r8, #8
   830ca:	a815      	add	r0, sp, #84	; 0x54
   830cc:	c80d      	ldmia	r0, {r0, r2, r3}
   830ce:	9914      	ldr	r1, [sp, #80]	; 0x50
   830d0:	f003 f94c 	bl	8636c <__aeabi_dcmpeq>
   830d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   830d6:	2800      	cmp	r0, #0
   830d8:	f040 8141 	bne.w	8335e <_svfprintf_r+0xca2>
   830dc:	3b01      	subs	r3, #1
   830de:	3701      	adds	r7, #1
   830e0:	3601      	adds	r6, #1
   830e2:	441c      	add	r4, r3
   830e4:	2f07      	cmp	r7, #7
   830e6:	f8c8 6000 	str.w	r6, [r8]
   830ea:	9726      	str	r7, [sp, #152]	; 0x98
   830ec:	9427      	str	r4, [sp, #156]	; 0x9c
   830ee:	f8c8 3004 	str.w	r3, [r8, #4]
   830f2:	f300 8166 	bgt.w	833c2 <_svfprintf_r+0xd06>
   830f6:	f108 0808 	add.w	r8, r8, #8
   830fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   830fc:	3701      	adds	r7, #1
   830fe:	4414      	add	r4, r2
   83100:	ab21      	add	r3, sp, #132	; 0x84
   83102:	2f07      	cmp	r7, #7
   83104:	9427      	str	r4, [sp, #156]	; 0x9c
   83106:	9726      	str	r7, [sp, #152]	; 0x98
   83108:	f8c8 2004 	str.w	r2, [r8, #4]
   8310c:	f8c8 3000 	str.w	r3, [r8]
   83110:	f77f acc4 	ble.w	82a9c <_svfprintf_r+0x3e0>
   83114:	aa25      	add	r2, sp, #148	; 0x94
   83116:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83118:	980c      	ldr	r0, [sp, #48]	; 0x30
   8311a:	f002 fbeb 	bl	858f4 <__ssprint_r>
   8311e:	2800      	cmp	r0, #0
   83120:	f47f aba9 	bne.w	82876 <_svfprintf_r+0x1ba>
   83124:	46c8      	mov	r8, r9
   83126:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83128:	e4ba      	b.n	82aa0 <_svfprintf_r+0x3e4>
   8312a:	aa25      	add	r2, sp, #148	; 0x94
   8312c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8312e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83130:	f002 fbe0 	bl	858f4 <__ssprint_r>
   83134:	2800      	cmp	r0, #0
   83136:	f43f acfd 	beq.w	82b34 <_svfprintf_r+0x478>
   8313a:	f7ff bb9c 	b.w	82876 <_svfprintf_r+0x1ba>
   8313e:	f8dd b01c 	ldr.w	fp, [sp, #28]
   83142:	2b01      	cmp	r3, #1
   83144:	f000 817e 	beq.w	83444 <_svfprintf_r+0xd88>
   83148:	2b02      	cmp	r3, #2
   8314a:	d171      	bne.n	83230 <_svfprintf_r+0xb74>
   8314c:	f8cd b01c 	str.w	fp, [sp, #28]
   83150:	2400      	movs	r4, #0
   83152:	2500      	movs	r5, #0
   83154:	e5d4      	b.n	82d00 <_svfprintf_r+0x644>
   83156:	aa25      	add	r2, sp, #148	; 0x94
   83158:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8315a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8315c:	f002 fbca 	bl	858f4 <__ssprint_r>
   83160:	2800      	cmp	r0, #0
   83162:	f47f ab88 	bne.w	82876 <_svfprintf_r+0x1ba>
   83166:	46c8      	mov	r8, r9
   83168:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8316a:	e486      	b.n	82a7a <_svfprintf_r+0x3be>
   8316c:	aa25      	add	r2, sp, #148	; 0x94
   8316e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83170:	980c      	ldr	r0, [sp, #48]	; 0x30
   83172:	f002 fbbf 	bl	858f4 <__ssprint_r>
   83176:	2800      	cmp	r0, #0
   83178:	f47f ab7d 	bne.w	82876 <_svfprintf_r+0x1ba>
   8317c:	46c8      	mov	r8, r9
   8317e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83180:	e429      	b.n	829d6 <_svfprintf_r+0x31a>
   83182:	2001      	movs	r0, #1
   83184:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83186:	4a2d      	ldr	r2, [pc, #180]	; (8323c <_svfprintf_r+0xb80>)
   83188:	4403      	add	r3, r0
   8318a:	4404      	add	r4, r0
   8318c:	2b07      	cmp	r3, #7
   8318e:	9427      	str	r4, [sp, #156]	; 0x9c
   83190:	9326      	str	r3, [sp, #152]	; 0x98
   83192:	f8c8 0004 	str.w	r0, [r8, #4]
   83196:	f8c8 2000 	str.w	r2, [r8]
   8319a:	f340 82d8 	ble.w	8374e <_svfprintf_r+0x1092>
   8319e:	aa25      	add	r2, sp, #148	; 0x94
   831a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   831a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   831a4:	f002 fba6 	bl	858f4 <__ssprint_r>
   831a8:	2800      	cmp	r0, #0
   831aa:	f47f ab64 	bne.w	82876 <_svfprintf_r+0x1ba>
   831ae:	46c8      	mov	r8, r9
   831b0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   831b2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   831b4:	b929      	cbnz	r1, 831c2 <_svfprintf_r+0xb06>
   831b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   831b8:	b91b      	cbnz	r3, 831c2 <_svfprintf_r+0xb06>
   831ba:	9b07      	ldr	r3, [sp, #28]
   831bc:	07d8      	lsls	r0, r3, #31
   831be:	f57f ac6f 	bpl.w	82aa0 <_svfprintf_r+0x3e4>
   831c2:	9819      	ldr	r0, [sp, #100]	; 0x64
   831c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   831c6:	4602      	mov	r2, r0
   831c8:	3301      	adds	r3, #1
   831ca:	4422      	add	r2, r4
   831cc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   831ce:	2b07      	cmp	r3, #7
   831d0:	9227      	str	r2, [sp, #156]	; 0x9c
   831d2:	f8c8 4000 	str.w	r4, [r8]
   831d6:	f8c8 0004 	str.w	r0, [r8, #4]
   831da:	9326      	str	r3, [sp, #152]	; 0x98
   831dc:	f300 8431 	bgt.w	83a42 <_svfprintf_r+0x1386>
   831e0:	f108 0808 	add.w	r8, r8, #8
   831e4:	2900      	cmp	r1, #0
   831e6:	f2c0 8409 	blt.w	839fc <_svfprintf_r+0x1340>
   831ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
   831ec:	3301      	adds	r3, #1
   831ee:	188c      	adds	r4, r1, r2
   831f0:	2b07      	cmp	r3, #7
   831f2:	9427      	str	r4, [sp, #156]	; 0x9c
   831f4:	9326      	str	r3, [sp, #152]	; 0x98
   831f6:	f8c8 6000 	str.w	r6, [r8]
   831fa:	f8c8 1004 	str.w	r1, [r8, #4]
   831fe:	f77f ac4d 	ble.w	82a9c <_svfprintf_r+0x3e0>
   83202:	aa25      	add	r2, sp, #148	; 0x94
   83204:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83206:	980c      	ldr	r0, [sp, #48]	; 0x30
   83208:	f002 fb74 	bl	858f4 <__ssprint_r>
   8320c:	2800      	cmp	r0, #0
   8320e:	f47f ab32 	bne.w	82876 <_svfprintf_r+0x1ba>
   83212:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83214:	46c8      	mov	r8, r9
   83216:	e443      	b.n	82aa0 <_svfprintf_r+0x3e4>
   83218:	aa25      	add	r2, sp, #148	; 0x94
   8321a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8321c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8321e:	f002 fb69 	bl	858f4 <__ssprint_r>
   83222:	2800      	cmp	r0, #0
   83224:	f47f ab27 	bne.w	82876 <_svfprintf_r+0x1ba>
   83228:	46c8      	mov	r8, r9
   8322a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8322c:	f7ff bbe5 	b.w	829fa <_svfprintf_r+0x33e>
   83230:	2400      	movs	r4, #0
   83232:	2500      	movs	r5, #0
   83234:	f8cd b01c 	str.w	fp, [sp, #28]
   83238:	4649      	mov	r1, r9
   8323a:	e004      	b.n	83246 <_svfprintf_r+0xb8a>
   8323c:	00086860 	.word	0x00086860
   83240:	00086874 	.word	0x00086874
   83244:	4631      	mov	r1, r6
   83246:	08e2      	lsrs	r2, r4, #3
   83248:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   8324c:	08e8      	lsrs	r0, r5, #3
   8324e:	f004 0307 	and.w	r3, r4, #7
   83252:	4605      	mov	r5, r0
   83254:	4614      	mov	r4, r2
   83256:	3330      	adds	r3, #48	; 0x30
   83258:	ea54 0205 	orrs.w	r2, r4, r5
   8325c:	f801 3c01 	strb.w	r3, [r1, #-1]
   83260:	f101 36ff 	add.w	r6, r1, #4294967295
   83264:	d1ee      	bne.n	83244 <_svfprintf_r+0xb88>
   83266:	9a07      	ldr	r2, [sp, #28]
   83268:	07d2      	lsls	r2, r2, #31
   8326a:	f57f ad59 	bpl.w	82d20 <_svfprintf_r+0x664>
   8326e:	2b30      	cmp	r3, #48	; 0x30
   83270:	f43f ad56 	beq.w	82d20 <_svfprintf_r+0x664>
   83274:	2330      	movs	r3, #48	; 0x30
   83276:	3902      	subs	r1, #2
   83278:	f806 3c01 	strb.w	r3, [r6, #-1]
   8327c:	eba9 0301 	sub.w	r3, r9, r1
   83280:	930e      	str	r3, [sp, #56]	; 0x38
   83282:	460e      	mov	r6, r1
   83284:	f7ff bb36 	b.w	828f4 <_svfprintf_r+0x238>
   83288:	991f      	ldr	r1, [sp, #124]	; 0x7c
   8328a:	2900      	cmp	r1, #0
   8328c:	f77f af79 	ble.w	83182 <_svfprintf_r+0xac6>
   83290:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83292:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   83294:	4293      	cmp	r3, r2
   83296:	bfa8      	it	ge
   83298:	4613      	movge	r3, r2
   8329a:	2b00      	cmp	r3, #0
   8329c:	461f      	mov	r7, r3
   8329e:	dd0b      	ble.n	832b8 <_svfprintf_r+0xbfc>
   832a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   832a2:	443c      	add	r4, r7
   832a4:	3301      	adds	r3, #1
   832a6:	2b07      	cmp	r3, #7
   832a8:	9427      	str	r4, [sp, #156]	; 0x9c
   832aa:	e888 00c0 	stmia.w	r8, {r6, r7}
   832ae:	9326      	str	r3, [sp, #152]	; 0x98
   832b0:	f300 82fb 	bgt.w	838aa <_svfprintf_r+0x11ee>
   832b4:	f108 0808 	add.w	r8, r8, #8
   832b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   832ba:	2f00      	cmp	r7, #0
   832bc:	bfa8      	it	ge
   832be:	1bdb      	subge	r3, r3, r7
   832c0:	2b00      	cmp	r3, #0
   832c2:	461f      	mov	r7, r3
   832c4:	f340 80d7 	ble.w	83476 <_svfprintf_r+0xdba>
   832c8:	2b10      	cmp	r3, #16
   832ca:	f340 8434 	ble.w	83b36 <_svfprintf_r+0x147a>
   832ce:	4dba      	ldr	r5, [pc, #744]	; (835b8 <_svfprintf_r+0xefc>)
   832d0:	4642      	mov	r2, r8
   832d2:	4621      	mov	r1, r4
   832d4:	46b0      	mov	r8, r6
   832d6:	f04f 0b10 	mov.w	fp, #16
   832da:	462e      	mov	r6, r5
   832dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   832de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   832e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   832e2:	e004      	b.n	832ee <_svfprintf_r+0xc32>
   832e4:	3208      	adds	r2, #8
   832e6:	3f10      	subs	r7, #16
   832e8:	2f10      	cmp	r7, #16
   832ea:	f340 80b5 	ble.w	83458 <_svfprintf_r+0xd9c>
   832ee:	3301      	adds	r3, #1
   832f0:	3110      	adds	r1, #16
   832f2:	2b07      	cmp	r3, #7
   832f4:	9127      	str	r1, [sp, #156]	; 0x9c
   832f6:	9326      	str	r3, [sp, #152]	; 0x98
   832f8:	e882 0840 	stmia.w	r2, {r6, fp}
   832fc:	ddf2      	ble.n	832e4 <_svfprintf_r+0xc28>
   832fe:	aa25      	add	r2, sp, #148	; 0x94
   83300:	4629      	mov	r1, r5
   83302:	4620      	mov	r0, r4
   83304:	f002 faf6 	bl	858f4 <__ssprint_r>
   83308:	2800      	cmp	r0, #0
   8330a:	f47f aab4 	bne.w	82876 <_svfprintf_r+0x1ba>
   8330e:	464a      	mov	r2, r9
   83310:	9927      	ldr	r1, [sp, #156]	; 0x9c
   83312:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83314:	e7e7      	b.n	832e6 <_svfprintf_r+0xc2a>
   83316:	2d00      	cmp	r5, #0
   83318:	bf08      	it	eq
   8331a:	2c0a      	cmpeq	r4, #10
   8331c:	f0c0 8090 	bcc.w	83440 <_svfprintf_r+0xd84>
   83320:	464e      	mov	r6, r9
   83322:	4620      	mov	r0, r4
   83324:	4629      	mov	r1, r5
   83326:	220a      	movs	r2, #10
   83328:	2300      	movs	r3, #0
   8332a:	f003 f88f 	bl	8644c <__aeabi_uldivmod>
   8332e:	3230      	adds	r2, #48	; 0x30
   83330:	f806 2d01 	strb.w	r2, [r6, #-1]!
   83334:	4620      	mov	r0, r4
   83336:	4629      	mov	r1, r5
   83338:	2300      	movs	r3, #0
   8333a:	220a      	movs	r2, #10
   8333c:	f003 f886 	bl	8644c <__aeabi_uldivmod>
   83340:	4604      	mov	r4, r0
   83342:	460d      	mov	r5, r1
   83344:	ea54 0305 	orrs.w	r3, r4, r5
   83348:	d1eb      	bne.n	83322 <_svfprintf_r+0xc66>
   8334a:	eba9 0306 	sub.w	r3, r9, r6
   8334e:	930e      	str	r3, [sp, #56]	; 0x38
   83350:	f7ff bad0 	b.w	828f4 <_svfprintf_r+0x238>
   83354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83356:	464e      	mov	r6, r9
   83358:	930e      	str	r3, [sp, #56]	; 0x38
   8335a:	f7ff bacb 	b.w	828f4 <_svfprintf_r+0x238>
   8335e:	1e5e      	subs	r6, r3, #1
   83360:	2e00      	cmp	r6, #0
   83362:	f77f aeca 	ble.w	830fa <_svfprintf_r+0xa3e>
   83366:	2e10      	cmp	r6, #16
   83368:	f340 83e3 	ble.w	83b32 <_svfprintf_r+0x1476>
   8336c:	4622      	mov	r2, r4
   8336e:	f04f 0b10 	mov.w	fp, #16
   83372:	4d91      	ldr	r5, [pc, #580]	; (835b8 <_svfprintf_r+0xefc>)
   83374:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83376:	e004      	b.n	83382 <_svfprintf_r+0xcc6>
   83378:	3e10      	subs	r6, #16
   8337a:	2e10      	cmp	r6, #16
   8337c:	f108 0808 	add.w	r8, r8, #8
   83380:	dd15      	ble.n	833ae <_svfprintf_r+0xcf2>
   83382:	3701      	adds	r7, #1
   83384:	3210      	adds	r2, #16
   83386:	2f07      	cmp	r7, #7
   83388:	9227      	str	r2, [sp, #156]	; 0x9c
   8338a:	9726      	str	r7, [sp, #152]	; 0x98
   8338c:	e888 0820 	stmia.w	r8, {r5, fp}
   83390:	ddf2      	ble.n	83378 <_svfprintf_r+0xcbc>
   83392:	aa25      	add	r2, sp, #148	; 0x94
   83394:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83396:	4620      	mov	r0, r4
   83398:	f002 faac 	bl	858f4 <__ssprint_r>
   8339c:	2800      	cmp	r0, #0
   8339e:	f47f aa6a 	bne.w	82876 <_svfprintf_r+0x1ba>
   833a2:	3e10      	subs	r6, #16
   833a4:	2e10      	cmp	r6, #16
   833a6:	46c8      	mov	r8, r9
   833a8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   833aa:	9f26      	ldr	r7, [sp, #152]	; 0x98
   833ac:	dce9      	bgt.n	83382 <_svfprintf_r+0xcc6>
   833ae:	4614      	mov	r4, r2
   833b0:	3701      	adds	r7, #1
   833b2:	4434      	add	r4, r6
   833b4:	2f07      	cmp	r7, #7
   833b6:	9427      	str	r4, [sp, #156]	; 0x9c
   833b8:	9726      	str	r7, [sp, #152]	; 0x98
   833ba:	e888 0060 	stmia.w	r8, {r5, r6}
   833be:	f77f ae9a 	ble.w	830f6 <_svfprintf_r+0xa3a>
   833c2:	aa25      	add	r2, sp, #148	; 0x94
   833c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   833c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   833c8:	f002 fa94 	bl	858f4 <__ssprint_r>
   833cc:	2800      	cmp	r0, #0
   833ce:	f47f aa52 	bne.w	82876 <_svfprintf_r+0x1ba>
   833d2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   833d4:	9f26      	ldr	r7, [sp, #152]	; 0x98
   833d6:	46c8      	mov	r8, r9
   833d8:	e68f      	b.n	830fa <_svfprintf_r+0xa3e>
   833da:	3204      	adds	r2, #4
   833dc:	681c      	ldr	r4, [r3, #0]
   833de:	2500      	movs	r5, #0
   833e0:	2301      	movs	r3, #1
   833e2:	920f      	str	r2, [sp, #60]	; 0x3c
   833e4:	f7ff ba68 	b.w	828b8 <_svfprintf_r+0x1fc>
   833e8:	681c      	ldr	r4, [r3, #0]
   833ea:	3304      	adds	r3, #4
   833ec:	930f      	str	r3, [sp, #60]	; 0x3c
   833ee:	2500      	movs	r5, #0
   833f0:	e42a      	b.n	82c48 <_svfprintf_r+0x58c>
   833f2:	681c      	ldr	r4, [r3, #0]
   833f4:	3304      	adds	r3, #4
   833f6:	17e5      	asrs	r5, r4, #31
   833f8:	4622      	mov	r2, r4
   833fa:	930f      	str	r3, [sp, #60]	; 0x3c
   833fc:	462b      	mov	r3, r5
   833fe:	2a00      	cmp	r2, #0
   83400:	f173 0300 	sbcs.w	r3, r3, #0
   83404:	f6bf ac68 	bge.w	82cd8 <_svfprintf_r+0x61c>
   83408:	272d      	movs	r7, #45	; 0x2d
   8340a:	4264      	negs	r4, r4
   8340c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83410:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   83414:	2301      	movs	r3, #1
   83416:	f7ff ba53 	b.w	828c0 <_svfprintf_r+0x204>
   8341a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   8341c:	2500      	movs	r5, #0
   8341e:	460a      	mov	r2, r1
   83420:	3204      	adds	r2, #4
   83422:	680c      	ldr	r4, [r1, #0]
   83424:	920f      	str	r2, [sp, #60]	; 0x3c
   83426:	f7ff ba47 	b.w	828b8 <_svfprintf_r+0x1fc>
   8342a:	4614      	mov	r4, r2
   8342c:	3301      	adds	r3, #1
   8342e:	4434      	add	r4, r6
   83430:	2b07      	cmp	r3, #7
   83432:	9427      	str	r4, [sp, #156]	; 0x9c
   83434:	9326      	str	r3, [sp, #152]	; 0x98
   83436:	e888 0060 	stmia.w	r8, {r5, r6}
   8343a:	f77f ab2f 	ble.w	82a9c <_svfprintf_r+0x3e0>
   8343e:	e6e0      	b.n	83202 <_svfprintf_r+0xb46>
   83440:	f8dd b01c 	ldr.w	fp, [sp, #28]
   83444:	2301      	movs	r3, #1
   83446:	ae42      	add	r6, sp, #264	; 0x108
   83448:	3430      	adds	r4, #48	; 0x30
   8344a:	f8cd b01c 	str.w	fp, [sp, #28]
   8344e:	f806 4d41 	strb.w	r4, [r6, #-65]!
   83452:	930e      	str	r3, [sp, #56]	; 0x38
   83454:	f7ff ba4e 	b.w	828f4 <_svfprintf_r+0x238>
   83458:	4635      	mov	r5, r6
   8345a:	460c      	mov	r4, r1
   8345c:	4646      	mov	r6, r8
   8345e:	4690      	mov	r8, r2
   83460:	3301      	adds	r3, #1
   83462:	443c      	add	r4, r7
   83464:	2b07      	cmp	r3, #7
   83466:	9427      	str	r4, [sp, #156]	; 0x9c
   83468:	9326      	str	r3, [sp, #152]	; 0x98
   8346a:	e888 00a0 	stmia.w	r8, {r5, r7}
   8346e:	f300 8246 	bgt.w	838fe <_svfprintf_r+0x1242>
   83472:	f108 0808 	add.w	r8, r8, #8
   83476:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83478:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8347a:	429a      	cmp	r2, r3
   8347c:	db45      	blt.n	8350a <_svfprintf_r+0xe4e>
   8347e:	9b07      	ldr	r3, [sp, #28]
   83480:	07d9      	lsls	r1, r3, #31
   83482:	d442      	bmi.n	8350a <_svfprintf_r+0xe4e>
   83484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83486:	9812      	ldr	r0, [sp, #72]	; 0x48
   83488:	1a9a      	subs	r2, r3, r2
   8348a:	1a1d      	subs	r5, r3, r0
   8348c:	4295      	cmp	r5, r2
   8348e:	bfa8      	it	ge
   83490:	4615      	movge	r5, r2
   83492:	2d00      	cmp	r5, #0
   83494:	dd0e      	ble.n	834b4 <_svfprintf_r+0xdf8>
   83496:	9926      	ldr	r1, [sp, #152]	; 0x98
   83498:	4406      	add	r6, r0
   8349a:	3101      	adds	r1, #1
   8349c:	442c      	add	r4, r5
   8349e:	2907      	cmp	r1, #7
   834a0:	f8c8 6000 	str.w	r6, [r8]
   834a4:	9427      	str	r4, [sp, #156]	; 0x9c
   834a6:	f8c8 5004 	str.w	r5, [r8, #4]
   834aa:	9126      	str	r1, [sp, #152]	; 0x98
   834ac:	f300 8216 	bgt.w	838dc <_svfprintf_r+0x1220>
   834b0:	f108 0808 	add.w	r8, r8, #8
   834b4:	2d00      	cmp	r5, #0
   834b6:	bfb4      	ite	lt
   834b8:	4616      	movlt	r6, r2
   834ba:	1b56      	subge	r6, r2, r5
   834bc:	2e00      	cmp	r6, #0
   834be:	f77f aaef 	ble.w	82aa0 <_svfprintf_r+0x3e4>
   834c2:	2e10      	cmp	r6, #16
   834c4:	f340 82f3 	ble.w	83aae <_svfprintf_r+0x13f2>
   834c8:	4622      	mov	r2, r4
   834ca:	2710      	movs	r7, #16
   834cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   834ce:	4d3a      	ldr	r5, [pc, #232]	; (835b8 <_svfprintf_r+0xefc>)
   834d0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   834d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   834d6:	e004      	b.n	834e2 <_svfprintf_r+0xe26>
   834d8:	f108 0808 	add.w	r8, r8, #8
   834dc:	3e10      	subs	r6, #16
   834de:	2e10      	cmp	r6, #16
   834e0:	dda3      	ble.n	8342a <_svfprintf_r+0xd6e>
   834e2:	3301      	adds	r3, #1
   834e4:	3210      	adds	r2, #16
   834e6:	2b07      	cmp	r3, #7
   834e8:	9227      	str	r2, [sp, #156]	; 0x9c
   834ea:	9326      	str	r3, [sp, #152]	; 0x98
   834ec:	e888 00a0 	stmia.w	r8, {r5, r7}
   834f0:	ddf2      	ble.n	834d8 <_svfprintf_r+0xe1c>
   834f2:	aa25      	add	r2, sp, #148	; 0x94
   834f4:	4621      	mov	r1, r4
   834f6:	4658      	mov	r0, fp
   834f8:	f002 f9fc 	bl	858f4 <__ssprint_r>
   834fc:	2800      	cmp	r0, #0
   834fe:	f47f a9ba 	bne.w	82876 <_svfprintf_r+0x1ba>
   83502:	46c8      	mov	r8, r9
   83504:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83506:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83508:	e7e8      	b.n	834dc <_svfprintf_r+0xe20>
   8350a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8350c:	9819      	ldr	r0, [sp, #100]	; 0x64
   8350e:	3301      	adds	r3, #1
   83510:	991a      	ldr	r1, [sp, #104]	; 0x68
   83512:	4404      	add	r4, r0
   83514:	2b07      	cmp	r3, #7
   83516:	9427      	str	r4, [sp, #156]	; 0x9c
   83518:	f8c8 1000 	str.w	r1, [r8]
   8351c:	f8c8 0004 	str.w	r0, [r8, #4]
   83520:	9326      	str	r3, [sp, #152]	; 0x98
   83522:	f300 81cf 	bgt.w	838c4 <_svfprintf_r+0x1208>
   83526:	f108 0808 	add.w	r8, r8, #8
   8352a:	e7ab      	b.n	83484 <_svfprintf_r+0xdc8>
   8352c:	9b07      	ldr	r3, [sp, #28]
   8352e:	07da      	lsls	r2, r3, #31
   83530:	f53f adad 	bmi.w	8308e <_svfprintf_r+0x9d2>
   83534:	2301      	movs	r3, #1
   83536:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83538:	441c      	add	r4, r3
   8353a:	441f      	add	r7, r3
   8353c:	2f07      	cmp	r7, #7
   8353e:	9427      	str	r4, [sp, #156]	; 0x9c
   83540:	f8c8 6000 	str.w	r6, [r8]
   83544:	9726      	str	r7, [sp, #152]	; 0x98
   83546:	f8c8 3004 	str.w	r3, [r8, #4]
   8354a:	f77f add4 	ble.w	830f6 <_svfprintf_r+0xa3a>
   8354e:	aa25      	add	r2, sp, #148	; 0x94
   83550:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83552:	980c      	ldr	r0, [sp, #48]	; 0x30
   83554:	f002 f9ce 	bl	858f4 <__ssprint_r>
   83558:	2800      	cmp	r0, #0
   8355a:	f47f a98c 	bne.w	82876 <_svfprintf_r+0x1ba>
   8355e:	46c8      	mov	r8, r9
   83560:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83562:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83564:	e5c9      	b.n	830fa <_svfprintf_r+0xa3e>
   83566:	aa25      	add	r2, sp, #148	; 0x94
   83568:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8356a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8356c:	f002 f9c2 	bl	858f4 <__ssprint_r>
   83570:	2800      	cmp	r0, #0
   83572:	f47f a980 	bne.w	82876 <_svfprintf_r+0x1ba>
   83576:	46c8      	mov	r8, r9
   83578:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8357a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   8357c:	e596      	b.n	830ac <_svfprintf_r+0x9f0>
   8357e:	aa25      	add	r2, sp, #148	; 0x94
   83580:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83582:	980c      	ldr	r0, [sp, #48]	; 0x30
   83584:	f002 f9b6 	bl	858f4 <__ssprint_r>
   83588:	2800      	cmp	r0, #0
   8358a:	f47f a974 	bne.w	82876 <_svfprintf_r+0x1ba>
   8358e:	46c8      	mov	r8, r9
   83590:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83592:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83594:	e599      	b.n	830ca <_svfprintf_r+0xa0e>
   83596:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   83598:	3407      	adds	r4, #7
   8359a:	f024 0407 	bic.w	r4, r4, #7
   8359e:	f104 0108 	add.w	r1, r4, #8
   835a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   835a6:	910f      	str	r1, [sp, #60]	; 0x3c
   835a8:	4614      	mov	r4, r2
   835aa:	461d      	mov	r5, r3
   835ac:	f7ff bb8f 	b.w	82cce <_svfprintf_r+0x612>
   835b0:	464e      	mov	r6, r9
   835b2:	f7ff b99f 	b.w	828f4 <_svfprintf_r+0x238>
   835b6:	bf00      	nop
   835b8:	00086874 	.word	0x00086874
   835bc:	aa25      	add	r2, sp, #148	; 0x94
   835be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   835c0:	980c      	ldr	r0, [sp, #48]	; 0x30
   835c2:	f002 f997 	bl	858f4 <__ssprint_r>
   835c6:	2800      	cmp	r0, #0
   835c8:	f47f a955 	bne.w	82876 <_svfprintf_r+0x1ba>
   835cc:	46c8      	mov	r8, r9
   835ce:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   835d0:	f7ff ba16 	b.w	82a00 <_svfprintf_r+0x344>
   835d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
   835d6:	4622      	mov	r2, r4
   835d8:	4620      	mov	r0, r4
   835da:	9c14      	ldr	r4, [sp, #80]	; 0x50
   835dc:	4623      	mov	r3, r4
   835de:	4621      	mov	r1, r4
   835e0:	f002 fef6 	bl	863d0 <__aeabi_dcmpun>
   835e4:	2800      	cmp	r0, #0
   835e6:	f040 8273 	bne.w	83ad0 <_svfprintf_r+0x1414>
   835ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   835ec:	3301      	adds	r3, #1
   835ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   835f0:	f023 0320 	bic.w	r3, r3, #32
   835f4:	930e      	str	r3, [sp, #56]	; 0x38
   835f6:	f000 819c 	beq.w	83932 <_svfprintf_r+0x1276>
   835fa:	2b47      	cmp	r3, #71	; 0x47
   835fc:	f000 80d6 	beq.w	837ac <_svfprintf_r+0x10f0>
   83600:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   83604:	9307      	str	r3, [sp, #28]
   83606:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83608:	1e1f      	subs	r7, r3, #0
   8360a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8360c:	9308      	str	r3, [sp, #32]
   8360e:	bfb7      	itett	lt
   83610:	463b      	movlt	r3, r7
   83612:	2300      	movge	r3, #0
   83614:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   83618:	232d      	movlt	r3, #45	; 0x2d
   8361a:	9310      	str	r3, [sp, #64]	; 0x40
   8361c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8361e:	2b66      	cmp	r3, #102	; 0x66
   83620:	f000 8190 	beq.w	83944 <_svfprintf_r+0x1288>
   83624:	2b46      	cmp	r3, #70	; 0x46
   83626:	f000 80a4 	beq.w	83772 <_svfprintf_r+0x10b6>
   8362a:	2002      	movs	r0, #2
   8362c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8362e:	a923      	add	r1, sp, #140	; 0x8c
   83630:	2b45      	cmp	r3, #69	; 0x45
   83632:	bf0a      	itet	eq
   83634:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   83636:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   83638:	1c5d      	addeq	r5, r3, #1
   8363a:	e88d 0021 	stmia.w	sp, {r0, r5}
   8363e:	9104      	str	r1, [sp, #16]
   83640:	a820      	add	r0, sp, #128	; 0x80
   83642:	a91f      	add	r1, sp, #124	; 0x7c
   83644:	463b      	mov	r3, r7
   83646:	9003      	str	r0, [sp, #12]
   83648:	9a08      	ldr	r2, [sp, #32]
   8364a:	9102      	str	r1, [sp, #8]
   8364c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8364e:	f000 fb5b 	bl	83d08 <_dtoa_r>
   83652:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83654:	4606      	mov	r6, r0
   83656:	2b67      	cmp	r3, #103	; 0x67
   83658:	f040 81ba 	bne.w	839d0 <_svfprintf_r+0x1314>
   8365c:	f01b 0f01 	tst.w	fp, #1
   83660:	f000 8223 	beq.w	83aaa <_svfprintf_r+0x13ee>
   83664:	1974      	adds	r4, r6, r5
   83666:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83668:	9808      	ldr	r0, [sp, #32]
   8366a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8366c:	4639      	mov	r1, r7
   8366e:	f002 fe7d 	bl	8636c <__aeabi_dcmpeq>
   83672:	2800      	cmp	r0, #0
   83674:	f040 8124 	bne.w	838c0 <_svfprintf_r+0x1204>
   83678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8367a:	42a3      	cmp	r3, r4
   8367c:	d206      	bcs.n	8368c <_svfprintf_r+0xfd0>
   8367e:	2130      	movs	r1, #48	; 0x30
   83680:	1c5a      	adds	r2, r3, #1
   83682:	9223      	str	r2, [sp, #140]	; 0x8c
   83684:	7019      	strb	r1, [r3, #0]
   83686:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83688:	429c      	cmp	r4, r3
   8368a:	d8f9      	bhi.n	83680 <_svfprintf_r+0xfc4>
   8368c:	1b9b      	subs	r3, r3, r6
   8368e:	9313      	str	r3, [sp, #76]	; 0x4c
   83690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83692:	2b47      	cmp	r3, #71	; 0x47
   83694:	f000 80a2 	beq.w	837dc <_svfprintf_r+0x1120>
   83698:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8369a:	2b65      	cmp	r3, #101	; 0x65
   8369c:	f340 81a7 	ble.w	839ee <_svfprintf_r+0x1332>
   836a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   836a2:	2b66      	cmp	r3, #102	; 0x66
   836a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   836a6:	9312      	str	r3, [sp, #72]	; 0x48
   836a8:	f000 8171 	beq.w	8398e <_svfprintf_r+0x12d2>
   836ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   836ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   836b0:	4619      	mov	r1, r3
   836b2:	4291      	cmp	r1, r2
   836b4:	f300 815d 	bgt.w	83972 <_svfprintf_r+0x12b6>
   836b8:	f01b 0f01 	tst.w	fp, #1
   836bc:	f040 81f0 	bne.w	83aa0 <_svfprintf_r+0x13e4>
   836c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   836c4:	9308      	str	r3, [sp, #32]
   836c6:	2367      	movs	r3, #103	; 0x67
   836c8:	920e      	str	r2, [sp, #56]	; 0x38
   836ca:	9311      	str	r3, [sp, #68]	; 0x44
   836cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   836ce:	2b00      	cmp	r3, #0
   836d0:	d17d      	bne.n	837ce <_svfprintf_r+0x1112>
   836d2:	930a      	str	r3, [sp, #40]	; 0x28
   836d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   836d8:	f7ff b914 	b.w	82904 <_svfprintf_r+0x248>
   836dc:	f024 0407 	bic.w	r4, r4, #7
   836e0:	6823      	ldr	r3, [r4, #0]
   836e2:	9315      	str	r3, [sp, #84]	; 0x54
   836e4:	6863      	ldr	r3, [r4, #4]
   836e6:	9314      	str	r3, [sp, #80]	; 0x50
   836e8:	f104 0308 	add.w	r3, r4, #8
   836ec:	930f      	str	r3, [sp, #60]	; 0x3c
   836ee:	f7ff bb2f 	b.w	82d50 <_svfprintf_r+0x694>
   836f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   836f4:	6813      	ldr	r3, [r2, #0]
   836f6:	3204      	adds	r2, #4
   836f8:	920f      	str	r2, [sp, #60]	; 0x3c
   836fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   836fc:	601a      	str	r2, [r3, #0]
   836fe:	f7ff b804 	b.w	8270a <_svfprintf_r+0x4e>
   83702:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83704:	4daf      	ldr	r5, [pc, #700]	; (839c4 <_svfprintf_r+0x1308>)
   83706:	f7ff b9ad 	b.w	82a64 <_svfprintf_r+0x3a8>
   8370a:	aa25      	add	r2, sp, #148	; 0x94
   8370c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8370e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83710:	f002 f8f0 	bl	858f4 <__ssprint_r>
   83714:	2800      	cmp	r0, #0
   83716:	f47f a8ae 	bne.w	82876 <_svfprintf_r+0x1ba>
   8371a:	46c8      	mov	r8, r9
   8371c:	e431      	b.n	82f82 <_svfprintf_r+0x8c6>
   8371e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83720:	4613      	mov	r3, r2
   83722:	3304      	adds	r3, #4
   83724:	930f      	str	r3, [sp, #60]	; 0x3c
   83726:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83728:	6811      	ldr	r1, [r2, #0]
   8372a:	17dd      	asrs	r5, r3, #31
   8372c:	461a      	mov	r2, r3
   8372e:	462b      	mov	r3, r5
   83730:	e9c1 2300 	strd	r2, r3, [r1]
   83734:	f7fe bfe9 	b.w	8270a <_svfprintf_r+0x4e>
   83738:	aa25      	add	r2, sp, #148	; 0x94
   8373a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8373c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8373e:	f002 f8d9 	bl	858f4 <__ssprint_r>
   83742:	2800      	cmp	r0, #0
   83744:	f47f a897 	bne.w	82876 <_svfprintf_r+0x1ba>
   83748:	46c8      	mov	r8, r9
   8374a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8374c:	e432      	b.n	82fb4 <_svfprintf_r+0x8f8>
   8374e:	f108 0808 	add.w	r8, r8, #8
   83752:	e52f      	b.n	831b4 <_svfprintf_r+0xaf8>
   83754:	2140      	movs	r1, #64	; 0x40
   83756:	980c      	ldr	r0, [sp, #48]	; 0x30
   83758:	f7fe fbd8 	bl	81f0c <_malloc_r>
   8375c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8375e:	6010      	str	r0, [r2, #0]
   83760:	6110      	str	r0, [r2, #16]
   83762:	2800      	cmp	r0, #0
   83764:	f000 8214 	beq.w	83b90 <_svfprintf_r+0x14d4>
   83768:	2340      	movs	r3, #64	; 0x40
   8376a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8376c:	6153      	str	r3, [r2, #20]
   8376e:	f7fe bfbc 	b.w	826ea <_svfprintf_r+0x2e>
   83772:	2003      	movs	r0, #3
   83774:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83776:	a923      	add	r1, sp, #140	; 0x8c
   83778:	e88d 0011 	stmia.w	sp, {r0, r4}
   8377c:	9104      	str	r1, [sp, #16]
   8377e:	a820      	add	r0, sp, #128	; 0x80
   83780:	a91f      	add	r1, sp, #124	; 0x7c
   83782:	9003      	str	r0, [sp, #12]
   83784:	9a08      	ldr	r2, [sp, #32]
   83786:	463b      	mov	r3, r7
   83788:	9102      	str	r1, [sp, #8]
   8378a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8378c:	f000 fabc 	bl	83d08 <_dtoa_r>
   83790:	4625      	mov	r5, r4
   83792:	4606      	mov	r6, r0
   83794:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83796:	1974      	adds	r4, r6, r5
   83798:	2b46      	cmp	r3, #70	; 0x46
   8379a:	f47f af64 	bne.w	83666 <_svfprintf_r+0xfaa>
   8379e:	7833      	ldrb	r3, [r6, #0]
   837a0:	2b30      	cmp	r3, #48	; 0x30
   837a2:	f000 8187 	beq.w	83ab4 <_svfprintf_r+0x13f8>
   837a6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   837a8:	442c      	add	r4, r5
   837aa:	e75c      	b.n	83666 <_svfprintf_r+0xfaa>
   837ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   837ae:	2b00      	cmp	r3, #0
   837b0:	bf08      	it	eq
   837b2:	2301      	moveq	r3, #1
   837b4:	930a      	str	r3, [sp, #40]	; 0x28
   837b6:	e723      	b.n	83600 <_svfprintf_r+0xf44>
   837b8:	4630      	mov	r0, r6
   837ba:	950a      	str	r5, [sp, #40]	; 0x28
   837bc:	f7fe ff50 	bl	82660 <strlen>
   837c0:	940f      	str	r4, [sp, #60]	; 0x3c
   837c2:	900e      	str	r0, [sp, #56]	; 0x38
   837c4:	f8cd b01c 	str.w	fp, [sp, #28]
   837c8:	4603      	mov	r3, r0
   837ca:	f7ff b9e7 	b.w	82b9c <_svfprintf_r+0x4e0>
   837ce:	272d      	movs	r7, #45	; 0x2d
   837d0:	2300      	movs	r3, #0
   837d2:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   837d6:	930a      	str	r3, [sp, #40]	; 0x28
   837d8:	f7ff b895 	b.w	82906 <_svfprintf_r+0x24a>
   837dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   837de:	461a      	mov	r2, r3
   837e0:	9312      	str	r3, [sp, #72]	; 0x48
   837e2:	3303      	adds	r3, #3
   837e4:	db04      	blt.n	837f0 <_svfprintf_r+0x1134>
   837e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   837e8:	4619      	mov	r1, r3
   837ea:	4291      	cmp	r1, r2
   837ec:	f6bf af5e 	bge.w	836ac <_svfprintf_r+0xff0>
   837f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   837f2:	3b02      	subs	r3, #2
   837f4:	9311      	str	r3, [sp, #68]	; 0x44
   837f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   837f8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   837fc:	3b01      	subs	r3, #1
   837fe:	2b00      	cmp	r3, #0
   83800:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   83804:	bfb4      	ite	lt
   83806:	222d      	movlt	r2, #45	; 0x2d
   83808:	222b      	movge	r2, #43	; 0x2b
   8380a:	931f      	str	r3, [sp, #124]	; 0x7c
   8380c:	bfb8      	it	lt
   8380e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   83810:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   83814:	bfb8      	it	lt
   83816:	f1c3 0301 	rsblt	r3, r3, #1
   8381a:	2b09      	cmp	r3, #9
   8381c:	f340 811f 	ble.w	83a5e <_svfprintf_r+0x13a2>
   83820:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   83824:	4601      	mov	r1, r0
   83826:	4c68      	ldr	r4, [pc, #416]	; (839c8 <_svfprintf_r+0x130c>)
   83828:	e000      	b.n	8382c <_svfprintf_r+0x1170>
   8382a:	4611      	mov	r1, r2
   8382c:	fb84 5203 	smull	r5, r2, r4, r3
   83830:	17dd      	asrs	r5, r3, #31
   83832:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   83836:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   8383a:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8383e:	3230      	adds	r2, #48	; 0x30
   83840:	2d09      	cmp	r5, #9
   83842:	f801 2c01 	strb.w	r2, [r1, #-1]
   83846:	462b      	mov	r3, r5
   83848:	f101 32ff 	add.w	r2, r1, #4294967295
   8384c:	dced      	bgt.n	8382a <_svfprintf_r+0x116e>
   8384e:	3330      	adds	r3, #48	; 0x30
   83850:	3902      	subs	r1, #2
   83852:	b2dc      	uxtb	r4, r3
   83854:	4288      	cmp	r0, r1
   83856:	f802 4c01 	strb.w	r4, [r2, #-1]
   8385a:	f240 8192 	bls.w	83b82 <_svfprintf_r+0x14c6>
   8385e:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   83862:	4613      	mov	r3, r2
   83864:	e001      	b.n	8386a <_svfprintf_r+0x11ae>
   83866:	f813 4b01 	ldrb.w	r4, [r3], #1
   8386a:	4283      	cmp	r3, r0
   8386c:	f801 4b01 	strb.w	r4, [r1], #1
   83870:	d1f9      	bne.n	83866 <_svfprintf_r+0x11aa>
   83872:	3301      	adds	r3, #1
   83874:	1a9b      	subs	r3, r3, r2
   83876:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   8387a:	4413      	add	r3, r2
   8387c:	aa21      	add	r2, sp, #132	; 0x84
   8387e:	1a9b      	subs	r3, r3, r2
   83880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   83882:	931b      	str	r3, [sp, #108]	; 0x6c
   83884:	2a01      	cmp	r2, #1
   83886:	4413      	add	r3, r2
   83888:	930e      	str	r3, [sp, #56]	; 0x38
   8388a:	f340 8148 	ble.w	83b1e <_svfprintf_r+0x1462>
   8388e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83890:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83892:	4413      	add	r3, r2
   83894:	930e      	str	r3, [sp, #56]	; 0x38
   83896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8389a:	9308      	str	r3, [sp, #32]
   8389c:	2300      	movs	r3, #0
   8389e:	9312      	str	r3, [sp, #72]	; 0x48
   838a0:	e714      	b.n	836cc <_svfprintf_r+0x1010>
   838a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   838a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   838a6:	f7ff b876 	b.w	82996 <_svfprintf_r+0x2da>
   838aa:	aa25      	add	r2, sp, #148	; 0x94
   838ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   838ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   838b0:	f002 f820 	bl	858f4 <__ssprint_r>
   838b4:	2800      	cmp	r0, #0
   838b6:	f47e afde 	bne.w	82876 <_svfprintf_r+0x1ba>
   838ba:	46c8      	mov	r8, r9
   838bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   838be:	e4fb      	b.n	832b8 <_svfprintf_r+0xbfc>
   838c0:	4623      	mov	r3, r4
   838c2:	e6e3      	b.n	8368c <_svfprintf_r+0xfd0>
   838c4:	aa25      	add	r2, sp, #148	; 0x94
   838c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   838c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   838ca:	f002 f813 	bl	858f4 <__ssprint_r>
   838ce:	2800      	cmp	r0, #0
   838d0:	f47e afd1 	bne.w	82876 <_svfprintf_r+0x1ba>
   838d4:	46c8      	mov	r8, r9
   838d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   838d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   838da:	e5d3      	b.n	83484 <_svfprintf_r+0xdc8>
   838dc:	aa25      	add	r2, sp, #148	; 0x94
   838de:	990b      	ldr	r1, [sp, #44]	; 0x2c
   838e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   838e2:	f002 f807 	bl	858f4 <__ssprint_r>
   838e6:	2800      	cmp	r0, #0
   838e8:	f47e afc5 	bne.w	82876 <_svfprintf_r+0x1ba>
   838ec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   838ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   838f0:	46c8      	mov	r8, r9
   838f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   838f4:	1a9a      	subs	r2, r3, r2
   838f6:	e5dd      	b.n	834b4 <_svfprintf_r+0xdf8>
   838f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   838fa:	f7ff b8fe 	b.w	82afa <_svfprintf_r+0x43e>
   838fe:	aa25      	add	r2, sp, #148	; 0x94
   83900:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83902:	980c      	ldr	r0, [sp, #48]	; 0x30
   83904:	f001 fff6 	bl	858f4 <__ssprint_r>
   83908:	2800      	cmp	r0, #0
   8390a:	f47e afb4 	bne.w	82876 <_svfprintf_r+0x1ba>
   8390e:	46c8      	mov	r8, r9
   83910:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83912:	e5b0      	b.n	83476 <_svfprintf_r+0xdba>
   83914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83916:	4637      	mov	r7, r6
   83918:	2b06      	cmp	r3, #6
   8391a:	bf28      	it	cs
   8391c:	2306      	movcs	r3, #6
   8391e:	960a      	str	r6, [sp, #40]	; 0x28
   83920:	9612      	str	r6, [sp, #72]	; 0x48
   83922:	9308      	str	r3, [sp, #32]
   83924:	940f      	str	r4, [sp, #60]	; 0x3c
   83926:	f8cd b01c 	str.w	fp, [sp, #28]
   8392a:	930e      	str	r3, [sp, #56]	; 0x38
   8392c:	4e27      	ldr	r6, [pc, #156]	; (839cc <_svfprintf_r+0x1310>)
   8392e:	f7fe bfe9 	b.w	82904 <_svfprintf_r+0x248>
   83932:	2306      	movs	r3, #6
   83934:	930a      	str	r3, [sp, #40]	; 0x28
   83936:	e663      	b.n	83600 <_svfprintf_r+0xf44>
   83938:	232d      	movs	r3, #45	; 0x2d
   8393a:	461f      	mov	r7, r3
   8393c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   83940:	f7ff ba28 	b.w	82d94 <_svfprintf_r+0x6d8>
   83944:	2003      	movs	r0, #3
   83946:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83948:	a923      	add	r1, sp, #140	; 0x8c
   8394a:	e88d 0011 	stmia.w	sp, {r0, r4}
   8394e:	9104      	str	r1, [sp, #16]
   83950:	a820      	add	r0, sp, #128	; 0x80
   83952:	a91f      	add	r1, sp, #124	; 0x7c
   83954:	9003      	str	r0, [sp, #12]
   83956:	9a08      	ldr	r2, [sp, #32]
   83958:	463b      	mov	r3, r7
   8395a:	9102      	str	r1, [sp, #8]
   8395c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8395e:	f000 f9d3 	bl	83d08 <_dtoa_r>
   83962:	4625      	mov	r5, r4
   83964:	4606      	mov	r6, r0
   83966:	1904      	adds	r4, r0, r4
   83968:	e719      	b.n	8379e <_svfprintf_r+0x10e2>
   8396a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8396c:	4d15      	ldr	r5, [pc, #84]	; (839c4 <_svfprintf_r+0x1308>)
   8396e:	f7ff bb7e 	b.w	8306e <_svfprintf_r+0x9b2>
   83972:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   83976:	4413      	add	r3, r2
   83978:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8397a:	930e      	str	r3, [sp, #56]	; 0x38
   8397c:	2a00      	cmp	r2, #0
   8397e:	f340 80c7 	ble.w	83b10 <_svfprintf_r+0x1454>
   83982:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83986:	9308      	str	r3, [sp, #32]
   83988:	2367      	movs	r3, #103	; 0x67
   8398a:	9311      	str	r3, [sp, #68]	; 0x44
   8398c:	e69e      	b.n	836cc <_svfprintf_r+0x1010>
   8398e:	2b00      	cmp	r3, #0
   83990:	f340 80e1 	ble.w	83b56 <_svfprintf_r+0x149a>
   83994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83996:	2a00      	cmp	r2, #0
   83998:	f040 80b0 	bne.w	83afc <_svfprintf_r+0x1440>
   8399c:	f01b 0f01 	tst.w	fp, #1
   839a0:	f040 80ac 	bne.w	83afc <_svfprintf_r+0x1440>
   839a4:	9308      	str	r3, [sp, #32]
   839a6:	930e      	str	r3, [sp, #56]	; 0x38
   839a8:	e690      	b.n	836cc <_svfprintf_r+0x1010>
   839aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   839ac:	940f      	str	r4, [sp, #60]	; 0x3c
   839ae:	9308      	str	r3, [sp, #32]
   839b0:	930e      	str	r3, [sp, #56]	; 0x38
   839b2:	900a      	str	r0, [sp, #40]	; 0x28
   839b4:	f8cd b01c 	str.w	fp, [sp, #28]
   839b8:	9012      	str	r0, [sp, #72]	; 0x48
   839ba:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   839be:	f7fe bfa1 	b.w	82904 <_svfprintf_r+0x248>
   839c2:	bf00      	nop
   839c4:	00086874 	.word	0x00086874
   839c8:	66666667 	.word	0x66666667
   839cc:	00086858 	.word	0x00086858
   839d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   839d2:	2b47      	cmp	r3, #71	; 0x47
   839d4:	f47f ae46 	bne.w	83664 <_svfprintf_r+0xfa8>
   839d8:	f01b 0f01 	tst.w	fp, #1
   839dc:	f47f aeda 	bne.w	83794 <_svfprintf_r+0x10d8>
   839e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   839e2:	1b9b      	subs	r3, r3, r6
   839e4:	9313      	str	r3, [sp, #76]	; 0x4c
   839e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   839e8:	2b47      	cmp	r3, #71	; 0x47
   839ea:	f43f aef7 	beq.w	837dc <_svfprintf_r+0x1120>
   839ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   839f0:	9312      	str	r3, [sp, #72]	; 0x48
   839f2:	e700      	b.n	837f6 <_svfprintf_r+0x113a>
   839f4:	2000      	movs	r0, #0
   839f6:	900a      	str	r0, [sp, #40]	; 0x28
   839f8:	f7fe bebc 	b.w	82774 <_svfprintf_r+0xb8>
   839fc:	424f      	negs	r7, r1
   839fe:	3110      	adds	r1, #16
   83a00:	da35      	bge.n	83a6e <_svfprintf_r+0x13b2>
   83a02:	2410      	movs	r4, #16
   83a04:	4d6a      	ldr	r5, [pc, #424]	; (83bb0 <_svfprintf_r+0x14f4>)
   83a06:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83a0a:	e004      	b.n	83a16 <_svfprintf_r+0x135a>
   83a0c:	f108 0808 	add.w	r8, r8, #8
   83a10:	3f10      	subs	r7, #16
   83a12:	2f10      	cmp	r7, #16
   83a14:	dd2c      	ble.n	83a70 <_svfprintf_r+0x13b4>
   83a16:	3301      	adds	r3, #1
   83a18:	3210      	adds	r2, #16
   83a1a:	2b07      	cmp	r3, #7
   83a1c:	9227      	str	r2, [sp, #156]	; 0x9c
   83a1e:	9326      	str	r3, [sp, #152]	; 0x98
   83a20:	f8c8 5000 	str.w	r5, [r8]
   83a24:	f8c8 4004 	str.w	r4, [r8, #4]
   83a28:	ddf0      	ble.n	83a0c <_svfprintf_r+0x1350>
   83a2a:	aa25      	add	r2, sp, #148	; 0x94
   83a2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83a2e:	4658      	mov	r0, fp
   83a30:	f001 ff60 	bl	858f4 <__ssprint_r>
   83a34:	2800      	cmp	r0, #0
   83a36:	f47e af1e 	bne.w	82876 <_svfprintf_r+0x1ba>
   83a3a:	46c8      	mov	r8, r9
   83a3c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83a3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a40:	e7e6      	b.n	83a10 <_svfprintf_r+0x1354>
   83a42:	aa25      	add	r2, sp, #148	; 0x94
   83a44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83a46:	980c      	ldr	r0, [sp, #48]	; 0x30
   83a48:	f001 ff54 	bl	858f4 <__ssprint_r>
   83a4c:	2800      	cmp	r0, #0
   83a4e:	f47e af12 	bne.w	82876 <_svfprintf_r+0x1ba>
   83a52:	46c8      	mov	r8, r9
   83a54:	991f      	ldr	r1, [sp, #124]	; 0x7c
   83a56:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83a58:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a5a:	f7ff bbc3 	b.w	831e4 <_svfprintf_r+0xb28>
   83a5e:	2230      	movs	r2, #48	; 0x30
   83a60:	4413      	add	r3, r2
   83a62:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   83a66:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   83a6a:	ab22      	add	r3, sp, #136	; 0x88
   83a6c:	e706      	b.n	8387c <_svfprintf_r+0x11c0>
   83a6e:	4d50      	ldr	r5, [pc, #320]	; (83bb0 <_svfprintf_r+0x14f4>)
   83a70:	3301      	adds	r3, #1
   83a72:	443a      	add	r2, r7
   83a74:	2b07      	cmp	r3, #7
   83a76:	e888 00a0 	stmia.w	r8, {r5, r7}
   83a7a:	9227      	str	r2, [sp, #156]	; 0x9c
   83a7c:	9326      	str	r3, [sp, #152]	; 0x98
   83a7e:	f108 0808 	add.w	r8, r8, #8
   83a82:	f77f abb2 	ble.w	831ea <_svfprintf_r+0xb2e>
   83a86:	aa25      	add	r2, sp, #148	; 0x94
   83a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83a8a:	980c      	ldr	r0, [sp, #48]	; 0x30
   83a8c:	f001 ff32 	bl	858f4 <__ssprint_r>
   83a90:	2800      	cmp	r0, #0
   83a92:	f47e aef0 	bne.w	82876 <_svfprintf_r+0x1ba>
   83a96:	46c8      	mov	r8, r9
   83a98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83a9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83a9c:	f7ff bba5 	b.w	831ea <_svfprintf_r+0xb2e>
   83aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83aa2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83aa4:	4413      	add	r3, r2
   83aa6:	930e      	str	r3, [sp, #56]	; 0x38
   83aa8:	e76b      	b.n	83982 <_svfprintf_r+0x12c6>
   83aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   83aac:	e5ee      	b.n	8368c <_svfprintf_r+0xfd0>
   83aae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83ab0:	4d3f      	ldr	r5, [pc, #252]	; (83bb0 <_svfprintf_r+0x14f4>)
   83ab2:	e4bb      	b.n	8342c <_svfprintf_r+0xd70>
   83ab4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83ab6:	9808      	ldr	r0, [sp, #32]
   83ab8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   83aba:	4639      	mov	r1, r7
   83abc:	f002 fc56 	bl	8636c <__aeabi_dcmpeq>
   83ac0:	2800      	cmp	r0, #0
   83ac2:	f47f ae70 	bne.w	837a6 <_svfprintf_r+0x10ea>
   83ac6:	f1c5 0501 	rsb	r5, r5, #1
   83aca:	951f      	str	r5, [sp, #124]	; 0x7c
   83acc:	442c      	add	r4, r5
   83ace:	e5ca      	b.n	83666 <_svfprintf_r+0xfaa>
   83ad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83ad2:	4e38      	ldr	r6, [pc, #224]	; (83bb4 <_svfprintf_r+0x14f8>)
   83ad4:	2b00      	cmp	r3, #0
   83ad6:	bfbe      	ittt	lt
   83ad8:	232d      	movlt	r3, #45	; 0x2d
   83ada:	461f      	movlt	r7, r3
   83adc:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   83ae0:	f04f 0303 	mov.w	r3, #3
   83ae4:	461a      	mov	r2, r3
   83ae6:	9308      	str	r3, [sp, #32]
   83ae8:	f04f 0300 	mov.w	r3, #0
   83aec:	bfa8      	it	ge
   83aee:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   83af2:	4619      	mov	r1, r3
   83af4:	930a      	str	r3, [sp, #40]	; 0x28
   83af6:	4b30      	ldr	r3, [pc, #192]	; (83bb8 <_svfprintf_r+0x14fc>)
   83af8:	f7ff b954 	b.w	82da4 <_svfprintf_r+0x6e8>
   83afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83afe:	9a19      	ldr	r2, [sp, #100]	; 0x64
   83b00:	4413      	add	r3, r2
   83b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83b04:	441a      	add	r2, r3
   83b06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83b0a:	920e      	str	r2, [sp, #56]	; 0x38
   83b0c:	9308      	str	r3, [sp, #32]
   83b0e:	e5dd      	b.n	836cc <_svfprintf_r+0x1010>
   83b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83b14:	f1c3 0301 	rsb	r3, r3, #1
   83b18:	441a      	add	r2, r3
   83b1a:	4613      	mov	r3, r2
   83b1c:	e7c3      	b.n	83aa6 <_svfprintf_r+0x13ea>
   83b1e:	f01b 0301 	ands.w	r3, fp, #1
   83b22:	9312      	str	r3, [sp, #72]	; 0x48
   83b24:	f47f aeb3 	bne.w	8388e <_svfprintf_r+0x11d2>
   83b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83b2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   83b2e:	9308      	str	r3, [sp, #32]
   83b30:	e5cc      	b.n	836cc <_svfprintf_r+0x1010>
   83b32:	4d1f      	ldr	r5, [pc, #124]	; (83bb0 <_svfprintf_r+0x14f4>)
   83b34:	e43c      	b.n	833b0 <_svfprintf_r+0xcf4>
   83b36:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83b38:	4d1d      	ldr	r5, [pc, #116]	; (83bb0 <_svfprintf_r+0x14f4>)
   83b3a:	e491      	b.n	83460 <_svfprintf_r+0xda4>
   83b3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   83b3e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   83b42:	6828      	ldr	r0, [r5, #0]
   83b44:	46a2      	mov	sl, r4
   83b46:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   83b4a:	900a      	str	r0, [sp, #40]	; 0x28
   83b4c:	4628      	mov	r0, r5
   83b4e:	3004      	adds	r0, #4
   83b50:	900f      	str	r0, [sp, #60]	; 0x3c
   83b52:	f7fe be0d 	b.w	82770 <_svfprintf_r+0xb4>
   83b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83b58:	b913      	cbnz	r3, 83b60 <_svfprintf_r+0x14a4>
   83b5a:	f01b 0f01 	tst.w	fp, #1
   83b5e:	d002      	beq.n	83b66 <_svfprintf_r+0x14aa>
   83b60:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83b62:	3301      	adds	r3, #1
   83b64:	e7cd      	b.n	83b02 <_svfprintf_r+0x1446>
   83b66:	2301      	movs	r3, #1
   83b68:	e71c      	b.n	839a4 <_svfprintf_r+0x12e8>
   83b6a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83b6e:	f7ff b980 	b.w	82e72 <_svfprintf_r+0x7b6>
   83b72:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83b76:	f7ff b93a 	b.w	82dee <_svfprintf_r+0x732>
   83b7a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83b7e:	f7ff b84f 	b.w	82c20 <_svfprintf_r+0x564>
   83b82:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   83b86:	e679      	b.n	8387c <_svfprintf_r+0x11c0>
   83b88:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83b8c:	f7ff b9b2 	b.w	82ef4 <_svfprintf_r+0x838>
   83b90:	f04f 32ff 	mov.w	r2, #4294967295
   83b94:	230c      	movs	r3, #12
   83b96:	9209      	str	r2, [sp, #36]	; 0x24
   83b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83b9a:	6013      	str	r3, [r2, #0]
   83b9c:	f7fe be74 	b.w	82888 <_svfprintf_r+0x1cc>
   83ba0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83ba4:	f7ff b8c4 	b.w	82d30 <_svfprintf_r+0x674>
   83ba8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   83bac:	f7ff b878 	b.w	82ca0 <_svfprintf_r+0x5e4>
   83bb0:	00086874 	.word	0x00086874
   83bb4:	0008682c 	.word	0x0008682c
   83bb8:	00086828 	.word	0x00086828

00083bbc <register_fini>:
   83bbc:	4b02      	ldr	r3, [pc, #8]	; (83bc8 <register_fini+0xc>)
   83bbe:	b113      	cbz	r3, 83bc6 <register_fini+0xa>
   83bc0:	4802      	ldr	r0, [pc, #8]	; (83bcc <register_fini+0x10>)
   83bc2:	f000 b805 	b.w	83bd0 <atexit>
   83bc6:	4770      	bx	lr
   83bc8:	00000000 	.word	0x00000000
   83bcc:	00084b4d 	.word	0x00084b4d

00083bd0 <atexit>:
   83bd0:	2300      	movs	r3, #0
   83bd2:	4601      	mov	r1, r0
   83bd4:	461a      	mov	r2, r3
   83bd6:	4618      	mov	r0, r3
   83bd8:	f001 bf16 	b.w	85a08 <__register_exitproc>

00083bdc <quorem>:
   83bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83be0:	6903      	ldr	r3, [r0, #16]
   83be2:	690f      	ldr	r7, [r1, #16]
   83be4:	b083      	sub	sp, #12
   83be6:	429f      	cmp	r7, r3
   83be8:	f300 8088 	bgt.w	83cfc <quorem+0x120>
   83bec:	3f01      	subs	r7, #1
   83bee:	f101 0614 	add.w	r6, r1, #20
   83bf2:	f100 0a14 	add.w	sl, r0, #20
   83bf6:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   83bfa:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   83bfe:	3301      	adds	r3, #1
   83c00:	fbb2 f8f3 	udiv	r8, r2, r3
   83c04:	00bb      	lsls	r3, r7, #2
   83c06:	9300      	str	r3, [sp, #0]
   83c08:	eb06 0903 	add.w	r9, r6, r3
   83c0c:	4453      	add	r3, sl
   83c0e:	9301      	str	r3, [sp, #4]
   83c10:	f1b8 0f00 	cmp.w	r8, #0
   83c14:	d03b      	beq.n	83c8e <quorem+0xb2>
   83c16:	2300      	movs	r3, #0
   83c18:	46b4      	mov	ip, r6
   83c1a:	461c      	mov	r4, r3
   83c1c:	46d6      	mov	lr, sl
   83c1e:	f85c 2b04 	ldr.w	r2, [ip], #4
   83c22:	f8de 5000 	ldr.w	r5, [lr]
   83c26:	fa1f fb82 	uxth.w	fp, r2
   83c2a:	fb08 330b 	mla	r3, r8, fp, r3
   83c2e:	0c12      	lsrs	r2, r2, #16
   83c30:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   83c34:	fb08 bb02 	mla	fp, r8, r2, fp
   83c38:	b29a      	uxth	r2, r3
   83c3a:	1aa2      	subs	r2, r4, r2
   83c3c:	b2ab      	uxth	r3, r5
   83c3e:	fa1f f48b 	uxth.w	r4, fp
   83c42:	441a      	add	r2, r3
   83c44:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   83c48:	eb04 4422 	add.w	r4, r4, r2, asr #16
   83c4c:	b292      	uxth	r2, r2
   83c4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   83c52:	45e1      	cmp	r9, ip
   83c54:	f84e 2b04 	str.w	r2, [lr], #4
   83c58:	ea4f 4424 	mov.w	r4, r4, asr #16
   83c5c:	ea4f 431b 	mov.w	r3, fp, lsr #16
   83c60:	d2dd      	bcs.n	83c1e <quorem+0x42>
   83c62:	9b00      	ldr	r3, [sp, #0]
   83c64:	f85a 3003 	ldr.w	r3, [sl, r3]
   83c68:	b98b      	cbnz	r3, 83c8e <quorem+0xb2>
   83c6a:	9c01      	ldr	r4, [sp, #4]
   83c6c:	1f23      	subs	r3, r4, #4
   83c6e:	459a      	cmp	sl, r3
   83c70:	d20c      	bcs.n	83c8c <quorem+0xb0>
   83c72:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83c76:	b94b      	cbnz	r3, 83c8c <quorem+0xb0>
   83c78:	f1a4 0308 	sub.w	r3, r4, #8
   83c7c:	e002      	b.n	83c84 <quorem+0xa8>
   83c7e:	681a      	ldr	r2, [r3, #0]
   83c80:	3b04      	subs	r3, #4
   83c82:	b91a      	cbnz	r2, 83c8c <quorem+0xb0>
   83c84:	459a      	cmp	sl, r3
   83c86:	f107 37ff 	add.w	r7, r7, #4294967295
   83c8a:	d3f8      	bcc.n	83c7e <quorem+0xa2>
   83c8c:	6107      	str	r7, [r0, #16]
   83c8e:	4604      	mov	r4, r0
   83c90:	f001 fb7c 	bl	8538c <__mcmp>
   83c94:	2800      	cmp	r0, #0
   83c96:	db2d      	blt.n	83cf4 <quorem+0x118>
   83c98:	4655      	mov	r5, sl
   83c9a:	2300      	movs	r3, #0
   83c9c:	f108 0801 	add.w	r8, r8, #1
   83ca0:	f856 1b04 	ldr.w	r1, [r6], #4
   83ca4:	6828      	ldr	r0, [r5, #0]
   83ca6:	b28a      	uxth	r2, r1
   83ca8:	1a9a      	subs	r2, r3, r2
   83caa:	0c0b      	lsrs	r3, r1, #16
   83cac:	b281      	uxth	r1, r0
   83cae:	440a      	add	r2, r1
   83cb0:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   83cb4:	eb03 4322 	add.w	r3, r3, r2, asr #16
   83cb8:	b292      	uxth	r2, r2
   83cba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   83cbe:	45b1      	cmp	r9, r6
   83cc0:	f845 2b04 	str.w	r2, [r5], #4
   83cc4:	ea4f 4323 	mov.w	r3, r3, asr #16
   83cc8:	d2ea      	bcs.n	83ca0 <quorem+0xc4>
   83cca:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   83cce:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   83cd2:	b97a      	cbnz	r2, 83cf4 <quorem+0x118>
   83cd4:	1f1a      	subs	r2, r3, #4
   83cd6:	4592      	cmp	sl, r2
   83cd8:	d20b      	bcs.n	83cf2 <quorem+0x116>
   83cda:	f853 2c04 	ldr.w	r2, [r3, #-4]
   83cde:	b942      	cbnz	r2, 83cf2 <quorem+0x116>
   83ce0:	3b08      	subs	r3, #8
   83ce2:	e002      	b.n	83cea <quorem+0x10e>
   83ce4:	681a      	ldr	r2, [r3, #0]
   83ce6:	3b04      	subs	r3, #4
   83ce8:	b91a      	cbnz	r2, 83cf2 <quorem+0x116>
   83cea:	459a      	cmp	sl, r3
   83cec:	f107 37ff 	add.w	r7, r7, #4294967295
   83cf0:	d3f8      	bcc.n	83ce4 <quorem+0x108>
   83cf2:	6127      	str	r7, [r4, #16]
   83cf4:	4640      	mov	r0, r8
   83cf6:	b003      	add	sp, #12
   83cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cfc:	2000      	movs	r0, #0
   83cfe:	b003      	add	sp, #12
   83d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d04:	0000      	movs	r0, r0
	...

00083d08 <_dtoa_r>:
   83d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d0c:	6c05      	ldr	r5, [r0, #64]	; 0x40
   83d0e:	b09b      	sub	sp, #108	; 0x6c
   83d10:	4604      	mov	r4, r0
   83d12:	4692      	mov	sl, r2
   83d14:	469b      	mov	fp, r3
   83d16:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   83d18:	b14d      	cbz	r5, 83d2e <_dtoa_r+0x26>
   83d1a:	2301      	movs	r3, #1
   83d1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   83d1e:	4629      	mov	r1, r5
   83d20:	4093      	lsls	r3, r2
   83d22:	60ab      	str	r3, [r5, #8]
   83d24:	606a      	str	r2, [r5, #4]
   83d26:	f001 f959 	bl	84fdc <_Bfree>
   83d2a:	2300      	movs	r3, #0
   83d2c:	6423      	str	r3, [r4, #64]	; 0x40
   83d2e:	f1bb 0f00 	cmp.w	fp, #0
   83d32:	465d      	mov	r5, fp
   83d34:	db35      	blt.n	83da2 <_dtoa_r+0x9a>
   83d36:	2300      	movs	r3, #0
   83d38:	6033      	str	r3, [r6, #0]
   83d3a:	4b9d      	ldr	r3, [pc, #628]	; (83fb0 <_dtoa_r+0x2a8>)
   83d3c:	43ab      	bics	r3, r5
   83d3e:	d015      	beq.n	83d6c <_dtoa_r+0x64>
   83d40:	2200      	movs	r2, #0
   83d42:	2300      	movs	r3, #0
   83d44:	4650      	mov	r0, sl
   83d46:	4659      	mov	r1, fp
   83d48:	f002 fb10 	bl	8636c <__aeabi_dcmpeq>
   83d4c:	4680      	mov	r8, r0
   83d4e:	2800      	cmp	r0, #0
   83d50:	d02d      	beq.n	83dae <_dtoa_r+0xa6>
   83d52:	2301      	movs	r3, #1
   83d54:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83d56:	6013      	str	r3, [r2, #0]
   83d58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83d5a:	2b00      	cmp	r3, #0
   83d5c:	f000 80bd 	beq.w	83eda <_dtoa_r+0x1d2>
   83d60:	4894      	ldr	r0, [pc, #592]	; (83fb4 <_dtoa_r+0x2ac>)
   83d62:	6018      	str	r0, [r3, #0]
   83d64:	3801      	subs	r0, #1
   83d66:	b01b      	add	sp, #108	; 0x6c
   83d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d6c:	f242 730f 	movw	r3, #9999	; 0x270f
   83d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83d72:	6013      	str	r3, [r2, #0]
   83d74:	f1ba 0f00 	cmp.w	sl, #0
   83d78:	d10d      	bne.n	83d96 <_dtoa_r+0x8e>
   83d7a:	f3c5 0513 	ubfx	r5, r5, #0, #20
   83d7e:	b955      	cbnz	r5, 83d96 <_dtoa_r+0x8e>
   83d80:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83d82:	488d      	ldr	r0, [pc, #564]	; (83fb8 <_dtoa_r+0x2b0>)
   83d84:	2b00      	cmp	r3, #0
   83d86:	d0ee      	beq.n	83d66 <_dtoa_r+0x5e>
   83d88:	f100 0308 	add.w	r3, r0, #8
   83d8c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   83d8e:	6013      	str	r3, [r2, #0]
   83d90:	b01b      	add	sp, #108	; 0x6c
   83d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83d98:	4888      	ldr	r0, [pc, #544]	; (83fbc <_dtoa_r+0x2b4>)
   83d9a:	2b00      	cmp	r3, #0
   83d9c:	d0e3      	beq.n	83d66 <_dtoa_r+0x5e>
   83d9e:	1cc3      	adds	r3, r0, #3
   83da0:	e7f4      	b.n	83d8c <_dtoa_r+0x84>
   83da2:	2301      	movs	r3, #1
   83da4:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   83da8:	6033      	str	r3, [r6, #0]
   83daa:	46ab      	mov	fp, r5
   83dac:	e7c5      	b.n	83d3a <_dtoa_r+0x32>
   83dae:	aa18      	add	r2, sp, #96	; 0x60
   83db0:	ab19      	add	r3, sp, #100	; 0x64
   83db2:	9201      	str	r2, [sp, #4]
   83db4:	9300      	str	r3, [sp, #0]
   83db6:	4652      	mov	r2, sl
   83db8:	465b      	mov	r3, fp
   83dba:	4620      	mov	r0, r4
   83dbc:	f001 fb90 	bl	854e0 <__d2b>
   83dc0:	0d2b      	lsrs	r3, r5, #20
   83dc2:	4681      	mov	r9, r0
   83dc4:	d071      	beq.n	83eaa <_dtoa_r+0x1a2>
   83dc6:	4650      	mov	r0, sl
   83dc8:	f3cb 0213 	ubfx	r2, fp, #0, #20
   83dcc:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   83dd0:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83dd2:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   83dd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   83dda:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   83dde:	2200      	movs	r2, #0
   83de0:	4b77      	ldr	r3, [pc, #476]	; (83fc0 <_dtoa_r+0x2b8>)
   83de2:	f001 fea7 	bl	85b34 <__aeabi_dsub>
   83de6:	a36c      	add	r3, pc, #432	; (adr r3, 83f98 <_dtoa_r+0x290>)
   83de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   83dec:	f002 f856 	bl	85e9c <__aeabi_dmul>
   83df0:	a36b      	add	r3, pc, #428	; (adr r3, 83fa0 <_dtoa_r+0x298>)
   83df2:	e9d3 2300 	ldrd	r2, r3, [r3]
   83df6:	f001 fe9f 	bl	85b38 <__adddf3>
   83dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   83dfe:	4630      	mov	r0, r6
   83e00:	f001 ffe6 	bl	85dd0 <__aeabi_i2d>
   83e04:	a368      	add	r3, pc, #416	; (adr r3, 83fa8 <_dtoa_r+0x2a0>)
   83e06:	e9d3 2300 	ldrd	r2, r3, [r3]
   83e0a:	f002 f847 	bl	85e9c <__aeabi_dmul>
   83e0e:	4602      	mov	r2, r0
   83e10:	460b      	mov	r3, r1
   83e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   83e16:	f001 fe8f 	bl	85b38 <__adddf3>
   83e1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83e1e:	f002 faed 	bl	863fc <__aeabi_d2iz>
   83e22:	2200      	movs	r2, #0
   83e24:	9002      	str	r0, [sp, #8]
   83e26:	2300      	movs	r3, #0
   83e28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83e2c:	f002 faa8 	bl	86380 <__aeabi_dcmplt>
   83e30:	2800      	cmp	r0, #0
   83e32:	f040 816d 	bne.w	84110 <_dtoa_r+0x408>
   83e36:	9d02      	ldr	r5, [sp, #8]
   83e38:	2d16      	cmp	r5, #22
   83e3a:	f200 8157 	bhi.w	840ec <_dtoa_r+0x3e4>
   83e3e:	4961      	ldr	r1, [pc, #388]	; (83fc4 <_dtoa_r+0x2bc>)
   83e40:	4652      	mov	r2, sl
   83e42:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   83e46:	465b      	mov	r3, fp
   83e48:	e9d1 0100 	ldrd	r0, r1, [r1]
   83e4c:	f002 fab6 	bl	863bc <__aeabi_dcmpgt>
   83e50:	2800      	cmp	r0, #0
   83e52:	f000 81be 	beq.w	841d2 <_dtoa_r+0x4ca>
   83e56:	1e6b      	subs	r3, r5, #1
   83e58:	9302      	str	r3, [sp, #8]
   83e5a:	2300      	movs	r3, #0
   83e5c:	930e      	str	r3, [sp, #56]	; 0x38
   83e5e:	1bbf      	subs	r7, r7, r6
   83e60:	1e7b      	subs	r3, r7, #1
   83e62:	9308      	str	r3, [sp, #32]
   83e64:	f100 814e 	bmi.w	84104 <_dtoa_r+0x3fc>
   83e68:	2300      	movs	r3, #0
   83e6a:	930a      	str	r3, [sp, #40]	; 0x28
   83e6c:	9b02      	ldr	r3, [sp, #8]
   83e6e:	2b00      	cmp	r3, #0
   83e70:	f2c0 813f 	blt.w	840f2 <_dtoa_r+0x3ea>
   83e74:	9a08      	ldr	r2, [sp, #32]
   83e76:	930d      	str	r3, [sp, #52]	; 0x34
   83e78:	4611      	mov	r1, r2
   83e7a:	4419      	add	r1, r3
   83e7c:	2300      	movs	r3, #0
   83e7e:	9108      	str	r1, [sp, #32]
   83e80:	930c      	str	r3, [sp, #48]	; 0x30
   83e82:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83e84:	2b09      	cmp	r3, #9
   83e86:	d82a      	bhi.n	83ede <_dtoa_r+0x1d6>
   83e88:	2b05      	cmp	r3, #5
   83e8a:	f340 8658 	ble.w	84b3e <_dtoa_r+0xe36>
   83e8e:	2500      	movs	r5, #0
   83e90:	3b04      	subs	r3, #4
   83e92:	9324      	str	r3, [sp, #144]	; 0x90
   83e94:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83e96:	3b02      	subs	r3, #2
   83e98:	2b03      	cmp	r3, #3
   83e9a:	f200 863f 	bhi.w	84b1c <_dtoa_r+0xe14>
   83e9e:	e8df f013 	tbh	[pc, r3, lsl #1]
   83ea2:	03ce      	.short	0x03ce
   83ea4:	03d902c3 	.word	0x03d902c3
   83ea8:	045b      	.short	0x045b
   83eaa:	9f18      	ldr	r7, [sp, #96]	; 0x60
   83eac:	9e19      	ldr	r6, [sp, #100]	; 0x64
   83eae:	443e      	add	r6, r7
   83eb0:	f206 4332 	addw	r3, r6, #1074	; 0x432
   83eb4:	2b20      	cmp	r3, #32
   83eb6:	f340 8187 	ble.w	841c8 <_dtoa_r+0x4c0>
   83eba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   83ebe:	f206 4012 	addw	r0, r6, #1042	; 0x412
   83ec2:	409d      	lsls	r5, r3
   83ec4:	fa2a f000 	lsr.w	r0, sl, r0
   83ec8:	4328      	orrs	r0, r5
   83eca:	f001 ff71 	bl	85db0 <__aeabi_ui2d>
   83ece:	2301      	movs	r3, #1
   83ed0:	3e01      	subs	r6, #1
   83ed2:	9314      	str	r3, [sp, #80]	; 0x50
   83ed4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   83ed8:	e781      	b.n	83dde <_dtoa_r+0xd6>
   83eda:	483b      	ldr	r0, [pc, #236]	; (83fc8 <_dtoa_r+0x2c0>)
   83edc:	e743      	b.n	83d66 <_dtoa_r+0x5e>
   83ede:	2100      	movs	r1, #0
   83ee0:	4620      	mov	r0, r4
   83ee2:	6461      	str	r1, [r4, #68]	; 0x44
   83ee4:	9125      	str	r1, [sp, #148]	; 0x94
   83ee6:	f001 f853 	bl	84f90 <_Balloc>
   83eea:	f04f 33ff 	mov.w	r3, #4294967295
   83eee:	9307      	str	r3, [sp, #28]
   83ef0:	930f      	str	r3, [sp, #60]	; 0x3c
   83ef2:	2301      	movs	r3, #1
   83ef4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83ef6:	9004      	str	r0, [sp, #16]
   83ef8:	6420      	str	r0, [r4, #64]	; 0x40
   83efa:	9224      	str	r2, [sp, #144]	; 0x90
   83efc:	930b      	str	r3, [sp, #44]	; 0x2c
   83efe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83f00:	2b00      	cmp	r3, #0
   83f02:	f2c0 80d3 	blt.w	840ac <_dtoa_r+0x3a4>
   83f06:	9a02      	ldr	r2, [sp, #8]
   83f08:	2a0e      	cmp	r2, #14
   83f0a:	f300 80cf 	bgt.w	840ac <_dtoa_r+0x3a4>
   83f0e:	4b2d      	ldr	r3, [pc, #180]	; (83fc4 <_dtoa_r+0x2bc>)
   83f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83f14:	e9d3 2300 	ldrd	r2, r3, [r3]
   83f18:	e9cd 2308 	strd	r2, r3, [sp, #32]
   83f1c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83f1e:	2b00      	cmp	r3, #0
   83f20:	f2c0 83b4 	blt.w	8468c <_dtoa_r+0x984>
   83f24:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   83f28:	4650      	mov	r0, sl
   83f2a:	462a      	mov	r2, r5
   83f2c:	4633      	mov	r3, r6
   83f2e:	4659      	mov	r1, fp
   83f30:	f002 f8de 	bl	860f0 <__aeabi_ddiv>
   83f34:	f002 fa62 	bl	863fc <__aeabi_d2iz>
   83f38:	4680      	mov	r8, r0
   83f3a:	f001 ff49 	bl	85dd0 <__aeabi_i2d>
   83f3e:	462a      	mov	r2, r5
   83f40:	4633      	mov	r3, r6
   83f42:	f001 ffab 	bl	85e9c <__aeabi_dmul>
   83f46:	4602      	mov	r2, r0
   83f48:	460b      	mov	r3, r1
   83f4a:	4650      	mov	r0, sl
   83f4c:	4659      	mov	r1, fp
   83f4e:	f001 fdf1 	bl	85b34 <__aeabi_dsub>
   83f52:	9e07      	ldr	r6, [sp, #28]
   83f54:	9f04      	ldr	r7, [sp, #16]
   83f56:	f108 0530 	add.w	r5, r8, #48	; 0x30
   83f5a:	2e01      	cmp	r6, #1
   83f5c:	703d      	strb	r5, [r7, #0]
   83f5e:	4602      	mov	r2, r0
   83f60:	460b      	mov	r3, r1
   83f62:	f107 0501 	add.w	r5, r7, #1
   83f66:	d064      	beq.n	84032 <_dtoa_r+0x32a>
   83f68:	2200      	movs	r2, #0
   83f6a:	4b18      	ldr	r3, [pc, #96]	; (83fcc <_dtoa_r+0x2c4>)
   83f6c:	f001 ff96 	bl	85e9c <__aeabi_dmul>
   83f70:	2200      	movs	r2, #0
   83f72:	2300      	movs	r3, #0
   83f74:	4606      	mov	r6, r0
   83f76:	460f      	mov	r7, r1
   83f78:	f002 f9f8 	bl	8636c <__aeabi_dcmpeq>
   83f7c:	2800      	cmp	r0, #0
   83f7e:	f040 8082 	bne.w	84086 <_dtoa_r+0x37e>
   83f82:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   83f86:	f04f 0a00 	mov.w	sl, #0
   83f8a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83f8e:	f04f 0b00 	mov.w	fp, #0
   83f92:	940b      	str	r4, [sp, #44]	; 0x2c
   83f94:	e029      	b.n	83fea <_dtoa_r+0x2e2>
   83f96:	bf00      	nop
   83f98:	636f4361 	.word	0x636f4361
   83f9c:	3fd287a7 	.word	0x3fd287a7
   83fa0:	8b60c8b3 	.word	0x8b60c8b3
   83fa4:	3fc68a28 	.word	0x3fc68a28
   83fa8:	509f79fb 	.word	0x509f79fb
   83fac:	3fd34413 	.word	0x3fd34413
   83fb0:	7ff00000 	.word	0x7ff00000
   83fb4:	00086861 	.word	0x00086861
   83fb8:	00086884 	.word	0x00086884
   83fbc:	00086890 	.word	0x00086890
   83fc0:	3ff80000 	.word	0x3ff80000
   83fc4:	000868d0 	.word	0x000868d0
   83fc8:	00086860 	.word	0x00086860
   83fcc:	40240000 	.word	0x40240000
   83fd0:	2200      	movs	r2, #0
   83fd2:	4b81      	ldr	r3, [pc, #516]	; (841d8 <_dtoa_r+0x4d0>)
   83fd4:	f001 ff62 	bl	85e9c <__aeabi_dmul>
   83fd8:	4652      	mov	r2, sl
   83fda:	465b      	mov	r3, fp
   83fdc:	4606      	mov	r6, r0
   83fde:	460f      	mov	r7, r1
   83fe0:	f002 f9c4 	bl	8636c <__aeabi_dcmpeq>
   83fe4:	2800      	cmp	r0, #0
   83fe6:	f040 83ba 	bne.w	8475e <_dtoa_r+0xa56>
   83fea:	4642      	mov	r2, r8
   83fec:	464b      	mov	r3, r9
   83fee:	4630      	mov	r0, r6
   83ff0:	4639      	mov	r1, r7
   83ff2:	f002 f87d 	bl	860f0 <__aeabi_ddiv>
   83ff6:	f002 fa01 	bl	863fc <__aeabi_d2iz>
   83ffa:	4604      	mov	r4, r0
   83ffc:	f001 fee8 	bl	85dd0 <__aeabi_i2d>
   84000:	4642      	mov	r2, r8
   84002:	464b      	mov	r3, r9
   84004:	f001 ff4a 	bl	85e9c <__aeabi_dmul>
   84008:	4602      	mov	r2, r0
   8400a:	460b      	mov	r3, r1
   8400c:	4630      	mov	r0, r6
   8400e:	4639      	mov	r1, r7
   84010:	f001 fd90 	bl	85b34 <__aeabi_dsub>
   84014:	f104 0630 	add.w	r6, r4, #48	; 0x30
   84018:	f805 6b01 	strb.w	r6, [r5], #1
   8401c:	9e04      	ldr	r6, [sp, #16]
   8401e:	9f07      	ldr	r7, [sp, #28]
   84020:	1bae      	subs	r6, r5, r6
   84022:	42be      	cmp	r6, r7
   84024:	4602      	mov	r2, r0
   84026:	460b      	mov	r3, r1
   84028:	d1d2      	bne.n	83fd0 <_dtoa_r+0x2c8>
   8402a:	46a0      	mov	r8, r4
   8402c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84030:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84032:	4610      	mov	r0, r2
   84034:	4619      	mov	r1, r3
   84036:	f001 fd7f 	bl	85b38 <__adddf3>
   8403a:	4606      	mov	r6, r0
   8403c:	460f      	mov	r7, r1
   8403e:	4602      	mov	r2, r0
   84040:	460b      	mov	r3, r1
   84042:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84046:	f002 f99b 	bl	86380 <__aeabi_dcmplt>
   8404a:	b948      	cbnz	r0, 84060 <_dtoa_r+0x358>
   8404c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   84050:	4632      	mov	r2, r6
   84052:	463b      	mov	r3, r7
   84054:	f002 f98a 	bl	8636c <__aeabi_dcmpeq>
   84058:	b1a8      	cbz	r0, 84086 <_dtoa_r+0x37e>
   8405a:	f018 0f01 	tst.w	r8, #1
   8405e:	d012      	beq.n	84086 <_dtoa_r+0x37e>
   84060:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84064:	1e6b      	subs	r3, r5, #1
   84066:	9a04      	ldr	r2, [sp, #16]
   84068:	e004      	b.n	84074 <_dtoa_r+0x36c>
   8406a:	429a      	cmp	r2, r3
   8406c:	f000 8402 	beq.w	84874 <_dtoa_r+0xb6c>
   84070:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   84074:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   84078:	f103 0501 	add.w	r5, r3, #1
   8407c:	d0f5      	beq.n	8406a <_dtoa_r+0x362>
   8407e:	f108 0801 	add.w	r8, r8, #1
   84082:	f883 8000 	strb.w	r8, [r3]
   84086:	4649      	mov	r1, r9
   84088:	4620      	mov	r0, r4
   8408a:	f000 ffa7 	bl	84fdc <_Bfree>
   8408e:	2200      	movs	r2, #0
   84090:	9b02      	ldr	r3, [sp, #8]
   84092:	702a      	strb	r2, [r5, #0]
   84094:	9a26      	ldr	r2, [sp, #152]	; 0x98
   84096:	3301      	adds	r3, #1
   84098:	6013      	str	r3, [r2, #0]
   8409a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   8409c:	2b00      	cmp	r3, #0
   8409e:	f000 839f 	beq.w	847e0 <_dtoa_r+0xad8>
   840a2:	9804      	ldr	r0, [sp, #16]
   840a4:	601d      	str	r5, [r3, #0]
   840a6:	b01b      	add	sp, #108	; 0x6c
   840a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   840ae:	2a00      	cmp	r2, #0
   840b0:	d03e      	beq.n	84130 <_dtoa_r+0x428>
   840b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   840b4:	2a01      	cmp	r2, #1
   840b6:	f340 8311 	ble.w	846dc <_dtoa_r+0x9d4>
   840ba:	9b07      	ldr	r3, [sp, #28]
   840bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   840be:	1e5f      	subs	r7, r3, #1
   840c0:	42ba      	cmp	r2, r7
   840c2:	f2c0 8390 	blt.w	847e6 <_dtoa_r+0xade>
   840c6:	1bd7      	subs	r7, r2, r7
   840c8:	9b07      	ldr	r3, [sp, #28]
   840ca:	2b00      	cmp	r3, #0
   840cc:	f2c0 848c 	blt.w	849e8 <_dtoa_r+0xce0>
   840d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   840d2:	9b07      	ldr	r3, [sp, #28]
   840d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   840d6:	2101      	movs	r1, #1
   840d8:	441a      	add	r2, r3
   840da:	920a      	str	r2, [sp, #40]	; 0x28
   840dc:	9a08      	ldr	r2, [sp, #32]
   840de:	4620      	mov	r0, r4
   840e0:	441a      	add	r2, r3
   840e2:	9208      	str	r2, [sp, #32]
   840e4:	f001 f816 	bl	85114 <__i2b>
   840e8:	4606      	mov	r6, r0
   840ea:	e023      	b.n	84134 <_dtoa_r+0x42c>
   840ec:	2301      	movs	r3, #1
   840ee:	930e      	str	r3, [sp, #56]	; 0x38
   840f0:	e6b5      	b.n	83e5e <_dtoa_r+0x156>
   840f2:	2300      	movs	r3, #0
   840f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   840f6:	930d      	str	r3, [sp, #52]	; 0x34
   840f8:	9b02      	ldr	r3, [sp, #8]
   840fa:	1ad2      	subs	r2, r2, r3
   840fc:	425b      	negs	r3, r3
   840fe:	920a      	str	r2, [sp, #40]	; 0x28
   84100:	930c      	str	r3, [sp, #48]	; 0x30
   84102:	e6be      	b.n	83e82 <_dtoa_r+0x17a>
   84104:	f1c7 0301 	rsb	r3, r7, #1
   84108:	930a      	str	r3, [sp, #40]	; 0x28
   8410a:	2300      	movs	r3, #0
   8410c:	9308      	str	r3, [sp, #32]
   8410e:	e6ad      	b.n	83e6c <_dtoa_r+0x164>
   84110:	9d02      	ldr	r5, [sp, #8]
   84112:	4628      	mov	r0, r5
   84114:	f001 fe5c 	bl	85dd0 <__aeabi_i2d>
   84118:	4602      	mov	r2, r0
   8411a:	460b      	mov	r3, r1
   8411c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   84120:	f002 f924 	bl	8636c <__aeabi_dcmpeq>
   84124:	2800      	cmp	r0, #0
   84126:	f47f ae86 	bne.w	83e36 <_dtoa_r+0x12e>
   8412a:	1e6b      	subs	r3, r5, #1
   8412c:	9302      	str	r3, [sp, #8]
   8412e:	e682      	b.n	83e36 <_dtoa_r+0x12e>
   84130:	ad0a      	add	r5, sp, #40	; 0x28
   84132:	cde0      	ldmia	r5, {r5, r6, r7}
   84134:	2d00      	cmp	r5, #0
   84136:	dd0c      	ble.n	84152 <_dtoa_r+0x44a>
   84138:	9908      	ldr	r1, [sp, #32]
   8413a:	2900      	cmp	r1, #0
   8413c:	460b      	mov	r3, r1
   8413e:	dd08      	ble.n	84152 <_dtoa_r+0x44a>
   84140:	42a9      	cmp	r1, r5
   84142:	bfa8      	it	ge
   84144:	462b      	movge	r3, r5
   84146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   84148:	1aed      	subs	r5, r5, r3
   8414a:	1ad2      	subs	r2, r2, r3
   8414c:	1acb      	subs	r3, r1, r3
   8414e:	920a      	str	r2, [sp, #40]	; 0x28
   84150:	9308      	str	r3, [sp, #32]
   84152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84154:	b1d3      	cbz	r3, 8418c <_dtoa_r+0x484>
   84156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84158:	2b00      	cmp	r3, #0
   8415a:	f000 82b8 	beq.w	846ce <_dtoa_r+0x9c6>
   8415e:	2f00      	cmp	r7, #0
   84160:	dd10      	ble.n	84184 <_dtoa_r+0x47c>
   84162:	4631      	mov	r1, r6
   84164:	463a      	mov	r2, r7
   84166:	4620      	mov	r0, r4
   84168:	f001 f870 	bl	8524c <__pow5mult>
   8416c:	464a      	mov	r2, r9
   8416e:	4601      	mov	r1, r0
   84170:	4606      	mov	r6, r0
   84172:	4620      	mov	r0, r4
   84174:	f000 ffd8 	bl	85128 <__multiply>
   84178:	4603      	mov	r3, r0
   8417a:	4649      	mov	r1, r9
   8417c:	4620      	mov	r0, r4
   8417e:	4699      	mov	r9, r3
   84180:	f000 ff2c 	bl	84fdc <_Bfree>
   84184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84186:	1bda      	subs	r2, r3, r7
   84188:	f040 82a2 	bne.w	846d0 <_dtoa_r+0x9c8>
   8418c:	2101      	movs	r1, #1
   8418e:	4620      	mov	r0, r4
   84190:	f000 ffc0 	bl	85114 <__i2b>
   84194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   84196:	4680      	mov	r8, r0
   84198:	2b00      	cmp	r3, #0
   8419a:	dd1f      	ble.n	841dc <_dtoa_r+0x4d4>
   8419c:	4601      	mov	r1, r0
   8419e:	461a      	mov	r2, r3
   841a0:	4620      	mov	r0, r4
   841a2:	f001 f853 	bl	8524c <__pow5mult>
   841a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   841a8:	4680      	mov	r8, r0
   841aa:	2b01      	cmp	r3, #1
   841ac:	f340 8255 	ble.w	8465a <_dtoa_r+0x952>
   841b0:	2300      	movs	r3, #0
   841b2:	930c      	str	r3, [sp, #48]	; 0x30
   841b4:	f8d8 3010 	ldr.w	r3, [r8, #16]
   841b8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   841bc:	6918      	ldr	r0, [r3, #16]
   841be:	f000 ff59 	bl	85074 <__hi0bits>
   841c2:	f1c0 0020 	rsb	r0, r0, #32
   841c6:	e013      	b.n	841f0 <_dtoa_r+0x4e8>
   841c8:	f1c3 0520 	rsb	r5, r3, #32
   841cc:	fa0a f005 	lsl.w	r0, sl, r5
   841d0:	e67b      	b.n	83eca <_dtoa_r+0x1c2>
   841d2:	900e      	str	r0, [sp, #56]	; 0x38
   841d4:	e643      	b.n	83e5e <_dtoa_r+0x156>
   841d6:	bf00      	nop
   841d8:	40240000 	.word	0x40240000
   841dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   841de:	2b01      	cmp	r3, #1
   841e0:	f340 8285 	ble.w	846ee <_dtoa_r+0x9e6>
   841e4:	2300      	movs	r3, #0
   841e6:	930c      	str	r3, [sp, #48]	; 0x30
   841e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   841ea:	2001      	movs	r0, #1
   841ec:	2b00      	cmp	r3, #0
   841ee:	d1e1      	bne.n	841b4 <_dtoa_r+0x4ac>
   841f0:	9a08      	ldr	r2, [sp, #32]
   841f2:	4410      	add	r0, r2
   841f4:	f010 001f 	ands.w	r0, r0, #31
   841f8:	f000 80a1 	beq.w	8433e <_dtoa_r+0x636>
   841fc:	f1c0 0320 	rsb	r3, r0, #32
   84200:	2b04      	cmp	r3, #4
   84202:	f340 8486 	ble.w	84b12 <_dtoa_r+0xe0a>
   84206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84208:	f1c0 001c 	rsb	r0, r0, #28
   8420c:	4403      	add	r3, r0
   8420e:	930a      	str	r3, [sp, #40]	; 0x28
   84210:	4613      	mov	r3, r2
   84212:	4403      	add	r3, r0
   84214:	4405      	add	r5, r0
   84216:	9308      	str	r3, [sp, #32]
   84218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8421a:	2b00      	cmp	r3, #0
   8421c:	dd05      	ble.n	8422a <_dtoa_r+0x522>
   8421e:	4649      	mov	r1, r9
   84220:	461a      	mov	r2, r3
   84222:	4620      	mov	r0, r4
   84224:	f001 f862 	bl	852ec <__lshift>
   84228:	4681      	mov	r9, r0
   8422a:	9b08      	ldr	r3, [sp, #32]
   8422c:	2b00      	cmp	r3, #0
   8422e:	dd05      	ble.n	8423c <_dtoa_r+0x534>
   84230:	4641      	mov	r1, r8
   84232:	461a      	mov	r2, r3
   84234:	4620      	mov	r0, r4
   84236:	f001 f859 	bl	852ec <__lshift>
   8423a:	4680      	mov	r8, r0
   8423c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8423e:	2b00      	cmp	r3, #0
   84240:	f040 8086 	bne.w	84350 <_dtoa_r+0x648>
   84244:	9b07      	ldr	r3, [sp, #28]
   84246:	2b00      	cmp	r3, #0
   84248:	f340 8264 	ble.w	84714 <_dtoa_r+0xa0c>
   8424c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8424e:	2b00      	cmp	r3, #0
   84250:	f000 8098 	beq.w	84384 <_dtoa_r+0x67c>
   84254:	2d00      	cmp	r5, #0
   84256:	dd05      	ble.n	84264 <_dtoa_r+0x55c>
   84258:	4631      	mov	r1, r6
   8425a:	462a      	mov	r2, r5
   8425c:	4620      	mov	r0, r4
   8425e:	f001 f845 	bl	852ec <__lshift>
   84262:	4606      	mov	r6, r0
   84264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84266:	2b00      	cmp	r3, #0
   84268:	f040 8336 	bne.w	848d8 <_dtoa_r+0xbd0>
   8426c:	9608      	str	r6, [sp, #32]
   8426e:	9b07      	ldr	r3, [sp, #28]
   84270:	9a04      	ldr	r2, [sp, #16]
   84272:	3b01      	subs	r3, #1
   84274:	18d3      	adds	r3, r2, r3
   84276:	930b      	str	r3, [sp, #44]	; 0x2c
   84278:	4617      	mov	r7, r2
   8427a:	f00a 0301 	and.w	r3, sl, #1
   8427e:	46c2      	mov	sl, r8
   84280:	f8dd b020 	ldr.w	fp, [sp, #32]
   84284:	930c      	str	r3, [sp, #48]	; 0x30
   84286:	4651      	mov	r1, sl
   84288:	4648      	mov	r0, r9
   8428a:	f7ff fca7 	bl	83bdc <quorem>
   8428e:	4631      	mov	r1, r6
   84290:	4605      	mov	r5, r0
   84292:	4648      	mov	r0, r9
   84294:	f001 f87a 	bl	8538c <__mcmp>
   84298:	465a      	mov	r2, fp
   8429a:	9007      	str	r0, [sp, #28]
   8429c:	4651      	mov	r1, sl
   8429e:	4620      	mov	r0, r4
   842a0:	f001 f890 	bl	853c4 <__mdiff>
   842a4:	68c2      	ldr	r2, [r0, #12]
   842a6:	4680      	mov	r8, r0
   842a8:	f105 0330 	add.w	r3, r5, #48	; 0x30
   842ac:	2a00      	cmp	r2, #0
   842ae:	f040 8229 	bne.w	84704 <_dtoa_r+0x9fc>
   842b2:	4601      	mov	r1, r0
   842b4:	4648      	mov	r0, r9
   842b6:	930a      	str	r3, [sp, #40]	; 0x28
   842b8:	f001 f868 	bl	8538c <__mcmp>
   842bc:	4641      	mov	r1, r8
   842be:	9008      	str	r0, [sp, #32]
   842c0:	4620      	mov	r0, r4
   842c2:	f000 fe8b 	bl	84fdc <_Bfree>
   842c6:	9a08      	ldr	r2, [sp, #32]
   842c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   842ca:	b932      	cbnz	r2, 842da <_dtoa_r+0x5d2>
   842cc:	9924      	ldr	r1, [sp, #144]	; 0x90
   842ce:	b921      	cbnz	r1, 842da <_dtoa_r+0x5d2>
   842d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   842d2:	2a00      	cmp	r2, #0
   842d4:	f000 83ee 	beq.w	84ab4 <_dtoa_r+0xdac>
   842d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   842da:	9907      	ldr	r1, [sp, #28]
   842dc:	2900      	cmp	r1, #0
   842de:	f2c0 829f 	blt.w	84820 <_dtoa_r+0xb18>
   842e2:	d105      	bne.n	842f0 <_dtoa_r+0x5e8>
   842e4:	9924      	ldr	r1, [sp, #144]	; 0x90
   842e6:	b919      	cbnz	r1, 842f0 <_dtoa_r+0x5e8>
   842e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   842ea:	2900      	cmp	r1, #0
   842ec:	f000 8298 	beq.w	84820 <_dtoa_r+0xb18>
   842f0:	2a00      	cmp	r2, #0
   842f2:	f300 8305 	bgt.w	84900 <_dtoa_r+0xbf8>
   842f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   842f8:	f107 0801 	add.w	r8, r7, #1
   842fc:	4297      	cmp	r7, r2
   842fe:	703b      	strb	r3, [r7, #0]
   84300:	4645      	mov	r5, r8
   84302:	f000 830b 	beq.w	8491c <_dtoa_r+0xc14>
   84306:	4649      	mov	r1, r9
   84308:	2300      	movs	r3, #0
   8430a:	220a      	movs	r2, #10
   8430c:	4620      	mov	r0, r4
   8430e:	f000 fe6f 	bl	84ff0 <__multadd>
   84312:	455e      	cmp	r6, fp
   84314:	4681      	mov	r9, r0
   84316:	4631      	mov	r1, r6
   84318:	f04f 0300 	mov.w	r3, #0
   8431c:	f04f 020a 	mov.w	r2, #10
   84320:	4620      	mov	r0, r4
   84322:	f000 81e9 	beq.w	846f8 <_dtoa_r+0x9f0>
   84326:	f000 fe63 	bl	84ff0 <__multadd>
   8432a:	4659      	mov	r1, fp
   8432c:	4606      	mov	r6, r0
   8432e:	2300      	movs	r3, #0
   84330:	220a      	movs	r2, #10
   84332:	4620      	mov	r0, r4
   84334:	f000 fe5c 	bl	84ff0 <__multadd>
   84338:	4647      	mov	r7, r8
   8433a:	4683      	mov	fp, r0
   8433c:	e7a3      	b.n	84286 <_dtoa_r+0x57e>
   8433e:	201c      	movs	r0, #28
   84340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84342:	4405      	add	r5, r0
   84344:	4403      	add	r3, r0
   84346:	930a      	str	r3, [sp, #40]	; 0x28
   84348:	9b08      	ldr	r3, [sp, #32]
   8434a:	4403      	add	r3, r0
   8434c:	9308      	str	r3, [sp, #32]
   8434e:	e763      	b.n	84218 <_dtoa_r+0x510>
   84350:	4641      	mov	r1, r8
   84352:	4648      	mov	r0, r9
   84354:	f001 f81a 	bl	8538c <__mcmp>
   84358:	2800      	cmp	r0, #0
   8435a:	f6bf af73 	bge.w	84244 <_dtoa_r+0x53c>
   8435e:	9f02      	ldr	r7, [sp, #8]
   84360:	4649      	mov	r1, r9
   84362:	2300      	movs	r3, #0
   84364:	220a      	movs	r2, #10
   84366:	4620      	mov	r0, r4
   84368:	3f01      	subs	r7, #1
   8436a:	9702      	str	r7, [sp, #8]
   8436c:	f000 fe40 	bl	84ff0 <__multadd>
   84370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84372:	4681      	mov	r9, r0
   84374:	2b00      	cmp	r3, #0
   84376:	f040 83b5 	bne.w	84ae4 <_dtoa_r+0xddc>
   8437a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8437c:	2b00      	cmp	r3, #0
   8437e:	f340 83be 	ble.w	84afe <_dtoa_r+0xdf6>
   84382:	9307      	str	r3, [sp, #28]
   84384:	f8dd a010 	ldr.w	sl, [sp, #16]
   84388:	9f07      	ldr	r7, [sp, #28]
   8438a:	4655      	mov	r5, sl
   8438c:	e006      	b.n	8439c <_dtoa_r+0x694>
   8438e:	4649      	mov	r1, r9
   84390:	2300      	movs	r3, #0
   84392:	220a      	movs	r2, #10
   84394:	4620      	mov	r0, r4
   84396:	f000 fe2b 	bl	84ff0 <__multadd>
   8439a:	4681      	mov	r9, r0
   8439c:	4641      	mov	r1, r8
   8439e:	4648      	mov	r0, r9
   843a0:	f7ff fc1c 	bl	83bdc <quorem>
   843a4:	3030      	adds	r0, #48	; 0x30
   843a6:	f805 0b01 	strb.w	r0, [r5], #1
   843aa:	eba5 030a 	sub.w	r3, r5, sl
   843ae:	42bb      	cmp	r3, r7
   843b0:	dbed      	blt.n	8438e <_dtoa_r+0x686>
   843b2:	9b04      	ldr	r3, [sp, #16]
   843b4:	9a07      	ldr	r2, [sp, #28]
   843b6:	4682      	mov	sl, r0
   843b8:	2a01      	cmp	r2, #1
   843ba:	bfac      	ite	ge
   843bc:	189b      	addge	r3, r3, r2
   843be:	3301      	addlt	r3, #1
   843c0:	f04f 0b00 	mov.w	fp, #0
   843c4:	461d      	mov	r5, r3
   843c6:	4649      	mov	r1, r9
   843c8:	2201      	movs	r2, #1
   843ca:	4620      	mov	r0, r4
   843cc:	f000 ff8e 	bl	852ec <__lshift>
   843d0:	4641      	mov	r1, r8
   843d2:	4681      	mov	r9, r0
   843d4:	f000 ffda 	bl	8538c <__mcmp>
   843d8:	2800      	cmp	r0, #0
   843da:	f340 823f 	ble.w	8485c <_dtoa_r+0xb54>
   843de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   843e2:	1e6b      	subs	r3, r5, #1
   843e4:	9904      	ldr	r1, [sp, #16]
   843e6:	e004      	b.n	843f2 <_dtoa_r+0x6ea>
   843e8:	428b      	cmp	r3, r1
   843ea:	f000 81ae 	beq.w	8474a <_dtoa_r+0xa42>
   843ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   843f2:	2a39      	cmp	r2, #57	; 0x39
   843f4:	f103 0501 	add.w	r5, r3, #1
   843f8:	d0f6      	beq.n	843e8 <_dtoa_r+0x6e0>
   843fa:	3201      	adds	r2, #1
   843fc:	701a      	strb	r2, [r3, #0]
   843fe:	4641      	mov	r1, r8
   84400:	4620      	mov	r0, r4
   84402:	f000 fdeb 	bl	84fdc <_Bfree>
   84406:	2e00      	cmp	r6, #0
   84408:	f43f ae3d 	beq.w	84086 <_dtoa_r+0x37e>
   8440c:	f1bb 0f00 	cmp.w	fp, #0
   84410:	d005      	beq.n	8441e <_dtoa_r+0x716>
   84412:	45b3      	cmp	fp, r6
   84414:	d003      	beq.n	8441e <_dtoa_r+0x716>
   84416:	4659      	mov	r1, fp
   84418:	4620      	mov	r0, r4
   8441a:	f000 fddf 	bl	84fdc <_Bfree>
   8441e:	4631      	mov	r1, r6
   84420:	4620      	mov	r0, r4
   84422:	f000 fddb 	bl	84fdc <_Bfree>
   84426:	e62e      	b.n	84086 <_dtoa_r+0x37e>
   84428:	2300      	movs	r3, #0
   8442a:	930b      	str	r3, [sp, #44]	; 0x2c
   8442c:	9b02      	ldr	r3, [sp, #8]
   8442e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   84430:	4413      	add	r3, r2
   84432:	930f      	str	r3, [sp, #60]	; 0x3c
   84434:	3301      	adds	r3, #1
   84436:	2b01      	cmp	r3, #1
   84438:	461f      	mov	r7, r3
   8443a:	461e      	mov	r6, r3
   8443c:	bfb8      	it	lt
   8443e:	2701      	movlt	r7, #1
   84440:	9307      	str	r3, [sp, #28]
   84442:	2100      	movs	r1, #0
   84444:	2f17      	cmp	r7, #23
   84446:	6461      	str	r1, [r4, #68]	; 0x44
   84448:	d90a      	bls.n	84460 <_dtoa_r+0x758>
   8444a:	2201      	movs	r2, #1
   8444c:	2304      	movs	r3, #4
   8444e:	005b      	lsls	r3, r3, #1
   84450:	f103 0014 	add.w	r0, r3, #20
   84454:	4287      	cmp	r7, r0
   84456:	4611      	mov	r1, r2
   84458:	f102 0201 	add.w	r2, r2, #1
   8445c:	d2f7      	bcs.n	8444e <_dtoa_r+0x746>
   8445e:	6461      	str	r1, [r4, #68]	; 0x44
   84460:	4620      	mov	r0, r4
   84462:	f000 fd95 	bl	84f90 <_Balloc>
   84466:	2e0e      	cmp	r6, #14
   84468:	9004      	str	r0, [sp, #16]
   8446a:	6420      	str	r0, [r4, #64]	; 0x40
   8446c:	f63f ad47 	bhi.w	83efe <_dtoa_r+0x1f6>
   84470:	2d00      	cmp	r5, #0
   84472:	f43f ad44 	beq.w	83efe <_dtoa_r+0x1f6>
   84476:	9902      	ldr	r1, [sp, #8]
   84478:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   8447c:	2900      	cmp	r1, #0
   8447e:	f340 8203 	ble.w	84888 <_dtoa_r+0xb80>
   84482:	4bb9      	ldr	r3, [pc, #740]	; (84768 <_dtoa_r+0xa60>)
   84484:	f001 020f 	and.w	r2, r1, #15
   84488:	110d      	asrs	r5, r1, #4
   8448a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8448e:	06e9      	lsls	r1, r5, #27
   84490:	e9d3 6700 	ldrd	r6, r7, [r3]
   84494:	f140 81af 	bpl.w	847f6 <_dtoa_r+0xaee>
   84498:	4bb4      	ldr	r3, [pc, #720]	; (8476c <_dtoa_r+0xa64>)
   8449a:	4650      	mov	r0, sl
   8449c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   844a0:	4659      	mov	r1, fp
   844a2:	f001 fe25 	bl	860f0 <__aeabi_ddiv>
   844a6:	f04f 0a03 	mov.w	sl, #3
   844aa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   844ae:	f005 050f 	and.w	r5, r5, #15
   844b2:	b18d      	cbz	r5, 844d8 <_dtoa_r+0x7d0>
   844b4:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8476c <_dtoa_r+0xa64>
   844b8:	07ea      	lsls	r2, r5, #31
   844ba:	d509      	bpl.n	844d0 <_dtoa_r+0x7c8>
   844bc:	e9d8 2300 	ldrd	r2, r3, [r8]
   844c0:	4630      	mov	r0, r6
   844c2:	4639      	mov	r1, r7
   844c4:	f001 fcea 	bl	85e9c <__aeabi_dmul>
   844c8:	4606      	mov	r6, r0
   844ca:	460f      	mov	r7, r1
   844cc:	f10a 0a01 	add.w	sl, sl, #1
   844d0:	106d      	asrs	r5, r5, #1
   844d2:	f108 0808 	add.w	r8, r8, #8
   844d6:	d1ef      	bne.n	844b8 <_dtoa_r+0x7b0>
   844d8:	463b      	mov	r3, r7
   844da:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   844de:	4632      	mov	r2, r6
   844e0:	f001 fe06 	bl	860f0 <__aeabi_ddiv>
   844e4:	4607      	mov	r7, r0
   844e6:	4688      	mov	r8, r1
   844e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   844ea:	b143      	cbz	r3, 844fe <_dtoa_r+0x7f6>
   844ec:	2200      	movs	r2, #0
   844ee:	4ba0      	ldr	r3, [pc, #640]	; (84770 <_dtoa_r+0xa68>)
   844f0:	4638      	mov	r0, r7
   844f2:	4641      	mov	r1, r8
   844f4:	f001 ff44 	bl	86380 <__aeabi_dcmplt>
   844f8:	2800      	cmp	r0, #0
   844fa:	f040 8287 	bne.w	84a0c <_dtoa_r+0xd04>
   844fe:	4650      	mov	r0, sl
   84500:	f001 fc66 	bl	85dd0 <__aeabi_i2d>
   84504:	463a      	mov	r2, r7
   84506:	4643      	mov	r3, r8
   84508:	f001 fcc8 	bl	85e9c <__aeabi_dmul>
   8450c:	4b99      	ldr	r3, [pc, #612]	; (84774 <_dtoa_r+0xa6c>)
   8450e:	2200      	movs	r2, #0
   84510:	f001 fb12 	bl	85b38 <__adddf3>
   84514:	9b07      	ldr	r3, [sp, #28]
   84516:	4605      	mov	r5, r0
   84518:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8451c:	2b00      	cmp	r3, #0
   8451e:	f000 813f 	beq.w	847a0 <_dtoa_r+0xa98>
   84522:	9b02      	ldr	r3, [sp, #8]
   84524:	9315      	str	r3, [sp, #84]	; 0x54
   84526:	9b07      	ldr	r3, [sp, #28]
   84528:	9312      	str	r3, [sp, #72]	; 0x48
   8452a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8452c:	2b00      	cmp	r3, #0
   8452e:	f000 81fb 	beq.w	84928 <_dtoa_r+0xc20>
   84532:	9a12      	ldr	r2, [sp, #72]	; 0x48
   84534:	4b8c      	ldr	r3, [pc, #560]	; (84768 <_dtoa_r+0xa60>)
   84536:	2000      	movs	r0, #0
   84538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8453c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   84540:	498d      	ldr	r1, [pc, #564]	; (84778 <_dtoa_r+0xa70>)
   84542:	f001 fdd5 	bl	860f0 <__aeabi_ddiv>
   84546:	462a      	mov	r2, r5
   84548:	4633      	mov	r3, r6
   8454a:	f001 faf3 	bl	85b34 <__aeabi_dsub>
   8454e:	4682      	mov	sl, r0
   84550:	468b      	mov	fp, r1
   84552:	4638      	mov	r0, r7
   84554:	4641      	mov	r1, r8
   84556:	f001 ff51 	bl	863fc <__aeabi_d2iz>
   8455a:	4605      	mov	r5, r0
   8455c:	f001 fc38 	bl	85dd0 <__aeabi_i2d>
   84560:	4602      	mov	r2, r0
   84562:	460b      	mov	r3, r1
   84564:	4638      	mov	r0, r7
   84566:	4641      	mov	r1, r8
   84568:	f001 fae4 	bl	85b34 <__aeabi_dsub>
   8456c:	3530      	adds	r5, #48	; 0x30
   8456e:	fa5f f885 	uxtb.w	r8, r5
   84572:	9d04      	ldr	r5, [sp, #16]
   84574:	4606      	mov	r6, r0
   84576:	460f      	mov	r7, r1
   84578:	f885 8000 	strb.w	r8, [r5]
   8457c:	4602      	mov	r2, r0
   8457e:	460b      	mov	r3, r1
   84580:	4650      	mov	r0, sl
   84582:	4659      	mov	r1, fp
   84584:	3501      	adds	r5, #1
   84586:	f001 ff19 	bl	863bc <__aeabi_dcmpgt>
   8458a:	2800      	cmp	r0, #0
   8458c:	d154      	bne.n	84638 <_dtoa_r+0x930>
   8458e:	4632      	mov	r2, r6
   84590:	463b      	mov	r3, r7
   84592:	2000      	movs	r0, #0
   84594:	4976      	ldr	r1, [pc, #472]	; (84770 <_dtoa_r+0xa68>)
   84596:	f001 facd 	bl	85b34 <__aeabi_dsub>
   8459a:	4602      	mov	r2, r0
   8459c:	460b      	mov	r3, r1
   8459e:	4650      	mov	r0, sl
   845a0:	4659      	mov	r1, fp
   845a2:	f001 ff0b 	bl	863bc <__aeabi_dcmpgt>
   845a6:	2800      	cmp	r0, #0
   845a8:	f040 8270 	bne.w	84a8c <_dtoa_r+0xd84>
   845ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   845ae:	2a01      	cmp	r2, #1
   845b0:	f000 8112 	beq.w	847d8 <_dtoa_r+0xad0>
   845b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   845b6:	9a04      	ldr	r2, [sp, #16]
   845b8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   845bc:	4413      	add	r3, r2
   845be:	4699      	mov	r9, r3
   845c0:	e00f      	b.n	845e2 <_dtoa_r+0x8da>
   845c2:	4632      	mov	r2, r6
   845c4:	463b      	mov	r3, r7
   845c6:	2000      	movs	r0, #0
   845c8:	4969      	ldr	r1, [pc, #420]	; (84770 <_dtoa_r+0xa68>)
   845ca:	f001 fab3 	bl	85b34 <__aeabi_dsub>
   845ce:	4652      	mov	r2, sl
   845d0:	465b      	mov	r3, fp
   845d2:	f001 fed5 	bl	86380 <__aeabi_dcmplt>
   845d6:	2800      	cmp	r0, #0
   845d8:	f040 8256 	bne.w	84a88 <_dtoa_r+0xd80>
   845dc:	454d      	cmp	r5, r9
   845de:	f000 80f9 	beq.w	847d4 <_dtoa_r+0xacc>
   845e2:	4650      	mov	r0, sl
   845e4:	4659      	mov	r1, fp
   845e6:	2200      	movs	r2, #0
   845e8:	4b64      	ldr	r3, [pc, #400]	; (8477c <_dtoa_r+0xa74>)
   845ea:	f001 fc57 	bl	85e9c <__aeabi_dmul>
   845ee:	2200      	movs	r2, #0
   845f0:	4b62      	ldr	r3, [pc, #392]	; (8477c <_dtoa_r+0xa74>)
   845f2:	4682      	mov	sl, r0
   845f4:	468b      	mov	fp, r1
   845f6:	4630      	mov	r0, r6
   845f8:	4639      	mov	r1, r7
   845fa:	f001 fc4f 	bl	85e9c <__aeabi_dmul>
   845fe:	460f      	mov	r7, r1
   84600:	4606      	mov	r6, r0
   84602:	f001 fefb 	bl	863fc <__aeabi_d2iz>
   84606:	4680      	mov	r8, r0
   84608:	f001 fbe2 	bl	85dd0 <__aeabi_i2d>
   8460c:	4602      	mov	r2, r0
   8460e:	460b      	mov	r3, r1
   84610:	4630      	mov	r0, r6
   84612:	4639      	mov	r1, r7
   84614:	f001 fa8e 	bl	85b34 <__aeabi_dsub>
   84618:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8461c:	fa5f f888 	uxtb.w	r8, r8
   84620:	f805 8b01 	strb.w	r8, [r5], #1
   84624:	4652      	mov	r2, sl
   84626:	465b      	mov	r3, fp
   84628:	4606      	mov	r6, r0
   8462a:	460f      	mov	r7, r1
   8462c:	f001 fea8 	bl	86380 <__aeabi_dcmplt>
   84630:	2800      	cmp	r0, #0
   84632:	d0c6      	beq.n	845c2 <_dtoa_r+0x8ba>
   84634:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84638:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8463a:	9302      	str	r3, [sp, #8]
   8463c:	e523      	b.n	84086 <_dtoa_r+0x37e>
   8463e:	2300      	movs	r3, #0
   84640:	930b      	str	r3, [sp, #44]	; 0x2c
   84642:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84644:	2b00      	cmp	r3, #0
   84646:	f340 80dd 	ble.w	84804 <_dtoa_r+0xafc>
   8464a:	461f      	mov	r7, r3
   8464c:	461e      	mov	r6, r3
   8464e:	930f      	str	r3, [sp, #60]	; 0x3c
   84650:	9307      	str	r3, [sp, #28]
   84652:	e6f6      	b.n	84442 <_dtoa_r+0x73a>
   84654:	2301      	movs	r3, #1
   84656:	930b      	str	r3, [sp, #44]	; 0x2c
   84658:	e7f3      	b.n	84642 <_dtoa_r+0x93a>
   8465a:	f1ba 0f00 	cmp.w	sl, #0
   8465e:	f47f ada7 	bne.w	841b0 <_dtoa_r+0x4a8>
   84662:	f3cb 0313 	ubfx	r3, fp, #0, #20
   84666:	2b00      	cmp	r3, #0
   84668:	f47f adbc 	bne.w	841e4 <_dtoa_r+0x4dc>
   8466c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   84670:	0d3f      	lsrs	r7, r7, #20
   84672:	053f      	lsls	r7, r7, #20
   84674:	2f00      	cmp	r7, #0
   84676:	f000 820d 	beq.w	84a94 <_dtoa_r+0xd8c>
   8467a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8467c:	3301      	adds	r3, #1
   8467e:	930a      	str	r3, [sp, #40]	; 0x28
   84680:	9b08      	ldr	r3, [sp, #32]
   84682:	3301      	adds	r3, #1
   84684:	9308      	str	r3, [sp, #32]
   84686:	2301      	movs	r3, #1
   84688:	930c      	str	r3, [sp, #48]	; 0x30
   8468a:	e5ad      	b.n	841e8 <_dtoa_r+0x4e0>
   8468c:	9b07      	ldr	r3, [sp, #28]
   8468e:	2b00      	cmp	r3, #0
   84690:	f73f ac48 	bgt.w	83f24 <_dtoa_r+0x21c>
   84694:	f040 8222 	bne.w	84adc <_dtoa_r+0xdd4>
   84698:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   8469c:	2200      	movs	r2, #0
   8469e:	4b38      	ldr	r3, [pc, #224]	; (84780 <_dtoa_r+0xa78>)
   846a0:	f001 fbfc 	bl	85e9c <__aeabi_dmul>
   846a4:	4652      	mov	r2, sl
   846a6:	465b      	mov	r3, fp
   846a8:	f001 fe7e 	bl	863a8 <__aeabi_dcmpge>
   846ac:	f8dd 801c 	ldr.w	r8, [sp, #28]
   846b0:	4646      	mov	r6, r8
   846b2:	2800      	cmp	r0, #0
   846b4:	d041      	beq.n	8473a <_dtoa_r+0xa32>
   846b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   846b8:	9d04      	ldr	r5, [sp, #16]
   846ba:	43db      	mvns	r3, r3
   846bc:	9302      	str	r3, [sp, #8]
   846be:	4641      	mov	r1, r8
   846c0:	4620      	mov	r0, r4
   846c2:	f000 fc8b 	bl	84fdc <_Bfree>
   846c6:	2e00      	cmp	r6, #0
   846c8:	f43f acdd 	beq.w	84086 <_dtoa_r+0x37e>
   846cc:	e6a7      	b.n	8441e <_dtoa_r+0x716>
   846ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   846d0:	4649      	mov	r1, r9
   846d2:	4620      	mov	r0, r4
   846d4:	f000 fdba 	bl	8524c <__pow5mult>
   846d8:	4681      	mov	r9, r0
   846da:	e557      	b.n	8418c <_dtoa_r+0x484>
   846dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   846de:	2a00      	cmp	r2, #0
   846e0:	f000 8188 	beq.w	849f4 <_dtoa_r+0xcec>
   846e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
   846e8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   846ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   846ec:	e4f2      	b.n	840d4 <_dtoa_r+0x3cc>
   846ee:	f1ba 0f00 	cmp.w	sl, #0
   846f2:	f47f ad77 	bne.w	841e4 <_dtoa_r+0x4dc>
   846f6:	e7b4      	b.n	84662 <_dtoa_r+0x95a>
   846f8:	f000 fc7a 	bl	84ff0 <__multadd>
   846fc:	4647      	mov	r7, r8
   846fe:	4606      	mov	r6, r0
   84700:	4683      	mov	fp, r0
   84702:	e5c0      	b.n	84286 <_dtoa_r+0x57e>
   84704:	4601      	mov	r1, r0
   84706:	4620      	mov	r0, r4
   84708:	9308      	str	r3, [sp, #32]
   8470a:	f000 fc67 	bl	84fdc <_Bfree>
   8470e:	2201      	movs	r2, #1
   84710:	9b08      	ldr	r3, [sp, #32]
   84712:	e5e2      	b.n	842da <_dtoa_r+0x5d2>
   84714:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84716:	2b02      	cmp	r3, #2
   84718:	f77f ad98 	ble.w	8424c <_dtoa_r+0x544>
   8471c:	9b07      	ldr	r3, [sp, #28]
   8471e:	2b00      	cmp	r3, #0
   84720:	d1c9      	bne.n	846b6 <_dtoa_r+0x9ae>
   84722:	4641      	mov	r1, r8
   84724:	2205      	movs	r2, #5
   84726:	4620      	mov	r0, r4
   84728:	f000 fc62 	bl	84ff0 <__multadd>
   8472c:	4601      	mov	r1, r0
   8472e:	4680      	mov	r8, r0
   84730:	4648      	mov	r0, r9
   84732:	f000 fe2b 	bl	8538c <__mcmp>
   84736:	2800      	cmp	r0, #0
   84738:	ddbd      	ble.n	846b6 <_dtoa_r+0x9ae>
   8473a:	2331      	movs	r3, #49	; 0x31
   8473c:	9a02      	ldr	r2, [sp, #8]
   8473e:	9904      	ldr	r1, [sp, #16]
   84740:	3201      	adds	r2, #1
   84742:	9202      	str	r2, [sp, #8]
   84744:	700b      	strb	r3, [r1, #0]
   84746:	1c4d      	adds	r5, r1, #1
   84748:	e7b9      	b.n	846be <_dtoa_r+0x9b6>
   8474a:	2331      	movs	r3, #49	; 0x31
   8474c:	9a02      	ldr	r2, [sp, #8]
   8474e:	3201      	adds	r2, #1
   84750:	9202      	str	r2, [sp, #8]
   84752:	9a04      	ldr	r2, [sp, #16]
   84754:	7013      	strb	r3, [r2, #0]
   84756:	e652      	b.n	843fe <_dtoa_r+0x6f6>
   84758:	2301      	movs	r3, #1
   8475a:	930b      	str	r3, [sp, #44]	; 0x2c
   8475c:	e666      	b.n	8442c <_dtoa_r+0x724>
   8475e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   84762:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   84764:	e48f      	b.n	84086 <_dtoa_r+0x37e>
   84766:	bf00      	nop
   84768:	000868d0 	.word	0x000868d0
   8476c:	000868a8 	.word	0x000868a8
   84770:	3ff00000 	.word	0x3ff00000
   84774:	401c0000 	.word	0x401c0000
   84778:	3fe00000 	.word	0x3fe00000
   8477c:	40240000 	.word	0x40240000
   84780:	40140000 	.word	0x40140000
   84784:	4650      	mov	r0, sl
   84786:	f001 fb23 	bl	85dd0 <__aeabi_i2d>
   8478a:	463a      	mov	r2, r7
   8478c:	4643      	mov	r3, r8
   8478e:	f001 fb85 	bl	85e9c <__aeabi_dmul>
   84792:	2200      	movs	r2, #0
   84794:	4bc1      	ldr	r3, [pc, #772]	; (84a9c <_dtoa_r+0xd94>)
   84796:	f001 f9cf 	bl	85b38 <__adddf3>
   8479a:	4605      	mov	r5, r0
   8479c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   847a0:	4641      	mov	r1, r8
   847a2:	2200      	movs	r2, #0
   847a4:	4bbe      	ldr	r3, [pc, #760]	; (84aa0 <_dtoa_r+0xd98>)
   847a6:	4638      	mov	r0, r7
   847a8:	f001 f9c4 	bl	85b34 <__aeabi_dsub>
   847ac:	462a      	mov	r2, r5
   847ae:	4633      	mov	r3, r6
   847b0:	4682      	mov	sl, r0
   847b2:	468b      	mov	fp, r1
   847b4:	f001 fe02 	bl	863bc <__aeabi_dcmpgt>
   847b8:	4680      	mov	r8, r0
   847ba:	2800      	cmp	r0, #0
   847bc:	f040 8110 	bne.w	849e0 <_dtoa_r+0xcd8>
   847c0:	462a      	mov	r2, r5
   847c2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   847c6:	4650      	mov	r0, sl
   847c8:	4659      	mov	r1, fp
   847ca:	f001 fdd9 	bl	86380 <__aeabi_dcmplt>
   847ce:	b118      	cbz	r0, 847d8 <_dtoa_r+0xad0>
   847d0:	4646      	mov	r6, r8
   847d2:	e770      	b.n	846b6 <_dtoa_r+0x9ae>
   847d4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   847d8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   847dc:	f7ff bb8f 	b.w	83efe <_dtoa_r+0x1f6>
   847e0:	9804      	ldr	r0, [sp, #16]
   847e2:	f7ff bac0 	b.w	83d66 <_dtoa_r+0x5e>
   847e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   847e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   847ea:	1afb      	subs	r3, r7, r3
   847ec:	441a      	add	r2, r3
   847ee:	970c      	str	r7, [sp, #48]	; 0x30
   847f0:	920d      	str	r2, [sp, #52]	; 0x34
   847f2:	2700      	movs	r7, #0
   847f4:	e468      	b.n	840c8 <_dtoa_r+0x3c0>
   847f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   847fa:	f04f 0a02 	mov.w	sl, #2
   847fe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   84802:	e656      	b.n	844b2 <_dtoa_r+0x7aa>
   84804:	2100      	movs	r1, #0
   84806:	2301      	movs	r3, #1
   84808:	4620      	mov	r0, r4
   8480a:	6461      	str	r1, [r4, #68]	; 0x44
   8480c:	9325      	str	r3, [sp, #148]	; 0x94
   8480e:	f000 fbbf 	bl	84f90 <_Balloc>
   84812:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84814:	9004      	str	r0, [sp, #16]
   84816:	9307      	str	r3, [sp, #28]
   84818:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8481a:	6420      	str	r0, [r4, #64]	; 0x40
   8481c:	930f      	str	r3, [sp, #60]	; 0x3c
   8481e:	e627      	b.n	84470 <_dtoa_r+0x768>
   84820:	2a00      	cmp	r2, #0
   84822:	46d0      	mov	r8, sl
   84824:	f8cd b020 	str.w	fp, [sp, #32]
   84828:	469a      	mov	sl, r3
   8482a:	dd11      	ble.n	84850 <_dtoa_r+0xb48>
   8482c:	4649      	mov	r1, r9
   8482e:	2201      	movs	r2, #1
   84830:	4620      	mov	r0, r4
   84832:	f000 fd5b 	bl	852ec <__lshift>
   84836:	4641      	mov	r1, r8
   84838:	4681      	mov	r9, r0
   8483a:	f000 fda7 	bl	8538c <__mcmp>
   8483e:	2800      	cmp	r0, #0
   84840:	f340 8145 	ble.w	84ace <_dtoa_r+0xdc6>
   84844:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   84848:	f000 8105 	beq.w	84a56 <_dtoa_r+0xd4e>
   8484c:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   84850:	46b3      	mov	fp, r6
   84852:	f887 a000 	strb.w	sl, [r7]
   84856:	1c7d      	adds	r5, r7, #1
   84858:	9e08      	ldr	r6, [sp, #32]
   8485a:	e5d0      	b.n	843fe <_dtoa_r+0x6f6>
   8485c:	d104      	bne.n	84868 <_dtoa_r+0xb60>
   8485e:	f01a 0f01 	tst.w	sl, #1
   84862:	d001      	beq.n	84868 <_dtoa_r+0xb60>
   84864:	e5bb      	b.n	843de <_dtoa_r+0x6d6>
   84866:	4615      	mov	r5, r2
   84868:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   8486c:	1e6a      	subs	r2, r5, #1
   8486e:	2b30      	cmp	r3, #48	; 0x30
   84870:	d0f9      	beq.n	84866 <_dtoa_r+0xb5e>
   84872:	e5c4      	b.n	843fe <_dtoa_r+0x6f6>
   84874:	2230      	movs	r2, #48	; 0x30
   84876:	9904      	ldr	r1, [sp, #16]
   84878:	700a      	strb	r2, [r1, #0]
   8487a:	9a02      	ldr	r2, [sp, #8]
   8487c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84880:	3201      	adds	r2, #1
   84882:	9202      	str	r2, [sp, #8]
   84884:	f7ff bbfb 	b.w	8407e <_dtoa_r+0x376>
   84888:	f000 80bb 	beq.w	84a02 <_dtoa_r+0xcfa>
   8488c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   84890:	9b02      	ldr	r3, [sp, #8]
   84892:	f04f 0a02 	mov.w	sl, #2
   84896:	425d      	negs	r5, r3
   84898:	4b82      	ldr	r3, [pc, #520]	; (84aa4 <_dtoa_r+0xd9c>)
   8489a:	f005 020f 	and.w	r2, r5, #15
   8489e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   848a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   848a6:	f001 faf9 	bl	85e9c <__aeabi_dmul>
   848aa:	112d      	asrs	r5, r5, #4
   848ac:	4607      	mov	r7, r0
   848ae:	4688      	mov	r8, r1
   848b0:	f43f ae1a 	beq.w	844e8 <_dtoa_r+0x7e0>
   848b4:	4e7c      	ldr	r6, [pc, #496]	; (84aa8 <_dtoa_r+0xda0>)
   848b6:	07eb      	lsls	r3, r5, #31
   848b8:	d509      	bpl.n	848ce <_dtoa_r+0xbc6>
   848ba:	e9d6 2300 	ldrd	r2, r3, [r6]
   848be:	4638      	mov	r0, r7
   848c0:	4641      	mov	r1, r8
   848c2:	f001 faeb 	bl	85e9c <__aeabi_dmul>
   848c6:	4607      	mov	r7, r0
   848c8:	4688      	mov	r8, r1
   848ca:	f10a 0a01 	add.w	sl, sl, #1
   848ce:	106d      	asrs	r5, r5, #1
   848d0:	f106 0608 	add.w	r6, r6, #8
   848d4:	d1ef      	bne.n	848b6 <_dtoa_r+0xbae>
   848d6:	e607      	b.n	844e8 <_dtoa_r+0x7e0>
   848d8:	6871      	ldr	r1, [r6, #4]
   848da:	4620      	mov	r0, r4
   848dc:	f000 fb58 	bl	84f90 <_Balloc>
   848e0:	4605      	mov	r5, r0
   848e2:	6933      	ldr	r3, [r6, #16]
   848e4:	f106 010c 	add.w	r1, r6, #12
   848e8:	3302      	adds	r3, #2
   848ea:	009a      	lsls	r2, r3, #2
   848ec:	300c      	adds	r0, #12
   848ee:	f7fd fdaf 	bl	82450 <memcpy>
   848f2:	4629      	mov	r1, r5
   848f4:	2201      	movs	r2, #1
   848f6:	4620      	mov	r0, r4
   848f8:	f000 fcf8 	bl	852ec <__lshift>
   848fc:	9008      	str	r0, [sp, #32]
   848fe:	e4b6      	b.n	8426e <_dtoa_r+0x566>
   84900:	2b39      	cmp	r3, #57	; 0x39
   84902:	f8cd b020 	str.w	fp, [sp, #32]
   84906:	46d0      	mov	r8, sl
   84908:	f000 80a5 	beq.w	84a56 <_dtoa_r+0xd4e>
   8490c:	f103 0a01 	add.w	sl, r3, #1
   84910:	46b3      	mov	fp, r6
   84912:	f887 a000 	strb.w	sl, [r7]
   84916:	1c7d      	adds	r5, r7, #1
   84918:	9e08      	ldr	r6, [sp, #32]
   8491a:	e570      	b.n	843fe <_dtoa_r+0x6f6>
   8491c:	465a      	mov	r2, fp
   8491e:	46d0      	mov	r8, sl
   84920:	46b3      	mov	fp, r6
   84922:	469a      	mov	sl, r3
   84924:	4616      	mov	r6, r2
   84926:	e54e      	b.n	843c6 <_dtoa_r+0x6be>
   84928:	9812      	ldr	r0, [sp, #72]	; 0x48
   8492a:	495e      	ldr	r1, [pc, #376]	; (84aa4 <_dtoa_r+0xd9c>)
   8492c:	462a      	mov	r2, r5
   8492e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   84932:	4633      	mov	r3, r6
   84934:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   84938:	f001 fab0 	bl	85e9c <__aeabi_dmul>
   8493c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   84940:	4638      	mov	r0, r7
   84942:	4641      	mov	r1, r8
   84944:	f001 fd5a 	bl	863fc <__aeabi_d2iz>
   84948:	4605      	mov	r5, r0
   8494a:	f001 fa41 	bl	85dd0 <__aeabi_i2d>
   8494e:	4602      	mov	r2, r0
   84950:	460b      	mov	r3, r1
   84952:	4638      	mov	r0, r7
   84954:	4641      	mov	r1, r8
   84956:	f001 f8ed 	bl	85b34 <__aeabi_dsub>
   8495a:	4606      	mov	r6, r0
   8495c:	9812      	ldr	r0, [sp, #72]	; 0x48
   8495e:	9a04      	ldr	r2, [sp, #16]
   84960:	3530      	adds	r5, #48	; 0x30
   84962:	2801      	cmp	r0, #1
   84964:	7015      	strb	r5, [r2, #0]
   84966:	460f      	mov	r7, r1
   84968:	f102 0501 	add.w	r5, r2, #1
   8496c:	d026      	beq.n	849bc <_dtoa_r+0xcb4>
   8496e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   84970:	9a04      	ldr	r2, [sp, #16]
   84972:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   84976:	4413      	add	r3, r2
   84978:	f04f 0a00 	mov.w	sl, #0
   8497c:	4699      	mov	r9, r3
   8497e:	f8df b130 	ldr.w	fp, [pc, #304]	; 84ab0 <_dtoa_r+0xda8>
   84982:	4652      	mov	r2, sl
   84984:	465b      	mov	r3, fp
   84986:	4630      	mov	r0, r6
   84988:	4639      	mov	r1, r7
   8498a:	f001 fa87 	bl	85e9c <__aeabi_dmul>
   8498e:	460f      	mov	r7, r1
   84990:	4606      	mov	r6, r0
   84992:	f001 fd33 	bl	863fc <__aeabi_d2iz>
   84996:	4680      	mov	r8, r0
   84998:	f001 fa1a 	bl	85dd0 <__aeabi_i2d>
   8499c:	4602      	mov	r2, r0
   8499e:	460b      	mov	r3, r1
   849a0:	4630      	mov	r0, r6
   849a2:	4639      	mov	r1, r7
   849a4:	f001 f8c6 	bl	85b34 <__aeabi_dsub>
   849a8:	f108 0830 	add.w	r8, r8, #48	; 0x30
   849ac:	f805 8b01 	strb.w	r8, [r5], #1
   849b0:	454d      	cmp	r5, r9
   849b2:	4606      	mov	r6, r0
   849b4:	460f      	mov	r7, r1
   849b6:	d1e4      	bne.n	84982 <_dtoa_r+0xc7a>
   849b8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   849bc:	2200      	movs	r2, #0
   849be:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   849c2:	4b3a      	ldr	r3, [pc, #232]	; (84aac <_dtoa_r+0xda4>)
   849c4:	f001 f8b8 	bl	85b38 <__adddf3>
   849c8:	4632      	mov	r2, r6
   849ca:	463b      	mov	r3, r7
   849cc:	f001 fcd8 	bl	86380 <__aeabi_dcmplt>
   849d0:	2800      	cmp	r0, #0
   849d2:	d046      	beq.n	84a62 <_dtoa_r+0xd5a>
   849d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   849d6:	9302      	str	r3, [sp, #8]
   849d8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   849dc:	f7ff bb42 	b.w	84064 <_dtoa_r+0x35c>
   849e0:	f04f 0800 	mov.w	r8, #0
   849e4:	4646      	mov	r6, r8
   849e6:	e6a8      	b.n	8473a <_dtoa_r+0xa32>
   849e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   849ea:	9a07      	ldr	r2, [sp, #28]
   849ec:	1a9d      	subs	r5, r3, r2
   849ee:	2300      	movs	r3, #0
   849f0:	f7ff bb70 	b.w	840d4 <_dtoa_r+0x3cc>
   849f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   849f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   849f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   849fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   849fe:	f7ff bb69 	b.w	840d4 <_dtoa_r+0x3cc>
   84a02:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   84a06:	f04f 0a02 	mov.w	sl, #2
   84a0a:	e56d      	b.n	844e8 <_dtoa_r+0x7e0>
   84a0c:	9b07      	ldr	r3, [sp, #28]
   84a0e:	2b00      	cmp	r3, #0
   84a10:	f43f aeb8 	beq.w	84784 <_dtoa_r+0xa7c>
   84a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84a16:	2b00      	cmp	r3, #0
   84a18:	f77f aede 	ble.w	847d8 <_dtoa_r+0xad0>
   84a1c:	2200      	movs	r2, #0
   84a1e:	4b24      	ldr	r3, [pc, #144]	; (84ab0 <_dtoa_r+0xda8>)
   84a20:	4638      	mov	r0, r7
   84a22:	4641      	mov	r1, r8
   84a24:	f001 fa3a 	bl	85e9c <__aeabi_dmul>
   84a28:	4607      	mov	r7, r0
   84a2a:	4688      	mov	r8, r1
   84a2c:	f10a 0001 	add.w	r0, sl, #1
   84a30:	f001 f9ce 	bl	85dd0 <__aeabi_i2d>
   84a34:	463a      	mov	r2, r7
   84a36:	4643      	mov	r3, r8
   84a38:	f001 fa30 	bl	85e9c <__aeabi_dmul>
   84a3c:	2200      	movs	r2, #0
   84a3e:	4b17      	ldr	r3, [pc, #92]	; (84a9c <_dtoa_r+0xd94>)
   84a40:	f001 f87a 	bl	85b38 <__adddf3>
   84a44:	9a02      	ldr	r2, [sp, #8]
   84a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84a48:	3a01      	subs	r2, #1
   84a4a:	4605      	mov	r5, r0
   84a4c:	9215      	str	r2, [sp, #84]	; 0x54
   84a4e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   84a52:	9312      	str	r3, [sp, #72]	; 0x48
   84a54:	e569      	b.n	8452a <_dtoa_r+0x822>
   84a56:	2239      	movs	r2, #57	; 0x39
   84a58:	46b3      	mov	fp, r6
   84a5a:	703a      	strb	r2, [r7, #0]
   84a5c:	9e08      	ldr	r6, [sp, #32]
   84a5e:	1c7d      	adds	r5, r7, #1
   84a60:	e4bf      	b.n	843e2 <_dtoa_r+0x6da>
   84a62:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   84a66:	2000      	movs	r0, #0
   84a68:	4910      	ldr	r1, [pc, #64]	; (84aac <_dtoa_r+0xda4>)
   84a6a:	f001 f863 	bl	85b34 <__aeabi_dsub>
   84a6e:	4632      	mov	r2, r6
   84a70:	463b      	mov	r3, r7
   84a72:	f001 fca3 	bl	863bc <__aeabi_dcmpgt>
   84a76:	b908      	cbnz	r0, 84a7c <_dtoa_r+0xd74>
   84a78:	e6ae      	b.n	847d8 <_dtoa_r+0xad0>
   84a7a:	4615      	mov	r5, r2
   84a7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   84a80:	1e6a      	subs	r2, r5, #1
   84a82:	2b30      	cmp	r3, #48	; 0x30
   84a84:	d0f9      	beq.n	84a7a <_dtoa_r+0xd72>
   84a86:	e5d7      	b.n	84638 <_dtoa_r+0x930>
   84a88:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84a8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84a8e:	9302      	str	r3, [sp, #8]
   84a90:	f7ff bae8 	b.w	84064 <_dtoa_r+0x35c>
   84a94:	970c      	str	r7, [sp, #48]	; 0x30
   84a96:	f7ff bba7 	b.w	841e8 <_dtoa_r+0x4e0>
   84a9a:	bf00      	nop
   84a9c:	401c0000 	.word	0x401c0000
   84aa0:	40140000 	.word	0x40140000
   84aa4:	000868d0 	.word	0x000868d0
   84aa8:	000868a8 	.word	0x000868a8
   84aac:	3fe00000 	.word	0x3fe00000
   84ab0:	40240000 	.word	0x40240000
   84ab4:	2b39      	cmp	r3, #57	; 0x39
   84ab6:	f8cd b020 	str.w	fp, [sp, #32]
   84aba:	46d0      	mov	r8, sl
   84abc:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84ac0:	469a      	mov	sl, r3
   84ac2:	d0c8      	beq.n	84a56 <_dtoa_r+0xd4e>
   84ac4:	f1bb 0f00 	cmp.w	fp, #0
   84ac8:	f73f aec0 	bgt.w	8484c <_dtoa_r+0xb44>
   84acc:	e6c0      	b.n	84850 <_dtoa_r+0xb48>
   84ace:	f47f aebf 	bne.w	84850 <_dtoa_r+0xb48>
   84ad2:	f01a 0f01 	tst.w	sl, #1
   84ad6:	f43f aebb 	beq.w	84850 <_dtoa_r+0xb48>
   84ada:	e6b3      	b.n	84844 <_dtoa_r+0xb3c>
   84adc:	f04f 0800 	mov.w	r8, #0
   84ae0:	4646      	mov	r6, r8
   84ae2:	e5e8      	b.n	846b6 <_dtoa_r+0x9ae>
   84ae4:	4631      	mov	r1, r6
   84ae6:	2300      	movs	r3, #0
   84ae8:	220a      	movs	r2, #10
   84aea:	4620      	mov	r0, r4
   84aec:	f000 fa80 	bl	84ff0 <__multadd>
   84af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84af2:	4606      	mov	r6, r0
   84af4:	2b00      	cmp	r3, #0
   84af6:	dd07      	ble.n	84b08 <_dtoa_r+0xe00>
   84af8:	9307      	str	r3, [sp, #28]
   84afa:	f7ff bbab 	b.w	84254 <_dtoa_r+0x54c>
   84afe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84b00:	2b02      	cmp	r3, #2
   84b02:	dc1f      	bgt.n	84b44 <_dtoa_r+0xe3c>
   84b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84b06:	e43c      	b.n	84382 <_dtoa_r+0x67a>
   84b08:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84b0a:	2b02      	cmp	r3, #2
   84b0c:	dc1a      	bgt.n	84b44 <_dtoa_r+0xe3c>
   84b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84b10:	e7f2      	b.n	84af8 <_dtoa_r+0xdf0>
   84b12:	f43f ab81 	beq.w	84218 <_dtoa_r+0x510>
   84b16:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   84b1a:	e411      	b.n	84340 <_dtoa_r+0x638>
   84b1c:	2500      	movs	r5, #0
   84b1e:	4620      	mov	r0, r4
   84b20:	6465      	str	r5, [r4, #68]	; 0x44
   84b22:	4629      	mov	r1, r5
   84b24:	f000 fa34 	bl	84f90 <_Balloc>
   84b28:	f04f 33ff 	mov.w	r3, #4294967295
   84b2c:	9307      	str	r3, [sp, #28]
   84b2e:	930f      	str	r3, [sp, #60]	; 0x3c
   84b30:	2301      	movs	r3, #1
   84b32:	9004      	str	r0, [sp, #16]
   84b34:	9525      	str	r5, [sp, #148]	; 0x94
   84b36:	6420      	str	r0, [r4, #64]	; 0x40
   84b38:	930b      	str	r3, [sp, #44]	; 0x2c
   84b3a:	f7ff b9e0 	b.w	83efe <_dtoa_r+0x1f6>
   84b3e:	2501      	movs	r5, #1
   84b40:	f7ff b9a8 	b.w	83e94 <_dtoa_r+0x18c>
   84b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84b46:	9307      	str	r3, [sp, #28]
   84b48:	e5e8      	b.n	8471c <_dtoa_r+0xa14>
   84b4a:	bf00      	nop

00084b4c <__libc_fini_array>:
   84b4c:	b538      	push	{r3, r4, r5, lr}
   84b4e:	4c0a      	ldr	r4, [pc, #40]	; (84b78 <__libc_fini_array+0x2c>)
   84b50:	4d0a      	ldr	r5, [pc, #40]	; (84b7c <__libc_fini_array+0x30>)
   84b52:	1b64      	subs	r4, r4, r5
   84b54:	10a4      	asrs	r4, r4, #2
   84b56:	d00a      	beq.n	84b6e <__libc_fini_array+0x22>
   84b58:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   84b5c:	3b01      	subs	r3, #1
   84b5e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   84b62:	3c01      	subs	r4, #1
   84b64:	f855 3904 	ldr.w	r3, [r5], #-4
   84b68:	4798      	blx	r3
   84b6a:	2c00      	cmp	r4, #0
   84b6c:	d1f9      	bne.n	84b62 <__libc_fini_array+0x16>
   84b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84b72:	f001 bfa3 	b.w	86abc <_fini>
   84b76:	bf00      	nop
   84b78:	00086acc 	.word	0x00086acc
   84b7c:	00086ac8 	.word	0x00086ac8

00084b80 <_malloc_trim_r>:
   84b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84b82:	460c      	mov	r4, r1
   84b84:	4f23      	ldr	r7, [pc, #140]	; (84c14 <_malloc_trim_r+0x94>)
   84b86:	4606      	mov	r6, r0
   84b88:	f7fd fd26 	bl	825d8 <__malloc_lock>
   84b8c:	68bb      	ldr	r3, [r7, #8]
   84b8e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   84b92:	685d      	ldr	r5, [r3, #4]
   84b94:	310f      	adds	r1, #15
   84b96:	f025 0503 	bic.w	r5, r5, #3
   84b9a:	4429      	add	r1, r5
   84b9c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84ba0:	f021 010f 	bic.w	r1, r1, #15
   84ba4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84ba8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84bac:	db07      	blt.n	84bbe <_malloc_trim_r+0x3e>
   84bae:	2100      	movs	r1, #0
   84bb0:	4630      	mov	r0, r6
   84bb2:	f7fd fd1d 	bl	825f0 <_sbrk_r>
   84bb6:	68bb      	ldr	r3, [r7, #8]
   84bb8:	442b      	add	r3, r5
   84bba:	4298      	cmp	r0, r3
   84bbc:	d004      	beq.n	84bc8 <_malloc_trim_r+0x48>
   84bbe:	4630      	mov	r0, r6
   84bc0:	f7fd fd10 	bl	825e4 <__malloc_unlock>
   84bc4:	2000      	movs	r0, #0
   84bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bc8:	4261      	negs	r1, r4
   84bca:	4630      	mov	r0, r6
   84bcc:	f7fd fd10 	bl	825f0 <_sbrk_r>
   84bd0:	3001      	adds	r0, #1
   84bd2:	d00d      	beq.n	84bf0 <_malloc_trim_r+0x70>
   84bd4:	4b10      	ldr	r3, [pc, #64]	; (84c18 <_malloc_trim_r+0x98>)
   84bd6:	68ba      	ldr	r2, [r7, #8]
   84bd8:	6819      	ldr	r1, [r3, #0]
   84bda:	1b2d      	subs	r5, r5, r4
   84bdc:	f045 0501 	orr.w	r5, r5, #1
   84be0:	4630      	mov	r0, r6
   84be2:	1b09      	subs	r1, r1, r4
   84be4:	6055      	str	r5, [r2, #4]
   84be6:	6019      	str	r1, [r3, #0]
   84be8:	f7fd fcfc 	bl	825e4 <__malloc_unlock>
   84bec:	2001      	movs	r0, #1
   84bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bf0:	2100      	movs	r1, #0
   84bf2:	4630      	mov	r0, r6
   84bf4:	f7fd fcfc 	bl	825f0 <_sbrk_r>
   84bf8:	68ba      	ldr	r2, [r7, #8]
   84bfa:	1a83      	subs	r3, r0, r2
   84bfc:	2b0f      	cmp	r3, #15
   84bfe:	ddde      	ble.n	84bbe <_malloc_trim_r+0x3e>
   84c00:	4c06      	ldr	r4, [pc, #24]	; (84c1c <_malloc_trim_r+0x9c>)
   84c02:	4905      	ldr	r1, [pc, #20]	; (84c18 <_malloc_trim_r+0x98>)
   84c04:	6824      	ldr	r4, [r4, #0]
   84c06:	f043 0301 	orr.w	r3, r3, #1
   84c0a:	1b00      	subs	r0, r0, r4
   84c0c:	6053      	str	r3, [r2, #4]
   84c0e:	6008      	str	r0, [r1, #0]
   84c10:	e7d5      	b.n	84bbe <_malloc_trim_r+0x3e>
   84c12:	bf00      	nop
   84c14:	200708f8 	.word	0x200708f8
   84c18:	20071014 	.word	0x20071014
   84c1c:	20070d00 	.word	0x20070d00

00084c20 <_free_r>:
   84c20:	2900      	cmp	r1, #0
   84c22:	d044      	beq.n	84cae <_free_r+0x8e>
   84c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c28:	460d      	mov	r5, r1
   84c2a:	4680      	mov	r8, r0
   84c2c:	f7fd fcd4 	bl	825d8 <__malloc_lock>
   84c30:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84c34:	4969      	ldr	r1, [pc, #420]	; (84ddc <_free_r+0x1bc>)
   84c36:	f1a5 0408 	sub.w	r4, r5, #8
   84c3a:	f027 0301 	bic.w	r3, r7, #1
   84c3e:	18e2      	adds	r2, r4, r3
   84c40:	688e      	ldr	r6, [r1, #8]
   84c42:	6850      	ldr	r0, [r2, #4]
   84c44:	42b2      	cmp	r2, r6
   84c46:	f020 0003 	bic.w	r0, r0, #3
   84c4a:	d05e      	beq.n	84d0a <_free_r+0xea>
   84c4c:	07fe      	lsls	r6, r7, #31
   84c4e:	6050      	str	r0, [r2, #4]
   84c50:	d40b      	bmi.n	84c6a <_free_r+0x4a>
   84c52:	f855 7c08 	ldr.w	r7, [r5, #-8]
   84c56:	f101 0e08 	add.w	lr, r1, #8
   84c5a:	1be4      	subs	r4, r4, r7
   84c5c:	68a5      	ldr	r5, [r4, #8]
   84c5e:	443b      	add	r3, r7
   84c60:	4575      	cmp	r5, lr
   84c62:	d06d      	beq.n	84d40 <_free_r+0x120>
   84c64:	68e7      	ldr	r7, [r4, #12]
   84c66:	60ef      	str	r7, [r5, #12]
   84c68:	60bd      	str	r5, [r7, #8]
   84c6a:	1815      	adds	r5, r2, r0
   84c6c:	686d      	ldr	r5, [r5, #4]
   84c6e:	07ed      	lsls	r5, r5, #31
   84c70:	d53e      	bpl.n	84cf0 <_free_r+0xd0>
   84c72:	f043 0201 	orr.w	r2, r3, #1
   84c76:	6062      	str	r2, [r4, #4]
   84c78:	50e3      	str	r3, [r4, r3]
   84c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84c7e:	d217      	bcs.n	84cb0 <_free_r+0x90>
   84c80:	2201      	movs	r2, #1
   84c82:	08db      	lsrs	r3, r3, #3
   84c84:	1098      	asrs	r0, r3, #2
   84c86:	684d      	ldr	r5, [r1, #4]
   84c88:	4413      	add	r3, r2
   84c8a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   84c8e:	4082      	lsls	r2, r0
   84c90:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   84c94:	432a      	orrs	r2, r5
   84c96:	3808      	subs	r0, #8
   84c98:	60e0      	str	r0, [r4, #12]
   84c9a:	60a7      	str	r7, [r4, #8]
   84c9c:	604a      	str	r2, [r1, #4]
   84c9e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   84ca2:	60fc      	str	r4, [r7, #12]
   84ca4:	4640      	mov	r0, r8
   84ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84caa:	f7fd bc9b 	b.w	825e4 <__malloc_unlock>
   84cae:	4770      	bx	lr
   84cb0:	0a5a      	lsrs	r2, r3, #9
   84cb2:	2a04      	cmp	r2, #4
   84cb4:	d852      	bhi.n	84d5c <_free_r+0x13c>
   84cb6:	099a      	lsrs	r2, r3, #6
   84cb8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   84cbc:	00ff      	lsls	r7, r7, #3
   84cbe:	f102 0538 	add.w	r5, r2, #56	; 0x38
   84cc2:	19c8      	adds	r0, r1, r7
   84cc4:	59ca      	ldr	r2, [r1, r7]
   84cc6:	3808      	subs	r0, #8
   84cc8:	4290      	cmp	r0, r2
   84cca:	d04f      	beq.n	84d6c <_free_r+0x14c>
   84ccc:	6851      	ldr	r1, [r2, #4]
   84cce:	f021 0103 	bic.w	r1, r1, #3
   84cd2:	428b      	cmp	r3, r1
   84cd4:	d232      	bcs.n	84d3c <_free_r+0x11c>
   84cd6:	6892      	ldr	r2, [r2, #8]
   84cd8:	4290      	cmp	r0, r2
   84cda:	d1f7      	bne.n	84ccc <_free_r+0xac>
   84cdc:	68c3      	ldr	r3, [r0, #12]
   84cde:	60a0      	str	r0, [r4, #8]
   84ce0:	60e3      	str	r3, [r4, #12]
   84ce2:	609c      	str	r4, [r3, #8]
   84ce4:	60c4      	str	r4, [r0, #12]
   84ce6:	4640      	mov	r0, r8
   84ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84cec:	f7fd bc7a 	b.w	825e4 <__malloc_unlock>
   84cf0:	6895      	ldr	r5, [r2, #8]
   84cf2:	4f3b      	ldr	r7, [pc, #236]	; (84de0 <_free_r+0x1c0>)
   84cf4:	4403      	add	r3, r0
   84cf6:	42bd      	cmp	r5, r7
   84cf8:	d040      	beq.n	84d7c <_free_r+0x15c>
   84cfa:	68d0      	ldr	r0, [r2, #12]
   84cfc:	f043 0201 	orr.w	r2, r3, #1
   84d00:	60e8      	str	r0, [r5, #12]
   84d02:	6085      	str	r5, [r0, #8]
   84d04:	6062      	str	r2, [r4, #4]
   84d06:	50e3      	str	r3, [r4, r3]
   84d08:	e7b7      	b.n	84c7a <_free_r+0x5a>
   84d0a:	07ff      	lsls	r7, r7, #31
   84d0c:	4403      	add	r3, r0
   84d0e:	d407      	bmi.n	84d20 <_free_r+0x100>
   84d10:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84d14:	1b64      	subs	r4, r4, r5
   84d16:	68e2      	ldr	r2, [r4, #12]
   84d18:	68a0      	ldr	r0, [r4, #8]
   84d1a:	442b      	add	r3, r5
   84d1c:	60c2      	str	r2, [r0, #12]
   84d1e:	6090      	str	r0, [r2, #8]
   84d20:	4a30      	ldr	r2, [pc, #192]	; (84de4 <_free_r+0x1c4>)
   84d22:	f043 0001 	orr.w	r0, r3, #1
   84d26:	6812      	ldr	r2, [r2, #0]
   84d28:	6060      	str	r0, [r4, #4]
   84d2a:	4293      	cmp	r3, r2
   84d2c:	608c      	str	r4, [r1, #8]
   84d2e:	d3b9      	bcc.n	84ca4 <_free_r+0x84>
   84d30:	4b2d      	ldr	r3, [pc, #180]	; (84de8 <_free_r+0x1c8>)
   84d32:	4640      	mov	r0, r8
   84d34:	6819      	ldr	r1, [r3, #0]
   84d36:	f7ff ff23 	bl	84b80 <_malloc_trim_r>
   84d3a:	e7b3      	b.n	84ca4 <_free_r+0x84>
   84d3c:	4610      	mov	r0, r2
   84d3e:	e7cd      	b.n	84cdc <_free_r+0xbc>
   84d40:	1811      	adds	r1, r2, r0
   84d42:	6849      	ldr	r1, [r1, #4]
   84d44:	07c9      	lsls	r1, r1, #31
   84d46:	d444      	bmi.n	84dd2 <_free_r+0x1b2>
   84d48:	6891      	ldr	r1, [r2, #8]
   84d4a:	4403      	add	r3, r0
   84d4c:	68d2      	ldr	r2, [r2, #12]
   84d4e:	f043 0001 	orr.w	r0, r3, #1
   84d52:	60ca      	str	r2, [r1, #12]
   84d54:	6091      	str	r1, [r2, #8]
   84d56:	6060      	str	r0, [r4, #4]
   84d58:	50e3      	str	r3, [r4, r3]
   84d5a:	e7a3      	b.n	84ca4 <_free_r+0x84>
   84d5c:	2a14      	cmp	r2, #20
   84d5e:	d816      	bhi.n	84d8e <_free_r+0x16e>
   84d60:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   84d64:	00ff      	lsls	r7, r7, #3
   84d66:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   84d6a:	e7aa      	b.n	84cc2 <_free_r+0xa2>
   84d6c:	2301      	movs	r3, #1
   84d6e:	10aa      	asrs	r2, r5, #2
   84d70:	684d      	ldr	r5, [r1, #4]
   84d72:	4093      	lsls	r3, r2
   84d74:	432b      	orrs	r3, r5
   84d76:	604b      	str	r3, [r1, #4]
   84d78:	4603      	mov	r3, r0
   84d7a:	e7b0      	b.n	84cde <_free_r+0xbe>
   84d7c:	f043 0201 	orr.w	r2, r3, #1
   84d80:	614c      	str	r4, [r1, #20]
   84d82:	610c      	str	r4, [r1, #16]
   84d84:	60e5      	str	r5, [r4, #12]
   84d86:	60a5      	str	r5, [r4, #8]
   84d88:	6062      	str	r2, [r4, #4]
   84d8a:	50e3      	str	r3, [r4, r3]
   84d8c:	e78a      	b.n	84ca4 <_free_r+0x84>
   84d8e:	2a54      	cmp	r2, #84	; 0x54
   84d90:	d806      	bhi.n	84da0 <_free_r+0x180>
   84d92:	0b1a      	lsrs	r2, r3, #12
   84d94:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84d98:	00ff      	lsls	r7, r7, #3
   84d9a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   84d9e:	e790      	b.n	84cc2 <_free_r+0xa2>
   84da0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84da4:	d806      	bhi.n	84db4 <_free_r+0x194>
   84da6:	0bda      	lsrs	r2, r3, #15
   84da8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   84dac:	00ff      	lsls	r7, r7, #3
   84dae:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84db2:	e786      	b.n	84cc2 <_free_r+0xa2>
   84db4:	f240 5054 	movw	r0, #1364	; 0x554
   84db8:	4282      	cmp	r2, r0
   84dba:	d806      	bhi.n	84dca <_free_r+0x1aa>
   84dbc:	0c9a      	lsrs	r2, r3, #18
   84dbe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84dc2:	00ff      	lsls	r7, r7, #3
   84dc4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84dc8:	e77b      	b.n	84cc2 <_free_r+0xa2>
   84dca:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   84dce:	257e      	movs	r5, #126	; 0x7e
   84dd0:	e777      	b.n	84cc2 <_free_r+0xa2>
   84dd2:	f043 0101 	orr.w	r1, r3, #1
   84dd6:	6061      	str	r1, [r4, #4]
   84dd8:	6013      	str	r3, [r2, #0]
   84dda:	e763      	b.n	84ca4 <_free_r+0x84>
   84ddc:	200708f8 	.word	0x200708f8
   84de0:	20070900 	.word	0x20070900
   84de4:	20070d04 	.word	0x20070d04
   84de8:	20071044 	.word	0x20071044

00084dec <_localeconv_r>:
   84dec:	4a04      	ldr	r2, [pc, #16]	; (84e00 <_localeconv_r+0x14>)
   84dee:	4b05      	ldr	r3, [pc, #20]	; (84e04 <_localeconv_r+0x18>)
   84df0:	6812      	ldr	r2, [r2, #0]
   84df2:	6b50      	ldr	r0, [r2, #52]	; 0x34
   84df4:	2800      	cmp	r0, #0
   84df6:	bf08      	it	eq
   84df8:	4618      	moveq	r0, r3
   84dfa:	30f0      	adds	r0, #240	; 0xf0
   84dfc:	4770      	bx	lr
   84dfe:	bf00      	nop
   84e00:	200704cc 	.word	0x200704cc
   84e04:	20070d0c 	.word	0x20070d0c

00084e08 <__retarget_lock_acquire_recursive>:
   84e08:	4770      	bx	lr
   84e0a:	bf00      	nop

00084e0c <__retarget_lock_release_recursive>:
   84e0c:	4770      	bx	lr
   84e0e:	bf00      	nop

00084e10 <__ascii_mbtowc>:
   84e10:	b082      	sub	sp, #8
   84e12:	b149      	cbz	r1, 84e28 <__ascii_mbtowc+0x18>
   84e14:	b15a      	cbz	r2, 84e2e <__ascii_mbtowc+0x1e>
   84e16:	b16b      	cbz	r3, 84e34 <__ascii_mbtowc+0x24>
   84e18:	7813      	ldrb	r3, [r2, #0]
   84e1a:	600b      	str	r3, [r1, #0]
   84e1c:	7812      	ldrb	r2, [r2, #0]
   84e1e:	1c10      	adds	r0, r2, #0
   84e20:	bf18      	it	ne
   84e22:	2001      	movne	r0, #1
   84e24:	b002      	add	sp, #8
   84e26:	4770      	bx	lr
   84e28:	a901      	add	r1, sp, #4
   84e2a:	2a00      	cmp	r2, #0
   84e2c:	d1f3      	bne.n	84e16 <__ascii_mbtowc+0x6>
   84e2e:	4610      	mov	r0, r2
   84e30:	b002      	add	sp, #8
   84e32:	4770      	bx	lr
   84e34:	f06f 0001 	mvn.w	r0, #1
   84e38:	e7f4      	b.n	84e24 <__ascii_mbtowc+0x14>
   84e3a:	bf00      	nop

00084e3c <memchr>:
   84e3c:	0783      	lsls	r3, r0, #30
   84e3e:	b470      	push	{r4, r5, r6}
   84e40:	b2cd      	uxtb	r5, r1
   84e42:	d03d      	beq.n	84ec0 <memchr+0x84>
   84e44:	1e54      	subs	r4, r2, #1
   84e46:	b30a      	cbz	r2, 84e8c <memchr+0x50>
   84e48:	7803      	ldrb	r3, [r0, #0]
   84e4a:	42ab      	cmp	r3, r5
   84e4c:	d01f      	beq.n	84e8e <memchr+0x52>
   84e4e:	1c43      	adds	r3, r0, #1
   84e50:	e005      	b.n	84e5e <memchr+0x22>
   84e52:	f114 34ff 	adds.w	r4, r4, #4294967295
   84e56:	d319      	bcc.n	84e8c <memchr+0x50>
   84e58:	7802      	ldrb	r2, [r0, #0]
   84e5a:	42aa      	cmp	r2, r5
   84e5c:	d017      	beq.n	84e8e <memchr+0x52>
   84e5e:	f013 0f03 	tst.w	r3, #3
   84e62:	4618      	mov	r0, r3
   84e64:	f103 0301 	add.w	r3, r3, #1
   84e68:	d1f3      	bne.n	84e52 <memchr+0x16>
   84e6a:	2c03      	cmp	r4, #3
   84e6c:	d811      	bhi.n	84e92 <memchr+0x56>
   84e6e:	b34c      	cbz	r4, 84ec4 <memchr+0x88>
   84e70:	7803      	ldrb	r3, [r0, #0]
   84e72:	42ab      	cmp	r3, r5
   84e74:	d00b      	beq.n	84e8e <memchr+0x52>
   84e76:	4404      	add	r4, r0
   84e78:	1c43      	adds	r3, r0, #1
   84e7a:	e002      	b.n	84e82 <memchr+0x46>
   84e7c:	7802      	ldrb	r2, [r0, #0]
   84e7e:	42aa      	cmp	r2, r5
   84e80:	d005      	beq.n	84e8e <memchr+0x52>
   84e82:	429c      	cmp	r4, r3
   84e84:	4618      	mov	r0, r3
   84e86:	f103 0301 	add.w	r3, r3, #1
   84e8a:	d1f7      	bne.n	84e7c <memchr+0x40>
   84e8c:	2000      	movs	r0, #0
   84e8e:	bc70      	pop	{r4, r5, r6}
   84e90:	4770      	bx	lr
   84e92:	0209      	lsls	r1, r1, #8
   84e94:	b289      	uxth	r1, r1
   84e96:	4329      	orrs	r1, r5
   84e98:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84e9c:	6803      	ldr	r3, [r0, #0]
   84e9e:	4606      	mov	r6, r0
   84ea0:	404b      	eors	r3, r1
   84ea2:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84ea6:	ea22 0303 	bic.w	r3, r2, r3
   84eaa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84eae:	f100 0004 	add.w	r0, r0, #4
   84eb2:	d103      	bne.n	84ebc <memchr+0x80>
   84eb4:	3c04      	subs	r4, #4
   84eb6:	2c03      	cmp	r4, #3
   84eb8:	d8f0      	bhi.n	84e9c <memchr+0x60>
   84eba:	e7d8      	b.n	84e6e <memchr+0x32>
   84ebc:	4630      	mov	r0, r6
   84ebe:	e7d7      	b.n	84e70 <memchr+0x34>
   84ec0:	4614      	mov	r4, r2
   84ec2:	e7d2      	b.n	84e6a <memchr+0x2e>
   84ec4:	4620      	mov	r0, r4
   84ec6:	e7e2      	b.n	84e8e <memchr+0x52>

00084ec8 <memmove>:
   84ec8:	4288      	cmp	r0, r1
   84eca:	b5f0      	push	{r4, r5, r6, r7, lr}
   84ecc:	d90d      	bls.n	84eea <memmove+0x22>
   84ece:	188b      	adds	r3, r1, r2
   84ed0:	4298      	cmp	r0, r3
   84ed2:	d20a      	bcs.n	84eea <memmove+0x22>
   84ed4:	1884      	adds	r4, r0, r2
   84ed6:	2a00      	cmp	r2, #0
   84ed8:	d051      	beq.n	84f7e <memmove+0xb6>
   84eda:	4622      	mov	r2, r4
   84edc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84ee0:	4299      	cmp	r1, r3
   84ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84ee6:	d1f9      	bne.n	84edc <memmove+0x14>
   84ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84eea:	2a0f      	cmp	r2, #15
   84eec:	d948      	bls.n	84f80 <memmove+0xb8>
   84eee:	ea41 0300 	orr.w	r3, r1, r0
   84ef2:	079b      	lsls	r3, r3, #30
   84ef4:	d146      	bne.n	84f84 <memmove+0xbc>
   84ef6:	4615      	mov	r5, r2
   84ef8:	f100 0410 	add.w	r4, r0, #16
   84efc:	f101 0310 	add.w	r3, r1, #16
   84f00:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84f04:	3d10      	subs	r5, #16
   84f06:	f844 6c10 	str.w	r6, [r4, #-16]
   84f0a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84f0e:	2d0f      	cmp	r5, #15
   84f10:	f844 6c0c 	str.w	r6, [r4, #-12]
   84f14:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84f18:	f104 0410 	add.w	r4, r4, #16
   84f1c:	f844 6c18 	str.w	r6, [r4, #-24]
   84f20:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84f24:	f103 0310 	add.w	r3, r3, #16
   84f28:	f844 6c14 	str.w	r6, [r4, #-20]
   84f2c:	d8e8      	bhi.n	84f00 <memmove+0x38>
   84f2e:	f1a2 0310 	sub.w	r3, r2, #16
   84f32:	f023 030f 	bic.w	r3, r3, #15
   84f36:	f002 0e0f 	and.w	lr, r2, #15
   84f3a:	3310      	adds	r3, #16
   84f3c:	f1be 0f03 	cmp.w	lr, #3
   84f40:	4419      	add	r1, r3
   84f42:	4403      	add	r3, r0
   84f44:	d921      	bls.n	84f8a <memmove+0xc2>
   84f46:	460e      	mov	r6, r1
   84f48:	4674      	mov	r4, lr
   84f4a:	1f1d      	subs	r5, r3, #4
   84f4c:	f856 7b04 	ldr.w	r7, [r6], #4
   84f50:	3c04      	subs	r4, #4
   84f52:	2c03      	cmp	r4, #3
   84f54:	f845 7f04 	str.w	r7, [r5, #4]!
   84f58:	d8f8      	bhi.n	84f4c <memmove+0x84>
   84f5a:	f1ae 0404 	sub.w	r4, lr, #4
   84f5e:	f024 0403 	bic.w	r4, r4, #3
   84f62:	3404      	adds	r4, #4
   84f64:	4421      	add	r1, r4
   84f66:	4423      	add	r3, r4
   84f68:	f002 0203 	and.w	r2, r2, #3
   84f6c:	b162      	cbz	r2, 84f88 <memmove+0xc0>
   84f6e:	3b01      	subs	r3, #1
   84f70:	440a      	add	r2, r1
   84f72:	f811 4b01 	ldrb.w	r4, [r1], #1
   84f76:	428a      	cmp	r2, r1
   84f78:	f803 4f01 	strb.w	r4, [r3, #1]!
   84f7c:	d1f9      	bne.n	84f72 <memmove+0xaa>
   84f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f80:	4603      	mov	r3, r0
   84f82:	e7f3      	b.n	84f6c <memmove+0xa4>
   84f84:	4603      	mov	r3, r0
   84f86:	e7f2      	b.n	84f6e <memmove+0xa6>
   84f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f8a:	4672      	mov	r2, lr
   84f8c:	e7ee      	b.n	84f6c <memmove+0xa4>
   84f8e:	bf00      	nop

00084f90 <_Balloc>:
   84f90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84f92:	b570      	push	{r4, r5, r6, lr}
   84f94:	4605      	mov	r5, r0
   84f96:	460c      	mov	r4, r1
   84f98:	b14b      	cbz	r3, 84fae <_Balloc+0x1e>
   84f9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   84f9e:	b180      	cbz	r0, 84fc2 <_Balloc+0x32>
   84fa0:	6802      	ldr	r2, [r0, #0]
   84fa2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   84fa6:	2300      	movs	r3, #0
   84fa8:	6103      	str	r3, [r0, #16]
   84faa:	60c3      	str	r3, [r0, #12]
   84fac:	bd70      	pop	{r4, r5, r6, pc}
   84fae:	2221      	movs	r2, #33	; 0x21
   84fb0:	2104      	movs	r1, #4
   84fb2:	f000 fd8b 	bl	85acc <_calloc_r>
   84fb6:	64e8      	str	r0, [r5, #76]	; 0x4c
   84fb8:	4603      	mov	r3, r0
   84fba:	2800      	cmp	r0, #0
   84fbc:	d1ed      	bne.n	84f9a <_Balloc+0xa>
   84fbe:	2000      	movs	r0, #0
   84fc0:	bd70      	pop	{r4, r5, r6, pc}
   84fc2:	2101      	movs	r1, #1
   84fc4:	fa01 f604 	lsl.w	r6, r1, r4
   84fc8:	1d72      	adds	r2, r6, #5
   84fca:	4628      	mov	r0, r5
   84fcc:	0092      	lsls	r2, r2, #2
   84fce:	f000 fd7d 	bl	85acc <_calloc_r>
   84fd2:	2800      	cmp	r0, #0
   84fd4:	d0f3      	beq.n	84fbe <_Balloc+0x2e>
   84fd6:	6044      	str	r4, [r0, #4]
   84fd8:	6086      	str	r6, [r0, #8]
   84fda:	e7e4      	b.n	84fa6 <_Balloc+0x16>

00084fdc <_Bfree>:
   84fdc:	b131      	cbz	r1, 84fec <_Bfree+0x10>
   84fde:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84fe0:	684a      	ldr	r2, [r1, #4]
   84fe2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   84fe6:	6008      	str	r0, [r1, #0]
   84fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   84fec:	4770      	bx	lr
   84fee:	bf00      	nop

00084ff0 <__multadd>:
   84ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   84ff2:	460c      	mov	r4, r1
   84ff4:	4605      	mov	r5, r0
   84ff6:	f04f 0e00 	mov.w	lr, #0
   84ffa:	690e      	ldr	r6, [r1, #16]
   84ffc:	b083      	sub	sp, #12
   84ffe:	f101 0714 	add.w	r7, r1, #20
   85002:	6838      	ldr	r0, [r7, #0]
   85004:	f10e 0e01 	add.w	lr, lr, #1
   85008:	b281      	uxth	r1, r0
   8500a:	fb02 3301 	mla	r3, r2, r1, r3
   8500e:	0c01      	lsrs	r1, r0, #16
   85010:	0c18      	lsrs	r0, r3, #16
   85012:	fb02 0101 	mla	r1, r2, r1, r0
   85016:	b29b      	uxth	r3, r3
   85018:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   8501c:	4576      	cmp	r6, lr
   8501e:	f847 3b04 	str.w	r3, [r7], #4
   85022:	ea4f 4311 	mov.w	r3, r1, lsr #16
   85026:	dcec      	bgt.n	85002 <__multadd+0x12>
   85028:	b13b      	cbz	r3, 8503a <__multadd+0x4a>
   8502a:	68a2      	ldr	r2, [r4, #8]
   8502c:	4296      	cmp	r6, r2
   8502e:	da07      	bge.n	85040 <__multadd+0x50>
   85030:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   85034:	3601      	adds	r6, #1
   85036:	6153      	str	r3, [r2, #20]
   85038:	6126      	str	r6, [r4, #16]
   8503a:	4620      	mov	r0, r4
   8503c:	b003      	add	sp, #12
   8503e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85040:	6861      	ldr	r1, [r4, #4]
   85042:	4628      	mov	r0, r5
   85044:	3101      	adds	r1, #1
   85046:	9301      	str	r3, [sp, #4]
   85048:	f7ff ffa2 	bl	84f90 <_Balloc>
   8504c:	4607      	mov	r7, r0
   8504e:	6922      	ldr	r2, [r4, #16]
   85050:	f104 010c 	add.w	r1, r4, #12
   85054:	3202      	adds	r2, #2
   85056:	0092      	lsls	r2, r2, #2
   85058:	300c      	adds	r0, #12
   8505a:	f7fd f9f9 	bl	82450 <memcpy>
   8505e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   85060:	6861      	ldr	r1, [r4, #4]
   85062:	9b01      	ldr	r3, [sp, #4]
   85064:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   85068:	6020      	str	r0, [r4, #0]
   8506a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   8506e:	463c      	mov	r4, r7
   85070:	e7de      	b.n	85030 <__multadd+0x40>
   85072:	bf00      	nop

00085074 <__hi0bits>:
   85074:	0c02      	lsrs	r2, r0, #16
   85076:	0412      	lsls	r2, r2, #16
   85078:	4603      	mov	r3, r0
   8507a:	b9b2      	cbnz	r2, 850aa <__hi0bits+0x36>
   8507c:	0403      	lsls	r3, r0, #16
   8507e:	2010      	movs	r0, #16
   85080:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   85084:	bf04      	itt	eq
   85086:	021b      	lsleq	r3, r3, #8
   85088:	3008      	addeq	r0, #8
   8508a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8508e:	bf04      	itt	eq
   85090:	011b      	lsleq	r3, r3, #4
   85092:	3004      	addeq	r0, #4
   85094:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   85098:	bf04      	itt	eq
   8509a:	009b      	lsleq	r3, r3, #2
   8509c:	3002      	addeq	r0, #2
   8509e:	2b00      	cmp	r3, #0
   850a0:	db02      	blt.n	850a8 <__hi0bits+0x34>
   850a2:	005b      	lsls	r3, r3, #1
   850a4:	d403      	bmi.n	850ae <__hi0bits+0x3a>
   850a6:	2020      	movs	r0, #32
   850a8:	4770      	bx	lr
   850aa:	2000      	movs	r0, #0
   850ac:	e7e8      	b.n	85080 <__hi0bits+0xc>
   850ae:	3001      	adds	r0, #1
   850b0:	4770      	bx	lr
   850b2:	bf00      	nop

000850b4 <__lo0bits>:
   850b4:	6803      	ldr	r3, [r0, #0]
   850b6:	4601      	mov	r1, r0
   850b8:	f013 0207 	ands.w	r2, r3, #7
   850bc:	d007      	beq.n	850ce <__lo0bits+0x1a>
   850be:	07da      	lsls	r2, r3, #31
   850c0:	d421      	bmi.n	85106 <__lo0bits+0x52>
   850c2:	0798      	lsls	r0, r3, #30
   850c4:	d421      	bmi.n	8510a <__lo0bits+0x56>
   850c6:	089b      	lsrs	r3, r3, #2
   850c8:	600b      	str	r3, [r1, #0]
   850ca:	2002      	movs	r0, #2
   850cc:	4770      	bx	lr
   850ce:	b298      	uxth	r0, r3
   850d0:	b198      	cbz	r0, 850fa <__lo0bits+0x46>
   850d2:	4610      	mov	r0, r2
   850d4:	f013 0fff 	tst.w	r3, #255	; 0xff
   850d8:	bf04      	itt	eq
   850da:	0a1b      	lsreq	r3, r3, #8
   850dc:	3008      	addeq	r0, #8
   850de:	071a      	lsls	r2, r3, #28
   850e0:	bf04      	itt	eq
   850e2:	091b      	lsreq	r3, r3, #4
   850e4:	3004      	addeq	r0, #4
   850e6:	079a      	lsls	r2, r3, #30
   850e8:	bf04      	itt	eq
   850ea:	089b      	lsreq	r3, r3, #2
   850ec:	3002      	addeq	r0, #2
   850ee:	07da      	lsls	r2, r3, #31
   850f0:	d407      	bmi.n	85102 <__lo0bits+0x4e>
   850f2:	085b      	lsrs	r3, r3, #1
   850f4:	d104      	bne.n	85100 <__lo0bits+0x4c>
   850f6:	2020      	movs	r0, #32
   850f8:	4770      	bx	lr
   850fa:	0c1b      	lsrs	r3, r3, #16
   850fc:	2010      	movs	r0, #16
   850fe:	e7e9      	b.n	850d4 <__lo0bits+0x20>
   85100:	3001      	adds	r0, #1
   85102:	600b      	str	r3, [r1, #0]
   85104:	4770      	bx	lr
   85106:	2000      	movs	r0, #0
   85108:	4770      	bx	lr
   8510a:	085b      	lsrs	r3, r3, #1
   8510c:	600b      	str	r3, [r1, #0]
   8510e:	2001      	movs	r0, #1
   85110:	4770      	bx	lr
   85112:	bf00      	nop

00085114 <__i2b>:
   85114:	b510      	push	{r4, lr}
   85116:	460c      	mov	r4, r1
   85118:	2101      	movs	r1, #1
   8511a:	f7ff ff39 	bl	84f90 <_Balloc>
   8511e:	2201      	movs	r2, #1
   85120:	6144      	str	r4, [r0, #20]
   85122:	6102      	str	r2, [r0, #16]
   85124:	bd10      	pop	{r4, pc}
   85126:	bf00      	nop

00085128 <__multiply>:
   85128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8512c:	690c      	ldr	r4, [r1, #16]
   8512e:	6915      	ldr	r5, [r2, #16]
   85130:	b083      	sub	sp, #12
   85132:	42ac      	cmp	r4, r5
   85134:	468b      	mov	fp, r1
   85136:	4616      	mov	r6, r2
   85138:	da04      	bge.n	85144 <__multiply+0x1c>
   8513a:	4622      	mov	r2, r4
   8513c:	46b3      	mov	fp, r6
   8513e:	462c      	mov	r4, r5
   85140:	460e      	mov	r6, r1
   85142:	4615      	mov	r5, r2
   85144:	f8db 3008 	ldr.w	r3, [fp, #8]
   85148:	eb04 0805 	add.w	r8, r4, r5
   8514c:	f8db 1004 	ldr.w	r1, [fp, #4]
   85150:	4598      	cmp	r8, r3
   85152:	bfc8      	it	gt
   85154:	3101      	addgt	r1, #1
   85156:	f7ff ff1b 	bl	84f90 <_Balloc>
   8515a:	f100 0914 	add.w	r9, r0, #20
   8515e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   85162:	45d1      	cmp	r9, sl
   85164:	9000      	str	r0, [sp, #0]
   85166:	d205      	bcs.n	85174 <__multiply+0x4c>
   85168:	464b      	mov	r3, r9
   8516a:	2100      	movs	r1, #0
   8516c:	f843 1b04 	str.w	r1, [r3], #4
   85170:	459a      	cmp	sl, r3
   85172:	d8fb      	bhi.n	8516c <__multiply+0x44>
   85174:	f106 0c14 	add.w	ip, r6, #20
   85178:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   8517c:	f10b 0b14 	add.w	fp, fp, #20
   85180:	459c      	cmp	ip, r3
   85182:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   85186:	d24b      	bcs.n	85220 <__multiply+0xf8>
   85188:	f8cd a004 	str.w	sl, [sp, #4]
   8518c:	469a      	mov	sl, r3
   8518e:	f8dc 5000 	ldr.w	r5, [ip]
   85192:	b2af      	uxth	r7, r5
   85194:	b1e7      	cbz	r7, 851d0 <__multiply+0xa8>
   85196:	464d      	mov	r5, r9
   85198:	465e      	mov	r6, fp
   8519a:	2100      	movs	r1, #0
   8519c:	f856 2b04 	ldr.w	r2, [r6], #4
   851a0:	6828      	ldr	r0, [r5, #0]
   851a2:	b293      	uxth	r3, r2
   851a4:	b284      	uxth	r4, r0
   851a6:	0c12      	lsrs	r2, r2, #16
   851a8:	fb07 4303 	mla	r3, r7, r3, r4
   851ac:	0c00      	lsrs	r0, r0, #16
   851ae:	fb07 0202 	mla	r2, r7, r2, r0
   851b2:	440b      	add	r3, r1
   851b4:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   851b8:	b29b      	uxth	r3, r3
   851ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   851be:	45b6      	cmp	lr, r6
   851c0:	f845 3b04 	str.w	r3, [r5], #4
   851c4:	ea4f 4111 	mov.w	r1, r1, lsr #16
   851c8:	d8e8      	bhi.n	8519c <__multiply+0x74>
   851ca:	6029      	str	r1, [r5, #0]
   851cc:	f8dc 5000 	ldr.w	r5, [ip]
   851d0:	0c2d      	lsrs	r5, r5, #16
   851d2:	d01d      	beq.n	85210 <__multiply+0xe8>
   851d4:	f8d9 3000 	ldr.w	r3, [r9]
   851d8:	4648      	mov	r0, r9
   851da:	461c      	mov	r4, r3
   851dc:	4659      	mov	r1, fp
   851de:	2200      	movs	r2, #0
   851e0:	880e      	ldrh	r6, [r1, #0]
   851e2:	0c24      	lsrs	r4, r4, #16
   851e4:	fb05 4406 	mla	r4, r5, r6, r4
   851e8:	b29b      	uxth	r3, r3
   851ea:	4422      	add	r2, r4
   851ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   851f0:	f840 3b04 	str.w	r3, [r0], #4
   851f4:	f851 3b04 	ldr.w	r3, [r1], #4
   851f8:	6804      	ldr	r4, [r0, #0]
   851fa:	0c1b      	lsrs	r3, r3, #16
   851fc:	b2a6      	uxth	r6, r4
   851fe:	fb05 6303 	mla	r3, r5, r3, r6
   85202:	458e      	cmp	lr, r1
   85204:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   85208:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8520c:	d8e8      	bhi.n	851e0 <__multiply+0xb8>
   8520e:	6003      	str	r3, [r0, #0]
   85210:	f10c 0c04 	add.w	ip, ip, #4
   85214:	45e2      	cmp	sl, ip
   85216:	f109 0904 	add.w	r9, r9, #4
   8521a:	d8b8      	bhi.n	8518e <__multiply+0x66>
   8521c:	f8dd a004 	ldr.w	sl, [sp, #4]
   85220:	f1b8 0f00 	cmp.w	r8, #0
   85224:	dd0b      	ble.n	8523e <__multiply+0x116>
   85226:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   8522a:	f1aa 0a04 	sub.w	sl, sl, #4
   8522e:	b11b      	cbz	r3, 85238 <__multiply+0x110>
   85230:	e005      	b.n	8523e <__multiply+0x116>
   85232:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   85236:	b913      	cbnz	r3, 8523e <__multiply+0x116>
   85238:	f1b8 0801 	subs.w	r8, r8, #1
   8523c:	d1f9      	bne.n	85232 <__multiply+0x10a>
   8523e:	9800      	ldr	r0, [sp, #0]
   85240:	f8c0 8010 	str.w	r8, [r0, #16]
   85244:	b003      	add	sp, #12
   85246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8524a:	bf00      	nop

0008524c <__pow5mult>:
   8524c:	f012 0303 	ands.w	r3, r2, #3
   85250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85254:	4614      	mov	r4, r2
   85256:	4607      	mov	r7, r0
   85258:	d12e      	bne.n	852b8 <__pow5mult+0x6c>
   8525a:	460d      	mov	r5, r1
   8525c:	10a4      	asrs	r4, r4, #2
   8525e:	d01c      	beq.n	8529a <__pow5mult+0x4e>
   85260:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   85262:	b396      	cbz	r6, 852ca <__pow5mult+0x7e>
   85264:	07e3      	lsls	r3, r4, #31
   85266:	f04f 0800 	mov.w	r8, #0
   8526a:	d406      	bmi.n	8527a <__pow5mult+0x2e>
   8526c:	1064      	asrs	r4, r4, #1
   8526e:	d014      	beq.n	8529a <__pow5mult+0x4e>
   85270:	6830      	ldr	r0, [r6, #0]
   85272:	b1a8      	cbz	r0, 852a0 <__pow5mult+0x54>
   85274:	4606      	mov	r6, r0
   85276:	07e3      	lsls	r3, r4, #31
   85278:	d5f8      	bpl.n	8526c <__pow5mult+0x20>
   8527a:	4632      	mov	r2, r6
   8527c:	4629      	mov	r1, r5
   8527e:	4638      	mov	r0, r7
   85280:	f7ff ff52 	bl	85128 <__multiply>
   85284:	b1b5      	cbz	r5, 852b4 <__pow5mult+0x68>
   85286:	686a      	ldr	r2, [r5, #4]
   85288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8528a:	1064      	asrs	r4, r4, #1
   8528c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   85290:	6029      	str	r1, [r5, #0]
   85292:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   85296:	4605      	mov	r5, r0
   85298:	d1ea      	bne.n	85270 <__pow5mult+0x24>
   8529a:	4628      	mov	r0, r5
   8529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   852a0:	4632      	mov	r2, r6
   852a2:	4631      	mov	r1, r6
   852a4:	4638      	mov	r0, r7
   852a6:	f7ff ff3f 	bl	85128 <__multiply>
   852aa:	6030      	str	r0, [r6, #0]
   852ac:	f8c0 8000 	str.w	r8, [r0]
   852b0:	4606      	mov	r6, r0
   852b2:	e7e0      	b.n	85276 <__pow5mult+0x2a>
   852b4:	4605      	mov	r5, r0
   852b6:	e7d9      	b.n	8526c <__pow5mult+0x20>
   852b8:	4a0b      	ldr	r2, [pc, #44]	; (852e8 <__pow5mult+0x9c>)
   852ba:	3b01      	subs	r3, #1
   852bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   852c0:	2300      	movs	r3, #0
   852c2:	f7ff fe95 	bl	84ff0 <__multadd>
   852c6:	4605      	mov	r5, r0
   852c8:	e7c8      	b.n	8525c <__pow5mult+0x10>
   852ca:	2101      	movs	r1, #1
   852cc:	4638      	mov	r0, r7
   852ce:	f7ff fe5f 	bl	84f90 <_Balloc>
   852d2:	f240 2171 	movw	r1, #625	; 0x271
   852d6:	2201      	movs	r2, #1
   852d8:	2300      	movs	r3, #0
   852da:	6141      	str	r1, [r0, #20]
   852dc:	6102      	str	r2, [r0, #16]
   852de:	4606      	mov	r6, r0
   852e0:	64b8      	str	r0, [r7, #72]	; 0x48
   852e2:	6003      	str	r3, [r0, #0]
   852e4:	e7be      	b.n	85264 <__pow5mult+0x18>
   852e6:	bf00      	nop
   852e8:	00086998 	.word	0x00086998

000852ec <__lshift>:
   852ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   852f0:	690b      	ldr	r3, [r1, #16]
   852f2:	1154      	asrs	r4, r2, #5
   852f4:	eb04 0803 	add.w	r8, r4, r3
   852f8:	688b      	ldr	r3, [r1, #8]
   852fa:	f108 0501 	add.w	r5, r8, #1
   852fe:	429d      	cmp	r5, r3
   85300:	460e      	mov	r6, r1
   85302:	4691      	mov	r9, r2
   85304:	4607      	mov	r7, r0
   85306:	6849      	ldr	r1, [r1, #4]
   85308:	dd04      	ble.n	85314 <__lshift+0x28>
   8530a:	005b      	lsls	r3, r3, #1
   8530c:	429d      	cmp	r5, r3
   8530e:	f101 0101 	add.w	r1, r1, #1
   85312:	dcfa      	bgt.n	8530a <__lshift+0x1e>
   85314:	4638      	mov	r0, r7
   85316:	f7ff fe3b 	bl	84f90 <_Balloc>
   8531a:	2c00      	cmp	r4, #0
   8531c:	f100 0314 	add.w	r3, r0, #20
   85320:	dd06      	ble.n	85330 <__lshift+0x44>
   85322:	2100      	movs	r1, #0
   85324:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   85328:	f843 1b04 	str.w	r1, [r3], #4
   8532c:	429a      	cmp	r2, r3
   8532e:	d1fb      	bne.n	85328 <__lshift+0x3c>
   85330:	6934      	ldr	r4, [r6, #16]
   85332:	f106 0114 	add.w	r1, r6, #20
   85336:	f019 091f 	ands.w	r9, r9, #31
   8533a:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   8533e:	d01d      	beq.n	8537c <__lshift+0x90>
   85340:	2200      	movs	r2, #0
   85342:	f1c9 0c20 	rsb	ip, r9, #32
   85346:	680c      	ldr	r4, [r1, #0]
   85348:	fa04 f409 	lsl.w	r4, r4, r9
   8534c:	4314      	orrs	r4, r2
   8534e:	f843 4b04 	str.w	r4, [r3], #4
   85352:	f851 2b04 	ldr.w	r2, [r1], #4
   85356:	458e      	cmp	lr, r1
   85358:	fa22 f20c 	lsr.w	r2, r2, ip
   8535c:	d8f3      	bhi.n	85346 <__lshift+0x5a>
   8535e:	601a      	str	r2, [r3, #0]
   85360:	b10a      	cbz	r2, 85366 <__lshift+0x7a>
   85362:	f108 0502 	add.w	r5, r8, #2
   85366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85368:	6872      	ldr	r2, [r6, #4]
   8536a:	3d01      	subs	r5, #1
   8536c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   85370:	6105      	str	r5, [r0, #16]
   85372:	6031      	str	r1, [r6, #0]
   85374:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   85378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8537c:	3b04      	subs	r3, #4
   8537e:	f851 2b04 	ldr.w	r2, [r1], #4
   85382:	458e      	cmp	lr, r1
   85384:	f843 2f04 	str.w	r2, [r3, #4]!
   85388:	d8f9      	bhi.n	8537e <__lshift+0x92>
   8538a:	e7ec      	b.n	85366 <__lshift+0x7a>

0008538c <__mcmp>:
   8538c:	b430      	push	{r4, r5}
   8538e:	690b      	ldr	r3, [r1, #16]
   85390:	4605      	mov	r5, r0
   85392:	6900      	ldr	r0, [r0, #16]
   85394:	1ac0      	subs	r0, r0, r3
   85396:	d10f      	bne.n	853b8 <__mcmp+0x2c>
   85398:	009b      	lsls	r3, r3, #2
   8539a:	3514      	adds	r5, #20
   8539c:	3114      	adds	r1, #20
   8539e:	4419      	add	r1, r3
   853a0:	442b      	add	r3, r5
   853a2:	e001      	b.n	853a8 <__mcmp+0x1c>
   853a4:	429d      	cmp	r5, r3
   853a6:	d207      	bcs.n	853b8 <__mcmp+0x2c>
   853a8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   853ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   853b0:	4294      	cmp	r4, r2
   853b2:	d0f7      	beq.n	853a4 <__mcmp+0x18>
   853b4:	d302      	bcc.n	853bc <__mcmp+0x30>
   853b6:	2001      	movs	r0, #1
   853b8:	bc30      	pop	{r4, r5}
   853ba:	4770      	bx	lr
   853bc:	f04f 30ff 	mov.w	r0, #4294967295
   853c0:	e7fa      	b.n	853b8 <__mcmp+0x2c>
   853c2:	bf00      	nop

000853c4 <__mdiff>:
   853c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   853c8:	690c      	ldr	r4, [r1, #16]
   853ca:	4689      	mov	r9, r1
   853cc:	6911      	ldr	r1, [r2, #16]
   853ce:	4692      	mov	sl, r2
   853d0:	1a64      	subs	r4, r4, r1
   853d2:	2c00      	cmp	r4, #0
   853d4:	d117      	bne.n	85406 <__mdiff+0x42>
   853d6:	0089      	lsls	r1, r1, #2
   853d8:	f109 0714 	add.w	r7, r9, #20
   853dc:	f102 0614 	add.w	r6, r2, #20
   853e0:	187b      	adds	r3, r7, r1
   853e2:	4431      	add	r1, r6
   853e4:	e001      	b.n	853ea <__mdiff+0x26>
   853e6:	429f      	cmp	r7, r3
   853e8:	d265      	bcs.n	854b6 <__mdiff+0xf2>
   853ea:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   853ee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   853f2:	4295      	cmp	r5, r2
   853f4:	d0f7      	beq.n	853e6 <__mdiff+0x22>
   853f6:	d267      	bcs.n	854c8 <__mdiff+0x104>
   853f8:	464b      	mov	r3, r9
   853fa:	46bb      	mov	fp, r7
   853fc:	46d1      	mov	r9, sl
   853fe:	4637      	mov	r7, r6
   85400:	469a      	mov	sl, r3
   85402:	2401      	movs	r4, #1
   85404:	e005      	b.n	85412 <__mdiff+0x4e>
   85406:	db61      	blt.n	854cc <__mdiff+0x108>
   85408:	2400      	movs	r4, #0
   8540a:	f109 0714 	add.w	r7, r9, #20
   8540e:	f10a 0b14 	add.w	fp, sl, #20
   85412:	f8d9 1004 	ldr.w	r1, [r9, #4]
   85416:	f7ff fdbb 	bl	84f90 <_Balloc>
   8541a:	465d      	mov	r5, fp
   8541c:	f04f 0800 	mov.w	r8, #0
   85420:	f8d9 e010 	ldr.w	lr, [r9, #16]
   85424:	f8da 3010 	ldr.w	r3, [sl, #16]
   85428:	463e      	mov	r6, r7
   8542a:	60c4      	str	r4, [r0, #12]
   8542c:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   85430:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   85434:	f100 0414 	add.w	r4, r0, #20
   85438:	f856 9b04 	ldr.w	r9, [r6], #4
   8543c:	f855 2b04 	ldr.w	r2, [r5], #4
   85440:	fa1f f389 	uxth.w	r3, r9
   85444:	4443      	add	r3, r8
   85446:	fa1f f882 	uxth.w	r8, r2
   8544a:	0c12      	lsrs	r2, r2, #16
   8544c:	eba3 0308 	sub.w	r3, r3, r8
   85450:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   85454:	eb02 4223 	add.w	r2, r2, r3, asr #16
   85458:	b29b      	uxth	r3, r3
   8545a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8545e:	45ac      	cmp	ip, r5
   85460:	f844 3b04 	str.w	r3, [r4], #4
   85464:	ea4f 4822 	mov.w	r8, r2, asr #16
   85468:	d8e6      	bhi.n	85438 <__mdiff+0x74>
   8546a:	42b7      	cmp	r7, r6
   8546c:	d917      	bls.n	8549e <__mdiff+0xda>
   8546e:	46a4      	mov	ip, r4
   85470:	4635      	mov	r5, r6
   85472:	f855 3b04 	ldr.w	r3, [r5], #4
   85476:	b299      	uxth	r1, r3
   85478:	4441      	add	r1, r8
   8547a:	140a      	asrs	r2, r1, #16
   8547c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   85480:	b289      	uxth	r1, r1
   85482:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   85486:	42af      	cmp	r7, r5
   85488:	f84c 3b04 	str.w	r3, [ip], #4
   8548c:	ea4f 4822 	mov.w	r8, r2, asr #16
   85490:	d8ef      	bhi.n	85472 <__mdiff+0xae>
   85492:	43f6      	mvns	r6, r6
   85494:	4437      	add	r7, r6
   85496:	f027 0703 	bic.w	r7, r7, #3
   8549a:	3704      	adds	r7, #4
   8549c:	443c      	add	r4, r7
   8549e:	3c04      	subs	r4, #4
   854a0:	b92b      	cbnz	r3, 854ae <__mdiff+0xea>
   854a2:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   854a6:	f10e 3eff 	add.w	lr, lr, #4294967295
   854aa:	2b00      	cmp	r3, #0
   854ac:	d0f9      	beq.n	854a2 <__mdiff+0xde>
   854ae:	f8c0 e010 	str.w	lr, [r0, #16]
   854b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854b6:	2100      	movs	r1, #0
   854b8:	f7ff fd6a 	bl	84f90 <_Balloc>
   854bc:	2201      	movs	r2, #1
   854be:	2300      	movs	r3, #0
   854c0:	6102      	str	r2, [r0, #16]
   854c2:	6143      	str	r3, [r0, #20]
   854c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854c8:	46b3      	mov	fp, r6
   854ca:	e7a2      	b.n	85412 <__mdiff+0x4e>
   854cc:	464b      	mov	r3, r9
   854ce:	f109 0b14 	add.w	fp, r9, #20
   854d2:	f102 0714 	add.w	r7, r2, #20
   854d6:	4691      	mov	r9, r2
   854d8:	2401      	movs	r4, #1
   854da:	469a      	mov	sl, r3
   854dc:	e799      	b.n	85412 <__mdiff+0x4e>
   854de:	bf00      	nop

000854e0 <__d2b>:
   854e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   854e2:	2101      	movs	r1, #1
   854e4:	b083      	sub	sp, #12
   854e6:	461c      	mov	r4, r3
   854e8:	f3c3 550a 	ubfx	r5, r3, #20, #11
   854ec:	4616      	mov	r6, r2
   854ee:	f7ff fd4f 	bl	84f90 <_Balloc>
   854f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
   854f6:	4607      	mov	r7, r0
   854f8:	b10d      	cbz	r5, 854fe <__d2b+0x1e>
   854fa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   854fe:	9401      	str	r4, [sp, #4]
   85500:	b306      	cbz	r6, 85544 <__d2b+0x64>
   85502:	a802      	add	r0, sp, #8
   85504:	f840 6d08 	str.w	r6, [r0, #-8]!
   85508:	f7ff fdd4 	bl	850b4 <__lo0bits>
   8550c:	2800      	cmp	r0, #0
   8550e:	d130      	bne.n	85572 <__d2b+0x92>
   85510:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85514:	617a      	str	r2, [r7, #20]
   85516:	2b00      	cmp	r3, #0
   85518:	bf0c      	ite	eq
   8551a:	2101      	moveq	r1, #1
   8551c:	2102      	movne	r1, #2
   8551e:	61bb      	str	r3, [r7, #24]
   85520:	6139      	str	r1, [r7, #16]
   85522:	b9d5      	cbnz	r5, 8555a <__d2b+0x7a>
   85524:	9a08      	ldr	r2, [sp, #32]
   85526:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   8552a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   8552e:	6010      	str	r0, [r2, #0]
   85530:	6918      	ldr	r0, [r3, #16]
   85532:	f7ff fd9f 	bl	85074 <__hi0bits>
   85536:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85538:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   8553c:	6018      	str	r0, [r3, #0]
   8553e:	4638      	mov	r0, r7
   85540:	b003      	add	sp, #12
   85542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85544:	a801      	add	r0, sp, #4
   85546:	f7ff fdb5 	bl	850b4 <__lo0bits>
   8554a:	2201      	movs	r2, #1
   8554c:	9b01      	ldr	r3, [sp, #4]
   8554e:	4611      	mov	r1, r2
   85550:	3020      	adds	r0, #32
   85552:	613a      	str	r2, [r7, #16]
   85554:	617b      	str	r3, [r7, #20]
   85556:	2d00      	cmp	r5, #0
   85558:	d0e4      	beq.n	85524 <__d2b+0x44>
   8555a:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   8555e:	9a08      	ldr	r2, [sp, #32]
   85560:	4403      	add	r3, r0
   85562:	6013      	str	r3, [r2, #0]
   85564:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85566:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8556a:	6018      	str	r0, [r3, #0]
   8556c:	4638      	mov	r0, r7
   8556e:	b003      	add	sp, #12
   85570:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85572:	9b01      	ldr	r3, [sp, #4]
   85574:	f1c0 0220 	rsb	r2, r0, #32
   85578:	9900      	ldr	r1, [sp, #0]
   8557a:	fa03 f202 	lsl.w	r2, r3, r2
   8557e:	430a      	orrs	r2, r1
   85580:	40c3      	lsrs	r3, r0
   85582:	9301      	str	r3, [sp, #4]
   85584:	617a      	str	r2, [r7, #20]
   85586:	e7c6      	b.n	85516 <__d2b+0x36>

00085588 <_realloc_r>:
   85588:	2900      	cmp	r1, #0
   8558a:	f000 8094 	beq.w	856b6 <_realloc_r+0x12e>
   8558e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85592:	460c      	mov	r4, r1
   85594:	4615      	mov	r5, r2
   85596:	b083      	sub	sp, #12
   85598:	4680      	mov	r8, r0
   8559a:	f105 060b 	add.w	r6, r5, #11
   8559e:	f7fd f81b 	bl	825d8 <__malloc_lock>
   855a2:	f854 ec04 	ldr.w	lr, [r4, #-4]
   855a6:	2e16      	cmp	r6, #22
   855a8:	f02e 0703 	bic.w	r7, lr, #3
   855ac:	f1a4 0908 	sub.w	r9, r4, #8
   855b0:	d83c      	bhi.n	8562c <_realloc_r+0xa4>
   855b2:	2210      	movs	r2, #16
   855b4:	4616      	mov	r6, r2
   855b6:	42b5      	cmp	r5, r6
   855b8:	d83d      	bhi.n	85636 <_realloc_r+0xae>
   855ba:	4297      	cmp	r7, r2
   855bc:	da43      	bge.n	85646 <_realloc_r+0xbe>
   855be:	4bc6      	ldr	r3, [pc, #792]	; (858d8 <_realloc_r+0x350>)
   855c0:	eb09 0007 	add.w	r0, r9, r7
   855c4:	6899      	ldr	r1, [r3, #8]
   855c6:	4288      	cmp	r0, r1
   855c8:	f000 80c3 	beq.w	85752 <_realloc_r+0x1ca>
   855cc:	6843      	ldr	r3, [r0, #4]
   855ce:	f023 0101 	bic.w	r1, r3, #1
   855d2:	4401      	add	r1, r0
   855d4:	6849      	ldr	r1, [r1, #4]
   855d6:	07c9      	lsls	r1, r1, #31
   855d8:	d54d      	bpl.n	85676 <_realloc_r+0xee>
   855da:	f01e 0f01 	tst.w	lr, #1
   855de:	f000 809b 	beq.w	85718 <_realloc_r+0x190>
   855e2:	4629      	mov	r1, r5
   855e4:	4640      	mov	r0, r8
   855e6:	f7fc fc91 	bl	81f0c <_malloc_r>
   855ea:	4605      	mov	r5, r0
   855ec:	2800      	cmp	r0, #0
   855ee:	d03b      	beq.n	85668 <_realloc_r+0xe0>
   855f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   855f4:	f1a0 0208 	sub.w	r2, r0, #8
   855f8:	f023 0301 	bic.w	r3, r3, #1
   855fc:	444b      	add	r3, r9
   855fe:	429a      	cmp	r2, r3
   85600:	f000 812b 	beq.w	8585a <_realloc_r+0x2d2>
   85604:	1f3a      	subs	r2, r7, #4
   85606:	2a24      	cmp	r2, #36	; 0x24
   85608:	f200 8118 	bhi.w	8583c <_realloc_r+0x2b4>
   8560c:	2a13      	cmp	r2, #19
   8560e:	f200 80eb 	bhi.w	857e8 <_realloc_r+0x260>
   85612:	4603      	mov	r3, r0
   85614:	4622      	mov	r2, r4
   85616:	6811      	ldr	r1, [r2, #0]
   85618:	6019      	str	r1, [r3, #0]
   8561a:	6851      	ldr	r1, [r2, #4]
   8561c:	6059      	str	r1, [r3, #4]
   8561e:	6892      	ldr	r2, [r2, #8]
   85620:	609a      	str	r2, [r3, #8]
   85622:	4621      	mov	r1, r4
   85624:	4640      	mov	r0, r8
   85626:	f7ff fafb 	bl	84c20 <_free_r>
   8562a:	e01d      	b.n	85668 <_realloc_r+0xe0>
   8562c:	f026 0607 	bic.w	r6, r6, #7
   85630:	2e00      	cmp	r6, #0
   85632:	4632      	mov	r2, r6
   85634:	dabf      	bge.n	855b6 <_realloc_r+0x2e>
   85636:	2500      	movs	r5, #0
   85638:	230c      	movs	r3, #12
   8563a:	4628      	mov	r0, r5
   8563c:	f8c8 3000 	str.w	r3, [r8]
   85640:	b003      	add	sp, #12
   85642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85646:	4625      	mov	r5, r4
   85648:	1bbb      	subs	r3, r7, r6
   8564a:	2b0f      	cmp	r3, #15
   8564c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   85650:	d81d      	bhi.n	8568e <_realloc_r+0x106>
   85652:	f002 0201 	and.w	r2, r2, #1
   85656:	433a      	orrs	r2, r7
   85658:	eb09 0107 	add.w	r1, r9, r7
   8565c:	f8c9 2004 	str.w	r2, [r9, #4]
   85660:	684b      	ldr	r3, [r1, #4]
   85662:	f043 0301 	orr.w	r3, r3, #1
   85666:	604b      	str	r3, [r1, #4]
   85668:	4640      	mov	r0, r8
   8566a:	f7fc ffbb 	bl	825e4 <__malloc_unlock>
   8566e:	4628      	mov	r0, r5
   85670:	b003      	add	sp, #12
   85672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85676:	f023 0303 	bic.w	r3, r3, #3
   8567a:	18f9      	adds	r1, r7, r3
   8567c:	4291      	cmp	r1, r2
   8567e:	db1d      	blt.n	856bc <_realloc_r+0x134>
   85680:	68c3      	ldr	r3, [r0, #12]
   85682:	6882      	ldr	r2, [r0, #8]
   85684:	4625      	mov	r5, r4
   85686:	60d3      	str	r3, [r2, #12]
   85688:	460f      	mov	r7, r1
   8568a:	609a      	str	r2, [r3, #8]
   8568c:	e7dc      	b.n	85648 <_realloc_r+0xc0>
   8568e:	f002 0201 	and.w	r2, r2, #1
   85692:	eb09 0106 	add.w	r1, r9, r6
   85696:	f043 0301 	orr.w	r3, r3, #1
   8569a:	4332      	orrs	r2, r6
   8569c:	f8c9 2004 	str.w	r2, [r9, #4]
   856a0:	444f      	add	r7, r9
   856a2:	604b      	str	r3, [r1, #4]
   856a4:	687b      	ldr	r3, [r7, #4]
   856a6:	3108      	adds	r1, #8
   856a8:	f043 0301 	orr.w	r3, r3, #1
   856ac:	607b      	str	r3, [r7, #4]
   856ae:	4640      	mov	r0, r8
   856b0:	f7ff fab6 	bl	84c20 <_free_r>
   856b4:	e7d8      	b.n	85668 <_realloc_r+0xe0>
   856b6:	4611      	mov	r1, r2
   856b8:	f7fc bc28 	b.w	81f0c <_malloc_r>
   856bc:	f01e 0f01 	tst.w	lr, #1
   856c0:	d18f      	bne.n	855e2 <_realloc_r+0x5a>
   856c2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   856c6:	eba9 0a01 	sub.w	sl, r9, r1
   856ca:	f8da 1004 	ldr.w	r1, [sl, #4]
   856ce:	f021 0103 	bic.w	r1, r1, #3
   856d2:	440b      	add	r3, r1
   856d4:	443b      	add	r3, r7
   856d6:	4293      	cmp	r3, r2
   856d8:	db26      	blt.n	85728 <_realloc_r+0x1a0>
   856da:	4655      	mov	r5, sl
   856dc:	68c1      	ldr	r1, [r0, #12]
   856de:	6880      	ldr	r0, [r0, #8]
   856e0:	1f3a      	subs	r2, r7, #4
   856e2:	60c1      	str	r1, [r0, #12]
   856e4:	6088      	str	r0, [r1, #8]
   856e6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   856ea:	f8da 100c 	ldr.w	r1, [sl, #12]
   856ee:	2a24      	cmp	r2, #36	; 0x24
   856f0:	60c1      	str	r1, [r0, #12]
   856f2:	6088      	str	r0, [r1, #8]
   856f4:	d826      	bhi.n	85744 <_realloc_r+0x1bc>
   856f6:	2a13      	cmp	r2, #19
   856f8:	f240 8081 	bls.w	857fe <_realloc_r+0x276>
   856fc:	6821      	ldr	r1, [r4, #0]
   856fe:	2a1b      	cmp	r2, #27
   85700:	f8ca 1008 	str.w	r1, [sl, #8]
   85704:	6861      	ldr	r1, [r4, #4]
   85706:	f8ca 100c 	str.w	r1, [sl, #12]
   8570a:	f200 80ad 	bhi.w	85868 <_realloc_r+0x2e0>
   8570e:	f104 0008 	add.w	r0, r4, #8
   85712:	f10a 0210 	add.w	r2, sl, #16
   85716:	e074      	b.n	85802 <_realloc_r+0x27a>
   85718:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8571c:	eba9 0a03 	sub.w	sl, r9, r3
   85720:	f8da 1004 	ldr.w	r1, [sl, #4]
   85724:	f021 0103 	bic.w	r1, r1, #3
   85728:	187b      	adds	r3, r7, r1
   8572a:	4293      	cmp	r3, r2
   8572c:	f6ff af59 	blt.w	855e2 <_realloc_r+0x5a>
   85730:	4655      	mov	r5, sl
   85732:	f8da 100c 	ldr.w	r1, [sl, #12]
   85736:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8573a:	1f3a      	subs	r2, r7, #4
   8573c:	2a24      	cmp	r2, #36	; 0x24
   8573e:	60c1      	str	r1, [r0, #12]
   85740:	6088      	str	r0, [r1, #8]
   85742:	d9d8      	bls.n	856f6 <_realloc_r+0x16e>
   85744:	4621      	mov	r1, r4
   85746:	4628      	mov	r0, r5
   85748:	461f      	mov	r7, r3
   8574a:	46d1      	mov	r9, sl
   8574c:	f7ff fbbc 	bl	84ec8 <memmove>
   85750:	e77a      	b.n	85648 <_realloc_r+0xc0>
   85752:	6841      	ldr	r1, [r0, #4]
   85754:	f106 0010 	add.w	r0, r6, #16
   85758:	f021 0b03 	bic.w	fp, r1, #3
   8575c:	44bb      	add	fp, r7
   8575e:	4583      	cmp	fp, r0
   85760:	da58      	bge.n	85814 <_realloc_r+0x28c>
   85762:	f01e 0f01 	tst.w	lr, #1
   85766:	f47f af3c 	bne.w	855e2 <_realloc_r+0x5a>
   8576a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8576e:	eba9 0a01 	sub.w	sl, r9, r1
   85772:	f8da 1004 	ldr.w	r1, [sl, #4]
   85776:	f021 0103 	bic.w	r1, r1, #3
   8577a:	448b      	add	fp, r1
   8577c:	4558      	cmp	r0, fp
   8577e:	dcd3      	bgt.n	85728 <_realloc_r+0x1a0>
   85780:	4655      	mov	r5, sl
   85782:	f8da 100c 	ldr.w	r1, [sl, #12]
   85786:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8578a:	1f3a      	subs	r2, r7, #4
   8578c:	2a24      	cmp	r2, #36	; 0x24
   8578e:	60c1      	str	r1, [r0, #12]
   85790:	6088      	str	r0, [r1, #8]
   85792:	f200 808d 	bhi.w	858b0 <_realloc_r+0x328>
   85796:	2a13      	cmp	r2, #19
   85798:	f240 8087 	bls.w	858aa <_realloc_r+0x322>
   8579c:	6821      	ldr	r1, [r4, #0]
   8579e:	2a1b      	cmp	r2, #27
   857a0:	f8ca 1008 	str.w	r1, [sl, #8]
   857a4:	6861      	ldr	r1, [r4, #4]
   857a6:	f8ca 100c 	str.w	r1, [sl, #12]
   857aa:	f200 8088 	bhi.w	858be <_realloc_r+0x336>
   857ae:	f104 0108 	add.w	r1, r4, #8
   857b2:	f10a 0210 	add.w	r2, sl, #16
   857b6:	6808      	ldr	r0, [r1, #0]
   857b8:	6010      	str	r0, [r2, #0]
   857ba:	6848      	ldr	r0, [r1, #4]
   857bc:	6050      	str	r0, [r2, #4]
   857be:	6889      	ldr	r1, [r1, #8]
   857c0:	6091      	str	r1, [r2, #8]
   857c2:	ebab 0206 	sub.w	r2, fp, r6
   857c6:	eb0a 0106 	add.w	r1, sl, r6
   857ca:	f042 0201 	orr.w	r2, r2, #1
   857ce:	6099      	str	r1, [r3, #8]
   857d0:	604a      	str	r2, [r1, #4]
   857d2:	f8da 3004 	ldr.w	r3, [sl, #4]
   857d6:	4640      	mov	r0, r8
   857d8:	f003 0301 	and.w	r3, r3, #1
   857dc:	431e      	orrs	r6, r3
   857de:	f8ca 6004 	str.w	r6, [sl, #4]
   857e2:	f7fc feff 	bl	825e4 <__malloc_unlock>
   857e6:	e742      	b.n	8566e <_realloc_r+0xe6>
   857e8:	6823      	ldr	r3, [r4, #0]
   857ea:	2a1b      	cmp	r2, #27
   857ec:	6003      	str	r3, [r0, #0]
   857ee:	6863      	ldr	r3, [r4, #4]
   857f0:	6043      	str	r3, [r0, #4]
   857f2:	d827      	bhi.n	85844 <_realloc_r+0x2bc>
   857f4:	f100 0308 	add.w	r3, r0, #8
   857f8:	f104 0208 	add.w	r2, r4, #8
   857fc:	e70b      	b.n	85616 <_realloc_r+0x8e>
   857fe:	4620      	mov	r0, r4
   85800:	462a      	mov	r2, r5
   85802:	6801      	ldr	r1, [r0, #0]
   85804:	461f      	mov	r7, r3
   85806:	6011      	str	r1, [r2, #0]
   85808:	6841      	ldr	r1, [r0, #4]
   8580a:	46d1      	mov	r9, sl
   8580c:	6051      	str	r1, [r2, #4]
   8580e:	6883      	ldr	r3, [r0, #8]
   85810:	6093      	str	r3, [r2, #8]
   85812:	e719      	b.n	85648 <_realloc_r+0xc0>
   85814:	ebab 0b06 	sub.w	fp, fp, r6
   85818:	eb09 0106 	add.w	r1, r9, r6
   8581c:	f04b 0201 	orr.w	r2, fp, #1
   85820:	6099      	str	r1, [r3, #8]
   85822:	604a      	str	r2, [r1, #4]
   85824:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85828:	4640      	mov	r0, r8
   8582a:	f003 0301 	and.w	r3, r3, #1
   8582e:	431e      	orrs	r6, r3
   85830:	f844 6c04 	str.w	r6, [r4, #-4]
   85834:	f7fc fed6 	bl	825e4 <__malloc_unlock>
   85838:	4625      	mov	r5, r4
   8583a:	e718      	b.n	8566e <_realloc_r+0xe6>
   8583c:	4621      	mov	r1, r4
   8583e:	f7ff fb43 	bl	84ec8 <memmove>
   85842:	e6ee      	b.n	85622 <_realloc_r+0x9a>
   85844:	68a3      	ldr	r3, [r4, #8]
   85846:	2a24      	cmp	r2, #36	; 0x24
   85848:	6083      	str	r3, [r0, #8]
   8584a:	68e3      	ldr	r3, [r4, #12]
   8584c:	60c3      	str	r3, [r0, #12]
   8584e:	d018      	beq.n	85882 <_realloc_r+0x2fa>
   85850:	f100 0310 	add.w	r3, r0, #16
   85854:	f104 0210 	add.w	r2, r4, #16
   85858:	e6dd      	b.n	85616 <_realloc_r+0x8e>
   8585a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8585e:	4625      	mov	r5, r4
   85860:	f023 0303 	bic.w	r3, r3, #3
   85864:	441f      	add	r7, r3
   85866:	e6ef      	b.n	85648 <_realloc_r+0xc0>
   85868:	68a1      	ldr	r1, [r4, #8]
   8586a:	2a24      	cmp	r2, #36	; 0x24
   8586c:	f8ca 1010 	str.w	r1, [sl, #16]
   85870:	68e1      	ldr	r1, [r4, #12]
   85872:	f8ca 1014 	str.w	r1, [sl, #20]
   85876:	d00d      	beq.n	85894 <_realloc_r+0x30c>
   85878:	f104 0010 	add.w	r0, r4, #16
   8587c:	f10a 0218 	add.w	r2, sl, #24
   85880:	e7bf      	b.n	85802 <_realloc_r+0x27a>
   85882:	6922      	ldr	r2, [r4, #16]
   85884:	f100 0318 	add.w	r3, r0, #24
   85888:	6102      	str	r2, [r0, #16]
   8588a:	6961      	ldr	r1, [r4, #20]
   8588c:	f104 0218 	add.w	r2, r4, #24
   85890:	6141      	str	r1, [r0, #20]
   85892:	e6c0      	b.n	85616 <_realloc_r+0x8e>
   85894:	6922      	ldr	r2, [r4, #16]
   85896:	f104 0018 	add.w	r0, r4, #24
   8589a:	f8ca 2018 	str.w	r2, [sl, #24]
   8589e:	6961      	ldr	r1, [r4, #20]
   858a0:	f10a 0220 	add.w	r2, sl, #32
   858a4:	f8ca 101c 	str.w	r1, [sl, #28]
   858a8:	e7ab      	b.n	85802 <_realloc_r+0x27a>
   858aa:	4621      	mov	r1, r4
   858ac:	462a      	mov	r2, r5
   858ae:	e782      	b.n	857b6 <_realloc_r+0x22e>
   858b0:	4621      	mov	r1, r4
   858b2:	4628      	mov	r0, r5
   858b4:	9301      	str	r3, [sp, #4]
   858b6:	f7ff fb07 	bl	84ec8 <memmove>
   858ba:	9b01      	ldr	r3, [sp, #4]
   858bc:	e781      	b.n	857c2 <_realloc_r+0x23a>
   858be:	68a1      	ldr	r1, [r4, #8]
   858c0:	2a24      	cmp	r2, #36	; 0x24
   858c2:	f8ca 1010 	str.w	r1, [sl, #16]
   858c6:	68e1      	ldr	r1, [r4, #12]
   858c8:	f8ca 1014 	str.w	r1, [sl, #20]
   858cc:	d006      	beq.n	858dc <_realloc_r+0x354>
   858ce:	f104 0110 	add.w	r1, r4, #16
   858d2:	f10a 0218 	add.w	r2, sl, #24
   858d6:	e76e      	b.n	857b6 <_realloc_r+0x22e>
   858d8:	200708f8 	.word	0x200708f8
   858dc:	6922      	ldr	r2, [r4, #16]
   858de:	f104 0118 	add.w	r1, r4, #24
   858e2:	f8ca 2018 	str.w	r2, [sl, #24]
   858e6:	6960      	ldr	r0, [r4, #20]
   858e8:	f10a 0220 	add.w	r2, sl, #32
   858ec:	f8ca 001c 	str.w	r0, [sl, #28]
   858f0:	e761      	b.n	857b6 <_realloc_r+0x22e>
   858f2:	bf00      	nop

000858f4 <__ssprint_r>:
   858f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   858f8:	6893      	ldr	r3, [r2, #8]
   858fa:	b083      	sub	sp, #12
   858fc:	4690      	mov	r8, r2
   858fe:	2b00      	cmp	r3, #0
   85900:	d070      	beq.n	859e4 <__ssprint_r+0xf0>
   85902:	4682      	mov	sl, r0
   85904:	460c      	mov	r4, r1
   85906:	6817      	ldr	r7, [r2, #0]
   85908:	688d      	ldr	r5, [r1, #8]
   8590a:	6808      	ldr	r0, [r1, #0]
   8590c:	e042      	b.n	85994 <__ssprint_r+0xa0>
   8590e:	89a3      	ldrh	r3, [r4, #12]
   85910:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85914:	d02e      	beq.n	85974 <__ssprint_r+0x80>
   85916:	6965      	ldr	r5, [r4, #20]
   85918:	6921      	ldr	r1, [r4, #16]
   8591a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   8591e:	eba0 0b01 	sub.w	fp, r0, r1
   85922:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   85926:	f10b 0001 	add.w	r0, fp, #1
   8592a:	106d      	asrs	r5, r5, #1
   8592c:	4430      	add	r0, r6
   8592e:	42a8      	cmp	r0, r5
   85930:	462a      	mov	r2, r5
   85932:	bf84      	itt	hi
   85934:	4605      	movhi	r5, r0
   85936:	462a      	movhi	r2, r5
   85938:	055b      	lsls	r3, r3, #21
   8593a:	d538      	bpl.n	859ae <__ssprint_r+0xba>
   8593c:	4611      	mov	r1, r2
   8593e:	4650      	mov	r0, sl
   85940:	f7fc fae4 	bl	81f0c <_malloc_r>
   85944:	2800      	cmp	r0, #0
   85946:	d03c      	beq.n	859c2 <__ssprint_r+0xce>
   85948:	465a      	mov	r2, fp
   8594a:	6921      	ldr	r1, [r4, #16]
   8594c:	9001      	str	r0, [sp, #4]
   8594e:	f7fc fd7f 	bl	82450 <memcpy>
   85952:	89a2      	ldrh	r2, [r4, #12]
   85954:	9b01      	ldr	r3, [sp, #4]
   85956:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8595a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8595e:	81a2      	strh	r2, [r4, #12]
   85960:	eba5 020b 	sub.w	r2, r5, fp
   85964:	eb03 000b 	add.w	r0, r3, fp
   85968:	6165      	str	r5, [r4, #20]
   8596a:	46b3      	mov	fp, r6
   8596c:	4635      	mov	r5, r6
   8596e:	6123      	str	r3, [r4, #16]
   85970:	6020      	str	r0, [r4, #0]
   85972:	60a2      	str	r2, [r4, #8]
   85974:	465a      	mov	r2, fp
   85976:	4649      	mov	r1, r9
   85978:	f7ff faa6 	bl	84ec8 <memmove>
   8597c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   85980:	68a2      	ldr	r2, [r4, #8]
   85982:	6820      	ldr	r0, [r4, #0]
   85984:	1b55      	subs	r5, r2, r5
   85986:	4458      	add	r0, fp
   85988:	1b9e      	subs	r6, r3, r6
   8598a:	60a5      	str	r5, [r4, #8]
   8598c:	6020      	str	r0, [r4, #0]
   8598e:	f8c8 6008 	str.w	r6, [r8, #8]
   85992:	b33e      	cbz	r6, 859e4 <__ssprint_r+0xf0>
   85994:	687e      	ldr	r6, [r7, #4]
   85996:	463b      	mov	r3, r7
   85998:	3708      	adds	r7, #8
   8599a:	2e00      	cmp	r6, #0
   8599c:	d0fa      	beq.n	85994 <__ssprint_r+0xa0>
   8599e:	42ae      	cmp	r6, r5
   859a0:	f8d3 9000 	ldr.w	r9, [r3]
   859a4:	46ab      	mov	fp, r5
   859a6:	d2b2      	bcs.n	8590e <__ssprint_r+0x1a>
   859a8:	4635      	mov	r5, r6
   859aa:	46b3      	mov	fp, r6
   859ac:	e7e2      	b.n	85974 <__ssprint_r+0x80>
   859ae:	4650      	mov	r0, sl
   859b0:	f7ff fdea 	bl	85588 <_realloc_r>
   859b4:	4603      	mov	r3, r0
   859b6:	2800      	cmp	r0, #0
   859b8:	d1d2      	bne.n	85960 <__ssprint_r+0x6c>
   859ba:	6921      	ldr	r1, [r4, #16]
   859bc:	4650      	mov	r0, sl
   859be:	f7ff f92f 	bl	84c20 <_free_r>
   859c2:	230c      	movs	r3, #12
   859c4:	2200      	movs	r2, #0
   859c6:	f04f 30ff 	mov.w	r0, #4294967295
   859ca:	f8ca 3000 	str.w	r3, [sl]
   859ce:	89a3      	ldrh	r3, [r4, #12]
   859d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   859d4:	81a3      	strh	r3, [r4, #12]
   859d6:	f8c8 2008 	str.w	r2, [r8, #8]
   859da:	f8c8 2004 	str.w	r2, [r8, #4]
   859de:	b003      	add	sp, #12
   859e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   859e4:	2000      	movs	r0, #0
   859e6:	f8c8 0004 	str.w	r0, [r8, #4]
   859ea:	b003      	add	sp, #12
   859ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000859f0 <__ascii_wctomb>:
   859f0:	b119      	cbz	r1, 859fa <__ascii_wctomb+0xa>
   859f2:	2aff      	cmp	r2, #255	; 0xff
   859f4:	d803      	bhi.n	859fe <__ascii_wctomb+0xe>
   859f6:	700a      	strb	r2, [r1, #0]
   859f8:	2101      	movs	r1, #1
   859fa:	4608      	mov	r0, r1
   859fc:	4770      	bx	lr
   859fe:	238a      	movs	r3, #138	; 0x8a
   85a00:	f04f 31ff 	mov.w	r1, #4294967295
   85a04:	6003      	str	r3, [r0, #0]
   85a06:	e7f8      	b.n	859fa <__ascii_wctomb+0xa>

00085a08 <__register_exitproc>:
   85a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85a0c:	4d2c      	ldr	r5, [pc, #176]	; (85ac0 <__register_exitproc+0xb8>)
   85a0e:	4606      	mov	r6, r0
   85a10:	6828      	ldr	r0, [r5, #0]
   85a12:	4698      	mov	r8, r3
   85a14:	460f      	mov	r7, r1
   85a16:	4691      	mov	r9, r2
   85a18:	f7ff f9f6 	bl	84e08 <__retarget_lock_acquire_recursive>
   85a1c:	4b29      	ldr	r3, [pc, #164]	; (85ac4 <__register_exitproc+0xbc>)
   85a1e:	681c      	ldr	r4, [r3, #0]
   85a20:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85a24:	2b00      	cmp	r3, #0
   85a26:	d03e      	beq.n	85aa6 <__register_exitproc+0x9e>
   85a28:	685a      	ldr	r2, [r3, #4]
   85a2a:	2a1f      	cmp	r2, #31
   85a2c:	dc1c      	bgt.n	85a68 <__register_exitproc+0x60>
   85a2e:	f102 0e01 	add.w	lr, r2, #1
   85a32:	b176      	cbz	r6, 85a52 <__register_exitproc+0x4a>
   85a34:	2101      	movs	r1, #1
   85a36:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   85a3a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85a3e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85a42:	4091      	lsls	r1, r2
   85a44:	4308      	orrs	r0, r1
   85a46:	2e02      	cmp	r6, #2
   85a48:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85a4c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85a50:	d023      	beq.n	85a9a <__register_exitproc+0x92>
   85a52:	3202      	adds	r2, #2
   85a54:	f8c3 e004 	str.w	lr, [r3, #4]
   85a58:	6828      	ldr	r0, [r5, #0]
   85a5a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85a5e:	f7ff f9d5 	bl	84e0c <__retarget_lock_release_recursive>
   85a62:	2000      	movs	r0, #0
   85a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85a68:	4b17      	ldr	r3, [pc, #92]	; (85ac8 <__register_exitproc+0xc0>)
   85a6a:	b30b      	cbz	r3, 85ab0 <__register_exitproc+0xa8>
   85a6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85a70:	f7fc fa44 	bl	81efc <malloc>
   85a74:	4603      	mov	r3, r0
   85a76:	b1d8      	cbz	r0, 85ab0 <__register_exitproc+0xa8>
   85a78:	2000      	movs	r0, #0
   85a7a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85a7e:	f04f 0e01 	mov.w	lr, #1
   85a82:	6058      	str	r0, [r3, #4]
   85a84:	6019      	str	r1, [r3, #0]
   85a86:	4602      	mov	r2, r0
   85a88:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85a8c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85a90:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85a94:	2e00      	cmp	r6, #0
   85a96:	d0dc      	beq.n	85a52 <__register_exitproc+0x4a>
   85a98:	e7cc      	b.n	85a34 <__register_exitproc+0x2c>
   85a9a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   85a9e:	4301      	orrs	r1, r0
   85aa0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85aa4:	e7d5      	b.n	85a52 <__register_exitproc+0x4a>
   85aa6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   85aaa:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85aae:	e7bb      	b.n	85a28 <__register_exitproc+0x20>
   85ab0:	6828      	ldr	r0, [r5, #0]
   85ab2:	f7ff f9ab 	bl	84e0c <__retarget_lock_release_recursive>
   85ab6:	f04f 30ff 	mov.w	r0, #4294967295
   85aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85abe:	bf00      	nop
   85ac0:	20070d08 	.word	0x20070d08
   85ac4:	0008681c 	.word	0x0008681c
   85ac8:	00081efd 	.word	0x00081efd

00085acc <_calloc_r>:
   85acc:	b510      	push	{r4, lr}
   85ace:	fb02 f101 	mul.w	r1, r2, r1
   85ad2:	f7fc fa1b 	bl	81f0c <_malloc_r>
   85ad6:	4604      	mov	r4, r0
   85ad8:	b1d8      	cbz	r0, 85b12 <_calloc_r+0x46>
   85ada:	f850 2c04 	ldr.w	r2, [r0, #-4]
   85ade:	f022 0203 	bic.w	r2, r2, #3
   85ae2:	3a04      	subs	r2, #4
   85ae4:	2a24      	cmp	r2, #36	; 0x24
   85ae6:	d818      	bhi.n	85b1a <_calloc_r+0x4e>
   85ae8:	2a13      	cmp	r2, #19
   85aea:	d914      	bls.n	85b16 <_calloc_r+0x4a>
   85aec:	2300      	movs	r3, #0
   85aee:	2a1b      	cmp	r2, #27
   85af0:	6003      	str	r3, [r0, #0]
   85af2:	6043      	str	r3, [r0, #4]
   85af4:	d916      	bls.n	85b24 <_calloc_r+0x58>
   85af6:	2a24      	cmp	r2, #36	; 0x24
   85af8:	6083      	str	r3, [r0, #8]
   85afa:	60c3      	str	r3, [r0, #12]
   85afc:	bf11      	iteee	ne
   85afe:	f100 0210 	addne.w	r2, r0, #16
   85b02:	6103      	streq	r3, [r0, #16]
   85b04:	6143      	streq	r3, [r0, #20]
   85b06:	f100 0218 	addeq.w	r2, r0, #24
   85b0a:	2300      	movs	r3, #0
   85b0c:	6013      	str	r3, [r2, #0]
   85b0e:	6053      	str	r3, [r2, #4]
   85b10:	6093      	str	r3, [r2, #8]
   85b12:	4620      	mov	r0, r4
   85b14:	bd10      	pop	{r4, pc}
   85b16:	4602      	mov	r2, r0
   85b18:	e7f7      	b.n	85b0a <_calloc_r+0x3e>
   85b1a:	2100      	movs	r1, #0
   85b1c:	f7fc fd0e 	bl	8253c <memset>
   85b20:	4620      	mov	r0, r4
   85b22:	bd10      	pop	{r4, pc}
   85b24:	f100 0208 	add.w	r2, r0, #8
   85b28:	e7ef      	b.n	85b0a <_calloc_r+0x3e>
   85b2a:	bf00      	nop

00085b2c <__aeabi_drsub>:
   85b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   85b30:	e002      	b.n	85b38 <__adddf3>
   85b32:	bf00      	nop

00085b34 <__aeabi_dsub>:
   85b34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085b38 <__adddf3>:
   85b38:	b530      	push	{r4, r5, lr}
   85b3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85b3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   85b42:	ea94 0f05 	teq	r4, r5
   85b46:	bf08      	it	eq
   85b48:	ea90 0f02 	teqeq	r0, r2
   85b4c:	bf1f      	itttt	ne
   85b4e:	ea54 0c00 	orrsne.w	ip, r4, r0
   85b52:	ea55 0c02 	orrsne.w	ip, r5, r2
   85b56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   85b5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85b5e:	f000 80e2 	beq.w	85d26 <__adddf3+0x1ee>
   85b62:	ea4f 5454 	mov.w	r4, r4, lsr #21
   85b66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   85b6a:	bfb8      	it	lt
   85b6c:	426d      	neglt	r5, r5
   85b6e:	dd0c      	ble.n	85b8a <__adddf3+0x52>
   85b70:	442c      	add	r4, r5
   85b72:	ea80 0202 	eor.w	r2, r0, r2
   85b76:	ea81 0303 	eor.w	r3, r1, r3
   85b7a:	ea82 0000 	eor.w	r0, r2, r0
   85b7e:	ea83 0101 	eor.w	r1, r3, r1
   85b82:	ea80 0202 	eor.w	r2, r0, r2
   85b86:	ea81 0303 	eor.w	r3, r1, r3
   85b8a:	2d36      	cmp	r5, #54	; 0x36
   85b8c:	bf88      	it	hi
   85b8e:	bd30      	pophi	{r4, r5, pc}
   85b90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85b94:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85b98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   85b9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85ba0:	d002      	beq.n	85ba8 <__adddf3+0x70>
   85ba2:	4240      	negs	r0, r0
   85ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85ba8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   85bac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85bb0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   85bb4:	d002      	beq.n	85bbc <__adddf3+0x84>
   85bb6:	4252      	negs	r2, r2
   85bb8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85bbc:	ea94 0f05 	teq	r4, r5
   85bc0:	f000 80a7 	beq.w	85d12 <__adddf3+0x1da>
   85bc4:	f1a4 0401 	sub.w	r4, r4, #1
   85bc8:	f1d5 0e20 	rsbs	lr, r5, #32
   85bcc:	db0d      	blt.n	85bea <__adddf3+0xb2>
   85bce:	fa02 fc0e 	lsl.w	ip, r2, lr
   85bd2:	fa22 f205 	lsr.w	r2, r2, r5
   85bd6:	1880      	adds	r0, r0, r2
   85bd8:	f141 0100 	adc.w	r1, r1, #0
   85bdc:	fa03 f20e 	lsl.w	r2, r3, lr
   85be0:	1880      	adds	r0, r0, r2
   85be2:	fa43 f305 	asr.w	r3, r3, r5
   85be6:	4159      	adcs	r1, r3
   85be8:	e00e      	b.n	85c08 <__adddf3+0xd0>
   85bea:	f1a5 0520 	sub.w	r5, r5, #32
   85bee:	f10e 0e20 	add.w	lr, lr, #32
   85bf2:	2a01      	cmp	r2, #1
   85bf4:	fa03 fc0e 	lsl.w	ip, r3, lr
   85bf8:	bf28      	it	cs
   85bfa:	f04c 0c02 	orrcs.w	ip, ip, #2
   85bfe:	fa43 f305 	asr.w	r3, r3, r5
   85c02:	18c0      	adds	r0, r0, r3
   85c04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   85c08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85c0c:	d507      	bpl.n	85c1e <__adddf3+0xe6>
   85c0e:	f04f 0e00 	mov.w	lr, #0
   85c12:	f1dc 0c00 	rsbs	ip, ip, #0
   85c16:	eb7e 0000 	sbcs.w	r0, lr, r0
   85c1a:	eb6e 0101 	sbc.w	r1, lr, r1
   85c1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   85c22:	d31b      	bcc.n	85c5c <__adddf3+0x124>
   85c24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   85c28:	d30c      	bcc.n	85c44 <__adddf3+0x10c>
   85c2a:	0849      	lsrs	r1, r1, #1
   85c2c:	ea5f 0030 	movs.w	r0, r0, rrx
   85c30:	ea4f 0c3c 	mov.w	ip, ip, rrx
   85c34:	f104 0401 	add.w	r4, r4, #1
   85c38:	ea4f 5244 	mov.w	r2, r4, lsl #21
   85c3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   85c40:	f080 809a 	bcs.w	85d78 <__adddf3+0x240>
   85c44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85c48:	bf08      	it	eq
   85c4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85c4e:	f150 0000 	adcs.w	r0, r0, #0
   85c52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85c56:	ea41 0105 	orr.w	r1, r1, r5
   85c5a:	bd30      	pop	{r4, r5, pc}
   85c5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   85c60:	4140      	adcs	r0, r0
   85c62:	eb41 0101 	adc.w	r1, r1, r1
   85c66:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85c6a:	f1a4 0401 	sub.w	r4, r4, #1
   85c6e:	d1e9      	bne.n	85c44 <__adddf3+0x10c>
   85c70:	f091 0f00 	teq	r1, #0
   85c74:	bf04      	itt	eq
   85c76:	4601      	moveq	r1, r0
   85c78:	2000      	moveq	r0, #0
   85c7a:	fab1 f381 	clz	r3, r1
   85c7e:	bf08      	it	eq
   85c80:	3320      	addeq	r3, #32
   85c82:	f1a3 030b 	sub.w	r3, r3, #11
   85c86:	f1b3 0220 	subs.w	r2, r3, #32
   85c8a:	da0c      	bge.n	85ca6 <__adddf3+0x16e>
   85c8c:	320c      	adds	r2, #12
   85c8e:	dd08      	ble.n	85ca2 <__adddf3+0x16a>
   85c90:	f102 0c14 	add.w	ip, r2, #20
   85c94:	f1c2 020c 	rsb	r2, r2, #12
   85c98:	fa01 f00c 	lsl.w	r0, r1, ip
   85c9c:	fa21 f102 	lsr.w	r1, r1, r2
   85ca0:	e00c      	b.n	85cbc <__adddf3+0x184>
   85ca2:	f102 0214 	add.w	r2, r2, #20
   85ca6:	bfd8      	it	le
   85ca8:	f1c2 0c20 	rsble	ip, r2, #32
   85cac:	fa01 f102 	lsl.w	r1, r1, r2
   85cb0:	fa20 fc0c 	lsr.w	ip, r0, ip
   85cb4:	bfdc      	itt	le
   85cb6:	ea41 010c 	orrle.w	r1, r1, ip
   85cba:	4090      	lslle	r0, r2
   85cbc:	1ae4      	subs	r4, r4, r3
   85cbe:	bfa2      	ittt	ge
   85cc0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   85cc4:	4329      	orrge	r1, r5
   85cc6:	bd30      	popge	{r4, r5, pc}
   85cc8:	ea6f 0404 	mvn.w	r4, r4
   85ccc:	3c1f      	subs	r4, #31
   85cce:	da1c      	bge.n	85d0a <__adddf3+0x1d2>
   85cd0:	340c      	adds	r4, #12
   85cd2:	dc0e      	bgt.n	85cf2 <__adddf3+0x1ba>
   85cd4:	f104 0414 	add.w	r4, r4, #20
   85cd8:	f1c4 0220 	rsb	r2, r4, #32
   85cdc:	fa20 f004 	lsr.w	r0, r0, r4
   85ce0:	fa01 f302 	lsl.w	r3, r1, r2
   85ce4:	ea40 0003 	orr.w	r0, r0, r3
   85ce8:	fa21 f304 	lsr.w	r3, r1, r4
   85cec:	ea45 0103 	orr.w	r1, r5, r3
   85cf0:	bd30      	pop	{r4, r5, pc}
   85cf2:	f1c4 040c 	rsb	r4, r4, #12
   85cf6:	f1c4 0220 	rsb	r2, r4, #32
   85cfa:	fa20 f002 	lsr.w	r0, r0, r2
   85cfe:	fa01 f304 	lsl.w	r3, r1, r4
   85d02:	ea40 0003 	orr.w	r0, r0, r3
   85d06:	4629      	mov	r1, r5
   85d08:	bd30      	pop	{r4, r5, pc}
   85d0a:	fa21 f004 	lsr.w	r0, r1, r4
   85d0e:	4629      	mov	r1, r5
   85d10:	bd30      	pop	{r4, r5, pc}
   85d12:	f094 0f00 	teq	r4, #0
   85d16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   85d1a:	bf06      	itte	eq
   85d1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   85d20:	3401      	addeq	r4, #1
   85d22:	3d01      	subne	r5, #1
   85d24:	e74e      	b.n	85bc4 <__adddf3+0x8c>
   85d26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85d2a:	bf18      	it	ne
   85d2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85d30:	d029      	beq.n	85d86 <__adddf3+0x24e>
   85d32:	ea94 0f05 	teq	r4, r5
   85d36:	bf08      	it	eq
   85d38:	ea90 0f02 	teqeq	r0, r2
   85d3c:	d005      	beq.n	85d4a <__adddf3+0x212>
   85d3e:	ea54 0c00 	orrs.w	ip, r4, r0
   85d42:	bf04      	itt	eq
   85d44:	4619      	moveq	r1, r3
   85d46:	4610      	moveq	r0, r2
   85d48:	bd30      	pop	{r4, r5, pc}
   85d4a:	ea91 0f03 	teq	r1, r3
   85d4e:	bf1e      	ittt	ne
   85d50:	2100      	movne	r1, #0
   85d52:	2000      	movne	r0, #0
   85d54:	bd30      	popne	{r4, r5, pc}
   85d56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   85d5a:	d105      	bne.n	85d68 <__adddf3+0x230>
   85d5c:	0040      	lsls	r0, r0, #1
   85d5e:	4149      	adcs	r1, r1
   85d60:	bf28      	it	cs
   85d62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   85d66:	bd30      	pop	{r4, r5, pc}
   85d68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   85d6c:	bf3c      	itt	cc
   85d6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   85d72:	bd30      	popcc	{r4, r5, pc}
   85d74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85d78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   85d7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85d80:	f04f 0000 	mov.w	r0, #0
   85d84:	bd30      	pop	{r4, r5, pc}
   85d86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85d8a:	bf1a      	itte	ne
   85d8c:	4619      	movne	r1, r3
   85d8e:	4610      	movne	r0, r2
   85d90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   85d94:	bf1c      	itt	ne
   85d96:	460b      	movne	r3, r1
   85d98:	4602      	movne	r2, r0
   85d9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85d9e:	bf06      	itte	eq
   85da0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   85da4:	ea91 0f03 	teqeq	r1, r3
   85da8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   85dac:	bd30      	pop	{r4, r5, pc}
   85dae:	bf00      	nop

00085db0 <__aeabi_ui2d>:
   85db0:	f090 0f00 	teq	r0, #0
   85db4:	bf04      	itt	eq
   85db6:	2100      	moveq	r1, #0
   85db8:	4770      	bxeq	lr
   85dba:	b530      	push	{r4, r5, lr}
   85dbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85dc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85dc4:	f04f 0500 	mov.w	r5, #0
   85dc8:	f04f 0100 	mov.w	r1, #0
   85dcc:	e750      	b.n	85c70 <__adddf3+0x138>
   85dce:	bf00      	nop

00085dd0 <__aeabi_i2d>:
   85dd0:	f090 0f00 	teq	r0, #0
   85dd4:	bf04      	itt	eq
   85dd6:	2100      	moveq	r1, #0
   85dd8:	4770      	bxeq	lr
   85dda:	b530      	push	{r4, r5, lr}
   85ddc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85de0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85de4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   85de8:	bf48      	it	mi
   85dea:	4240      	negmi	r0, r0
   85dec:	f04f 0100 	mov.w	r1, #0
   85df0:	e73e      	b.n	85c70 <__adddf3+0x138>
   85df2:	bf00      	nop

00085df4 <__aeabi_f2d>:
   85df4:	0042      	lsls	r2, r0, #1
   85df6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   85dfa:	ea4f 0131 	mov.w	r1, r1, rrx
   85dfe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   85e02:	bf1f      	itttt	ne
   85e04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   85e08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85e0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   85e10:	4770      	bxne	lr
   85e12:	f092 0f00 	teq	r2, #0
   85e16:	bf14      	ite	ne
   85e18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85e1c:	4770      	bxeq	lr
   85e1e:	b530      	push	{r4, r5, lr}
   85e20:	f44f 7460 	mov.w	r4, #896	; 0x380
   85e24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85e28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85e2c:	e720      	b.n	85c70 <__adddf3+0x138>
   85e2e:	bf00      	nop

00085e30 <__aeabi_ul2d>:
   85e30:	ea50 0201 	orrs.w	r2, r0, r1
   85e34:	bf08      	it	eq
   85e36:	4770      	bxeq	lr
   85e38:	b530      	push	{r4, r5, lr}
   85e3a:	f04f 0500 	mov.w	r5, #0
   85e3e:	e00a      	b.n	85e56 <__aeabi_l2d+0x16>

00085e40 <__aeabi_l2d>:
   85e40:	ea50 0201 	orrs.w	r2, r0, r1
   85e44:	bf08      	it	eq
   85e46:	4770      	bxeq	lr
   85e48:	b530      	push	{r4, r5, lr}
   85e4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   85e4e:	d502      	bpl.n	85e56 <__aeabi_l2d+0x16>
   85e50:	4240      	negs	r0, r0
   85e52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85e56:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85e5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85e5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   85e62:	f43f aedc 	beq.w	85c1e <__adddf3+0xe6>
   85e66:	f04f 0203 	mov.w	r2, #3
   85e6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85e6e:	bf18      	it	ne
   85e70:	3203      	addne	r2, #3
   85e72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85e76:	bf18      	it	ne
   85e78:	3203      	addne	r2, #3
   85e7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   85e7e:	f1c2 0320 	rsb	r3, r2, #32
   85e82:	fa00 fc03 	lsl.w	ip, r0, r3
   85e86:	fa20 f002 	lsr.w	r0, r0, r2
   85e8a:	fa01 fe03 	lsl.w	lr, r1, r3
   85e8e:	ea40 000e 	orr.w	r0, r0, lr
   85e92:	fa21 f102 	lsr.w	r1, r1, r2
   85e96:	4414      	add	r4, r2
   85e98:	e6c1      	b.n	85c1e <__adddf3+0xe6>
   85e9a:	bf00      	nop

00085e9c <__aeabi_dmul>:
   85e9c:	b570      	push	{r4, r5, r6, lr}
   85e9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85ea2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   85ea6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   85eaa:	bf1d      	ittte	ne
   85eac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   85eb0:	ea94 0f0c 	teqne	r4, ip
   85eb4:	ea95 0f0c 	teqne	r5, ip
   85eb8:	f000 f8de 	bleq	86078 <__aeabi_dmul+0x1dc>
   85ebc:	442c      	add	r4, r5
   85ebe:	ea81 0603 	eor.w	r6, r1, r3
   85ec2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   85ec6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   85eca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   85ece:	bf18      	it	ne
   85ed0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   85ed4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   85edc:	d038      	beq.n	85f50 <__aeabi_dmul+0xb4>
   85ede:	fba0 ce02 	umull	ip, lr, r0, r2
   85ee2:	f04f 0500 	mov.w	r5, #0
   85ee6:	fbe1 e502 	umlal	lr, r5, r1, r2
   85eea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   85eee:	fbe0 e503 	umlal	lr, r5, r0, r3
   85ef2:	f04f 0600 	mov.w	r6, #0
   85ef6:	fbe1 5603 	umlal	r5, r6, r1, r3
   85efa:	f09c 0f00 	teq	ip, #0
   85efe:	bf18      	it	ne
   85f00:	f04e 0e01 	orrne.w	lr, lr, #1
   85f04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   85f08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   85f0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   85f10:	d204      	bcs.n	85f1c <__aeabi_dmul+0x80>
   85f12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   85f16:	416d      	adcs	r5, r5
   85f18:	eb46 0606 	adc.w	r6, r6, r6
   85f1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   85f20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   85f24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   85f28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   85f2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   85f30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   85f34:	bf88      	it	hi
   85f36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   85f3a:	d81e      	bhi.n	85f7a <__aeabi_dmul+0xde>
   85f3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   85f40:	bf08      	it	eq
   85f42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   85f46:	f150 0000 	adcs.w	r0, r0, #0
   85f4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85f4e:	bd70      	pop	{r4, r5, r6, pc}
   85f50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   85f54:	ea46 0101 	orr.w	r1, r6, r1
   85f58:	ea40 0002 	orr.w	r0, r0, r2
   85f5c:	ea81 0103 	eor.w	r1, r1, r3
   85f60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   85f64:	bfc2      	ittt	gt
   85f66:	ebd4 050c 	rsbsgt	r5, r4, ip
   85f6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85f6e:	bd70      	popgt	{r4, r5, r6, pc}
   85f70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85f74:	f04f 0e00 	mov.w	lr, #0
   85f78:	3c01      	subs	r4, #1
   85f7a:	f300 80ab 	bgt.w	860d4 <__aeabi_dmul+0x238>
   85f7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   85f82:	bfde      	ittt	le
   85f84:	2000      	movle	r0, #0
   85f86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   85f8a:	bd70      	pople	{r4, r5, r6, pc}
   85f8c:	f1c4 0400 	rsb	r4, r4, #0
   85f90:	3c20      	subs	r4, #32
   85f92:	da35      	bge.n	86000 <__aeabi_dmul+0x164>
   85f94:	340c      	adds	r4, #12
   85f96:	dc1b      	bgt.n	85fd0 <__aeabi_dmul+0x134>
   85f98:	f104 0414 	add.w	r4, r4, #20
   85f9c:	f1c4 0520 	rsb	r5, r4, #32
   85fa0:	fa00 f305 	lsl.w	r3, r0, r5
   85fa4:	fa20 f004 	lsr.w	r0, r0, r4
   85fa8:	fa01 f205 	lsl.w	r2, r1, r5
   85fac:	ea40 0002 	orr.w	r0, r0, r2
   85fb0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   85fb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85fb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   85fbc:	fa21 f604 	lsr.w	r6, r1, r4
   85fc0:	eb42 0106 	adc.w	r1, r2, r6
   85fc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85fc8:	bf08      	it	eq
   85fca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85fce:	bd70      	pop	{r4, r5, r6, pc}
   85fd0:	f1c4 040c 	rsb	r4, r4, #12
   85fd4:	f1c4 0520 	rsb	r5, r4, #32
   85fd8:	fa00 f304 	lsl.w	r3, r0, r4
   85fdc:	fa20 f005 	lsr.w	r0, r0, r5
   85fe0:	fa01 f204 	lsl.w	r2, r1, r4
   85fe4:	ea40 0002 	orr.w	r0, r0, r2
   85fe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85fec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   85ff0:	f141 0100 	adc.w	r1, r1, #0
   85ff4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85ff8:	bf08      	it	eq
   85ffa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85ffe:	bd70      	pop	{r4, r5, r6, pc}
   86000:	f1c4 0520 	rsb	r5, r4, #32
   86004:	fa00 f205 	lsl.w	r2, r0, r5
   86008:	ea4e 0e02 	orr.w	lr, lr, r2
   8600c:	fa20 f304 	lsr.w	r3, r0, r4
   86010:	fa01 f205 	lsl.w	r2, r1, r5
   86014:	ea43 0302 	orr.w	r3, r3, r2
   86018:	fa21 f004 	lsr.w	r0, r1, r4
   8601c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   86020:	fa21 f204 	lsr.w	r2, r1, r4
   86024:	ea20 0002 	bic.w	r0, r0, r2
   86028:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8602c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   86030:	bf08      	it	eq
   86032:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   86036:	bd70      	pop	{r4, r5, r6, pc}
   86038:	f094 0f00 	teq	r4, #0
   8603c:	d10f      	bne.n	8605e <__aeabi_dmul+0x1c2>
   8603e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   86042:	0040      	lsls	r0, r0, #1
   86044:	eb41 0101 	adc.w	r1, r1, r1
   86048:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8604c:	bf08      	it	eq
   8604e:	3c01      	subeq	r4, #1
   86050:	d0f7      	beq.n	86042 <__aeabi_dmul+0x1a6>
   86052:	ea41 0106 	orr.w	r1, r1, r6
   86056:	f095 0f00 	teq	r5, #0
   8605a:	bf18      	it	ne
   8605c:	4770      	bxne	lr
   8605e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   86062:	0052      	lsls	r2, r2, #1
   86064:	eb43 0303 	adc.w	r3, r3, r3
   86068:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8606c:	bf08      	it	eq
   8606e:	3d01      	subeq	r5, #1
   86070:	d0f7      	beq.n	86062 <__aeabi_dmul+0x1c6>
   86072:	ea43 0306 	orr.w	r3, r3, r6
   86076:	4770      	bx	lr
   86078:	ea94 0f0c 	teq	r4, ip
   8607c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   86080:	bf18      	it	ne
   86082:	ea95 0f0c 	teqne	r5, ip
   86086:	d00c      	beq.n	860a2 <__aeabi_dmul+0x206>
   86088:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8608c:	bf18      	it	ne
   8608e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   86092:	d1d1      	bne.n	86038 <__aeabi_dmul+0x19c>
   86094:	ea81 0103 	eor.w	r1, r1, r3
   86098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8609c:	f04f 0000 	mov.w	r0, #0
   860a0:	bd70      	pop	{r4, r5, r6, pc}
   860a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   860a6:	bf06      	itte	eq
   860a8:	4610      	moveq	r0, r2
   860aa:	4619      	moveq	r1, r3
   860ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   860b0:	d019      	beq.n	860e6 <__aeabi_dmul+0x24a>
   860b2:	ea94 0f0c 	teq	r4, ip
   860b6:	d102      	bne.n	860be <__aeabi_dmul+0x222>
   860b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   860bc:	d113      	bne.n	860e6 <__aeabi_dmul+0x24a>
   860be:	ea95 0f0c 	teq	r5, ip
   860c2:	d105      	bne.n	860d0 <__aeabi_dmul+0x234>
   860c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   860c8:	bf1c      	itt	ne
   860ca:	4610      	movne	r0, r2
   860cc:	4619      	movne	r1, r3
   860ce:	d10a      	bne.n	860e6 <__aeabi_dmul+0x24a>
   860d0:	ea81 0103 	eor.w	r1, r1, r3
   860d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   860d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   860dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   860e0:	f04f 0000 	mov.w	r0, #0
   860e4:	bd70      	pop	{r4, r5, r6, pc}
   860e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   860ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   860ee:	bd70      	pop	{r4, r5, r6, pc}

000860f0 <__aeabi_ddiv>:
   860f0:	b570      	push	{r4, r5, r6, lr}
   860f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   860f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   860fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   860fe:	bf1d      	ittte	ne
   86100:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   86104:	ea94 0f0c 	teqne	r4, ip
   86108:	ea95 0f0c 	teqne	r5, ip
   8610c:	f000 f8a7 	bleq	8625e <__aeabi_ddiv+0x16e>
   86110:	eba4 0405 	sub.w	r4, r4, r5
   86114:	ea81 0e03 	eor.w	lr, r1, r3
   86118:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8611c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   86120:	f000 8088 	beq.w	86234 <__aeabi_ddiv+0x144>
   86124:	ea4f 3303 	mov.w	r3, r3, lsl #12
   86128:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8612c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   86130:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   86134:	ea4f 2202 	mov.w	r2, r2, lsl #8
   86138:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8613c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   86140:	ea4f 2600 	mov.w	r6, r0, lsl #8
   86144:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   86148:	429d      	cmp	r5, r3
   8614a:	bf08      	it	eq
   8614c:	4296      	cmpeq	r6, r2
   8614e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   86152:	f504 7440 	add.w	r4, r4, #768	; 0x300
   86156:	d202      	bcs.n	8615e <__aeabi_ddiv+0x6e>
   86158:	085b      	lsrs	r3, r3, #1
   8615a:	ea4f 0232 	mov.w	r2, r2, rrx
   8615e:	1ab6      	subs	r6, r6, r2
   86160:	eb65 0503 	sbc.w	r5, r5, r3
   86164:	085b      	lsrs	r3, r3, #1
   86166:	ea4f 0232 	mov.w	r2, r2, rrx
   8616a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8616e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   86172:	ebb6 0e02 	subs.w	lr, r6, r2
   86176:	eb75 0e03 	sbcs.w	lr, r5, r3
   8617a:	bf22      	ittt	cs
   8617c:	1ab6      	subcs	r6, r6, r2
   8617e:	4675      	movcs	r5, lr
   86180:	ea40 000c 	orrcs.w	r0, r0, ip
   86184:	085b      	lsrs	r3, r3, #1
   86186:	ea4f 0232 	mov.w	r2, r2, rrx
   8618a:	ebb6 0e02 	subs.w	lr, r6, r2
   8618e:	eb75 0e03 	sbcs.w	lr, r5, r3
   86192:	bf22      	ittt	cs
   86194:	1ab6      	subcs	r6, r6, r2
   86196:	4675      	movcs	r5, lr
   86198:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8619c:	085b      	lsrs	r3, r3, #1
   8619e:	ea4f 0232 	mov.w	r2, r2, rrx
   861a2:	ebb6 0e02 	subs.w	lr, r6, r2
   861a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   861aa:	bf22      	ittt	cs
   861ac:	1ab6      	subcs	r6, r6, r2
   861ae:	4675      	movcs	r5, lr
   861b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   861b4:	085b      	lsrs	r3, r3, #1
   861b6:	ea4f 0232 	mov.w	r2, r2, rrx
   861ba:	ebb6 0e02 	subs.w	lr, r6, r2
   861be:	eb75 0e03 	sbcs.w	lr, r5, r3
   861c2:	bf22      	ittt	cs
   861c4:	1ab6      	subcs	r6, r6, r2
   861c6:	4675      	movcs	r5, lr
   861c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   861cc:	ea55 0e06 	orrs.w	lr, r5, r6
   861d0:	d018      	beq.n	86204 <__aeabi_ddiv+0x114>
   861d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   861d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   861da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   861de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   861e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   861e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   861ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   861ee:	d1c0      	bne.n	86172 <__aeabi_ddiv+0x82>
   861f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   861f4:	d10b      	bne.n	8620e <__aeabi_ddiv+0x11e>
   861f6:	ea41 0100 	orr.w	r1, r1, r0
   861fa:	f04f 0000 	mov.w	r0, #0
   861fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   86202:	e7b6      	b.n	86172 <__aeabi_ddiv+0x82>
   86204:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   86208:	bf04      	itt	eq
   8620a:	4301      	orreq	r1, r0
   8620c:	2000      	moveq	r0, #0
   8620e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   86212:	bf88      	it	hi
   86214:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   86218:	f63f aeaf 	bhi.w	85f7a <__aeabi_dmul+0xde>
   8621c:	ebb5 0c03 	subs.w	ip, r5, r3
   86220:	bf04      	itt	eq
   86222:	ebb6 0c02 	subseq.w	ip, r6, r2
   86226:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8622a:	f150 0000 	adcs.w	r0, r0, #0
   8622e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   86232:	bd70      	pop	{r4, r5, r6, pc}
   86234:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   86238:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8623c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   86240:	bfc2      	ittt	gt
   86242:	ebd4 050c 	rsbsgt	r5, r4, ip
   86246:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8624a:	bd70      	popgt	{r4, r5, r6, pc}
   8624c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   86250:	f04f 0e00 	mov.w	lr, #0
   86254:	3c01      	subs	r4, #1
   86256:	e690      	b.n	85f7a <__aeabi_dmul+0xde>
   86258:	ea45 0e06 	orr.w	lr, r5, r6
   8625c:	e68d      	b.n	85f7a <__aeabi_dmul+0xde>
   8625e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   86262:	ea94 0f0c 	teq	r4, ip
   86266:	bf08      	it	eq
   86268:	ea95 0f0c 	teqeq	r5, ip
   8626c:	f43f af3b 	beq.w	860e6 <__aeabi_dmul+0x24a>
   86270:	ea94 0f0c 	teq	r4, ip
   86274:	d10a      	bne.n	8628c <__aeabi_ddiv+0x19c>
   86276:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8627a:	f47f af34 	bne.w	860e6 <__aeabi_dmul+0x24a>
   8627e:	ea95 0f0c 	teq	r5, ip
   86282:	f47f af25 	bne.w	860d0 <__aeabi_dmul+0x234>
   86286:	4610      	mov	r0, r2
   86288:	4619      	mov	r1, r3
   8628a:	e72c      	b.n	860e6 <__aeabi_dmul+0x24a>
   8628c:	ea95 0f0c 	teq	r5, ip
   86290:	d106      	bne.n	862a0 <__aeabi_ddiv+0x1b0>
   86292:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   86296:	f43f aefd 	beq.w	86094 <__aeabi_dmul+0x1f8>
   8629a:	4610      	mov	r0, r2
   8629c:	4619      	mov	r1, r3
   8629e:	e722      	b.n	860e6 <__aeabi_dmul+0x24a>
   862a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   862a4:	bf18      	it	ne
   862a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   862aa:	f47f aec5 	bne.w	86038 <__aeabi_dmul+0x19c>
   862ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   862b2:	f47f af0d 	bne.w	860d0 <__aeabi_dmul+0x234>
   862b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   862ba:	f47f aeeb 	bne.w	86094 <__aeabi_dmul+0x1f8>
   862be:	e712      	b.n	860e6 <__aeabi_dmul+0x24a>

000862c0 <__gedf2>:
   862c0:	f04f 3cff 	mov.w	ip, #4294967295
   862c4:	e006      	b.n	862d4 <__cmpdf2+0x4>
   862c6:	bf00      	nop

000862c8 <__ledf2>:
   862c8:	f04f 0c01 	mov.w	ip, #1
   862cc:	e002      	b.n	862d4 <__cmpdf2+0x4>
   862ce:	bf00      	nop

000862d0 <__cmpdf2>:
   862d0:	f04f 0c01 	mov.w	ip, #1
   862d4:	f84d cd04 	str.w	ip, [sp, #-4]!
   862d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   862dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   862e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   862e4:	bf18      	it	ne
   862e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   862ea:	d01b      	beq.n	86324 <__cmpdf2+0x54>
   862ec:	b001      	add	sp, #4
   862ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   862f2:	bf0c      	ite	eq
   862f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   862f8:	ea91 0f03 	teqne	r1, r3
   862fc:	bf02      	ittt	eq
   862fe:	ea90 0f02 	teqeq	r0, r2
   86302:	2000      	moveq	r0, #0
   86304:	4770      	bxeq	lr
   86306:	f110 0f00 	cmn.w	r0, #0
   8630a:	ea91 0f03 	teq	r1, r3
   8630e:	bf58      	it	pl
   86310:	4299      	cmppl	r1, r3
   86312:	bf08      	it	eq
   86314:	4290      	cmpeq	r0, r2
   86316:	bf2c      	ite	cs
   86318:	17d8      	asrcs	r0, r3, #31
   8631a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8631e:	f040 0001 	orr.w	r0, r0, #1
   86322:	4770      	bx	lr
   86324:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   86328:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8632c:	d102      	bne.n	86334 <__cmpdf2+0x64>
   8632e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   86332:	d107      	bne.n	86344 <__cmpdf2+0x74>
   86334:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   86338:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8633c:	d1d6      	bne.n	862ec <__cmpdf2+0x1c>
   8633e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   86342:	d0d3      	beq.n	862ec <__cmpdf2+0x1c>
   86344:	f85d 0b04 	ldr.w	r0, [sp], #4
   86348:	4770      	bx	lr
   8634a:	bf00      	nop

0008634c <__aeabi_cdrcmple>:
   8634c:	4684      	mov	ip, r0
   8634e:	4610      	mov	r0, r2
   86350:	4662      	mov	r2, ip
   86352:	468c      	mov	ip, r1
   86354:	4619      	mov	r1, r3
   86356:	4663      	mov	r3, ip
   86358:	e000      	b.n	8635c <__aeabi_cdcmpeq>
   8635a:	bf00      	nop

0008635c <__aeabi_cdcmpeq>:
   8635c:	b501      	push	{r0, lr}
   8635e:	f7ff ffb7 	bl	862d0 <__cmpdf2>
   86362:	2800      	cmp	r0, #0
   86364:	bf48      	it	mi
   86366:	f110 0f00 	cmnmi.w	r0, #0
   8636a:	bd01      	pop	{r0, pc}

0008636c <__aeabi_dcmpeq>:
   8636c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86370:	f7ff fff4 	bl	8635c <__aeabi_cdcmpeq>
   86374:	bf0c      	ite	eq
   86376:	2001      	moveq	r0, #1
   86378:	2000      	movne	r0, #0
   8637a:	f85d fb08 	ldr.w	pc, [sp], #8
   8637e:	bf00      	nop

00086380 <__aeabi_dcmplt>:
   86380:	f84d ed08 	str.w	lr, [sp, #-8]!
   86384:	f7ff ffea 	bl	8635c <__aeabi_cdcmpeq>
   86388:	bf34      	ite	cc
   8638a:	2001      	movcc	r0, #1
   8638c:	2000      	movcs	r0, #0
   8638e:	f85d fb08 	ldr.w	pc, [sp], #8
   86392:	bf00      	nop

00086394 <__aeabi_dcmple>:
   86394:	f84d ed08 	str.w	lr, [sp, #-8]!
   86398:	f7ff ffe0 	bl	8635c <__aeabi_cdcmpeq>
   8639c:	bf94      	ite	ls
   8639e:	2001      	movls	r0, #1
   863a0:	2000      	movhi	r0, #0
   863a2:	f85d fb08 	ldr.w	pc, [sp], #8
   863a6:	bf00      	nop

000863a8 <__aeabi_dcmpge>:
   863a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   863ac:	f7ff ffce 	bl	8634c <__aeabi_cdrcmple>
   863b0:	bf94      	ite	ls
   863b2:	2001      	movls	r0, #1
   863b4:	2000      	movhi	r0, #0
   863b6:	f85d fb08 	ldr.w	pc, [sp], #8
   863ba:	bf00      	nop

000863bc <__aeabi_dcmpgt>:
   863bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   863c0:	f7ff ffc4 	bl	8634c <__aeabi_cdrcmple>
   863c4:	bf34      	ite	cc
   863c6:	2001      	movcc	r0, #1
   863c8:	2000      	movcs	r0, #0
   863ca:	f85d fb08 	ldr.w	pc, [sp], #8
   863ce:	bf00      	nop

000863d0 <__aeabi_dcmpun>:
   863d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   863d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   863d8:	d102      	bne.n	863e0 <__aeabi_dcmpun+0x10>
   863da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   863de:	d10a      	bne.n	863f6 <__aeabi_dcmpun+0x26>
   863e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   863e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   863e8:	d102      	bne.n	863f0 <__aeabi_dcmpun+0x20>
   863ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   863ee:	d102      	bne.n	863f6 <__aeabi_dcmpun+0x26>
   863f0:	f04f 0000 	mov.w	r0, #0
   863f4:	4770      	bx	lr
   863f6:	f04f 0001 	mov.w	r0, #1
   863fa:	4770      	bx	lr

000863fc <__aeabi_d2iz>:
   863fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   86400:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   86404:	d215      	bcs.n	86432 <__aeabi_d2iz+0x36>
   86406:	d511      	bpl.n	8642c <__aeabi_d2iz+0x30>
   86408:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8640c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   86410:	d912      	bls.n	86438 <__aeabi_d2iz+0x3c>
   86412:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   86416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8641a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8641e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86422:	fa23 f002 	lsr.w	r0, r3, r2
   86426:	bf18      	it	ne
   86428:	4240      	negne	r0, r0
   8642a:	4770      	bx	lr
   8642c:	f04f 0000 	mov.w	r0, #0
   86430:	4770      	bx	lr
   86432:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   86436:	d105      	bne.n	86444 <__aeabi_d2iz+0x48>
   86438:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8643c:	bf08      	it	eq
   8643e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   86442:	4770      	bx	lr
   86444:	f04f 0000 	mov.w	r0, #0
   86448:	4770      	bx	lr
   8644a:	bf00      	nop

0008644c <__aeabi_uldivmod>:
   8644c:	b953      	cbnz	r3, 86464 <__aeabi_uldivmod+0x18>
   8644e:	b94a      	cbnz	r2, 86464 <__aeabi_uldivmod+0x18>
   86450:	2900      	cmp	r1, #0
   86452:	bf08      	it	eq
   86454:	2800      	cmpeq	r0, #0
   86456:	bf1c      	itt	ne
   86458:	f04f 31ff 	movne.w	r1, #4294967295
   8645c:	f04f 30ff 	movne.w	r0, #4294967295
   86460:	f000 b97a 	b.w	86758 <__aeabi_idiv0>
   86464:	f1ad 0c08 	sub.w	ip, sp, #8
   86468:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8646c:	f000 f806 	bl	8647c <__udivmoddi4>
   86470:	f8dd e004 	ldr.w	lr, [sp, #4]
   86474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86478:	b004      	add	sp, #16
   8647a:	4770      	bx	lr

0008647c <__udivmoddi4>:
   8647c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86480:	468c      	mov	ip, r1
   86482:	460e      	mov	r6, r1
   86484:	4604      	mov	r4, r0
   86486:	9d08      	ldr	r5, [sp, #32]
   86488:	2b00      	cmp	r3, #0
   8648a:	d150      	bne.n	8652e <__udivmoddi4+0xb2>
   8648c:	428a      	cmp	r2, r1
   8648e:	4617      	mov	r7, r2
   86490:	d96c      	bls.n	8656c <__udivmoddi4+0xf0>
   86492:	fab2 fe82 	clz	lr, r2
   86496:	f1be 0f00 	cmp.w	lr, #0
   8649a:	d00b      	beq.n	864b4 <__udivmoddi4+0x38>
   8649c:	f1ce 0c20 	rsb	ip, lr, #32
   864a0:	fa01 f60e 	lsl.w	r6, r1, lr
   864a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   864a8:	fa02 f70e 	lsl.w	r7, r2, lr
   864ac:	ea4c 0c06 	orr.w	ip, ip, r6
   864b0:	fa00 f40e 	lsl.w	r4, r0, lr
   864b4:	0c3a      	lsrs	r2, r7, #16
   864b6:	fbbc f9f2 	udiv	r9, ip, r2
   864ba:	b2bb      	uxth	r3, r7
   864bc:	fb02 cc19 	mls	ip, r2, r9, ip
   864c0:	fb09 fa03 	mul.w	sl, r9, r3
   864c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   864c8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   864cc:	45b2      	cmp	sl, r6
   864ce:	d90a      	bls.n	864e6 <__udivmoddi4+0x6a>
   864d0:	19f6      	adds	r6, r6, r7
   864d2:	f109 31ff 	add.w	r1, r9, #4294967295
   864d6:	f080 8125 	bcs.w	86724 <__udivmoddi4+0x2a8>
   864da:	45b2      	cmp	sl, r6
   864dc:	f240 8122 	bls.w	86724 <__udivmoddi4+0x2a8>
   864e0:	f1a9 0902 	sub.w	r9, r9, #2
   864e4:	443e      	add	r6, r7
   864e6:	eba6 060a 	sub.w	r6, r6, sl
   864ea:	fbb6 f0f2 	udiv	r0, r6, r2
   864ee:	fb02 6610 	mls	r6, r2, r0, r6
   864f2:	fb00 f303 	mul.w	r3, r0, r3
   864f6:	b2a4      	uxth	r4, r4
   864f8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   864fc:	42a3      	cmp	r3, r4
   864fe:	d909      	bls.n	86514 <__udivmoddi4+0x98>
   86500:	19e4      	adds	r4, r4, r7
   86502:	f100 32ff 	add.w	r2, r0, #4294967295
   86506:	f080 810b 	bcs.w	86720 <__udivmoddi4+0x2a4>
   8650a:	42a3      	cmp	r3, r4
   8650c:	f240 8108 	bls.w	86720 <__udivmoddi4+0x2a4>
   86510:	3802      	subs	r0, #2
   86512:	443c      	add	r4, r7
   86514:	2100      	movs	r1, #0
   86516:	1ae4      	subs	r4, r4, r3
   86518:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8651c:	2d00      	cmp	r5, #0
   8651e:	d062      	beq.n	865e6 <__udivmoddi4+0x16a>
   86520:	2300      	movs	r3, #0
   86522:	fa24 f40e 	lsr.w	r4, r4, lr
   86526:	602c      	str	r4, [r5, #0]
   86528:	606b      	str	r3, [r5, #4]
   8652a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8652e:	428b      	cmp	r3, r1
   86530:	d907      	bls.n	86542 <__udivmoddi4+0xc6>
   86532:	2d00      	cmp	r5, #0
   86534:	d055      	beq.n	865e2 <__udivmoddi4+0x166>
   86536:	2100      	movs	r1, #0
   86538:	e885 0041 	stmia.w	r5, {r0, r6}
   8653c:	4608      	mov	r0, r1
   8653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86542:	fab3 f183 	clz	r1, r3
   86546:	2900      	cmp	r1, #0
   86548:	f040 808f 	bne.w	8666a <__udivmoddi4+0x1ee>
   8654c:	42b3      	cmp	r3, r6
   8654e:	d302      	bcc.n	86556 <__udivmoddi4+0xda>
   86550:	4282      	cmp	r2, r0
   86552:	f200 80fc 	bhi.w	8674e <__udivmoddi4+0x2d2>
   86556:	1a84      	subs	r4, r0, r2
   86558:	eb66 0603 	sbc.w	r6, r6, r3
   8655c:	2001      	movs	r0, #1
   8655e:	46b4      	mov	ip, r6
   86560:	2d00      	cmp	r5, #0
   86562:	d040      	beq.n	865e6 <__udivmoddi4+0x16a>
   86564:	e885 1010 	stmia.w	r5, {r4, ip}
   86568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8656c:	b912      	cbnz	r2, 86574 <__udivmoddi4+0xf8>
   8656e:	2701      	movs	r7, #1
   86570:	fbb7 f7f2 	udiv	r7, r7, r2
   86574:	fab7 fe87 	clz	lr, r7
   86578:	f1be 0f00 	cmp.w	lr, #0
   8657c:	d135      	bne.n	865ea <__udivmoddi4+0x16e>
   8657e:	2101      	movs	r1, #1
   86580:	1bf6      	subs	r6, r6, r7
   86582:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86586:	fa1f f887 	uxth.w	r8, r7
   8658a:	fbb6 f2fc 	udiv	r2, r6, ip
   8658e:	fb0c 6612 	mls	r6, ip, r2, r6
   86592:	fb08 f002 	mul.w	r0, r8, r2
   86596:	0c23      	lsrs	r3, r4, #16
   86598:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8659c:	42b0      	cmp	r0, r6
   8659e:	d907      	bls.n	865b0 <__udivmoddi4+0x134>
   865a0:	19f6      	adds	r6, r6, r7
   865a2:	f102 33ff 	add.w	r3, r2, #4294967295
   865a6:	d202      	bcs.n	865ae <__udivmoddi4+0x132>
   865a8:	42b0      	cmp	r0, r6
   865aa:	f200 80d2 	bhi.w	86752 <__udivmoddi4+0x2d6>
   865ae:	461a      	mov	r2, r3
   865b0:	1a36      	subs	r6, r6, r0
   865b2:	fbb6 f0fc 	udiv	r0, r6, ip
   865b6:	fb0c 6610 	mls	r6, ip, r0, r6
   865ba:	fb08 f800 	mul.w	r8, r8, r0
   865be:	b2a3      	uxth	r3, r4
   865c0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   865c4:	45a0      	cmp	r8, r4
   865c6:	d907      	bls.n	865d8 <__udivmoddi4+0x15c>
   865c8:	19e4      	adds	r4, r4, r7
   865ca:	f100 33ff 	add.w	r3, r0, #4294967295
   865ce:	d202      	bcs.n	865d6 <__udivmoddi4+0x15a>
   865d0:	45a0      	cmp	r8, r4
   865d2:	f200 80b9 	bhi.w	86748 <__udivmoddi4+0x2cc>
   865d6:	4618      	mov	r0, r3
   865d8:	eba4 0408 	sub.w	r4, r4, r8
   865dc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   865e0:	e79c      	b.n	8651c <__udivmoddi4+0xa0>
   865e2:	4629      	mov	r1, r5
   865e4:	4628      	mov	r0, r5
   865e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   865ea:	fa07 f70e 	lsl.w	r7, r7, lr
   865ee:	f1ce 0320 	rsb	r3, lr, #32
   865f2:	fa26 f203 	lsr.w	r2, r6, r3
   865f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   865fa:	fbb2 f1fc 	udiv	r1, r2, ip
   865fe:	fa1f f887 	uxth.w	r8, r7
   86602:	fb0c 2211 	mls	r2, ip, r1, r2
   86606:	fa06 f60e 	lsl.w	r6, r6, lr
   8660a:	fa20 f303 	lsr.w	r3, r0, r3
   8660e:	fb01 f908 	mul.w	r9, r1, r8
   86612:	4333      	orrs	r3, r6
   86614:	0c1e      	lsrs	r6, r3, #16
   86616:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8661a:	45b1      	cmp	r9, r6
   8661c:	fa00 f40e 	lsl.w	r4, r0, lr
   86620:	d909      	bls.n	86636 <__udivmoddi4+0x1ba>
   86622:	19f6      	adds	r6, r6, r7
   86624:	f101 32ff 	add.w	r2, r1, #4294967295
   86628:	f080 808c 	bcs.w	86744 <__udivmoddi4+0x2c8>
   8662c:	45b1      	cmp	r9, r6
   8662e:	f240 8089 	bls.w	86744 <__udivmoddi4+0x2c8>
   86632:	3902      	subs	r1, #2
   86634:	443e      	add	r6, r7
   86636:	eba6 0609 	sub.w	r6, r6, r9
   8663a:	fbb6 f0fc 	udiv	r0, r6, ip
   8663e:	fb0c 6210 	mls	r2, ip, r0, r6
   86642:	fb00 f908 	mul.w	r9, r0, r8
   86646:	b29e      	uxth	r6, r3
   86648:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8664c:	45b1      	cmp	r9, r6
   8664e:	d907      	bls.n	86660 <__udivmoddi4+0x1e4>
   86650:	19f6      	adds	r6, r6, r7
   86652:	f100 33ff 	add.w	r3, r0, #4294967295
   86656:	d271      	bcs.n	8673c <__udivmoddi4+0x2c0>
   86658:	45b1      	cmp	r9, r6
   8665a:	d96f      	bls.n	8673c <__udivmoddi4+0x2c0>
   8665c:	3802      	subs	r0, #2
   8665e:	443e      	add	r6, r7
   86660:	eba6 0609 	sub.w	r6, r6, r9
   86664:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   86668:	e78f      	b.n	8658a <__udivmoddi4+0x10e>
   8666a:	f1c1 0720 	rsb	r7, r1, #32
   8666e:	fa22 f807 	lsr.w	r8, r2, r7
   86672:	408b      	lsls	r3, r1
   86674:	ea48 0303 	orr.w	r3, r8, r3
   86678:	fa26 f407 	lsr.w	r4, r6, r7
   8667c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86680:	fbb4 f9fe 	udiv	r9, r4, lr
   86684:	fa1f fc83 	uxth.w	ip, r3
   86688:	fb0e 4419 	mls	r4, lr, r9, r4
   8668c:	408e      	lsls	r6, r1
   8668e:	fa20 f807 	lsr.w	r8, r0, r7
   86692:	fb09 fa0c 	mul.w	sl, r9, ip
   86696:	ea48 0806 	orr.w	r8, r8, r6
   8669a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8669e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   866a2:	45a2      	cmp	sl, r4
   866a4:	fa02 f201 	lsl.w	r2, r2, r1
   866a8:	fa00 f601 	lsl.w	r6, r0, r1
   866ac:	d908      	bls.n	866c0 <__udivmoddi4+0x244>
   866ae:	18e4      	adds	r4, r4, r3
   866b0:	f109 30ff 	add.w	r0, r9, #4294967295
   866b4:	d244      	bcs.n	86740 <__udivmoddi4+0x2c4>
   866b6:	45a2      	cmp	sl, r4
   866b8:	d942      	bls.n	86740 <__udivmoddi4+0x2c4>
   866ba:	f1a9 0902 	sub.w	r9, r9, #2
   866be:	441c      	add	r4, r3
   866c0:	eba4 040a 	sub.w	r4, r4, sl
   866c4:	fbb4 f0fe 	udiv	r0, r4, lr
   866c8:	fb0e 4410 	mls	r4, lr, r0, r4
   866cc:	fb00 fc0c 	mul.w	ip, r0, ip
   866d0:	fa1f f888 	uxth.w	r8, r8
   866d4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   866d8:	45a4      	cmp	ip, r4
   866da:	d907      	bls.n	866ec <__udivmoddi4+0x270>
   866dc:	18e4      	adds	r4, r4, r3
   866de:	f100 3eff 	add.w	lr, r0, #4294967295
   866e2:	d229      	bcs.n	86738 <__udivmoddi4+0x2bc>
   866e4:	45a4      	cmp	ip, r4
   866e6:	d927      	bls.n	86738 <__udivmoddi4+0x2bc>
   866e8:	3802      	subs	r0, #2
   866ea:	441c      	add	r4, r3
   866ec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   866f0:	fba0 8902 	umull	r8, r9, r0, r2
   866f4:	eba4 0c0c 	sub.w	ip, r4, ip
   866f8:	45cc      	cmp	ip, r9
   866fa:	46c2      	mov	sl, r8
   866fc:	46ce      	mov	lr, r9
   866fe:	d315      	bcc.n	8672c <__udivmoddi4+0x2b0>
   86700:	d012      	beq.n	86728 <__udivmoddi4+0x2ac>
   86702:	b155      	cbz	r5, 8671a <__udivmoddi4+0x29e>
   86704:	ebb6 030a 	subs.w	r3, r6, sl
   86708:	eb6c 060e 	sbc.w	r6, ip, lr
   8670c:	fa06 f707 	lsl.w	r7, r6, r7
   86710:	40cb      	lsrs	r3, r1
   86712:	431f      	orrs	r7, r3
   86714:	40ce      	lsrs	r6, r1
   86716:	602f      	str	r7, [r5, #0]
   86718:	606e      	str	r6, [r5, #4]
   8671a:	2100      	movs	r1, #0
   8671c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86720:	4610      	mov	r0, r2
   86722:	e6f7      	b.n	86514 <__udivmoddi4+0x98>
   86724:	4689      	mov	r9, r1
   86726:	e6de      	b.n	864e6 <__udivmoddi4+0x6a>
   86728:	4546      	cmp	r6, r8
   8672a:	d2ea      	bcs.n	86702 <__udivmoddi4+0x286>
   8672c:	ebb8 0a02 	subs.w	sl, r8, r2
   86730:	eb69 0e03 	sbc.w	lr, r9, r3
   86734:	3801      	subs	r0, #1
   86736:	e7e4      	b.n	86702 <__udivmoddi4+0x286>
   86738:	4670      	mov	r0, lr
   8673a:	e7d7      	b.n	866ec <__udivmoddi4+0x270>
   8673c:	4618      	mov	r0, r3
   8673e:	e78f      	b.n	86660 <__udivmoddi4+0x1e4>
   86740:	4681      	mov	r9, r0
   86742:	e7bd      	b.n	866c0 <__udivmoddi4+0x244>
   86744:	4611      	mov	r1, r2
   86746:	e776      	b.n	86636 <__udivmoddi4+0x1ba>
   86748:	3802      	subs	r0, #2
   8674a:	443c      	add	r4, r7
   8674c:	e744      	b.n	865d8 <__udivmoddi4+0x15c>
   8674e:	4608      	mov	r0, r1
   86750:	e706      	b.n	86560 <__udivmoddi4+0xe4>
   86752:	3a02      	subs	r2, #2
   86754:	443e      	add	r6, r7
   86756:	e72b      	b.n	865b0 <__udivmoddi4+0x134>

00086758 <__aeabi_idiv0>:
   86758:	4770      	bx	lr
   8675a:	bf00      	nop
   8675c:	74697257 	.word	0x74697257
   86760:	20676e69 	.word	0x20676e69
   86764:	66206f74 	.word	0x66206f74
   86768:	6873616c 	.word	0x6873616c
   8676c:	0000000a 	.word	0x0000000a
   86770:	20646142 	.word	0x20646142
   86774:	6f6c6e75 	.word	0x6f6c6e75
   86778:	000a6b63 	.word	0x000a6b63
   8677c:	20646142 	.word	0x20646142
   86780:	74697277 	.word	0x74697277
   86784:	00000a65 	.word	0x00000a65
   86788:	20646142 	.word	0x20646142
   8678c:	6b636f6c 	.word	0x6b636f6c
   86790:	0000000a 	.word	0x0000000a
   86794:	6f727245 	.word	0x6f727245
   86798:	000a3372 	.word	0x000a3372
   8679c:	646e6553 	.word	0x646e6553
   867a0:	20465220 	.word	0x20465220
   867a4:	0000000a 	.word	0x0000000a

000867a8 <pipe0>:
   867a8:	00f000f0 00f000f0 000000f1 64616572     ............read
   867b8:	67657220 20752520 206c6176 25207525      reg %u val %u %
   867c8:	75252075 20752520 000a7525 64616572     u %u %u %u..read
   867d8:	67657220 20752520 206c6176 0a207525      reg %u val %u .
   867e8:	00000000 6f727245 000a3272 6f727245     ....Error2..Erro
   867f8:	00000a72 74697257 6f742065 616c6620     r...Write to fla
   86808:	000a6873 74617453 68632065 65676e61     sh..State change
   86818:	0000000a                                ....

0008681c <_global_impure_ptr>:
   8681c:	200704d0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8682c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   8683c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8684c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8685c:	0000296c 00000030                       l)..0...

00086864 <blanks.7223>:
   86864:	20202020 20202020 20202020 20202020                     

00086874 <zeroes.7224>:
   86874:	30303030 30303030 30303030 30303030     0000000000000000
   86884:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   86894:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   868a4:	00000000                                ....

000868a8 <__mprec_bigtens>:
   868a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   868b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   868c8:	7f73bf3c 75154fdd                       <.s..O.u

000868d0 <__mprec_tens>:
   868d0:	00000000 3ff00000 00000000 40240000     .......?......$@
   868e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   868f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   86900:	00000000 412e8480 00000000 416312d0     .......A......cA
   86910:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   86920:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   86930:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   86940:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   86950:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   86960:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   86970:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   86980:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   86990:	79d99db4 44ea7843                       ...yCx.D

00086998 <p05.6055>:
   86998:	00000005 00000019 0000007d              ........}...

000869a4 <_ctype_>:
   869a4:	20202000 20202020 28282020 20282828     .         ((((( 
   869b4:	20202020 20202020 20202020 20202020                     
   869c4:	10108820 10101010 10101010 10101010      ...............
   869d4:	04040410 04040404 10040404 10101010     ................
   869e4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   869f4:	01010101 01010101 01010101 10101010     ................
   86a04:	42421010 42424242 02020202 02020202     ..BBBBBB........
   86a14:	02020202 02020202 02020202 10101010     ................
   86a24:	00000020 00000000 00000000 00000000      ...............
	...

00086aa8 <_init>:
   86aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86aaa:	bf00      	nop
   86aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86aae:	bc08      	pop	{r3}
   86ab0:	469e      	mov	lr, r3
   86ab2:	4770      	bx	lr

00086ab4 <__init_array_start>:
   86ab4:	00083bbd 	.word	0x00083bbd

00086ab8 <__frame_dummy_init_array_entry>:
   86ab8:	00080119                                ....

00086abc <_fini>:
   86abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86abe:	bf00      	nop
   86ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86ac2:	bc08      	pop	{r3}
   86ac4:	469e      	mov	lr, r3
   86ac6:	4770      	bx	lr

00086ac8 <__fini_array_start>:
   86ac8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b470      	push	{r4, r5, r6}
20070002:	b083      	sub	sp, #12
20070004:	9e06      	ldr	r6, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070006:	4d1b      	ldr	r5, [pc, #108]	; (20070074 <efc_perform_read_sequence+0x74>)
20070008:	42a8      	cmp	r0, r5
2007000a:	bf0c      	ite	eq
2007000c:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
20070010:	f44f 2540 	movne.w	r5, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070014:	b35b      	cbz	r3, 2007006e <efc_perform_read_sequence+0x6e>
20070016:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070018:	6803      	ldr	r3, [r0, #0]
2007001a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2007001e:	6003      	str	r3, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070020:	b2c9      	uxtb	r1, r1
20070022:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070026:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070028:	6883      	ldr	r3, [r0, #8]
2007002a:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007002c:	9b01      	ldr	r3, [sp, #4]
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d1f9      	bne.n	20070028 <efc_perform_read_sequence+0x28>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070034:	b14e      	cbz	r6, 2007004a <efc_perform_read_sequence+0x4a>
20070036:	4629      	mov	r1, r5
20070038:	1f23      	subs	r3, r4, #4
2007003a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007003e:	f851 4b04 	ldr.w	r4, [r1], #4
20070042:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070046:	42a9      	cmp	r1, r5
20070048:	d1f9      	bne.n	2007003e <efc_perform_read_sequence+0x3e>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007004a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2007004c:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20070050:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070052:	6883      	ldr	r3, [r0, #8]
20070054:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070056:	9b01      	ldr	r3, [sp, #4]
20070058:	f013 0f01 	tst.w	r3, #1
2007005c:	d0f9      	beq.n	20070052 <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007005e:	6803      	ldr	r3, [r0, #0]
20070060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070064:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070066:	2000      	movs	r0, #0
}
20070068:	b003      	add	sp, #12
2007006a:	bc70      	pop	{r4, r5, r6}
2007006c:	4770      	bx	lr
		return EFC_RC_INVALID;
2007006e:	2002      	movs	r0, #2
20070070:	e7fa      	b.n	20070068 <efc_perform_read_sequence+0x68>
20070072:	bf00      	nop
20070074:	400e0a00 	.word	0x400e0a00

20070078 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070078:	6001      	str	r1, [r0, #0]
2007007a:	4770      	bx	lr

2007007c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007007c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007007e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20070080:	6883      	ldr	r3, [r0, #8]
20070082:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070084:	9b01      	ldr	r3, [sp, #4]
20070086:	f013 0f01 	tst.w	r3, #1
2007008a:	d0f9      	beq.n	20070080 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2007008c:	9801      	ldr	r0, [sp, #4]
}
2007008e:	f000 0006 	and.w	r0, r0, #6
20070092:	b002      	add	sp, #8
20070094:	4770      	bx	lr
20070096:	bf00      	nop

20070098 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070098:	f44f 6380 	mov.w	r3, #1024	; 0x400
2007009c:	4a20      	ldr	r2, [pc, #128]	; (20070120 <SystemInit+0x88>)
2007009e:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700a4:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700a6:	4b1f      	ldr	r3, [pc, #124]	; (20070124 <SystemInit+0x8c>)
200700a8:	6a1b      	ldr	r3, [r3, #32]
200700aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700ae:	d107      	bne.n	200700c0 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700b0:	4a1d      	ldr	r2, [pc, #116]	; (20070128 <SystemInit+0x90>)
200700b2:	4b1c      	ldr	r3, [pc, #112]	; (20070124 <SystemInit+0x8c>)
200700b4:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700b6:	461a      	mov	r2, r3
200700b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ba:	f013 0f01 	tst.w	r3, #1
200700be:	d0fb      	beq.n	200700b8 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c0:	4a1a      	ldr	r2, [pc, #104]	; (2007012c <SystemInit+0x94>)
200700c2:	4b18      	ldr	r3, [pc, #96]	; (20070124 <SystemInit+0x8c>)
200700c4:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700c6:	461a      	mov	r2, r3
200700c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700ce:	d0fb      	beq.n	200700c8 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700d0:	4a14      	ldr	r2, [pc, #80]	; (20070124 <SystemInit+0x8c>)
200700d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700d4:	f023 0303 	bic.w	r3, r3, #3
200700d8:	f043 0301 	orr.w	r3, r3, #1
200700dc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700de:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700e0:	f013 0f08 	tst.w	r3, #8
200700e4:	d0fb      	beq.n	200700de <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700e6:	4a12      	ldr	r2, [pc, #72]	; (20070130 <SystemInit+0x98>)
200700e8:	4b0e      	ldr	r3, [pc, #56]	; (20070124 <SystemInit+0x8c>)
200700ea:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700ec:	461a      	mov	r2, r3
200700ee:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700f0:	f013 0f02 	tst.w	r3, #2
200700f4:	d0fb      	beq.n	200700ee <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200700f6:	2211      	movs	r2, #17
200700f8:	4b0a      	ldr	r3, [pc, #40]	; (20070124 <SystemInit+0x8c>)
200700fa:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700fc:	461a      	mov	r2, r3
200700fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070100:	f013 0f08 	tst.w	r3, #8
20070104:	d0fb      	beq.n	200700fe <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070106:	2212      	movs	r2, #18
20070108:	4b06      	ldr	r3, [pc, #24]	; (20070124 <SystemInit+0x8c>)
2007010a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007010c:	461a      	mov	r2, r3
2007010e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070110:	f013 0f08 	tst.w	r3, #8
20070114:	d0fb      	beq.n	2007010e <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070116:	4a07      	ldr	r2, [pc, #28]	; (20070134 <SystemInit+0x9c>)
20070118:	4b07      	ldr	r3, [pc, #28]	; (20070138 <SystemInit+0xa0>)
2007011a:	601a      	str	r2, [r3, #0]
2007011c:	4770      	bx	lr
2007011e:	bf00      	nop
20070120:	400e0a00 	.word	0x400e0a00
20070124:	400e0600 	.word	0x400e0600
20070128:	00370809 	.word	0x00370809
2007012c:	01370809 	.word	0x01370809
20070130:	200d3f01 	.word	0x200d3f01
20070134:	0501bd00 	.word	0x0501bd00
20070138:	200704bc 	.word	0x200704bc

2007013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007013c:	4b1b      	ldr	r3, [pc, #108]	; (200701ac <system_init_flash+0x70>)
2007013e:	4298      	cmp	r0, r3
20070140:	d915      	bls.n	2007016e <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20070142:	4b1b      	ldr	r3, [pc, #108]	; (200701b0 <system_init_flash+0x74>)
20070144:	4298      	cmp	r0, r3
20070146:	d919      	bls.n	2007017c <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070148:	4b1a      	ldr	r3, [pc, #104]	; (200701b4 <system_init_flash+0x78>)
2007014a:	4298      	cmp	r0, r3
2007014c:	d91e      	bls.n	2007018c <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2007014e:	4b1a      	ldr	r3, [pc, #104]	; (200701b8 <system_init_flash+0x7c>)
20070150:	4298      	cmp	r0, r3
20070152:	d923      	bls.n	2007019c <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070154:	4b19      	ldr	r3, [pc, #100]	; (200701bc <system_init_flash+0x80>)
20070156:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070158:	bf94      	ite	ls
2007015a:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070162:	4a17      	ldr	r2, [pc, #92]	; (200701c0 <system_init_flash+0x84>)
20070164:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070166:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007016a:	6013      	str	r3, [r2, #0]
2007016c:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2007016e:	2300      	movs	r3, #0
20070170:	4a13      	ldr	r2, [pc, #76]	; (200701c0 <system_init_flash+0x84>)
20070172:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070174:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070178:	6013      	str	r3, [r2, #0]
2007017a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
2007017c:	f44f 7380 	mov.w	r3, #256	; 0x100
20070180:	4a0f      	ldr	r2, [pc, #60]	; (200701c0 <system_init_flash+0x84>)
20070182:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070184:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070188:	6013      	str	r3, [r2, #0]
2007018a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
2007018c:	f44f 7300 	mov.w	r3, #512	; 0x200
20070190:	4a0b      	ldr	r2, [pc, #44]	; (200701c0 <system_init_flash+0x84>)
20070192:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070194:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070198:	6013      	str	r3, [r2, #0]
2007019a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007019c:	f44f 7340 	mov.w	r3, #768	; 0x300
200701a0:	4a07      	ldr	r2, [pc, #28]	; (200701c0 <system_init_flash+0x84>)
200701a2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701a4:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701a8:	6013      	str	r3, [r2, #0]
200701aa:	4770      	bx	lr
200701ac:	0121eabf 	.word	0x0121eabf
200701b0:	02faf07f 	.word	0x02faf07f
200701b4:	03d08fff 	.word	0x03d08fff
200701b8:	04c4b3ff 	.word	0x04c4b3ff
200701bc:	055d4a7f 	.word	0x055d4a7f
200701c0:	400e0a00 	.word	0x400e0a00

200701c4 <ADC_Handler>:
}

__no_inline
RAMFUNC
ISR(ADC_Handler)
{	
200701c4:	b538      	push	{r3, r4, r5, lr}
	if(ADC->ADC_ISR & ADC_ISR_EOC0)
200701c6:	4b8a      	ldr	r3, [pc, #552]	; (200703f0 <ADC_Handler+0x22c>)
200701c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200701ca:	f013 0f01 	tst.w	r3, #1
200701ce:	d100      	bne.n	200701d2 <ADC_Handler+0xe>
200701d0:	bd38      	pop	{r3, r4, r5, pc}
	{		
		//float Inp;
		//pio_set_pin_high(LED2_GPIO); //for real time debug	
		uint32_t OutDataToDAC0;
		uint32_t OutDataToDAC1;
		pio_set_pin_high(PIO_PA7_IDX);
200701d2:	2007      	movs	r0, #7
200701d4:	4b87      	ldr	r3, [pc, #540]	; (200703f4 <ADC_Handler+0x230>)
200701d6:	4798      	blx	r3
		Data = ADC->ADC_CDR[0]-MAX_ADC/2;
200701d8:	4b85      	ldr	r3, [pc, #532]	; (200703f0 <ADC_Handler+0x22c>)
200701da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200701dc:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
200701e0:	4b85      	ldr	r3, [pc, #532]	; (200703f8 <ADC_Handler+0x234>)
200701e2:	601a      	str	r2, [r3, #0]

void FIFO_Init(XFifo* Fifo );

inline void FIFO_Insert(XFifo* Fifo, int32_t input)
{
	Fifo->Data[Fifo->WriteInx] = input;
200701e4:	4985      	ldr	r1, [pc, #532]	; (200703fc <ADC_Handler+0x238>)
200701e6:	680b      	ldr	r3, [r1, #0]
200701e8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
200701ec:	60c2      	str	r2, [r0, #12]
	Fifo->WriteInx = Fifo->WriteInx + 1;
200701ee:	3301      	adds	r3, #1
200701f0:	600b      	str	r3, [r1, #0]
	if(Fifo->WriteInx == 3)
200701f2:	2b03      	cmp	r3, #3
200701f4:	d007      	beq.n	20070206 <ADC_Handler+0x42>


inline int32_t FIFO_Filter(XFifo* Fifo)
{
	int32_t Xn,Xnp,Xnpp;	
	switch(Fifo->WriteInx)
200701f6:	b143      	cbz	r3, 2007020a <ADC_Handler+0x46>
200701f8:	2b01      	cmp	r3, #1
200701fa:	d013      	beq.n	20070224 <ADC_Handler+0x60>
		Xn = Fifo->Data[0];
		Xnp = Fifo->Data[2];
		Xnpp = Fifo->Data[1];
		break;
		default: // 2
		Xn = Fifo->Data[1];
200701fc:	4b7f      	ldr	r3, [pc, #508]	; (200703fc <ADC_Handler+0x238>)
200701fe:	6919      	ldr	r1, [r3, #16]
		Xnp = Fifo->Data[0];
20070200:	68d8      	ldr	r0, [r3, #12]
		Xnpp = Fifo->Data[2];
20070202:	695b      	ldr	r3, [r3, #20]
20070204:	e005      	b.n	20070212 <ADC_Handler+0x4e>
		Fifo->WriteInx = 0;
20070206:	2200      	movs	r2, #0
20070208:	600a      	str	r2, [r1, #0]
		Xn = Fifo->Data[2];
2007020a:	4b7c      	ldr	r3, [pc, #496]	; (200703fc <ADC_Handler+0x238>)
2007020c:	6959      	ldr	r1, [r3, #20]
		Xnp = Fifo->Data[1];
2007020e:	6918      	ldr	r0, [r3, #16]
		Xnpp = Fifo->Data[0];
20070210:	68db      	ldr	r3, [r3, #12]
	switch(Fifo->WriteIndxY)
20070212:	4a7a      	ldr	r2, [pc, #488]	; (200703fc <ADC_Handler+0x238>)
20070214:	6892      	ldr	r2, [r2, #8]
20070216:	b152      	cbz	r2, 2007022e <ADC_Handler+0x6a>
20070218:	2a01      	cmp	r2, #1
2007021a:	d034      	beq.n	20070286 <ADC_Handler+0xc2>
		Yp = Fifo->FilterY[1];
2007021c:	4c77      	ldr	r4, [pc, #476]	; (200703fc <ADC_Handler+0x238>)
2007021e:	69e5      	ldr	r5, [r4, #28]
		Ypp = Fifo->FilterY[0];
20070220:	69a4      	ldr	r4, [r4, #24]
20070222:	e007      	b.n	20070234 <ADC_Handler+0x70>
		Xn = Fifo->Data[0];
20070224:	4b75      	ldr	r3, [pc, #468]	; (200703fc <ADC_Handler+0x238>)
20070226:	68d9      	ldr	r1, [r3, #12]
		Xnp = Fifo->Data[2];
20070228:	6958      	ldr	r0, [r3, #20]
		Xnpp = Fifo->Data[1];
2007022a:	691b      	ldr	r3, [r3, #16]
2007022c:	e7f1      	b.n	20070212 <ADC_Handler+0x4e>
		Yp = Fifo->FilterY[2];
2007022e:	4c73      	ldr	r4, [pc, #460]	; (200703fc <ADC_Handler+0x238>)
20070230:	6a25      	ldr	r5, [r4, #32]
		Ypp = Fifo->FilterY[1];
20070232:	69e4      	ldr	r4, [r4, #28]
	Out = (Xn*BETA_MUL2_Q - 2*BETA_MUL2_Q*Xnp + BETA_MUL2_Q*Xnpp + Fifo->BetaMul2Q*Yp - Ypp*BETA_MUL2_Q)*(Fifo->BetaSQRTInvQ); // The second order filter HPF*/
20070234:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
20070238:	4419      	add	r1, r3
2007023a:	4870      	ldr	r0, [pc, #448]	; (200703fc <ADC_Handler+0x238>)
2007023c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2007023e:	fb03 f305 	mul.w	r3, r3, r5
20070242:	eb03 1301 	add.w	r3, r3, r1, lsl #4
20070246:	eba3 1304 	sub.w	r3, r3, r4, lsl #4
2007024a:	6b81      	ldr	r1, [r0, #56]	; 0x38
2007024c:	fb01 f303 	mul.w	r3, r1, r3
	Fifo->FilterY[Fifo->WriteIndxY] = input;
20070250:	1d91      	adds	r1, r2, #6
	FIFO_YInsert(Fifo, (Out>>(4+13)) );
20070252:	145c      	asrs	r4, r3, #17
	Fifo->FilterY[Fifo->WriteIndxY] = input;
20070254:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
20070258:	3201      	adds	r2, #1
	if(Fifo->WriteIndxY == 3)
2007025a:	2a03      	cmp	r2, #3
2007025c:	d017      	beq.n	2007028e <ADC_Handler+0xca>
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
2007025e:	6082      	str	r2, [r0, #8]
		
		FIFO_Insert(&Fifo,Data);
		OutData= FIFO_Filter(&Fifo);
		OutData = abs(OutData);
20070260:	2b00      	cmp	r3, #0
20070262:	bfb8      	it	lt
20070264:	425b      	neglt	r3, r3
20070266:	4a66      	ldr	r2, [pc, #408]	; (20070400 <ADC_Handler+0x23c>)
20070268:	6013      	str	r3, [r2, #0]
		//SoundSum = FIFO2_Insert(&Fifo2p1, OutData);		
		//FIFO2_Insert(&fifoDebug,SoundSum);
		switch(FilterState)		
2007026a:	4a66      	ldr	r2, [pc, #408]	; (20070404 <ADC_Handler+0x240>)
2007026c:	6812      	ldr	r2, [r2, #0]
2007026e:	2a06      	cmp	r2, #6
20070270:	f200 80e9 	bhi.w	20070446 <ADC_Handler+0x282>
20070274:	e8df f012 	tbh	[pc, r2, lsl #1]
20070278:	002d000f 	.word	0x002d000f
2007027c:	006a004e 	.word	0x006a004e
20070280:	00dc00a6 	.word	0x00dc00a6
20070284:	00fd      	.short	0x00fd
		Yp = Fifo->FilterY[0];
20070286:	4c5d      	ldr	r4, [pc, #372]	; (200703fc <ADC_Handler+0x238>)
20070288:	69a5      	ldr	r5, [r4, #24]
		Ypp = Fifo->FilterY[2];
2007028a:	6a24      	ldr	r4, [r4, #32]
2007028c:	e7d2      	b.n	20070234 <ADC_Handler+0x70>
		Fifo->WriteIndxY = 0;
2007028e:	2100      	movs	r1, #0
20070290:	4a5a      	ldr	r2, [pc, #360]	; (200703fc <ADC_Handler+0x238>)
20070292:	6091      	str	r1, [r2, #8]
20070294:	e7e4      	b.n	20070260 <ADC_Handler+0x9c>
		{
			case 0:
				SecondDetVal = 0;
20070296:	2200      	movs	r2, #0
20070298:	495b      	ldr	r1, [pc, #364]	; (20070408 <ADC_Handler+0x244>)
2007029a:	600a      	str	r2, [r1, #0]
				FirstDetVal = 0;
2007029c:	495b      	ldr	r1, [pc, #364]	; (2007040c <ADC_Handler+0x248>)
2007029e:	600a      	str	r2, [r1, #0]
				if(OutData>MaxAllowedFirstVal)
200702a0:	4a5b      	ldr	r2, [pc, #364]	; (20070410 <ADC_Handler+0x24c>)
200702a2:	6812      	ldr	r2, [r2, #0]
200702a4:	4293      	cmp	r3, r2
200702a6:	d906      	bls.n	200702b6 <ADC_Handler+0xf2>
				{
					FilterState = 5;
200702a8:	2205      	movs	r2, #5
200702aa:	4b56      	ldr	r3, [pc, #344]	; (20070404 <ADC_Handler+0x240>)
200702ac:	601a      	str	r2, [r3, #0]
					delay = 0;
200702ae:	2200      	movs	r2, #0
200702b0:	4b58      	ldr	r3, [pc, #352]	; (20070414 <ADC_Handler+0x250>)
200702b2:	601a      	str	r2, [r3, #0]
200702b4:	e0c7      	b.n	20070446 <ADC_Handler+0x282>
				}
				else if(OutData>Threshold)
200702b6:	4a58      	ldr	r2, [pc, #352]	; (20070418 <ADC_Handler+0x254>)
200702b8:	6812      	ldr	r2, [r2, #0]
200702ba:	4293      	cmp	r3, r2
200702bc:	f240 80c3 	bls.w	20070446 <ADC_Handler+0x282>
				{
					//Det_flag = 1;
					//adc_disable_interrupt(ADC,ADC_IER_EOC0);;
					FirstDetVal = OutData;
200702c0:	4a52      	ldr	r2, [pc, #328]	; (2007040c <ADC_Handler+0x248>)
200702c2:	6013      	str	r3, [r2, #0]
					FilterState = 1;
200702c4:	2201      	movs	r2, #1
200702c6:	4b4f      	ldr	r3, [pc, #316]	; (20070404 <ADC_Handler+0x240>)
200702c8:	601a      	str	r2, [r3, #0]
					delay = 0;					
200702ca:	2200      	movs	r2, #0
200702cc:	4b51      	ldr	r3, [pc, #324]	; (20070414 <ADC_Handler+0x250>)
200702ce:	601a      	str	r2, [r3, #0]
200702d0:	e0b9      	b.n	20070446 <ADC_Handler+0x282>
				}	
			break;
			
			case 1:
				if(OutData>MaxAllowedFirstVal)
200702d2:	4a4f      	ldr	r2, [pc, #316]	; (20070410 <ADC_Handler+0x24c>)
200702d4:	6812      	ldr	r2, [r2, #0]
200702d6:	4293      	cmp	r3, r2
200702d8:	d906      	bls.n	200702e8 <ADC_Handler+0x124>
				{
					FilterState = 5;
200702da:	2205      	movs	r2, #5
200702dc:	4b49      	ldr	r3, [pc, #292]	; (20070404 <ADC_Handler+0x240>)
200702de:	601a      	str	r2, [r3, #0]
					delay = 0;
200702e0:	2200      	movs	r2, #0
200702e2:	4b4c      	ldr	r3, [pc, #304]	; (20070414 <ADC_Handler+0x250>)
200702e4:	601a      	str	r2, [r3, #0]
200702e6:	e0ae      	b.n	20070446 <ADC_Handler+0x282>
				}
				else
				{
					if(FirstDetVal<(OutData))
200702e8:	4a48      	ldr	r2, [pc, #288]	; (2007040c <ADC_Handler+0x248>)
200702ea:	6812      	ldr	r2, [r2, #0]
200702ec:	4293      	cmp	r3, r2
					{					
						FirstDetVal	= OutData; // finding the max FirstDetVal					
200702ee:	bfc4      	itt	gt
200702f0:	4a46      	ldrgt	r2, [pc, #280]	; (2007040c <ADC_Handler+0x248>)
200702f2:	6013      	strgt	r3, [r2, #0]
					}				
					delay++;
200702f4:	4a47      	ldr	r2, [pc, #284]	; (20070414 <ADC_Handler+0x250>)
200702f6:	6813      	ldr	r3, [r2, #0]
200702f8:	3301      	adds	r3, #1
200702fa:	6013      	str	r3, [r2, #0]
					if(delay>=2600)
200702fc:	f640 2227 	movw	r2, #2599	; 0xa27
20070300:	4293      	cmp	r3, r2
20070302:	f240 80a0 	bls.w	20070446 <ADC_Handler+0x282>
					{
						FilterState = 2;
20070306:	2202      	movs	r2, #2
20070308:	4b3e      	ldr	r3, [pc, #248]	; (20070404 <ADC_Handler+0x240>)
2007030a:	601a      	str	r2, [r3, #0]
						delay = 0;
2007030c:	2200      	movs	r2, #0
2007030e:	4b41      	ldr	r3, [pc, #260]	; (20070414 <ADC_Handler+0x250>)
20070310:	601a      	str	r2, [r3, #0]
20070312:	e098      	b.n	20070446 <ADC_Handler+0x282>
					}
				}				
			break;
				
			case 2:
				if(OutData>FirstDetVal)
20070314:	4a3d      	ldr	r2, [pc, #244]	; (2007040c <ADC_Handler+0x248>)
20070316:	6812      	ldr	r2, [r2, #0]
20070318:	4293      	cmp	r3, r2
2007031a:	dd06      	ble.n	2007032a <ADC_Handler+0x166>
				{
					FilterState = 5;
2007031c:	2205      	movs	r2, #5
2007031e:	4b39      	ldr	r3, [pc, #228]	; (20070404 <ADC_Handler+0x240>)
20070320:	601a      	str	r2, [r3, #0]
					delay = 0;
20070322:	2200      	movs	r2, #0
20070324:	4b3b      	ldr	r3, [pc, #236]	; (20070414 <ADC_Handler+0x250>)
20070326:	601a      	str	r2, [r3, #0]
20070328:	e08d      	b.n	20070446 <ADC_Handler+0x282>
				}				
				else if(delay<9000)
2007032a:	4b3a      	ldr	r3, [pc, #232]	; (20070414 <ADC_Handler+0x250>)
2007032c:	681b      	ldr	r3, [r3, #0]
2007032e:	f242 3227 	movw	r2, #8999	; 0x2327
20070332:	4293      	cmp	r3, r2
20070334:	d803      	bhi.n	2007033e <ADC_Handler+0x17a>
				{
					delay++;
20070336:	3301      	adds	r3, #1
20070338:	4a36      	ldr	r2, [pc, #216]	; (20070414 <ADC_Handler+0x250>)
2007033a:	6013      	str	r3, [r2, #0]
2007033c:	e083      	b.n	20070446 <ADC_Handler+0x282>
				}
				else
				{
					FilterState = 3;
2007033e:	2203      	movs	r2, #3
20070340:	4b30      	ldr	r3, [pc, #192]	; (20070404 <ADC_Handler+0x240>)
20070342:	601a      	str	r2, [r3, #0]
					delay = 0;
20070344:	2200      	movs	r2, #0
20070346:	4b33      	ldr	r3, [pc, #204]	; (20070414 <ADC_Handler+0x250>)
20070348:	601a      	str	r2, [r3, #0]
2007034a:	e07c      	b.n	20070446 <ADC_Handler+0x282>
				}				
			break;
			
			case 3:
				if(delay<10000)
2007034c:	4a31      	ldr	r2, [pc, #196]	; (20070414 <ADC_Handler+0x250>)
2007034e:	6812      	ldr	r2, [r2, #0]
20070350:	f242 710f 	movw	r1, #9999	; 0x270f
20070354:	428a      	cmp	r2, r1
20070356:	d809      	bhi.n	2007036c <ADC_Handler+0x1a8>
				{
					delay++;
20070358:	3201      	adds	r2, #1
2007035a:	492e      	ldr	r1, [pc, #184]	; (20070414 <ADC_Handler+0x250>)
2007035c:	600a      	str	r2, [r1, #0]
					if(SecondDetVal<OutData)					
2007035e:	4a2a      	ldr	r2, [pc, #168]	; (20070408 <ADC_Handler+0x244>)
20070360:	6812      	ldr	r2, [r2, #0]
20070362:	4293      	cmp	r3, r2
20070364:	dd6f      	ble.n	20070446 <ADC_Handler+0x282>
						SecondDetVal = OutData;
20070366:	4a28      	ldr	r2, [pc, #160]	; (20070408 <ADC_Handler+0x244>)
20070368:	6013      	str	r3, [r2, #0]
2007036a:	e06c      	b.n	20070446 <ADC_Handler+0x282>
				}
				else
				{
					if( ((SecondDetVal/5)<=(FirstDetVal/2)) && ((SecondDetVal/126)>=(FirstDetVal/100)) )  //last working value = 1.25
2007036c:	4b26      	ldr	r3, [pc, #152]	; (20070408 <ADC_Handler+0x244>)
2007036e:	681b      	ldr	r3, [r3, #0]
20070370:	4a26      	ldr	r2, [pc, #152]	; (2007040c <ADC_Handler+0x248>)
20070372:	6812      	ldr	r2, [r2, #0]
20070374:	4829      	ldr	r0, [pc, #164]	; (2007041c <ADC_Handler+0x258>)
20070376:	fb80 1003 	smull	r1, r0, r0, r3
2007037a:	17d9      	asrs	r1, r3, #31
2007037c:	ebc1 0160 	rsb	r1, r1, r0, asr #1
20070380:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
20070384:	ebb1 0f60 	cmp.w	r1, r0, asr #1
20070388:	dc15      	bgt.n	200703b6 <ADC_Handler+0x1f2>
2007038a:	4925      	ldr	r1, [pc, #148]	; (20070420 <ADC_Handler+0x25c>)
2007038c:	fb81 0103 	smull	r0, r1, r1, r3
20070390:	4419      	add	r1, r3
20070392:	17db      	asrs	r3, r3, #31
20070394:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
20070398:	4922      	ldr	r1, [pc, #136]	; (20070424 <ADC_Handler+0x260>)
2007039a:	fb81 0102 	smull	r0, r1, r1, r2
2007039e:	17d2      	asrs	r2, r2, #31
200703a0:	ebc2 1261 	rsb	r2, r2, r1, asr #5
200703a4:	4293      	cmp	r3, r2
200703a6:	db06      	blt.n	200703b6 <ADC_Handler+0x1f2>
					{
						FilterState = 4;
200703a8:	2204      	movs	r2, #4
200703aa:	4b16      	ldr	r3, [pc, #88]	; (20070404 <ADC_Handler+0x240>)
200703ac:	601a      	str	r2, [r3, #0]
						delay = 0;
200703ae:	2200      	movs	r2, #0
200703b0:	4b18      	ldr	r3, [pc, #96]	; (20070414 <ADC_Handler+0x250>)
200703b2:	601a      	str	r2, [r3, #0]
200703b4:	e047      	b.n	20070446 <ADC_Handler+0x282>
					}
					else
					{
						FilterState = 5;
200703b6:	2205      	movs	r2, #5
200703b8:	4b12      	ldr	r3, [pc, #72]	; (20070404 <ADC_Handler+0x240>)
200703ba:	601a      	str	r2, [r3, #0]
						delay = 0;
200703bc:	2200      	movs	r2, #0
200703be:	4b15      	ldr	r3, [pc, #84]	; (20070414 <ADC_Handler+0x250>)
200703c0:	601a      	str	r2, [r3, #0]
200703c2:	e040      	b.n	20070446 <ADC_Handler+0x282>
					}
				}				
			break;
			
			case 4:
				if(delay<250)
200703c4:	4b13      	ldr	r3, [pc, #76]	; (20070414 <ADC_Handler+0x250>)
200703c6:	681b      	ldr	r3, [r3, #0]
200703c8:	2bf9      	cmp	r3, #249	; 0xf9
200703ca:	d803      	bhi.n	200703d4 <ADC_Handler+0x210>
				{
					delay++;					
200703cc:	3301      	adds	r3, #1
200703ce:	4a11      	ldr	r2, [pc, #68]	; (20070414 <ADC_Handler+0x250>)
200703d0:	6013      	str	r3, [r2, #0]
200703d2:	e038      	b.n	20070446 <ADC_Handler+0x282>
				}
				else
				{
					Det_flag = 1;
200703d4:	2101      	movs	r1, #1
200703d6:	4b14      	ldr	r3, [pc, #80]	; (20070428 <ADC_Handler+0x264>)
200703d8:	6019      	str	r1, [r3, #0]
					FilterState = 6;
200703da:	2206      	movs	r2, #6
200703dc:	4b09      	ldr	r3, [pc, #36]	; (20070404 <ADC_Handler+0x240>)
200703de:	601a      	str	r2, [r3, #0]
					delay = 0;
200703e0:	2200      	movs	r2, #0
200703e2:	4b0c      	ldr	r3, [pc, #48]	; (20070414 <ADC_Handler+0x250>)
200703e4:	601a      	str	r2, [r3, #0]
					adc_disable_interrupt(ADC,ADC_IER_EOC0);
200703e6:	4802      	ldr	r0, [pc, #8]	; (200703f0 <ADC_Handler+0x22c>)
200703e8:	4b10      	ldr	r3, [pc, #64]	; (2007042c <ADC_Handler+0x268>)
200703ea:	4798      	blx	r3
200703ec:	e02b      	b.n	20070446 <ADC_Handler+0x282>
200703ee:	bf00      	nop
200703f0:	400c0000 	.word	0x400c0000
200703f4:	000811a7 	.word	0x000811a7
200703f8:	20071074 	.word	0x20071074
200703fc:	20071088 	.word	0x20071088
20070400:	20071010 	.word	0x20071010
20070404:	200704c0 	.word	0x200704c0
20070408:	20071084 	.word	0x20071084
2007040c:	2007107c 	.word	0x2007107c
20070410:	200704c4 	.word	0x200704c4
20070414:	20071080 	.word	0x20071080
20070418:	200704c8 	.word	0x200704c8
2007041c:	66666667 	.word	0x66666667
20070420:	82082083 	.word	0x82082083
20070424:	51eb851f 	.word	0x51eb851f
20070428:	2007100c 	.word	0x2007100c
2007042c:	000801eb 	.word	0x000801eb
				}				
			break;
			
			case 5: // Noise state
				if(delay<150000) //3 seconds hold off due noise
20070430:	4b19      	ldr	r3, [pc, #100]	; (20070498 <ADC_Handler+0x2d4>)
20070432:	681b      	ldr	r3, [r3, #0]
20070434:	4a19      	ldr	r2, [pc, #100]	; (2007049c <ADC_Handler+0x2d8>)
20070436:	4293      	cmp	r3, r2
				{					
					delay++;
20070438:	bf91      	iteee	ls
2007043a:	3301      	addls	r3, #1
				}
				else
				{					
					FilterState = 0;
2007043c:	2300      	movhi	r3, #0
2007043e:	4a18      	ldrhi	r2, [pc, #96]	; (200704a0 <ADC_Handler+0x2dc>)
20070440:	6013      	strhi	r3, [r2, #0]
					delay = 0;
20070442:	4a15      	ldr	r2, [pc, #84]	; (20070498 <ADC_Handler+0x2d4>)
20070444:	6013      	str	r3, [r2, #0]
				break;
			default:break;
			
		}	
		//pio_set_pin_low(LED2_GPIO);// for real time debug
		if(!pio_get_pin_value(PIO_PA15_IDX))
20070446:	200f      	movs	r0, #15
20070448:	4b16      	ldr	r3, [pc, #88]	; (200704a4 <ADC_Handler+0x2e0>)
2007044a:	4798      	blx	r3
2007044c:	b9f0      	cbnz	r0, 2007048c <ADC_Handler+0x2c8>
		{
			OutDataToDAC0  = (FirstDetVal>>9)&0xfff;
2007044e:	4b16      	ldr	r3, [pc, #88]	; (200704a8 <ADC_Handler+0x2e4>)
20070450:	6818      	ldr	r0, [r3, #0]
20070452:	f3c0 204b 	ubfx	r0, r0, #9, #12
			OutDataToDAC1  = ((SecondDetVal>>9)&0xfff)|(1<<12);			
20070456:	4b15      	ldr	r3, [pc, #84]	; (200704ac <ADC_Handler+0x2e8>)
20070458:	681c      	ldr	r4, [r3, #0]
2007045a:	f3c4 244b 	ubfx	r4, r4, #9, #12
2007045e:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		else
		{
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
			OutDataToDAC1  = (MAX_SIGNAL<<(17-9))|(1<<12);
		}
		DAC3X8E_write(OutDataToDAC0);
20070462:	4d13      	ldr	r5, [pc, #76]	; (200704b0 <ADC_Handler+0x2ec>)
20070464:	47a8      	blx	r5
		DAC3X8E_write(OutDataToDAC1);
20070466:	4620      	mov	r0, r4
20070468:	47a8      	blx	r5
		pio_set_pin_low(PIO_PA7_IDX);
2007046a:	2007      	movs	r0, #7
2007046c:	4b11      	ldr	r3, [pc, #68]	; (200704b4 <ADC_Handler+0x2f0>)
2007046e:	4798      	blx	r3
	}
}
20070470:	e6ae      	b.n	200701d0 <ADC_Handler+0xc>
				if(delay<50000) //1 seconds to stable the filter
20070472:	4b09      	ldr	r3, [pc, #36]	; (20070498 <ADC_Handler+0x2d4>)
20070474:	681b      	ldr	r3, [r3, #0]
20070476:	f24c 324f 	movw	r2, #49999	; 0xc34f
2007047a:	4293      	cmp	r3, r2
					delay++;
2007047c:	bf91      	iteee	ls
2007047e:	3301      	addls	r3, #1
					FilterState = 0;
20070480:	2300      	movhi	r3, #0
20070482:	4a07      	ldrhi	r2, [pc, #28]	; (200704a0 <ADC_Handler+0x2dc>)
20070484:	6013      	strhi	r3, [r2, #0]
					delay = 0;
20070486:	4a04      	ldr	r2, [pc, #16]	; (20070498 <ADC_Handler+0x2d4>)
20070488:	6013      	str	r3, [r2, #0]
2007048a:	e7dc      	b.n	20070446 <ADC_Handler+0x282>
			OutDataToDAC1  = (MAX_SIGNAL<<(17-9))|(1<<12);
2007048c:	f44f 54c8 	mov.w	r4, #6400	; 0x1900
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
20070490:	f44f 6010 	mov.w	r0, #2304	; 0x900
20070494:	e7e5      	b.n	20070462 <ADC_Handler+0x29e>
20070496:	bf00      	nop
20070498:	20071080 	.word	0x20071080
2007049c:	000249ef 	.word	0x000249ef
200704a0:	200704c0 	.word	0x200704c0
200704a4:	0008118b 	.word	0x0008118b
200704a8:	2007107c 	.word	0x2007107c
200704ac:	20071084 	.word	0x20071084
200704b0:	00080375 	.word	0x00080375
200704b4:	000811c1 	.word	0x000811c1

200704b8 <g_interrupt_enabled>:
200704b8:	00000001                                ....

200704bc <SystemCoreClock>:
200704bc:	003d0900                                ..=.

200704c0 <FilterState>:
200704c0:	00000006                                ....

200704c4 <MaxAllowedFirstVal>:
200704c4:	ffffffff                                ....

200704c8 <Threshold>:
200704c8:	00000fa0                                ....

200704cc <_impure_ptr>:
200704cc:	200704d0                                ... 

200704d0 <impure_data>:
200704d0:	00000000 200707bc 20070824 2007088c     ....... $.. ... 
	...
20070578:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070588:	0005deec 0000000b 00000000 00000000     ................
	...

200708f8 <__malloc_av_>:
	...
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 
20070af0:	20070ae8 20070ae8 20070af0 20070af0     ... ... ... ... 
20070b00:	20070af8 20070af8 20070b00 20070b00     ... ... ... ... 
20070b10:	20070b08 20070b08 20070b10 20070b10     ... ... ... ... 
20070b20:	20070b18 20070b18 20070b20 20070b20     ... ...  ..  .. 
20070b30:	20070b28 20070b28 20070b30 20070b30     (.. (.. 0.. 0.. 
20070b40:	20070b38 20070b38 20070b40 20070b40     8.. 8.. @.. @.. 
20070b50:	20070b48 20070b48 20070b50 20070b50     H.. H.. P.. P.. 
20070b60:	20070b58 20070b58 20070b60 20070b60     X.. X.. `.. `.. 
20070b70:	20070b68 20070b68 20070b70 20070b70     h.. h.. p.. p.. 
20070b80:	20070b78 20070b78 20070b80 20070b80     x.. x.. ... ... 
20070b90:	20070b88 20070b88 20070b90 20070b90     ... ... ... ... 
20070ba0:	20070b98 20070b98 20070ba0 20070ba0     ... ... ... ... 
20070bb0:	20070ba8 20070ba8 20070bb0 20070bb0     ... ... ... ... 
20070bc0:	20070bb8 20070bb8 20070bc0 20070bc0     ... ... ... ... 
20070bd0:	20070bc8 20070bc8 20070bd0 20070bd0     ... ... ... ... 
20070be0:	20070bd8 20070bd8 20070be0 20070be0     ... ... ... ... 
20070bf0:	20070be8 20070be8 20070bf0 20070bf0     ... ... ... ... 
20070c00:	20070bf8 20070bf8 20070c00 20070c00     ... ... ... ... 
20070c10:	20070c08 20070c08 20070c10 20070c10     ... ... ... ... 
20070c20:	20070c18 20070c18 20070c20 20070c20     ... ...  ..  .. 
20070c30:	20070c28 20070c28 20070c30 20070c30     (.. (.. 0.. 0.. 
20070c40:	20070c38 20070c38 20070c40 20070c40     8.. 8.. @.. @.. 
20070c50:	20070c48 20070c48 20070c50 20070c50     H.. H.. P.. P.. 
20070c60:	20070c58 20070c58 20070c60 20070c60     X.. X.. `.. `.. 
20070c70:	20070c68 20070c68 20070c70 20070c70     h.. h.. p.. p.. 
20070c80:	20070c78 20070c78 20070c80 20070c80     x.. x.. ... ... 
20070c90:	20070c88 20070c88 20070c90 20070c90     ... ... ... ... 
20070ca0:	20070c98 20070c98 20070ca0 20070ca0     ... ... ... ... 
20070cb0:	20070ca8 20070ca8 20070cb0 20070cb0     ... ... ... ... 
20070cc0:	20070cb8 20070cb8 20070cc0 20070cc0     ... ... ... ... 
20070cd0:	20070cc8 20070cc8 20070cd0 20070cd0     ... ... ... ... 
20070ce0:	20070cd8 20070cd8 20070ce0 20070ce0     ... ... ... ... 
20070cf0:	20070ce8 20070ce8 20070cf0 20070cf0     ... ... ... ... 

20070d00 <__malloc_sbrk_base>:
20070d00:	ffffffff                                ....

20070d04 <__malloc_trim_threshold>:
20070d04:	00020000                                ....

20070d08 <__atexit_recursive_mutex>:
20070d08:	200710d4                                ... 

20070d0c <__global_locale>:
20070d0c:	00000043 00000000 00000000 00000000     C...............
	...
20070d2c:	00000043 00000000 00000000 00000000     C...............
	...
20070d4c:	00000043 00000000 00000000 00000000     C...............
	...
20070d6c:	00000043 00000000 00000000 00000000     C...............
	...
20070d8c:	00000043 00000000 00000000 00000000     C...............
	...
20070dac:	00000043 00000000 00000000 00000000     C...............
	...
20070dcc:	00000043 00000000 00000000 00000000     C...............
	...
20070dec:	000859f1 00084e11 00000000 000869a4     .Y...N.......i..
20070dfc:	000868a0 000867e8 000867e8 000867e8     .h...g...g...g..
20070e0c:	000867e8 000867e8 000867e8 000867e8     .g...g...g...g..
20070e1c:	000867e8 000867e8 ffffffff ffffffff     .g...g..........
20070e2c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070e54:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
