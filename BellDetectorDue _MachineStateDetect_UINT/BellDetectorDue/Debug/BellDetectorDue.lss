
BellDetectorDue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006614  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086614  00086614  00016614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e98  20070000  0008661c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000290  20070e98  000874b4  00020e98  2**2
                  ALLOC
  4 .stack        00002000  20071128  00087744  00020e98  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020e98  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020ec1  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001a780  00000000  00000000  00020f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004078  00000000  00000000  0003b69a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004ff0  00000000  00000000  0003f712  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a88  00000000  00000000  00044702  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009c8  00000000  00000000  0004518a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b29a  00000000  00000000  00045b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001285b  00000000  00000000  00060dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066288  00000000  00000000  00073647  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002284  00000000  00000000  000d98d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	28 31 07 20 1d 15 08 00 19 15 08 00 19 15 08 00     (1. ............
   80010:	19 15 08 00 19 15 08 00 19 15 08 00 00 00 00 00     ................
	...
   8002c:	19 15 08 00 19 15 08 00 00 00 00 00 19 15 08 00     ................
   8003c:	19 15 08 00 19 15 08 00 19 15 08 00 19 15 08 00     ................
   8004c:	19 15 08 00 19 15 08 00 19 15 08 00 19 15 08 00     ................
   8005c:	19 15 08 00 19 15 08 00 19 15 08 00 00 00 00 00     ................
   8006c:	c1 13 08 00 d5 13 08 00 e9 13 08 00 fd 13 08 00     ................
	...
   80084:	19 15 08 00 19 15 08 00 19 15 08 00 19 15 08 00     ................
   80094:	19 15 08 00 19 15 08 00 19 15 08 00 19 15 08 00     ................
   800a4:	00 00 00 00 19 15 08 00 19 15 08 00 19 15 08 00     ................
   800b4:	19 15 08 00 19 15 08 00 19 15 08 00 19 15 08 00     ................
   800c4:	19 15 08 00 19 15 08 00 19 15 08 00 19 15 08 00     ................
   800d4:	c5 01 07 20 19 15 08 00 19 15 08 00 19 15 08 00     ... ............
   800e4:	19 15 08 00 19 15 08 00 19 15 08 00 19 15 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070e98 	.word	0x20070e98
   80110:	00000000 	.word	0x00000000
   80114:	0008661c 	.word	0x0008661c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008661c 	.word	0x0008661c
   80154:	20070e9c 	.word	0x20070e9c
   80158:	0008661c 	.word	0x0008661c
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80160:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80162:	2401      	movs	r4, #1
   80164:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80166:	2400      	movs	r4, #0
   80168:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8016a:	f240 2502 	movw	r5, #514	; 0x202
   8016e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80172:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80176:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8017a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8017c:	0052      	lsls	r2, r2, #1
   8017e:	fbb1 f2f2 	udiv	r2, r1, r2
   80182:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80184:	0212      	lsls	r2, r2, #8
   80186:	b292      	uxth	r2, r2
   80188:	432b      	orrs	r3, r5
   8018a:	431a      	orrs	r2, r3
   8018c:	6042      	str	r2, [r0, #4]
	return 0;
}
   8018e:	4620      	mov	r0, r4
   80190:	bc30      	pop	{r4, r5}
   80192:	4770      	bx	lr

00080194 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80194:	6843      	ldr	r3, [r0, #4]
   80196:	f023 0310 	bic.w	r3, r3, #16
   8019a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8019c:	6843      	ldr	r3, [r0, #4]
   8019e:	4319      	orrs	r1, r3
   801a0:	6041      	str	r1, [r0, #4]
   801a2:	4770      	bx	lr

000801a4 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   801a4:	6843      	ldr	r3, [r0, #4]
   801a6:	01d2      	lsls	r2, r2, #7
   801a8:	b2d2      	uxtb	r2, r2
   801aa:	4319      	orrs	r1, r3
   801ac:	430a      	orrs	r2, r1
   801ae:	6042      	str	r2, [r0, #4]
   801b0:	4770      	bx	lr

000801b2 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   801b2:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801b4:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   801b6:	0609      	lsls	r1, r1, #24
   801b8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   801bc:	4321      	orrs	r1, r4
   801be:	430a      	orrs	r2, r1
   801c0:	0719      	lsls	r1, r3, #28
   801c2:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   801c6:	4311      	orrs	r1, r2
   801c8:	6041      	str	r1, [r0, #4]
}
   801ca:	bc10      	pop	{r4}
   801cc:	4770      	bx	lr

000801ce <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   801ce:	2302      	movs	r3, #2
   801d0:	6003      	str	r3, [r0, #0]
   801d2:	4770      	bx	lr

000801d4 <adc_reset>:
 *
 * \param p_adc Pointer to an ADC instance.
 */
void adc_reset(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_SWRST;
   801d4:	2301      	movs	r3, #1
   801d6:	6003      	str	r3, [r0, #0]
   801d8:	4770      	bx	lr

000801da <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   801da:	2301      	movs	r3, #1
   801dc:	fa03 f101 	lsl.w	r1, r3, r1
   801e0:	6101      	str	r1, [r0, #16]
   801e2:	4770      	bx	lr

000801e4 <adc_disable_all_channel>:
 * \param p_adc Pointer to an ADC instance.
 */
void adc_disable_all_channel(Adc *p_adc)
{
#if SAM3S || SAM4S || SAM3N || SAM3XA
	p_adc->ADC_CHDR = 0xFFFF;
   801e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801e8:	6143      	str	r3, [r0, #20]
   801ea:	4770      	bx	lr

000801ec <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   801ec:	6241      	str	r1, [r0, #36]	; 0x24
   801ee:	4770      	bx	lr

000801f0 <adc_disable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be disabled.
 */
void adc_disable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IDR = ul_source;
   801f0:	6281      	str	r1, [r0, #40]	; 0x28
   801f2:	4770      	bx	lr

000801f4 <efc_get_wait_state>:
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   801f4:	6800      	ldr	r0, [r0, #0]
}
   801f6:	f3c0 2003 	ubfx	r0, r0, #8, #4
   801fa:	4770      	bx	lr

000801fc <efc_init>:
{
   801fc:	b508      	push	{r3, lr}
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   801fe:	0212      	lsls	r2, r2, #8
   80200:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   80204:	4311      	orrs	r1, r2
   80206:	4b02      	ldr	r3, [pc, #8]	; (80210 <efc_init+0x14>)
   80208:	4798      	blx	r3
}
   8020a:	2000      	movs	r0, #0
   8020c:	bd08      	pop	{r3, pc}
   8020e:	bf00      	nop
   80210:	20070079 	.word	0x20070079

00080214 <efc_set_wait_state>:
{
   80214:	b508      	push	{r3, lr}
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   80216:	6803      	ldr	r3, [r0, #0]
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   80218:	0209      	lsls	r1, r1, #8
   8021a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   8021e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   80222:	4319      	orrs	r1, r3
   80224:	4b01      	ldr	r3, [pc, #4]	; (8022c <efc_set_wait_state+0x18>)
   80226:	4798      	blx	r3
   80228:	bd08      	pop	{r3, pc}
   8022a:	bf00      	nop
   8022c:	20070079 	.word	0x20070079

00080230 <efc_perform_command>:
{
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80230:	f1a1 030e 	sub.w	r3, r1, #14
   80234:	2b01      	cmp	r3, #1
   80236:	d802      	bhi.n	8023e <efc_perform_command+0xe>
		return EFC_RC_NOT_SUPPORT;
   80238:	f04f 30ff 	mov.w	r0, #4294967295
   8023c:	4770      	bx	lr
{
   8023e:	b510      	push	{r4, lr}
   80240:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80242:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
   80246:	fab3 f383 	clz	r3, r3
   8024a:	095b      	lsrs	r3, r3, #5
   8024c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   8024e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80250:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80254:	2400      	movs	r4, #0
   80256:	4b0b      	ldr	r3, [pc, #44]	; (80284 <efc_perform_command+0x54>)
   80258:	701c      	strb	r4, [r3, #0]
	return flags;
   8025a:	9c01      	ldr	r4, [sp, #4]
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   8025c:	0212      	lsls	r2, r2, #8
   8025e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   80262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
	result = efc_perform_fcr(p_efc,
   80266:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
			EEFC_FCR_FCMD(ul_command));
   8026a:	b2c9      	uxtb	r1, r1
	result = efc_perform_fcr(p_efc,
   8026c:	4311      	orrs	r1, r2
   8026e:	4b06      	ldr	r3, [pc, #24]	; (80288 <efc_perform_command+0x58>)
   80270:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80272:	b12c      	cbz	r4, 80280 <efc_perform_command+0x50>
		cpu_irq_enable();
   80274:	2201      	movs	r2, #1
   80276:	4b03      	ldr	r3, [pc, #12]	; (80284 <efc_perform_command+0x54>)
   80278:	701a      	strb	r2, [r3, #0]
   8027a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8027e:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   80280:	b002      	add	sp, #8
   80282:	bd10      	pop	{r4, pc}
   80284:	200704d8 	.word	0x200704d8
   80288:	2007007d 	.word	0x2007007d

0008028c <FIFO_Init>:

int32_t AlphaQ,BetaQ,BetaSQrtQ,BetaMul2Q,BetaSQRTInvQ;

void FIFO_Init(XFifo* Fifo1 )
{
	Fifo1->WriteInx = 0;
   8028c:	2300      	movs	r3, #0
   8028e:	6003      	str	r3, [r0, #0]
	Fifo1->ReadInx = 0;
   80290:	6043      	str	r3, [r0, #4]
	Fifo1->Data[0] = 0;
   80292:	60c3      	str	r3, [r0, #12]
	Fifo1->Data[1] = 0;
   80294:	6103      	str	r3, [r0, #16]
	Fifo1->Data[2] = 0;
   80296:	6143      	str	r3, [r0, #20]
	Fifo1->FilterY[0] = 0;
   80298:	6183      	str	r3, [r0, #24]
	Fifo1->FilterY[1] = 0;
   8029a:	61c3      	str	r3, [r0, #28]
	Fifo1->FilterY[2] = 0;
   8029c:	6203      	str	r3, [r0, #32]
	Fifo1->WriteIndxY = 0;
   8029e:	6083      	str	r3, [r0, #8]
	
	Fifo1->AlphaQ = (int32_t)(ALPHA * BETA_MUL2_Q);
   802a0:	6283      	str	r3, [r0, #40]	; 0x28
	Fifo1->BetaQ =  (int32_t)(BETA * BETA_MUL2_Q);
   802a2:	2369      	movs	r3, #105	; 0x69
   802a4:	62c3      	str	r3, [r0, #44]	; 0x2c
	Fifo1->BetaSQrtQ = (int32_t)(BETA_SQRT * BETA_MUL2_Q);
   802a6:	f240 23b6 	movw	r3, #694	; 0x2b6
   802aa:	6303      	str	r3, [r0, #48]	; 0x30
	Fifo1->BetaMul2Q =  (int32_t)(BETA_MUL2 * BETA_MUL2_Q);
   802ac:	23d2      	movs	r3, #210	; 0xd2
   802ae:	6343      	str	r3, [r0, #52]	; 0x34
	Fifo1->BetaSQRTInvQ =  (int32_t)(BETA_SQRT_INV * BETA_SQRT_INV_Q);
   802b0:	23bd      	movs	r3, #189	; 0xbd
   802b2:	6383      	str	r3, [r0, #56]	; 0x38
   802b4:	4770      	bx	lr
	...

000802b8 <FIFO2_Init>:

// Fifo2p1 located at 0x20072de0 after malloc - stack section end in 20072dd8 (8 bytes dif)
// Fifo2p2 located at 0x20077438 after malloc
// len = T (integration time)
void FIFO2_Init(XFifo2* Fifo2, int len)
{
   802b8:	b538      	push	{r3, r4, r5, lr}
   802ba:	4604      	mov	r4, r0
   802bc:	460d      	mov	r5, r1
	int i;
	Fifo2->OldestInd = 0;
   802be:	2300      	movs	r3, #0
   802c0:	6003      	str	r3, [r0, #0]
	Fifo2->len = len;
   802c2:	60c1      	str	r1, [r0, #12]
	Fifo2->Wave = (uint32_t*)malloc(sizeof(uint32_t)*len);
   802c4:	0088      	lsls	r0, r1, #2
   802c6:	4b08      	ldr	r3, [pc, #32]	; (802e8 <FIFO2_Init+0x30>)
   802c8:	4798      	blx	r3
   802ca:	6060      	str	r0, [r4, #4]
	
	for (i=0;i<len;i++)
   802cc:	2d00      	cmp	r5, #0
   802ce:	dd07      	ble.n	802e0 <FIFO2_Init+0x28>
   802d0:	2300      	movs	r3, #0
	{
		Fifo2->Wave[i] = 0;	
   802d2:	4619      	mov	r1, r3
   802d4:	6862      	ldr	r2, [r4, #4]
   802d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<len;i++)
   802da:	3301      	adds	r3, #1
   802dc:	429d      	cmp	r5, r3
   802de:	d1f9      	bne.n	802d4 <FIFO2_Init+0x1c>
	}
	Fifo2->Energy = 0;
   802e0:	2300      	movs	r3, #0
   802e2:	60a3      	str	r3, [r4, #8]
   802e4:	bd38      	pop	{r3, r4, r5, pc}
   802e6:	bf00      	nop
   802e8:	00081a49 	.word	0x00081a49

000802ec <FIFO2_Reset>:
}

void FIFO2_Reset(XFifo2* Fifo2)
{
	int i;
	Fifo2->OldestInd = 0;	
   802ec:	2300      	movs	r3, #0
   802ee:	6003      	str	r3, [r0, #0]
	
	for (i=0;i<Fifo2->len;i++)
   802f0:	68c3      	ldr	r3, [r0, #12]
   802f2:	2b00      	cmp	r3, #0
   802f4:	dd08      	ble.n	80308 <FIFO2_Reset+0x1c>
   802f6:	2300      	movs	r3, #0
	{
		Fifo2->Wave[i] = 0;
   802f8:	4619      	mov	r1, r3
   802fa:	6842      	ldr	r2, [r0, #4]
   802fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0;i<Fifo2->len;i++)
   80300:	3301      	adds	r3, #1
   80302:	68c2      	ldr	r2, [r0, #12]
   80304:	429a      	cmp	r2, r3
   80306:	dcf8      	bgt.n	802fa <FIFO2_Reset+0xe>
	}
	Fifo2->Energy = 0;
   80308:	2300      	movs	r3, #0
   8030a:	6083      	str	r3, [r0, #8]
   8030c:	4770      	bx	lr
	...

00080310 <DAC3X8E_Init>:
#include "DAC3X8E.h"
#include "sam3x8e.h"
#include "pmc.h"

void DAC3X8E_Init()
{
   80310:	b508      	push	{r3, lr}
	uint32_t mr;
	pmc_enable_periph_clk(ID_DACC);
   80312:	2026      	movs	r0, #38	; 0x26
   80314:	4b15      	ldr	r3, [pc, #84]	; (8036c <DAC3X8E_Init+0x5c>)
   80316:	4798      	blx	r3
	
	//disable write protect
	DACC->DACC_CDR = 0;
   80318:	4b15      	ldr	r3, [pc, #84]	; (80370 <DAC3X8E_Init+0x60>)
   8031a:	2200      	movs	r2, #0
   8031c:	621a      	str	r2, [r3, #32]
	// Set trigger mode 1
	mr = DACC->DACC_MR & (~(DACC_MR_TRGSEL_Msk));
   8031e:	685a      	ldr	r2, [r3, #4]
   80320:	f022 020e 	bic.w	r2, r2, #14
	DACC->DACC_MR = mr | DACC_MR_TRGEN_EN | DACC_MR_TRGSEL(1);
   80324:	f042 0203 	orr.w	r2, r2, #3
   80328:	605a      	str	r2, [r3, #4]
	
	// Set transfer mode 0 - half word mode
	DACC->DACC_MR &= (~DACC_MR_WORD_WORD);
   8032a:	685a      	ldr	r2, [r3, #4]
   8032c:	f022 0210 	bic.w	r2, r2, #16
   80330:	605a      	str	r2, [r3, #4]
	//Set flexible mode
	DACC->DACC_MR |= DACC_MR_TAG;
   80332:	685a      	ldr	r2, [r3, #4]
   80334:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   80338:	605a      	str	r2, [r3, #4]
	// set timing
	mr = DACC->DACC_MR & (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
   8033a:	6859      	ldr	r1, [r3, #4]
	mr |= DACC_MR_REFRESH(1);
	mr &= ~DACC_MR_MAXS;
	mr |= (DACC_MR_STARTUP_Msk & ((3) << DACC_MR_STARTUP_Pos));
   8033c:	4a0d      	ldr	r2, [pc, #52]	; (80374 <DAC3X8E_Init+0x64>)
   8033e:	400a      	ands	r2, r1
   80340:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
   80344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
	DACC->DACC_MR = mr;
   80348:	605a      	str	r2, [r3, #4]
	//set power save off
	DACC->DACC_MR &= (~DACC_MR_SLEEP);
   8034a:	685a      	ldr	r2, [r3, #4]
   8034c:	f022 0220 	bic.w	r2, r2, #32
   80350:	605a      	str	r2, [r3, #4]
	DACC->DACC_MR |= DACC_MR_FASTWKUP;
   80352:	685a      	ldr	r2, [r3, #4]
   80354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80358:	605a      	str	r2, [r3, #4]
	//disable INT
	DACC->DACC_IDR = 0xf;
   8035a:	220f      	movs	r2, #15
   8035c:	629a      	str	r2, [r3, #40]	; 0x28
	//enable ch0 and ch1
	DACC->DACC_CHER = DACC_CHER_CH0 << 0;
   8035e:	2201      	movs	r2, #1
   80360:	611a      	str	r2, [r3, #16]
	DACC->DACC_CHER = DACC_CHER_CH0 << 1;
   80362:	2102      	movs	r1, #2
   80364:	6119      	str	r1, [r3, #16]
	//enable write protect
	DACC->DACC_CDR = 1;
   80366:	621a      	str	r2, [r3, #32]
   80368:	bd08      	pop	{r3, pc}
   8036a:	bf00      	nop
   8036c:	000814f9 	.word	0x000814f9
   80370:	400c8000 	.word	0x400c8000
   80374:	c0df00ff 	.word	0xc0df00ff

00080378 <DAC3X8E_write>:
	
	
}
void DAC3X8E_write(uint32_t ul_data)
{
	DACC->DACC_CDR = ul_data;
   80378:	4b01      	ldr	r3, [pc, #4]	; (80380 <DAC3X8E_write+0x8>)
   8037a:	6218      	str	r0, [r3, #32]
   8037c:	4770      	bx	lr
   8037e:	bf00      	nop
   80380:	400c8000 	.word	0x400c8000

00080384 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80384:	b430      	push	{r4, r5}
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

	if (ul_addr >= IFLASH1_ADDR) {
   80386:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
   8038a:	d30d      	bcc.n	803a8 <translate_address+0x24>
		p_efc = EFC1;
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   8038c:	f5a1 2440 	sub.w	r4, r1, #786432	; 0xc0000
   80390:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   80394:	b2c9      	uxtb	r1, r1
		p_efc = EFC1;
   80396:	4d08      	ldr	r5, [pc, #32]	; (803b8 <translate_address+0x34>)
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
	}

	/* Store values */
	if (pp_efc) {
   80398:	b100      	cbz	r0, 8039c <translate_address+0x18>
		*pp_efc = p_efc;
   8039a:	6005      	str	r5, [r0, #0]
	}

	if (pus_page) {
   8039c:	b102      	cbz	r2, 803a0 <translate_address+0x1c>
		*pus_page = us_page;
   8039e:	8014      	strh	r4, [r2, #0]
	}

	if (pus_offset) {
   803a0:	b103      	cbz	r3, 803a4 <translate_address+0x20>
		*pus_offset = us_offset;
   803a2:	8019      	strh	r1, [r3, #0]
	}
}
   803a4:	bc30      	pop	{r4, r5}
   803a6:	4770      	bx	lr
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   803a8:	f5a1 2400 	sub.w	r4, r1, #524288	; 0x80000
   803ac:	f3c4 240f 	ubfx	r4, r4, #8, #16
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   803b0:	b2c9      	uxtb	r1, r1
		p_efc = EFC0;
   803b2:	4d02      	ldr	r5, [pc, #8]	; (803bc <translate_address+0x38>)
   803b4:	e7f0      	b.n	80398 <translate_address+0x14>
   803b6:	bf00      	nop
   803b8:	400e0c00 	.word	0x400e0c00
   803bc:	400e0a00 	.word	0x400e0a00

000803c0 <FLASH_Init>:



uint32_t FLASH_Init()
{
   803c0:	b508      	push	{r3, lr}
	return efc_init(EFC1,EEFC_FMR_FAM,6);
   803c2:	2206      	movs	r2, #6
   803c4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   803c8:	4801      	ldr	r0, [pc, #4]	; (803d0 <FLASH_Init+0x10>)
   803ca:	4b02      	ldr	r3, [pc, #8]	; (803d4 <FLASH_Init+0x14>)
   803cc:	4798      	blx	r3
}
   803ce:	bd08      	pop	{r3, pc}
   803d0:	400e0c00 	.word	0x400e0c00
   803d4:	000801fd 	.word	0x000801fd

000803d8 <ReadCalibFromFlash>:

Byte* ReadCalibFromFlash()
{
	return (FLASH_START+4);
}
   803d8:	4800      	ldr	r0, [pc, #0]	; (803dc <ReadCalibFromFlash+0x4>)
   803da:	4770      	bx	lr
   803dc:	000c0004 	.word	0x000c0004

000803e0 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   803e0:	b530      	push	{r4, r5, lr}
   803e2:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   803e4:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   803e8:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   803ec:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   803f0:	ea6f 3484 	mvn.w	r4, r4, lsl #14
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
   803f4:	b102      	cbz	r2, 803f8 <flash_lock+0x18>
		*pul_actual_start = ul_actual_start;
   803f6:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
   803f8:	b103      	cbz	r3, 803fc <flash_lock+0x1c>
		*pul_actual_end = ul_actual_end;
   803fa:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   803fc:	2300      	movs	r3, #0
   803fe:	f10d 0202 	add.w	r2, sp, #2
   80402:	4601      	mov	r1, r0
   80404:	a801      	add	r0, sp, #4
   80406:	4d11      	ldr	r5, [pc, #68]	; (8044c <flash_lock+0x6c>)
   80408:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   8040a:	2300      	movs	r3, #0
   8040c:	466a      	mov	r2, sp
   8040e:	4621      	mov	r1, r4
   80410:	4618      	mov	r0, r3
   80412:	47a8      	blx	r5

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80414:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   80418:	f8bd 3000 	ldrh.w	r3, [sp]
   8041c:	4293      	cmp	r3, r2
   8041e:	d913      	bls.n	80448 <flash_lock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80420:	2508      	movs	r5, #8
   80422:	4c0b      	ldr	r4, [pc, #44]	; (80450 <flash_lock+0x70>)
   80424:	4629      	mov	r1, r5
   80426:	9801      	ldr	r0, [sp, #4]
   80428:	47a0      	blx	r4

		if (ul_error) {
   8042a:	4601      	mov	r1, r0
   8042c:	b948      	cbnz	r0, 80442 <flash_lock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   8042e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   80432:	3240      	adds	r2, #64	; 0x40
   80434:	b292      	uxth	r2, r2
   80436:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   8043a:	f8bd 3000 	ldrh.w	r3, [sp]
   8043e:	4293      	cmp	r3, r2
   80440:	d8f0      	bhi.n	80424 <flash_lock+0x44>
	}

	return FLASH_RC_OK;
}
   80442:	4608      	mov	r0, r1
   80444:	b003      	add	sp, #12
   80446:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   80448:	2100      	movs	r1, #0
   8044a:	e7fa      	b.n	80442 <flash_lock+0x62>
   8044c:	00080385 	.word	0x00080385
   80450:	00080231 	.word	0x00080231

00080454 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80454:	b530      	push	{r4, r5, lr}
   80456:	b083      	sub	sp, #12
	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   80458:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
   8045c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   80460:	ea6f 3491 	mvn.w	r4, r1, lsr #14
   80464:	ea6f 3484 	mvn.w	r4, r4, lsl #14
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
   80468:	b102      	cbz	r2, 8046c <flash_unlock+0x18>
		*pul_actual_start = ul_actual_start;
   8046a:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
   8046c:	b103      	cbz	r3, 80470 <flash_unlock+0x1c>
		*pul_actual_end = ul_actual_end;
   8046e:	601c      	str	r4, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80470:	2300      	movs	r3, #0
   80472:	f10d 0202 	add.w	r2, sp, #2
   80476:	4601      	mov	r1, r0
   80478:	a801      	add	r0, sp, #4
   8047a:	4d11      	ldr	r5, [pc, #68]	; (804c0 <flash_unlock+0x6c>)
   8047c:	47a8      	blx	r5
	translate_address(0, ul_actual_end, &us_end_page, 0);
   8047e:	2300      	movs	r3, #0
   80480:	466a      	mov	r2, sp
   80482:	4621      	mov	r1, r4
   80484:	4618      	mov	r0, r3
   80486:	47a8      	blx	r5

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80488:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   8048c:	f8bd 3000 	ldrh.w	r3, [sp]
   80490:	4293      	cmp	r3, r2
   80492:	d913      	bls.n	804bc <flash_unlock+0x68>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80494:	2509      	movs	r5, #9
   80496:	4c0b      	ldr	r4, [pc, #44]	; (804c4 <flash_unlock+0x70>)
   80498:	4629      	mov	r1, r5
   8049a:	9801      	ldr	r0, [sp, #4]
   8049c:	47a0      	blx	r4
				us_start_page);
		if (ul_error) {
   8049e:	4601      	mov	r1, r0
   804a0:	b948      	cbnz	r0, 804b6 <flash_unlock+0x62>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
   804a2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   804a6:	3240      	adds	r2, #64	; 0x40
   804a8:	b292      	uxth	r2, r2
   804aa:	f8ad 2002 	strh.w	r2, [sp, #2]
	while (us_start_page < us_end_page) {
   804ae:	f8bd 3000 	ldrh.w	r3, [sp]
   804b2:	4293      	cmp	r3, r2
   804b4:	d8f0      	bhi.n	80498 <flash_unlock+0x44>
	}

	return FLASH_RC_OK;
}
   804b6:	4608      	mov	r0, r1
   804b8:	b003      	add	sp, #12
   804ba:	bd30      	pop	{r4, r5, pc}
	return FLASH_RC_OK;
   804bc:	2100      	movs	r1, #0
   804be:	e7fa      	b.n	804b6 <flash_unlock+0x62>
   804c0:	00080385 	.word	0x00080385
   804c4:	00080231 	.word	0x00080231

000804c8 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   804c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804cc:	b087      	sub	sp, #28
   804ce:	9101      	str	r1, [sp, #4]
   804d0:	4692      	mov	sl, r2
   804d2:	9302      	str	r3, [sp, #8]
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   804d4:	ab04      	add	r3, sp, #16
   804d6:	f10d 0212 	add.w	r2, sp, #18
   804da:	4601      	mov	r1, r0
   804dc:	a805      	add	r0, sp, #20
   804de:	4c31      	ldr	r4, [pc, #196]	; (805a4 <flash_write+0xdc>)
   804e0:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   804e2:	9805      	ldr	r0, [sp, #20]
   804e4:	4b30      	ldr	r3, [pc, #192]	; (805a8 <flash_write+0xe0>)
   804e6:	4798      	blx	r3
   804e8:	9003      	str	r0, [sp, #12]
	efc_set_wait_state(p_efc, 6);
   804ea:	2106      	movs	r1, #6
   804ec:	9805      	ldr	r0, [sp, #20]
   804ee:	4b2f      	ldr	r3, [pc, #188]	; (805ac <flash_write+0xe4>)
   804f0:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   804f2:	f1ba 0f00 	cmp.w	sl, #0
   804f6:	d04d      	beq.n	80594 <flash_write+0xcc>
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   804f8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 805b4 <flash_write+0xec>
   804fc:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 805b8 <flash_write+0xf0>
   80500:	f109 05fc 	add.w	r5, r9, #252	; 0xfc
   80504:	e015      	b.n	80532 <flash_write+0x6a>

		if (ul_erase_flag) {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   80506:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   8050a:	2101      	movs	r1, #1
   8050c:	9805      	ldr	r0, [sp, #20]
   8050e:	4b28      	ldr	r3, [pc, #160]	; (805b0 <flash_write+0xe8>)
   80510:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
   80512:	2800      	cmp	r0, #0
   80514:	d143      	bne.n	8059e <flash_write+0xd6>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80516:	9b01      	ldr	r3, [sp, #4]
   80518:	443b      	add	r3, r7
   8051a:	9301      	str	r3, [sp, #4]
		ul_size -= writeSize;
		us_page++;
   8051c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   80520:	3301      	adds	r3, #1
   80522:	f8ad 3012 	strh.w	r3, [sp, #18]
		us_offset = 0;
   80526:	2300      	movs	r3, #0
   80528:	f8ad 3010 	strh.w	r3, [sp, #16]
	while (ul_size > 0) {
   8052c:	ebba 0a07 	subs.w	sl, sl, r7
   80530:	d030      	beq.n	80594 <flash_write+0xcc>
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   80532:	f8bd 6010 	ldrh.w	r6, [sp, #16]
   80536:	f5c6 7880 	rsb	r8, r6, #256	; 0x100
   8053a:	4647      	mov	r7, r8
   8053c:	45d0      	cmp	r8, sl
   8053e:	bf28      	it	cs
   80540:	4657      	movcs	r7, sl
	ul_addr = IFLASH1_ADDR + us_page * IFLASH0_PAGE_SIZE + us_offset;
   80542:	f8bd 4012 	ldrh.w	r4, [sp, #18]
   80546:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
   8054a:	0224      	lsls	r4, r4, #8
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   8054c:	4632      	mov	r2, r6
   8054e:	4621      	mov	r1, r4
   80550:	4648      	mov	r0, r9
   80552:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   80554:	463a      	mov	r2, r7
   80556:	9901      	ldr	r1, [sp, #4]
   80558:	eb09 0006 	add.w	r0, r9, r6
   8055c:	47d8      	blx	fp
		memcpy(puc_page_buffer + us_offset + writeSize,
   8055e:	19f0      	adds	r0, r6, r7
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   80560:	eba8 0207 	sub.w	r2, r8, r7
				(void *)(ul_page_addr + us_offset + writeSize),
   80564:	1931      	adds	r1, r6, r4
		memcpy(puc_page_buffer + us_offset + writeSize,
   80566:	b292      	uxth	r2, r2
   80568:	4439      	add	r1, r7
   8056a:	4448      	add	r0, r9
   8056c:	47d8      	blx	fp
   8056e:	f1a9 0304 	sub.w	r3, r9, #4
   80572:	3c04      	subs	r4, #4
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80574:	f853 2f04 	ldr.w	r2, [r3, #4]!
   80578:	f844 2f04 	str.w	r2, [r4, #4]!
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   8057c:	42ab      	cmp	r3, r5
   8057e:	d1f9      	bne.n	80574 <flash_write+0xac>
		if (ul_erase_flag) {
   80580:	9b02      	ldr	r3, [sp, #8]
   80582:	2b00      	cmp	r3, #0
   80584:	d0bf      	beq.n	80506 <flash_write+0x3e>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   80586:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   8058a:	2103      	movs	r1, #3
   8058c:	9805      	ldr	r0, [sp, #20]
   8058e:	4b08      	ldr	r3, [pc, #32]	; (805b0 <flash_write+0xe8>)
   80590:	4798      	blx	r3
   80592:	e7be      	b.n	80512 <flash_write+0x4a>
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80594:	9903      	ldr	r1, [sp, #12]
   80596:	9805      	ldr	r0, [sp, #20]
   80598:	4b04      	ldr	r3, [pc, #16]	; (805ac <flash_write+0xe4>)
   8059a:	4798      	blx	r3

	return FLASH_RC_OK;
   8059c:	2000      	movs	r0, #0
}
   8059e:	b007      	add	sp, #28
   805a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   805a4:	00080385 	.word	0x00080385
   805a8:	000801f5 	.word	0x000801f5
   805ac:	00080215 	.word	0x00080215
   805b0:	00080231 	.word	0x00080231
   805b4:	20070eb4 	.word	0x20070eb4
   805b8:	00081f9d 	.word	0x00081f9d

000805bc <WriteCalibToFlash>:
{
   805bc:	b538      	push	{r3, r4, r5, lr}
   805be:	4604      	mov	r4, r0
	PrintLn("Writing to flash\n");
   805c0:	4812      	ldr	r0, [pc, #72]	; (8060c <WriteCalibToFlash+0x50>)
   805c2:	4b13      	ldr	r3, [pc, #76]	; (80610 <WriteCalibToFlash+0x54>)
   805c4:	4798      	blx	r3
	if(flash_unlock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   805c6:	2300      	movs	r3, #0
   805c8:	461a      	mov	r2, r3
   805ca:	4912      	ldr	r1, [pc, #72]	; (80614 <WriteCalibToFlash+0x58>)
   805cc:	4812      	ldr	r0, [pc, #72]	; (80618 <WriteCalibToFlash+0x5c>)
   805ce:	4d13      	ldr	r5, [pc, #76]	; (8061c <WriteCalibToFlash+0x60>)
   805d0:	47a8      	blx	r5
   805d2:	b970      	cbnz	r0, 805f2 <WriteCalibToFlash+0x36>
	if(flash_write((uint32_t)FLASH_START+4, Calib, sizeof(uint32_t), 1) != FLASH_RC_OK)
   805d4:	2301      	movs	r3, #1
   805d6:	2204      	movs	r2, #4
   805d8:	4621      	mov	r1, r4
   805da:	480f      	ldr	r0, [pc, #60]	; (80618 <WriteCalibToFlash+0x5c>)
   805dc:	4c10      	ldr	r4, [pc, #64]	; (80620 <WriteCalibToFlash+0x64>)
   805de:	47a0      	blx	r4
   805e0:	b958      	cbnz	r0, 805fa <WriteCalibToFlash+0x3e>
	if(flash_lock((uint32_t)FLASH_START+4, (uint32_t)FLASH_START + sizeof(uint32_t) - 1, 0, 0) != FLASH_RC_OK)
   805e2:	2300      	movs	r3, #0
   805e4:	461a      	mov	r2, r3
   805e6:	490b      	ldr	r1, [pc, #44]	; (80614 <WriteCalibToFlash+0x58>)
   805e8:	480b      	ldr	r0, [pc, #44]	; (80618 <WriteCalibToFlash+0x5c>)
   805ea:	4c0e      	ldr	r4, [pc, #56]	; (80624 <WriteCalibToFlash+0x68>)
   805ec:	47a0      	blx	r4
   805ee:	b940      	cbnz	r0, 80602 <WriteCalibToFlash+0x46>
   805f0:	bd38      	pop	{r3, r4, r5, pc}
		PrintLn("Bad unlock\n");
   805f2:	480d      	ldr	r0, [pc, #52]	; (80628 <WriteCalibToFlash+0x6c>)
   805f4:	4b06      	ldr	r3, [pc, #24]	; (80610 <WriteCalibToFlash+0x54>)
   805f6:	4798      	blx	r3
   805f8:	e7ec      	b.n	805d4 <WriteCalibToFlash+0x18>
		PrintLn("Bad write\n");
   805fa:	480c      	ldr	r0, [pc, #48]	; (8062c <WriteCalibToFlash+0x70>)
   805fc:	4b04      	ldr	r3, [pc, #16]	; (80610 <WriteCalibToFlash+0x54>)
   805fe:	4798      	blx	r3
   80600:	e7ef      	b.n	805e2 <WriteCalibToFlash+0x26>
		PrintLn("Bad lock\n");
   80602:	480b      	ldr	r0, [pc, #44]	; (80630 <WriteCalibToFlash+0x74>)
   80604:	4b02      	ldr	r3, [pc, #8]	; (80610 <WriteCalibToFlash+0x54>)
   80606:	4798      	blx	r3
}
   80608:	e7f2      	b.n	805f0 <WriteCalibToFlash+0x34>
   8060a:	bf00      	nop
   8060c:	000862a4 	.word	0x000862a4
   80610:	00080635 	.word	0x00080635
   80614:	000c0003 	.word	0x000c0003
   80618:	000c0004 	.word	0x000c0004
   8061c:	00080455 	.word	0x00080455
   80620:	000804c9 	.word	0x000804c9
   80624:	000803e1 	.word	0x000803e1
   80628:	000862b8 	.word	0x000862b8
   8062c:	000862c4 	.word	0x000862c4
   80630:	000862d0 	.word	0x000862d0

00080634 <PrintLn>:

#include "Prints.h"
#include <asf.h>

void PrintLn(const char *str)
{
   80634:	4770      	bx	lr
	...

00080638 <writeByte_register>:

// When writing 0x1234 to SPI only 0x34 will be written

// In multi-byte registers read or write to the MSBit of the LSByte first.
void writeByte_register(uint8_t reg, uint8_t value)
{
   80638:	b500      	push	{lr}
   8063a:	b083      	sub	sp, #12
	//uint8_t Test;
	//char out_str2[30] = {0};
	uint16_t Cmd[2];
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   8063c:	f000 001f 	and.w	r0, r0, #31
   80640:	f040 0020 	orr.w	r0, r0, #32
   80644:	f8ad 0004 	strh.w	r0, [sp, #4]
	Cmd[1] = value;
   80648:	f8ad 1006 	strh.w	r1, [sp, #6]
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   8064c:	4a06      	ldr	r2, [pc, #24]	; (80668 <writeByte_register+0x30>)
   8064e:	2102      	movs	r1, #2
   80650:	a801      	add	r0, sp, #4
   80652:	4b06      	ldr	r3, [pc, #24]	; (8066c <writeByte_register+0x34>)
   80654:	4798      	blx	r3
   80656:	b110      	cbz	r0, 8065e <writeByte_register+0x26>
	}
	#endif*/
	
	//sprintf(out_str2,"Reg %u is %u write data %u\n", reg,Test,value);
	//PrintLn(out_str2);
}
   80658:	b003      	add	sp, #12
   8065a:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   8065e:	4804      	ldr	r0, [pc, #16]	; (80670 <writeByte_register+0x38>)
   80660:	4b04      	ldr	r3, [pc, #16]	; (80674 <writeByte_register+0x3c>)
   80662:	4798      	blx	r3
}
   80664:	e7f8      	b.n	80658 <writeByte_register+0x20>
   80666:	bf00      	nop
   80668:	20070fb4 	.word	0x20070fb4
   8066c:	00080e05 	.word	0x00080e05
   80670:	0008633c 	.word	0x0008633c
   80674:	00080635 	.word	0x00080635

00080678 <writeBuf_register>:

void writeBuf_register(uint8_t reg, const uint16_t* Buf, int Len)
{
   80678:	b530      	push	{r4, r5, lr}
   8067a:	b085      	sub	sp, #20
	int i;
	uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = W_REGISTER | (REGISTER_MASK & reg);
   8067c:	f000 001f 	and.w	r0, r0, #31
   80680:	f040 0020 	orr.w	r0, r0, #32
   80684:	f8ad 0004 	strh.w	r0, [sp, #4]
	for(i=0;i<Len;i++)
   80688:	1e15      	subs	r5, r2, #0
   8068a:	dd0a      	ble.n	806a2 <writeBuf_register+0x2a>
   8068c:	460b      	mov	r3, r1
   8068e:	f10d 0206 	add.w	r2, sp, #6
   80692:	eb01 0445 	add.w	r4, r1, r5, lsl #1
		Cmd[i+1] = Buf[i];	
   80696:	f833 0b02 	ldrh.w	r0, [r3], #2
   8069a:	f822 0b02 	strh.w	r0, [r2], #2
	for(i=0;i<Len;i++)
   8069e:	42a3      	cmp	r3, r4
   806a0:	d1f9      	bne.n	80696 <writeBuf_register+0x1e>
	
	if(!SPIC_Write(Cmd, Len+1, &StatusRegister))
   806a2:	4a06      	ldr	r2, [pc, #24]	; (806bc <writeBuf_register+0x44>)
   806a4:	1c69      	adds	r1, r5, #1
   806a6:	a801      	add	r0, sp, #4
   806a8:	4b05      	ldr	r3, [pc, #20]	; (806c0 <writeBuf_register+0x48>)
   806aa:	4798      	blx	r3
   806ac:	b108      	cbz	r0, 806b2 <writeBuf_register+0x3a>
		PrintLn("Error2\n");
	
}
   806ae:	b005      	add	sp, #20
   806b0:	bd30      	pop	{r4, r5, pc}
		PrintLn("Error2\n");
   806b2:	4804      	ldr	r0, [pc, #16]	; (806c4 <writeBuf_register+0x4c>)
   806b4:	4b04      	ldr	r3, [pc, #16]	; (806c8 <writeBuf_register+0x50>)
   806b6:	4798      	blx	r3
}
   806b8:	e7f9      	b.n	806ae <writeBuf_register+0x36>
   806ba:	bf00      	nop
   806bc:	20070fb4 	.word	0x20070fb4
   806c0:	00080e05 	.word	0x00080e05
   806c4:	00086334 	.word	0x00086334
   806c8:	00080635 	.word	0x00080635

000806cc <readByte_register>:

uint8_t readByte_register(uint8_t reg)
{
   806cc:	b530      	push	{r4, r5, lr}
   806ce:	b08b      	sub	sp, #44	; 0x2c
   806d0:	4604      	mov	r4, r0
	uint16_t Resp;
	uint16_t Cmd[2];
	char out_str[30] = {0};
   806d2:	221e      	movs	r2, #30
   806d4:	2100      	movs	r1, #0
   806d6:	4668      	mov	r0, sp
   806d8:	4b0d      	ldr	r3, [pc, #52]	; (80710 <readByte_register+0x44>)
   806da:	4798      	blx	r3
		
	Cmd[0] = R_REGISTER| (REGISTER_MASK & reg);
   806dc:	f004 031f 	and.w	r3, r4, #31
   806e0:	f8ad 3020 	strh.w	r3, [sp, #32]
	Cmd[1] = 0;
   806e4:	2300      	movs	r3, #0
   806e6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	SPIC_Read(Cmd, 2, &StatusRegister,&Resp);
   806ea:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   806ee:	4a09      	ldr	r2, [pc, #36]	; (80714 <readByte_register+0x48>)
   806f0:	2102      	movs	r1, #2
   806f2:	a808      	add	r0, sp, #32
   806f4:	4d08      	ldr	r5, [pc, #32]	; (80718 <readByte_register+0x4c>)
   806f6:	47a8      	blx	r5
	
	sprintf(out_str,"read reg %u val %u \n", reg,Resp);
   806f8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   806fc:	4622      	mov	r2, r4
   806fe:	4907      	ldr	r1, [pc, #28]	; (8071c <readByte_register+0x50>)
   80700:	4668      	mov	r0, sp
   80702:	4c07      	ldr	r4, [pc, #28]	; (80720 <readByte_register+0x54>)
   80704:	47a0      	blx	r4
	//PrintLn(out_str);
	return (uint8_t)(Resp);
}
   80706:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   8070a:	b00b      	add	sp, #44	; 0x2c
   8070c:	bd30      	pop	{r4, r5, pc}
   8070e:	bf00      	nop
   80710:	00082089 	.word	0x00082089
   80714:	20070fb4 	.word	0x20070fb4
   80718:	00080ec1 	.word	0x00080ec1
   8071c:	0008631c 	.word	0x0008631c
   80720:	00082161 	.word	0x00082161

00080724 <readBuf_register>:

void readBuf_register(uint8_t reg, uint16_t* Resp)
{
   80724:	b570      	push	{r4, r5, r6, lr}
   80726:	b090      	sub	sp, #64	; 0x40
   80728:	4605      	mov	r5, r0
   8072a:	460c      	mov	r4, r1
	int i;
	uint16_t Cmd[6];
	char out_str[30] = {0};
   8072c:	221e      	movs	r2, #30
   8072e:	2100      	movs	r1, #0
   80730:	a805      	add	r0, sp, #20
   80732:	4b13      	ldr	r3, [pc, #76]	; (80780 <readBuf_register+0x5c>)
   80734:	4798      	blx	r3
	//uint16_t Cmd[RF24_MAX_LEN_DATA+1];
	
	Cmd[0] = R_REGISTER | (REGISTER_MASK & reg);
   80736:	f005 031f 	and.w	r3, r5, #31
   8073a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	for(i=0;i<5;i++)
		Cmd[i+1] = 0;
   8073e:	2300      	movs	r3, #0
   80740:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   80744:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
   80748:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   8074c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
   80750:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
	
	SPIC_Read(Cmd, 6, &StatusRegister, Resp);
   80754:	4623      	mov	r3, r4
   80756:	4a0b      	ldr	r2, [pc, #44]	; (80784 <readBuf_register+0x60>)
   80758:	2106      	movs	r1, #6
   8075a:	a80d      	add	r0, sp, #52	; 0x34
   8075c:	4e0a      	ldr	r6, [pc, #40]	; (80788 <readBuf_register+0x64>)
   8075e:	47b0      	blx	r6
	sprintf(out_str,"read reg %u val %u %u %u %u %u\n", reg,Resp[0],Resp[1],Resp[2],Resp[3],Resp[4]);
   80760:	8823      	ldrh	r3, [r4, #0]
   80762:	8922      	ldrh	r2, [r4, #8]
   80764:	9203      	str	r2, [sp, #12]
   80766:	88e2      	ldrh	r2, [r4, #6]
   80768:	9202      	str	r2, [sp, #8]
   8076a:	88a2      	ldrh	r2, [r4, #4]
   8076c:	9201      	str	r2, [sp, #4]
   8076e:	8862      	ldrh	r2, [r4, #2]
   80770:	9200      	str	r2, [sp, #0]
   80772:	462a      	mov	r2, r5
   80774:	4905      	ldr	r1, [pc, #20]	; (8078c <readBuf_register+0x68>)
   80776:	a805      	add	r0, sp, #20
   80778:	4c05      	ldr	r4, [pc, #20]	; (80790 <readBuf_register+0x6c>)
   8077a:	47a0      	blx	r4
	//PrintLn(out_str);
}
   8077c:	b010      	add	sp, #64	; 0x40
   8077e:	bd70      	pop	{r4, r5, r6, pc}
   80780:	00082089 	.word	0x00082089
   80784:	20070fb4 	.word	0x20070fb4
   80788:	00080ec1 	.word	0x00080ec1
   8078c:	000862fc 	.word	0x000862fc
   80790:	00082161 	.word	0x00082161

00080794 <RF_ActiveUp>:

void RF_ActiveUp()
{
   80794:	b508      	push	{r3, lr}
	pio_set_pin_high(LED1_GPIO);
   80796:	2055      	movs	r0, #85	; 0x55
   80798:	4b01      	ldr	r3, [pc, #4]	; (807a0 <RF_ActiveUp+0xc>)
   8079a:	4798      	blx	r3
   8079c:	bd08      	pop	{r3, pc}
   8079e:	bf00      	nop
   807a0:	000811cf 	.word	0x000811cf

000807a4 <RF_DisActive>:
}

void RF_DisActive()
{
   807a4:	b508      	push	{r3, lr}
	pio_set_pin_low(LED1_GPIO);
   807a6:	2055      	movs	r0, #85	; 0x55
   807a8:	4b01      	ldr	r3, [pc, #4]	; (807b0 <RF_DisActive+0xc>)
   807aa:	4798      	blx	r3
   807ac:	bd08      	pop	{r3, pc}
   807ae:	bf00      	nop
   807b0:	000811e9 	.word	0x000811e9

000807b4 <RF_PowerUpTXmode>:
}

void RF_PowerUpTXmode()
{
   807b4:	b510      	push	{r4, lr}
	int i;
	writeByte_register(CONFIG,(readByte_register(CONFIG)) | ((1<<PWR_UP) & ~_BV(PRIM_RX)) );
   807b6:	2000      	movs	r0, #0
   807b8:	4c06      	ldr	r4, [pc, #24]	; (807d4 <RF_PowerUpTXmode+0x20>)
   807ba:	47a0      	blx	r4
   807bc:	f040 0102 	orr.w	r1, r0, #2
   807c0:	b2c9      	uxtb	r1, r1
   807c2:	2000      	movs	r0, #0
   807c4:	4b04      	ldr	r3, [pc, #16]	; (807d8 <RF_PowerUpTXmode+0x24>)
   807c6:	4798      	blx	r3
	readByte_register(CONFIG);
   807c8:	2000      	movs	r0, #0
   807ca:	47a0      	blx	r4
   807cc:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   807ce:	3b01      	subs	r3, #1
   807d0:	d1fd      	bne.n	807ce <RF_PowerUpTXmode+0x1a>
		__NOP;
}
   807d2:	bd10      	pop	{r4, pc}
   807d4:	000806cd 	.word	0x000806cd
   807d8:	00080639 	.word	0x00080639

000807dc <RF_SetPALevel>:

void RF_SetPALevel(rf24_pa_dbm_e level)
{
   807dc:	b510      	push	{r4, lr}
   807de:	4604      	mov	r4, r0
	uint8_t setup = readByte_register(RF_SETUP) ;
   807e0:	2006      	movs	r0, #6
   807e2:	4b0c      	ldr	r3, [pc, #48]	; (80814 <RF_SetPALevel+0x38>)
   807e4:	4798      	blx	r3
   807e6:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	setup |= (1<<RF_PWR_LOW);
	setup &= ~(1<<RF_PWR_HIGH);

	// switch uses RAM (evil!)
	if ( level == RF24_PA_MAX )
   807ea:	2c03      	cmp	r4, #3
   807ec:	d00b      	beq.n	80806 <RF_SetPALevel+0x2a>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_HIGH )
   807ee:	2c02      	cmp	r4, #2
   807f0:	d00c      	beq.n	8080c <RF_SetPALevel+0x30>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_LOW )
   807f2:	2c04      	cmp	r4, #4
	setup &= ~(1<<RF_PWR_HIGH);
   807f4:	bf14      	ite	ne
   807f6:	f040 0102 	orrne.w	r1, r0, #2
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   807fa:	f040 0106 	orreq.w	r1, r0, #6
	}

	writeByte_register( RF_SETUP, setup ) ;
   807fe:	2006      	movs	r0, #6
   80800:	4b05      	ldr	r3, [pc, #20]	; (80818 <RF_SetPALevel+0x3c>)
   80802:	4798      	blx	r3
   80804:	bd10      	pop	{r4, pc}
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
   80806:	f040 0106 	orr.w	r1, r0, #6
   8080a:	e7f8      	b.n	807fe <RF_SetPALevel+0x22>
		setup |= _BV(RF_PWR_HIGH) ;
   8080c:	f040 0106 	orr.w	r1, r0, #6
   80810:	e7f5      	b.n	807fe <RF_SetPALevel+0x22>
   80812:	bf00      	nop
   80814:	000806cd 	.word	0x000806cd
   80818:	00080639 	.word	0x00080639

0008081c <RF_setDataRate>:
}


bool RF_setDataRate(rf24_datarate_e speed)
{
   8081c:	b510      	push	{r4, lr}
   8081e:	4604      	mov	r4, r0
	bool result = false;
	uint8_t setup = readByte_register(RF_SETUP) ;
   80820:	2006      	movs	r0, #6
   80822:	4b09      	ldr	r3, [pc, #36]	; (80848 <RF_setDataRate+0x2c>)
   80824:	4798      	blx	r3

	// HIGH and LOW '00' is 1Mbs - our default
	//wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
   80826:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
   8082a:	2c02      	cmp	r4, #2
   8082c:	d008      	beq.n	80840 <RF_setDataRate+0x24>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
   8082e:	2c01      	cmp	r4, #1
		{
			//wide_band = true ;
			setup |= _BV(RF_DR_HIGH);
   80830:	bf08      	it	eq
   80832:	f041 0108 	orreq.w	r1, r1, #8
		{
			// 1Mbs
			//wide_band = false ;
		}
	}
	writeByte_register(RF_SETUP,setup);
   80836:	2006      	movs	r0, #6
   80838:	4b04      	ldr	r3, [pc, #16]	; (8084c <RF_setDataRate+0x30>)
   8083a:	4798      	blx	r3
	//	sprintf(out_str2,"Daniel %u setup %u \n", setup2,setup);
		//PrintLn(out_str2);
	}
	#endif*/
	return result;
}
   8083c:	2000      	movs	r0, #0
   8083e:	bd10      	pop	{r4, pc}
		setup |= _BV( RF_DR_LOW ) ;
   80840:	f041 0120 	orr.w	r1, r1, #32
   80844:	e7f7      	b.n	80836 <RF_setDataRate+0x1a>
   80846:	bf00      	nop
   80848:	000806cd 	.word	0x000806cd
   8084c:	00080639 	.word	0x00080639

00080850 <RF_setCRCLength>:

void RF_setCRCLength(rf24_crclength_e length)
{
   80850:	b510      	push	{r4, lr}
   80852:	4604      	mov	r4, r0
	uint8_t config = readByte_register(CONFIG) & ~( _BV(CRCO) | _BV(EN_CRC)) ;
   80854:	2000      	movs	r0, #0
   80856:	4b07      	ldr	r3, [pc, #28]	; (80874 <RF_setCRCLength+0x24>)
   80858:	4798      	blx	r3
   8085a:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	
	// switch uses RAM (evil!)
	if ( length == RF24_CRC_DISABLED )
   8085e:	b12c      	cbz	r4, 8086c <RF_setCRCLength+0x1c>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
   80860:	2c01      	cmp	r4, #1
	{
		config |= _BV(EN_CRC);
   80862:	bf0c      	ite	eq
   80864:	f041 0108 	orreq.w	r1, r1, #8
	}
	else
	{
		config |= _BV(EN_CRC);
		config |= _BV( CRCO );
   80868:	f041 010c 	orrne.w	r1, r1, #12
	}
	writeByte_register( CONFIG, config ) ;
   8086c:	2000      	movs	r0, #0
   8086e:	4b02      	ldr	r3, [pc, #8]	; (80878 <RF_setCRCLength+0x28>)
   80870:	4798      	blx	r3
   80872:	bd10      	pop	{r4, pc}
   80874:	000806cd 	.word	0x000806cd
   80878:	00080639 	.word	0x00080639

0008087c <RF_setChannel>:
}


void RF_setChannel(uint8_t channel)
{
   8087c:	b508      	push	{r3, lr}
	//const uint8_t max_channel = 127;
	uint8_t RF_CH2;
	
	writeByte_register(RF_CH,channel);
   8087e:	4601      	mov	r1, r0
   80880:	2005      	movs	r0, #5
   80882:	4b03      	ldr	r3, [pc, #12]	; (80890 <RF_setChannel+0x14>)
   80884:	4798      	blx	r3
	// Verify our result
	if ( (RF_CH2=readByte_register(RF_CH)) == channel )
   80886:	2005      	movs	r0, #5
   80888:	4b02      	ldr	r3, [pc, #8]	; (80894 <RF_setChannel+0x18>)
   8088a:	4798      	blx	r3
   8088c:	bd08      	pop	{r3, pc}
   8088e:	bf00      	nop
   80890:	00080639 	.word	0x00080639
   80894:	000806cd 	.word	0x000806cd

00080898 <flush_rx>:
	//	PrintLn(out_str2);
	}
	
}
void flush_rx(void)
{
   80898:	b500      	push	{lr}
   8089a:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_RX;
   8089c:	a802      	add	r0, sp, #8
   8089e:	23e2      	movs	r3, #226	; 0xe2
   808a0:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   808a4:	4a05      	ldr	r2, [pc, #20]	; (808bc <flush_rx+0x24>)
   808a6:	2101      	movs	r1, #1
   808a8:	4b05      	ldr	r3, [pc, #20]	; (808c0 <flush_rx+0x28>)
   808aa:	4798      	blx	r3
   808ac:	b110      	cbz	r0, 808b4 <flush_rx+0x1c>
		PrintLn("Error\n");
}
   808ae:	b003      	add	sp, #12
   808b0:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   808b4:	4803      	ldr	r0, [pc, #12]	; (808c4 <flush_rx+0x2c>)
   808b6:	4b04      	ldr	r3, [pc, #16]	; (808c8 <flush_rx+0x30>)
   808b8:	4798      	blx	r3
}
   808ba:	e7f8      	b.n	808ae <flush_rx+0x16>
   808bc:	20070fb4 	.word	0x20070fb4
   808c0:	00080e05 	.word	0x00080e05
   808c4:	0008633c 	.word	0x0008633c
   808c8:	00080635 	.word	0x00080635

000808cc <flush_tx>:

/****************************************************************************/

void flush_tx(void)
{
   808cc:	b500      	push	{lr}
   808ce:	b083      	sub	sp, #12
	uint16_t Cmd[1];
	Cmd[0] = FLUSH_TX;
   808d0:	a802      	add	r0, sp, #8
   808d2:	23e1      	movs	r3, #225	; 0xe1
   808d4:	f820 3d04 	strh.w	r3, [r0, #-4]!
	if(!SPIC_Write(Cmd, 1, &StatusRegister))
   808d8:	4a05      	ldr	r2, [pc, #20]	; (808f0 <flush_tx+0x24>)
   808da:	2101      	movs	r1, #1
   808dc:	4b05      	ldr	r3, [pc, #20]	; (808f4 <flush_tx+0x28>)
   808de:	4798      	blx	r3
   808e0:	b110      	cbz	r0, 808e8 <flush_tx+0x1c>
		PrintLn("Error\n");
}
   808e2:	b003      	add	sp, #12
   808e4:	f85d fb04 	ldr.w	pc, [sp], #4
		PrintLn("Error\n");
   808e8:	4803      	ldr	r0, [pc, #12]	; (808f8 <flush_tx+0x2c>)
   808ea:	4b04      	ldr	r3, [pc, #16]	; (808fc <flush_tx+0x30>)
   808ec:	4798      	blx	r3
}
   808ee:	e7f8      	b.n	808e2 <flush_tx+0x16>
   808f0:	20070fb4 	.word	0x20070fb4
   808f4:	00080e05 	.word	0x00080e05
   808f8:	0008633c 	.word	0x0008633c
   808fc:	00080635 	.word	0x00080635

00080900 <RF_OpenWritePipe>:

void RF_OpenWritePipe()
{
   80900:	b508      	push	{r3, lr}
	writeBuf_register(TX_ADDR, pipe0, 5);
   80902:	2205      	movs	r2, #5
   80904:	4902      	ldr	r1, [pc, #8]	; (80910 <RF_OpenWritePipe+0x10>)
   80906:	2010      	movs	r0, #16
   80908:	4b02      	ldr	r3, [pc, #8]	; (80914 <RF_OpenWritePipe+0x14>)
   8090a:	4798      	blx	r3
   8090c:	bd08      	pop	{r3, pc}
   8090e:	bf00      	nop
   80910:	000862f0 	.word	0x000862f0
   80914:	00080679 	.word	0x00080679

00080918 <RF_InitTX>:
}

void RF_InitTX()
{
   80918:	b510      	push	{r4, lr}
   8091a:	b084      	sub	sp, #16
	uint16_t Response[5]= {0,0,0,0,0};
   8091c:	2300      	movs	r3, #0
   8091e:	9301      	str	r3, [sp, #4]
   80920:	9302      	str	r3, [sp, #8]
   80922:	f8ad 300c 	strh.w	r3, [sp, #12]
	int i;
	RF_DisActive();
   80926:	4b1a      	ldr	r3, [pc, #104]	; (80990 <RF_InitTX+0x78>)
   80928:	4798      	blx	r3
   8092a:	23ff      	movs	r3, #255	; 0xff
	//little delay
	for(i=0;i<0xff;i++)
   8092c:	3b01      	subs	r3, #1
   8092e:	d1fd      	bne.n	8092c <RF_InitTX+0x14>
		__NOP;
	
	
	// Disable auto-retransmit
	writeByte_register(SETUP_RETR,(0b0100 << ARD) | (0 << ARC));
   80930:	2140      	movs	r1, #64	; 0x40
   80932:	2004      	movs	r0, #4
   80934:	4b17      	ldr	r3, [pc, #92]	; (80994 <RF_InitTX+0x7c>)
   80936:	4798      	blx	r3
	// You can configure the RF24 when power-down , stand-by or RX,TX mode
	RF_SetPALevel(RF24_PA_MAX);
   80938:	2003      	movs	r0, #3
   8093a:	4b17      	ldr	r3, [pc, #92]	; (80998 <RF_InitTX+0x80>)
   8093c:	4798      	blx	r3
	if(!RF_setDataRate(RF24_250KBPS))
   8093e:	2002      	movs	r0, #2
   80940:	4b16      	ldr	r3, [pc, #88]	; (8099c <RF_InitTX+0x84>)
   80942:	4798      	blx	r3
   80944:	b1f8      	cbz	r0, 80986 <RF_InitTX+0x6e>
		PrintLn("Error3\n");
	// Initialize no CRC
	RF_setCRCLength(RF24_CRC_DISABLED);
   80946:	2000      	movs	r0, #0
   80948:	4b15      	ldr	r3, [pc, #84]	; (809a0 <RF_InitTX+0x88>)
   8094a:	4798      	blx	r3
	// Disable dynamic payloads, to match dynamic_payloads_enabled setting
	writeByte_register(DYNPD,0);
   8094c:	2100      	movs	r1, #0
   8094e:	201c      	movs	r0, #28
   80950:	4c10      	ldr	r4, [pc, #64]	; (80994 <RF_InitTX+0x7c>)
   80952:	47a0      	blx	r4
	// Reset current status
	// Notice reset and flush is the last thing we do
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   80954:	2170      	movs	r1, #112	; 0x70
   80956:	2007      	movs	r0, #7
   80958:	47a0      	blx	r4
	// Set up default configuration.  Callers can always change it later.
	// This channel should be universally safe and not bleed over into adjacent
	// spectrum.
	RF_setChannel(76);
   8095a:	204c      	movs	r0, #76	; 0x4c
   8095c:	4b11      	ldr	r3, [pc, #68]	; (809a4 <RF_InitTX+0x8c>)
   8095e:	4798      	blx	r3
	// NO_ACK Mode
	writeByte_register(EN_AA, 0);
   80960:	2100      	movs	r1, #0
   80962:	2001      	movs	r0, #1
   80964:	47a0      	blx	r4
	// Flush buffers
	flush_rx();
   80966:	4b10      	ldr	r3, [pc, #64]	; (809a8 <RF_InitTX+0x90>)
   80968:	4798      	blx	r3
	flush_tx();
   8096a:	4b10      	ldr	r3, [pc, #64]	; (809ac <RF_InitTX+0x94>)
   8096c:	4798      	blx	r3
	// Route the packet to PTX address at pipe0
	RF_OpenWritePipe();
   8096e:	4b10      	ldr	r3, [pc, #64]	; (809b0 <RF_InitTX+0x98>)
   80970:	4798      	blx	r3
	RF_PowerUpTXmode();
   80972:	4b10      	ldr	r3, [pc, #64]	; (809b4 <RF_InitTX+0x9c>)
   80974:	4798      	blx	r3
	
	RF_ActiveUp();
   80976:	4b10      	ldr	r3, [pc, #64]	; (809b8 <RF_InitTX+0xa0>)
   80978:	4798      	blx	r3
	readByte_register(RF_CH);
	readByte_register(SETUP_RETR);
	readByte_register(DYNPD);
	readByte_register(STATUS);
	readByte_register(EN_AA);*/
	readBuf_register(TX_ADDR,Response);
   8097a:	a901      	add	r1, sp, #4
   8097c:	2010      	movs	r0, #16
   8097e:	4b0f      	ldr	r3, [pc, #60]	; (809bc <RF_InitTX+0xa4>)
   80980:	4798      	blx	r3
	
}
   80982:	b004      	add	sp, #16
   80984:	bd10      	pop	{r4, pc}
		PrintLn("Error3\n");
   80986:	480e      	ldr	r0, [pc, #56]	; (809c0 <RF_InitTX+0xa8>)
   80988:	4b0e      	ldr	r3, [pc, #56]	; (809c4 <RF_InitTX+0xac>)
   8098a:	4798      	blx	r3
   8098c:	e7db      	b.n	80946 <RF_InitTX+0x2e>
   8098e:	bf00      	nop
   80990:	000807a5 	.word	0x000807a5
   80994:	00080639 	.word	0x00080639
   80998:	000807dd 	.word	0x000807dd
   8099c:	0008081d 	.word	0x0008081d
   809a0:	00080851 	.word	0x00080851
   809a4:	0008087d 	.word	0x0008087d
   809a8:	00080899 	.word	0x00080899
   809ac:	000808cd 	.word	0x000808cd
   809b0:	00080901 	.word	0x00080901
   809b4:	000807b5 	.word	0x000807b5
   809b8:	00080795 	.word	0x00080795
   809bc:	00080725 	.word	0x00080725
   809c0:	000862dc 	.word	0x000862dc
   809c4:	00080635 	.word	0x00080635

000809c8 <RF_SendBell>:


void RF_SendBell(uint16_t CmdID)
{
   809c8:	b510      	push	{r4, lr}
   809ca:	b082      	sub	sp, #8
   809cc:	4604      	mov	r4, r0
	uint16_t Cmd[2];
	writeByte_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
   809ce:	2170      	movs	r1, #112	; 0x70
   809d0:	2007      	movs	r0, #7
   809d2:	4b0e      	ldr	r3, [pc, #56]	; (80a0c <RF_SendBell+0x44>)
   809d4:	4798      	blx	r3
	Cmd[0] = W_TX_PAYLOAD;
   809d6:	23a0      	movs	r3, #160	; 0xa0
   809d8:	f8ad 3004 	strh.w	r3, [sp, #4]
	Cmd[1] = CmdID;
   809dc:	f8ad 4006 	strh.w	r4, [sp, #6]
	Timer_Sleep(10);
   809e0:	200a      	movs	r0, #10
   809e2:	4b0b      	ldr	r3, [pc, #44]	; (80a10 <RF_SendBell+0x48>)
   809e4:	4798      	blx	r3
	if(!SPIC_Write(Cmd, 2, &StatusRegister))
   809e6:	4a0b      	ldr	r2, [pc, #44]	; (80a14 <RF_SendBell+0x4c>)
   809e8:	2102      	movs	r1, #2
   809ea:	a801      	add	r0, sp, #4
   809ec:	4b0a      	ldr	r3, [pc, #40]	; (80a18 <RF_SendBell+0x50>)
   809ee:	4798      	blx	r3
   809f0:	b138      	cbz	r0, 80a02 <RF_SendBell+0x3a>
		PrintLn("Error\n");
	Timer_Sleep(10);
   809f2:	200a      	movs	r0, #10
   809f4:	4b06      	ldr	r3, [pc, #24]	; (80a10 <RF_SendBell+0x48>)
   809f6:	4798      	blx	r3
	PrintLn("Send RF \n");
   809f8:	4808      	ldr	r0, [pc, #32]	; (80a1c <RF_SendBell+0x54>)
   809fa:	4b09      	ldr	r3, [pc, #36]	; (80a20 <RF_SendBell+0x58>)
   809fc:	4798      	blx	r3
   809fe:	b002      	add	sp, #8
   80a00:	bd10      	pop	{r4, pc}
		PrintLn("Error\n");
   80a02:	4808      	ldr	r0, [pc, #32]	; (80a24 <RF_SendBell+0x5c>)
   80a04:	4b06      	ldr	r3, [pc, #24]	; (80a20 <RF_SendBell+0x58>)
   80a06:	4798      	blx	r3
   80a08:	e7f3      	b.n	809f2 <RF_SendBell+0x2a>
   80a0a:	bf00      	nop
   80a0c:	00080639 	.word	0x00080639
   80a10:	00080ffd 	.word	0x00080ffd
   80a14:	20070fb4 	.word	0x20070fb4
   80a18:	00080e05 	.word	0x00080e05
   80a1c:	000862e4 	.word	0x000862e4
   80a20:	00080635 	.word	0x00080635
   80a24:	0008633c 	.word	0x0008633c

00080a28 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   80a28:	6843      	ldr	r3, [r0, #4]
   80a2a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80a2e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   80a30:	6843      	ldr	r3, [r0, #4]
   80a32:	0409      	lsls	r1, r1, #16
   80a34:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   80a38:	4319      	orrs	r1, r3
   80a3a:	6041      	str	r1, [r0, #4]
   80a3c:	4770      	bx	lr

00080a3e <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   80a3e:	6843      	ldr	r3, [r0, #4]
   80a40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80a44:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   80a46:	6843      	ldr	r3, [r0, #4]
   80a48:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   80a4c:	6041      	str	r1, [r0, #4]
   80a4e:	4770      	bx	lr

00080a50 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80a50:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80a52:	f643 2399 	movw	r3, #15001	; 0x3a99
   80a56:	6904      	ldr	r4, [r0, #16]
   80a58:	f014 0f01 	tst.w	r4, #1
   80a5c:	d103      	bne.n	80a66 <spi_read+0x16>
		if (!timeout--) {
   80a5e:	3b01      	subs	r3, #1
   80a60:	d1f9      	bne.n	80a56 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
   80a62:	2001      	movs	r0, #1
   80a64:	e009      	b.n	80a7a <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
   80a66:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80a68:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80a6a:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80a6e:	bf1c      	itt	ne
   80a70:	f3c3 4003 	ubfxne	r0, r3, #16, #4
   80a74:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80a76:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
   80a78:	2000      	movs	r0, #0
}
   80a7a:	bc10      	pop	{r4}
   80a7c:	4770      	bx	lr

00080a7e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80a7e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80a80:	f643 2499 	movw	r4, #15001	; 0x3a99
   80a84:	6905      	ldr	r5, [r0, #16]
   80a86:	f015 0f02 	tst.w	r5, #2
   80a8a:	d103      	bne.n	80a94 <spi_write+0x16>
		if (!timeout--) {
   80a8c:	3c01      	subs	r4, #1
   80a8e:	d1f9      	bne.n	80a84 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
   80a90:	2001      	movs	r0, #1
   80a92:	e00c      	b.n	80aae <spi_write+0x30>
   80a94:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   80a96:	f014 0f02 	tst.w	r4, #2
   80a9a:	d006      	beq.n	80aaa <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   80a9c:	0412      	lsls	r2, r2, #16
   80a9e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80aa2:	4311      	orrs	r1, r2
		if (uc_last) {
   80aa4:	b10b      	cbz	r3, 80aaa <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
   80aa6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   80aaa:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   80aac:	2000      	movs	r0, #0
}
   80aae:	bc30      	pop	{r4, r5}
   80ab0:	4770      	bx	lr

00080ab2 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   80ab2:	b932      	cbnz	r2, 80ac2 <spi_set_clock_polarity+0x10>
   80ab4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80ab8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80aba:	f023 0301 	bic.w	r3, r3, #1
   80abe:	6303      	str	r3, [r0, #48]	; 0x30
   80ac0:	4770      	bx	lr
   80ac2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80ac6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ac8:	f043 0301 	orr.w	r3, r3, #1
   80acc:	6303      	str	r3, [r0, #48]	; 0x30
   80ace:	4770      	bx	lr

00080ad0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   80ad0:	b932      	cbnz	r2, 80ae0 <spi_set_clock_phase+0x10>
   80ad2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80ad6:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ad8:	f023 0302 	bic.w	r3, r3, #2
   80adc:	6303      	str	r3, [r0, #48]	; 0x30
   80ade:	4770      	bx	lr
   80ae0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80ae4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80ae6:	f043 0302 	orr.w	r3, r3, #2
   80aea:	6303      	str	r3, [r0, #48]	; 0x30
   80aec:	4770      	bx	lr

00080aee <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   80aee:	2a04      	cmp	r2, #4
   80af0:	d003      	beq.n	80afa <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   80af2:	b16a      	cbz	r2, 80b10 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   80af4:	2a08      	cmp	r2, #8
   80af6:	d016      	beq.n	80b26 <spi_configure_cs_behavior+0x38>
   80af8:	4770      	bx	lr
   80afa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80afe:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b00:	f023 0308 	bic.w	r3, r3, #8
   80b04:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   80b06:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b08:	f043 0304 	orr.w	r3, r3, #4
   80b0c:	6303      	str	r3, [r0, #48]	; 0x30
   80b0e:	4770      	bx	lr
   80b10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80b14:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b16:	f023 0308 	bic.w	r3, r3, #8
   80b1a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80b1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b1e:	f023 0304 	bic.w	r3, r3, #4
   80b22:	6303      	str	r3, [r0, #48]	; 0x30
   80b24:	4770      	bx	lr
   80b26:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80b2a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   80b2c:	f043 0308 	orr.w	r3, r3, #8
   80b30:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
   80b32:	e7e1      	b.n	80af8 <spi_configure_cs_behavior+0xa>

00080b34 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80b34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80b38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   80b3e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80b40:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b42:	431a      	orrs	r2, r3
   80b44:	630a      	str	r2, [r1, #48]	; 0x30
   80b46:	4770      	bx	lr

00080b48 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
   80b48:	b172      	cbz	r2, 80b68 <spi_set_baudrate_div+0x20>
{
   80b4a:	b410      	push	{r4}
   80b4c:	4614      	mov	r4, r2
   80b4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   80b52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   80b58:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80b5a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   80b5c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   80b60:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
   80b62:	2000      	movs	r0, #0
}
   80b64:	bc10      	pop	{r4}
   80b66:	4770      	bx	lr
        return -1;
   80b68:	f04f 30ff 	mov.w	r0, #4294967295
   80b6c:	4770      	bx	lr

00080b6e <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80b6e:	b410      	push	{r4}
   80b70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   80b74:	6b08      	ldr	r0, [r1, #48]	; 0x30
   80b76:	b280      	uxth	r0, r0
   80b78:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80b7a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   80b7c:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   80b80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   80b84:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   80b86:	bc10      	pop	{r4}
   80b88:	4770      	bx	lr
	...

00080b8c <spi_set_writeprotect>:
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE | SPI_WPCR_SPIWPEN;
	} else {
		p_spi->SPI_WPCR = SPI_WPCR_SPIWPKEY_VALUE;
	}
#else
	if (ul_enable) {
   80b8c:	b919      	cbnz	r1, 80b96 <spi_set_writeprotect+0xa>
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
	} else {
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD;
   80b8e:	4b04      	ldr	r3, [pc, #16]	; (80ba0 <spi_set_writeprotect+0x14>)
   80b90:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b94:	4770      	bx	lr
		p_spi->SPI_WPMR = SPI_WPMR_WPKEY_PASSWD | SPI_WPMR_WPEN;
   80b96:	4b03      	ldr	r3, [pc, #12]	; (80ba4 <spi_set_writeprotect+0x18>)
   80b98:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80b9c:	4770      	bx	lr
   80b9e:	bf00      	nop
   80ba0:	53504900 	.word	0x53504900
   80ba4:	53504901 	.word	0x53504901

00080ba8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80ba8:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80baa:	0189      	lsls	r1, r1, #6
   80bac:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80bae:	2402      	movs	r4, #2
   80bb0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80bb2:	f04f 31ff 	mov.w	r1, #4294967295
   80bb6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80bb8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80bba:	605a      	str	r2, [r3, #4]
}
   80bbc:	bc10      	pop	{r4}
   80bbe:	4770      	bx	lr

00080bc0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80bc0:	0189      	lsls	r1, r1, #6
   80bc2:	2305      	movs	r3, #5
   80bc4:	5043      	str	r3, [r0, r1]
   80bc6:	4770      	bx	lr

00080bc8 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80bc8:	0189      	lsls	r1, r1, #6
   80bca:	2302      	movs	r3, #2
   80bcc:	5043      	str	r3, [r0, r1]
   80bce:	4770      	bx	lr

00080bd0 <tc_set_writeprotect>:
		uint32_t ul_enable)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	if (ul_enable) {
   80bd0:	b919      	cbnz	r1, 80bda <tc_set_writeprotect+0xa>
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
	} else {
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD;
   80bd2:	4b04      	ldr	r3, [pc, #16]	; (80be4 <tc_set_writeprotect+0x14>)
   80bd4:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80bd8:	4770      	bx	lr
		p_tc->TC_WPMR = TC_WPMR_WPKEY_PASSWD | TC_WPMR_WPEN;
   80bda:	4b03      	ldr	r3, [pc, #12]	; (80be8 <tc_set_writeprotect+0x18>)
   80bdc:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
   80be0:	4770      	bx	lr
   80be2:	bf00      	nop
   80be4:	54494d00 	.word	0x54494d00
   80be8:	54494d01 	.word	0x54494d01

00080bec <ADCC_Init>:
#include "ADCC.h"

uint16_t ADCC_GlobalRawData[ADC_NUM_CHANNELS];

void ADCC_Init()
{
   80bec:	b570      	push	{r4, r5, r6, lr}
	pmc_enable_periph_clk(ID_ADC);
   80bee:	2025      	movs	r0, #37	; 0x25
   80bf0:	4b21      	ldr	r3, [pc, #132]	; (80c78 <ADCC_Init+0x8c>)
   80bf2:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(),sysclk_get_main_hz()/4, ADC_STARTUP_TIME_5);
   80bf4:	4c21      	ldr	r4, [pc, #132]	; (80c7c <ADCC_Init+0x90>)
   80bf6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
   80bfa:	4a21      	ldr	r2, [pc, #132]	; (80c80 <ADCC_Init+0x94>)
   80bfc:	4921      	ldr	r1, [pc, #132]	; (80c84 <ADCC_Init+0x98>)
   80bfe:	4620      	mov	r0, r4
   80c00:	4d21      	ldr	r5, [pc, #132]	; (80c88 <ADCC_Init+0x9c>)
   80c02:	47a8      	blx	r5
	adc_configure_timing(ADC,20,ADC_SETTLING_TIME_0,50);
   80c04:	2332      	movs	r3, #50	; 0x32
   80c06:	2200      	movs	r2, #0
   80c08:	2114      	movs	r1, #20
   80c0a:	4620      	mov	r0, r4
   80c0c:	4d1f      	ldr	r5, [pc, #124]	; (80c8c <ADCC_Init+0xa0>)
   80c0e:	47a8      	blx	r5
	adc_configure_trigger(ADC,ADC_TRIG_TIO_CH_0,0);
   80c10:	2200      	movs	r2, #0
   80c12:	2103      	movs	r1, #3
   80c14:	4620      	mov	r0, r4
   80c16:	4b1e      	ldr	r3, [pc, #120]	; (80c90 <ADCC_Init+0xa4>)
   80c18:	4798      	blx	r3
	adc_disable_all_channel(ADC);
   80c1a:	4620      	mov	r0, r4
   80c1c:	4b1d      	ldr	r3, [pc, #116]	; (80c94 <ADCC_Init+0xa8>)
   80c1e:	4798      	blx	r3
	adc_disable_interrupt(ADC, 0xFFFFFFFF);
   80c20:	f04f 31ff 	mov.w	r1, #4294967295
   80c24:	4620      	mov	r0, r4
   80c26:	4b1c      	ldr	r3, [pc, #112]	; (80c98 <ADCC_Init+0xac>)
   80c28:	4798      	blx	r3
	adc_set_resolution(ADC, ADC_12_BITS);
   80c2a:	2100      	movs	r1, #0
   80c2c:	4620      	mov	r0, r4
   80c2e:	4b1b      	ldr	r3, [pc, #108]	; (80c9c <ADCC_Init+0xb0>)
   80c30:	4798      	blx	r3
	ADC->ADC_PTCR =  ADC_PTCR_RXTEN;
   80c32:	2601      	movs	r6, #1
   80c34:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
	ADC->ADC_RPR = (uint32_t)ADCC_GlobalRawData;
   80c38:	4a19      	ldr	r2, [pc, #100]	; (80ca0 <ADCC_Init+0xb4>)
   80c3a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
	ADC->ADC_RCR = ADC_NUM_CHANNELS;
   80c3e:	2303      	movs	r3, #3
   80c40:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	ADC->ADC_RNPR =  (uint32_t)ADCC_GlobalRawData;
   80c44:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
	ADC->ADC_RNCR = ADC_NUM_CHANNELS;
   80c48:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	adc_enable_channel(ADC,ADC_CHANNEL_0);
   80c4c:	2100      	movs	r1, #0
   80c4e:	4620      	mov	r0, r4
   80c50:	4d14      	ldr	r5, [pc, #80]	; (80ca4 <ADCC_Init+0xb8>)
   80c52:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_1);
   80c54:	4631      	mov	r1, r6
   80c56:	4620      	mov	r0, r4
   80c58:	47a8      	blx	r5
	adc_enable_channel(ADC,ADC_CHANNEL_2);
   80c5a:	2102      	movs	r1, #2
   80c5c:	4620      	mov	r0, r4
   80c5e:	47a8      	blx	r5
	//adc_enable_interrupt(ADC,ADC_IER_EOC0);
	adc_enable_interrupt(ADC,ADC_IER_ENDRX);
   80c60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c64:	4620      	mov	r0, r4
   80c66:	4b10      	ldr	r3, [pc, #64]	; (80ca8 <ADCC_Init+0xbc>)
   80c68:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80c6a:	2220      	movs	r2, #32
   80c6c:	4b0f      	ldr	r3, [pc, #60]	; (80cac <ADCC_Init+0xc0>)
   80c6e:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(ADC_IRQn);	
	adc_start(ADC);
   80c70:	4620      	mov	r0, r4
   80c72:	4b0f      	ldr	r3, [pc, #60]	; (80cb0 <ADCC_Init+0xc4>)
   80c74:	4798      	blx	r3
   80c76:	bd70      	pop	{r4, r5, r6, pc}
   80c78:	000814f9 	.word	0x000814f9
   80c7c:	400c0000 	.word	0x400c0000
   80c80:	0280de80 	.word	0x0280de80
   80c84:	0a037a00 	.word	0x0a037a00
   80c88:	00080161 	.word	0x00080161
   80c8c:	000801b3 	.word	0x000801b3
   80c90:	000801a5 	.word	0x000801a5
   80c94:	000801e5 	.word	0x000801e5
   80c98:	000801f1 	.word	0x000801f1
   80c9c:	00080195 	.word	0x00080195
   80ca0:	20071068 	.word	0x20071068
   80ca4:	000801db 	.word	0x000801db
   80ca8:	000801ed 	.word	0x000801ed
   80cac:	e000e100 	.word	0xe000e100
   80cb0:	000801cf 	.word	0x000801cf

00080cb4 <SPI_InitPIO>:
	//Because we are using PORTB.PIN25 in peripheral B mode
	//	we need to enable the clock for that line.
	//PMC->PMC_PCER0 |= _BV(ID_PIOA);
	
	//configure for input
	PIOA->PIO_PDR |= PIO_PA25;
   80cb4:	4b1a      	ldr	r3, [pc, #104]	; (80d20 <SPI_InitPIO+0x6c>)
   80cb6:	685a      	ldr	r2, [r3, #4]
   80cb8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80cbc:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ODR |= PIO_PA25;		//Input
   80cbe:	695a      	ldr	r2, [r3, #20]
   80cc0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80cc4:	615a      	str	r2, [r3, #20]
	PIOA->PIO_PUER |= PIO_PA25;		//pull-up
   80cc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80cc8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   80ccc:	665a      	str	r2, [r3, #100]	; 0x64
	
	PIOA->PIO_PDR |= PIO_PA26;		//MOSI
   80cce:	685a      	ldr	r2, [r3, #4]
   80cd0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80cd4:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA26;		//MOSI	Output
   80cd6:	691a      	ldr	r2, [r3, #16]
   80cd8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80cdc:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA26;	//Peripheral A
   80cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80ce0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   80ce4:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA27;		//SPCK
   80ce6:	685a      	ldr	r2, [r3, #4]
   80ce8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80cec:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA27;		//SPCK	Output
   80cee:	691a      	ldr	r2, [r3, #16]
   80cf0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   80cf4:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA27;	//Peripheral A
   80cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cf8:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
   80cfc:	671a      	str	r2, [r3, #112]	; 0x70
	
	PIOA->PIO_PDR |= PIO_PA28;		//NPCS0
   80cfe:	685a      	ldr	r2, [r3, #4]
   80d00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d04:	605a      	str	r2, [r3, #4]
	PIOA->PIO_OER |= PIO_PA28;		//NPCS0	Output
   80d06:	691a      	ldr	r2, [r3, #16]
   80d08:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d0c:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ABSR &= ~PIO_PA28;	//Peripheral A
   80d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d10:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   80d14:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER |= PIO_PA28;		//pull-up
   80d16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   80d18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   80d1c:	665a      	str	r2, [r3, #100]	; 0x64
   80d1e:	4770      	bx	lr
   80d20:	400e0e00 	.word	0x400e0e00

00080d24 <SPI_Init>:
}

void SPI_Init(void)
{
   80d24:	b538      	push	{r3, r4, r5, lr}
	int i;
	pmc_enable_periph_clk(ID_SPI0);
   80d26:	2018      	movs	r0, #24
   80d28:	4b2a      	ldr	r3, [pc, #168]	; (80dd4 <SPI_Init+0xb0>)
   80d2a:	4798      	blx	r3
	spi_set_writeprotect(SPI0, 0);
   80d2c:	4c2a      	ldr	r4, [pc, #168]	; (80dd8 <SPI_Init+0xb4>)
   80d2e:	2100      	movs	r1, #0
   80d30:	4620      	mov	r0, r4
   80d32:	4b2a      	ldr	r3, [pc, #168]	; (80ddc <SPI_Init+0xb8>)
   80d34:	4798      	blx	r3
	SPI_InitPIO();
   80d36:	4b2a      	ldr	r3, [pc, #168]	; (80de0 <SPI_Init+0xbc>)
   80d38:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
   80d3a:	2380      	movs	r3, #128	; 0x80
   80d3c:	6023      	str	r3, [r4, #0]
   80d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  __ASM volatile ("nop");
   80d42:	bf00      	nop
	spi_reset(SPI0);	
	for(i=0;i<0xffff;i++)
   80d44:	3b01      	subs	r3, #1
   80d46:	d1fc      	bne.n	80d42 <SPI_Init+0x1e>
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80d48:	4c23      	ldr	r4, [pc, #140]	; (80dd8 <SPI_Init+0xb4>)
   80d4a:	2302      	movs	r3, #2
   80d4c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80d4e:	6863      	ldr	r3, [r4, #4]
   80d50:	f043 0301 	orr.w	r3, r3, #1
   80d54:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80d56:	6863      	ldr	r3, [r4, #4]
   80d58:	f043 0310 	orr.w	r3, r3, #16
   80d5c:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80d5e:	6863      	ldr	r3, [r4, #4]
   80d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   80d64:	6063      	str	r3, [r4, #4]
		__NOP();
	spi_disable(SPI0);
	spi_set_master_mode(SPI0);
	spi_disable_mode_fault_detect(SPI0);
	spi_disable_loopback(SPI0);
	spi_set_peripheral_chip_select_value(SPI0, spi_get_pcs(DEFAULT_CHIP_ID)); //NPCS[3:0]=1110b
   80d66:	210e      	movs	r1, #14
   80d68:	4620      	mov	r0, r4
   80d6a:	4b1e      	ldr	r3, [pc, #120]	; (80de4 <SPI_Init+0xc0>)
   80d6c:	4798      	blx	r3
	p_spi->SPI_MR |= SPI_MR_PS;
   80d6e:	6863      	ldr	r3, [r4, #4]
   80d70:	f043 0302 	orr.w	r3, r3, #2
   80d74:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80d76:	6863      	ldr	r3, [r4, #4]
   80d78:	f023 0304 	bic.w	r3, r3, #4
   80d7c:	6063      	str	r3, [r4, #4]
	spi_set_variable_peripheral_select(SPI0);
	spi_disable_peripheral_select_decode(SPI0);
	spi_set_delay_between_chip_select(SPI0, 6);
   80d7e:	2106      	movs	r1, #6
   80d80:	4620      	mov	r0, r4
   80d82:	4b19      	ldr	r3, [pc, #100]	; (80de8 <SPI_Init+0xc4>)
   80d84:	4798      	blx	r3
	spi_set_clock_polarity(SPI0,0,false);
   80d86:	2200      	movs	r2, #0
   80d88:	4611      	mov	r1, r2
   80d8a:	4620      	mov	r0, r4
   80d8c:	4b17      	ldr	r3, [pc, #92]	; (80dec <SPI_Init+0xc8>)
   80d8e:	4798      	blx	r3
	spi_set_clock_phase(SPI0, 0, true);
   80d90:	2201      	movs	r2, #1
   80d92:	2100      	movs	r1, #0
   80d94:	4620      	mov	r0, r4
   80d96:	4b16      	ldr	r3, [pc, #88]	; (80df0 <SPI_Init+0xcc>)
   80d98:	4798      	blx	r3
	spi_set_baudrate_div(SPI0,0,21); //SCLK = 4Mhz
   80d9a:	2215      	movs	r2, #21
   80d9c:	2100      	movs	r1, #0
   80d9e:	4620      	mov	r0, r4
   80da0:	4b14      	ldr	r3, [pc, #80]	; (80df4 <SPI_Init+0xd0>)
   80da2:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI0,0,0);
   80da4:	2200      	movs	r2, #0
   80da6:	4611      	mov	r1, r2
   80da8:	4620      	mov	r0, r4
   80daa:	4b13      	ldr	r3, [pc, #76]	; (80df8 <SPI_Init+0xd4>)
   80dac:	4798      	blx	r3
	spi_set_transfer_delay(SPI0,0,10,1); //
   80dae:	2301      	movs	r3, #1
   80db0:	220a      	movs	r2, #10
   80db2:	2100      	movs	r1, #0
   80db4:	4620      	mov	r0, r4
   80db6:	4d11      	ldr	r5, [pc, #68]	; (80dfc <SPI_Init+0xd8>)
   80db8:	47a8      	blx	r5
	spi_configure_cs_behavior(SPI0, 0, SPI_CS_KEEP_LOW);
   80dba:	2208      	movs	r2, #8
   80dbc:	2100      	movs	r1, #0
   80dbe:	4620      	mov	r0, r4
   80dc0:	4b0f      	ldr	r3, [pc, #60]	; (80e00 <SPI_Init+0xdc>)
   80dc2:	4798      	blx	r3
	SPI0->SPI_IER = 0;	
   80dc4:	2300      	movs	r3, #0
   80dc6:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80dc8:	2101      	movs	r1, #1
   80dca:	6021      	str	r1, [r4, #0]
	spi_enable(SPI0);
	spi_set_writeprotect(SPI0, 1);
   80dcc:	4620      	mov	r0, r4
   80dce:	4b03      	ldr	r3, [pc, #12]	; (80ddc <SPI_Init+0xb8>)
   80dd0:	4798      	blx	r3
   80dd2:	bd38      	pop	{r3, r4, r5, pc}
   80dd4:	000814f9 	.word	0x000814f9
   80dd8:	40008000 	.word	0x40008000
   80ddc:	00080b8d 	.word	0x00080b8d
   80de0:	00080cb5 	.word	0x00080cb5
   80de4:	00080a29 	.word	0x00080a29
   80de8:	00080a3f 	.word	0x00080a3f
   80dec:	00080ab3 	.word	0x00080ab3
   80df0:	00080ad1 	.word	0x00080ad1
   80df4:	00080b49 	.word	0x00080b49
   80df8:	00080b35 	.word	0x00080b35
   80dfc:	00080b6f 	.word	0x00080b6f
   80e00:	00080aef 	.word	0x00080aef

00080e04 <SPIC_Write>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Write(uint16_t *data, int length, uint16_t *SR)
{
   80e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e08:	b085      	sub	sp, #20
   80e0a:	4682      	mov	sl, r0
   80e0c:	4689      	mov	r9, r1
   80e0e:	9201      	str	r2, [sp, #4]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80e10:	4b28      	ldr	r3, [pc, #160]	; (80eb4 <SPIC_Write+0xb0>)
   80e12:	691b      	ldr	r3, [r3, #16]
   80e14:	f013 0f01 	tst.w	r3, #1
   80e18:	d12b      	bne.n	80e72 <SPIC_Write+0x6e>
		spi_read(SPI0,SR,&Pcs);	
	if(length>1)
   80e1a:	f1b9 0f01 	cmp.w	r9, #1
   80e1e:	dd35      	ble.n	80e8c <SPIC_Write+0x88>
	{
		for (i=0; i<(length-1);i++)
   80e20:	f109 33ff 	add.w	r3, r9, #4294967295
   80e24:	2b00      	cmp	r3, #0
   80e26:	dd13      	ble.n	80e50 <SPIC_Write+0x4c>
   80e28:	f1aa 0502 	sub.w	r5, sl, #2
   80e2c:	4698      	mov	r8, r3
   80e2e:	2400      	movs	r4, #0
		{		
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80e30:	4e20      	ldr	r6, [pc, #128]	; (80eb4 <SPIC_Write+0xb0>)
   80e32:	4f21      	ldr	r7, [pc, #132]	; (80eb8 <SPIC_Write+0xb4>)
				return 0;
			if(i==0)
				spi_read(SPI0,SR,&Pcs);
   80e34:	f8df b084 	ldr.w	fp, [pc, #132]	; 80ebc <SPIC_Write+0xb8>
			if(spi_write(SPI0,data[i],0,0) != SPI_OK)
   80e38:	2300      	movs	r3, #0
   80e3a:	461a      	mov	r2, r3
   80e3c:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   80e40:	4630      	mov	r0, r6
   80e42:	47b8      	blx	r7
   80e44:	2800      	cmp	r0, #0
   80e46:	d133      	bne.n	80eb0 <SPIC_Write+0xac>
			if(i==0)
   80e48:	b1d4      	cbz	r4, 80e80 <SPIC_Write+0x7c>
		for (i=0; i<(length-1);i++)
   80e4a:	3401      	adds	r4, #1
   80e4c:	4544      	cmp	r4, r8
   80e4e:	d1f3      	bne.n	80e38 <SPIC_Write+0x34>
		}
		if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)
   80e50:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
   80e54:	f109 39ff 	add.w	r9, r9, #4294967295
   80e58:	2301      	movs	r3, #1
   80e5a:	2200      	movs	r2, #0
   80e5c:	f83a 1019 	ldrh.w	r1, [sl, r9, lsl #1]
   80e60:	4814      	ldr	r0, [pc, #80]	; (80eb4 <SPIC_Write+0xb0>)
   80e62:	4c15      	ldr	r4, [pc, #84]	; (80eb8 <SPIC_Write+0xb4>)
   80e64:	47a0      	blx	r4
				return 0;
   80e66:	fab0 f080 	clz	r0, r0
   80e6a:	0940      	lsrs	r0, r0, #5
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
			return 0;
		spi_read(SPI0,SR,&Pcs);
	}
	return 1;
}
   80e6c:	b005      	add	sp, #20
   80e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		spi_read(SPI0,SR,&Pcs);	
   80e72:	f10d 020f 	add.w	r2, sp, #15
   80e76:	9901      	ldr	r1, [sp, #4]
   80e78:	480e      	ldr	r0, [pc, #56]	; (80eb4 <SPIC_Write+0xb0>)
   80e7a:	4b10      	ldr	r3, [pc, #64]	; (80ebc <SPIC_Write+0xb8>)
   80e7c:	4798      	blx	r3
   80e7e:	e7cc      	b.n	80e1a <SPIC_Write+0x16>
				spi_read(SPI0,SR,&Pcs);
   80e80:	f10d 020f 	add.w	r2, sp, #15
   80e84:	9901      	ldr	r1, [sp, #4]
   80e86:	4630      	mov	r0, r6
   80e88:	47d8      	blx	fp
   80e8a:	e7de      	b.n	80e4a <SPIC_Write+0x46>
		if(spi_write(SPI0,data[0],0,1) != SPI_OK)
   80e8c:	2301      	movs	r3, #1
   80e8e:	2200      	movs	r2, #0
   80e90:	f8ba 1000 	ldrh.w	r1, [sl]
   80e94:	4807      	ldr	r0, [pc, #28]	; (80eb4 <SPIC_Write+0xb0>)
   80e96:	4c08      	ldr	r4, [pc, #32]	; (80eb8 <SPIC_Write+0xb4>)
   80e98:	47a0      	blx	r4
   80e9a:	b108      	cbz	r0, 80ea0 <SPIC_Write+0x9c>
			return 0;
   80e9c:	2000      	movs	r0, #0
   80e9e:	e7e5      	b.n	80e6c <SPIC_Write+0x68>
		spi_read(SPI0,SR,&Pcs);
   80ea0:	f10d 020f 	add.w	r2, sp, #15
   80ea4:	9901      	ldr	r1, [sp, #4]
   80ea6:	4803      	ldr	r0, [pc, #12]	; (80eb4 <SPIC_Write+0xb0>)
   80ea8:	4b04      	ldr	r3, [pc, #16]	; (80ebc <SPIC_Write+0xb8>)
   80eaa:	4798      	blx	r3
	return 1;
   80eac:	2001      	movs	r0, #1
   80eae:	e7dd      	b.n	80e6c <SPIC_Write+0x68>
				return 0;
   80eb0:	2000      	movs	r0, #0
   80eb2:	e7db      	b.n	80e6c <SPIC_Write+0x68>
   80eb4:	40008000 	.word	0x40008000
   80eb8:	00080a7f 	.word	0x00080a7f
   80ebc:	00080a51 	.word	0x00080a51

00080ec0 <SPIC_Read>:
*
* \retval 1 on Success.
* \retval 0 on Failure.
*/
uint16_t SPIC_Read(uint16_t *data, int length, uint16_t *SR, uint16_t *Resp)
{
   80ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ec4:	b087      	sub	sp, #28
   80ec6:	9001      	str	r0, [sp, #4]
   80ec8:	468b      	mov	fp, r1
   80eca:	9203      	str	r2, [sp, #12]
   80ecc:	9302      	str	r3, [sp, #8]
	int i;
	uint8_t Pcs;
	if(SPI0->SPI_SR & SPI_SR_RDRF) // Something to clear
   80ece:	4b2a      	ldr	r3, [pc, #168]	; (80f78 <SPIC_Read+0xb8>)
   80ed0:	691b      	ldr	r3, [r3, #16]
   80ed2:	f013 0f01 	tst.w	r3, #1
   80ed6:	d132      	bne.n	80f3e <SPIC_Read+0x7e>
		spi_read(SPI0,SR,&Pcs);
	for (i=0; i<(length-1);i++)
   80ed8:	f10b 33ff 	add.w	r3, fp, #4294967295
   80edc:	2b00      	cmp	r3, #0
   80ede:	dd1d      	ble.n	80f1c <SPIC_Read+0x5c>
   80ee0:	9b01      	ldr	r3, [sp, #4]
   80ee2:	1e9e      	subs	r6, r3, #2
   80ee4:	9b02      	ldr	r3, [sp, #8]
   80ee6:	1e9d      	subs	r5, r3, #2
   80ee8:	f10b 3aff 	add.w	sl, fp, #4294967295
   80eec:	2400      	movs	r4, #0
	{
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80eee:	4f22      	ldr	r7, [pc, #136]	; (80f78 <SPIC_Read+0xb8>)
   80ef0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80f7c <SPIC_Read+0xbc>
			return 0;
		if(i==0)
			spi_read(SPI0,SR,&Pcs);
		else
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80ef4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80f80 <SPIC_Read+0xc0>
		if(spi_write(SPI0,data[i],0,0) != SPI_OK)	
   80ef8:	2300      	movs	r3, #0
   80efa:	461a      	mov	r2, r3
   80efc:	f836 1f02 	ldrh.w	r1, [r6, #2]!
   80f00:	4638      	mov	r0, r7
   80f02:	47c0      	blx	r8
   80f04:	2800      	cmp	r0, #0
   80f06:	d132      	bne.n	80f6e <SPIC_Read+0xae>
		if(i==0)
   80f08:	b304      	cbz	r4, 80f4c <SPIC_Read+0x8c>
			spi_read(SPI0,&Resp[i-1],&Pcs);
   80f0a:	f10d 0217 	add.w	r2, sp, #23
   80f0e:	4629      	mov	r1, r5
   80f10:	4638      	mov	r0, r7
   80f12:	47c8      	blx	r9
	for (i=0; i<(length-1);i++)
   80f14:	3401      	adds	r4, #1
   80f16:	3502      	adds	r5, #2
   80f18:	4554      	cmp	r4, sl
   80f1a:	d1ed      	bne.n	80ef8 <SPIC_Read+0x38>
	}
	if(spi_write(SPI0,data[length-1],0,1) != SPI_OK)	
   80f1c:	f10b 4b00 	add.w	fp, fp, #2147483648	; 0x80000000
   80f20:	f10b 3bff 	add.w	fp, fp, #4294967295
   80f24:	ea4f 044b 	mov.w	r4, fp, lsl #1
   80f28:	2301      	movs	r3, #1
   80f2a:	2200      	movs	r2, #0
   80f2c:	9901      	ldr	r1, [sp, #4]
   80f2e:	f831 101b 	ldrh.w	r1, [r1, fp, lsl #1]
   80f32:	4811      	ldr	r0, [pc, #68]	; (80f78 <SPIC_Read+0xb8>)
   80f34:	4d11      	ldr	r5, [pc, #68]	; (80f7c <SPIC_Read+0xbc>)
   80f36:	47a8      	blx	r5
   80f38:	b170      	cbz	r0, 80f58 <SPIC_Read+0x98>
		return 0;
   80f3a:	2000      	movs	r0, #0
   80f3c:	e018      	b.n	80f70 <SPIC_Read+0xb0>
		spi_read(SPI0,SR,&Pcs);
   80f3e:	f10d 0217 	add.w	r2, sp, #23
   80f42:	9903      	ldr	r1, [sp, #12]
   80f44:	480c      	ldr	r0, [pc, #48]	; (80f78 <SPIC_Read+0xb8>)
   80f46:	4b0e      	ldr	r3, [pc, #56]	; (80f80 <SPIC_Read+0xc0>)
   80f48:	4798      	blx	r3
   80f4a:	e7c5      	b.n	80ed8 <SPIC_Read+0x18>
			spi_read(SPI0,SR,&Pcs);
   80f4c:	f10d 0217 	add.w	r2, sp, #23
   80f50:	9903      	ldr	r1, [sp, #12]
   80f52:	4638      	mov	r0, r7
   80f54:	47c8      	blx	r9
   80f56:	e7dd      	b.n	80f14 <SPIC_Read+0x54>
	spi_read(SPI0,&Resp[length-2],&Pcs);
   80f58:	1ea1      	subs	r1, r4, #2
   80f5a:	f10d 0217 	add.w	r2, sp, #23
   80f5e:	9b02      	ldr	r3, [sp, #8]
   80f60:	440b      	add	r3, r1
   80f62:	4619      	mov	r1, r3
   80f64:	4804      	ldr	r0, [pc, #16]	; (80f78 <SPIC_Read+0xb8>)
   80f66:	4b06      	ldr	r3, [pc, #24]	; (80f80 <SPIC_Read+0xc0>)
   80f68:	4798      	blx	r3
	return 1;
   80f6a:	2001      	movs	r0, #1
   80f6c:	e000      	b.n	80f70 <SPIC_Read+0xb0>
			return 0;
   80f6e:	2000      	movs	r0, #0
   80f70:	b007      	add	sp, #28
   80f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f76:	bf00      	nop
   80f78:	40008000 	.word	0x40008000
   80f7c:	00080a7f 	.word	0x00080a7f
   80f80:	00080a51 	.word	0x00080a51

00080f84 <Timer_init>:
 */ 
#include "Timer.h"
#include "Prints.h"

void Timer_init(void)
{
   80f84:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_TC0);
   80f86:	201b      	movs	r0, #27
   80f88:	4c14      	ldr	r4, [pc, #80]	; (80fdc <Timer_init+0x58>)
   80f8a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_TC1);
   80f8c:	201c      	movs	r0, #28
   80f8e:	47a0      	blx	r4
	tc_set_writeprotect(TC0,0);
   80f90:	4c13      	ldr	r4, [pc, #76]	; (80fe0 <Timer_init+0x5c>)
   80f92:	2100      	movs	r1, #0
   80f94:	4620      	mov	r0, r4
   80f96:	4b13      	ldr	r3, [pc, #76]	; (80fe4 <Timer_init+0x60>)
   80f98:	4798      	blx	r3
	
	REG_PIOB_ABSR |= PIO_ABSR_P25;     // Switch the multiplexer to peripheral B for TIOA0
   80f9a:	4a13      	ldr	r2, [pc, #76]	; (80fe8 <Timer_init+0x64>)
   80f9c:	6813      	ldr	r3, [r2, #0]
   80f9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80fa2:	6013      	str	r3, [r2, #0]
	REG_PIOB_PDR |= PIO_PDR_P25;        // Disable the GPIO on the corresponding pins
   80fa4:	3a6c      	subs	r2, #108	; 0x6c
   80fa6:	6813      	ldr	r3, [r2, #0]
   80fa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   80fac:	6013      	str	r3, [r2, #0]
	tc_init(TC0,0,TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC|TC_CMR_ACPA_SET|TC_CMR_ACPC_CLEAR|TC_CMR_TCCLKS_TIMER_CLOCK2); // divide MCLK by 8 
   80fae:	4a0f      	ldr	r2, [pc, #60]	; (80fec <Timer_init+0x68>)
   80fb0:	2100      	movs	r1, #0
   80fb2:	4620      	mov	r0, r4
   80fb4:	4d0e      	ldr	r5, [pc, #56]	; (80ff0 <Timer_init+0x6c>)
   80fb6:	47a8      	blx	r5
	tc_init(TC0,1,TC_CMR_TCCLKS_TIMER_CLOCK4); // divide MCLK by 128
   80fb8:	2203      	movs	r2, #3
   80fba:	2101      	movs	r1, #1
   80fbc:	4620      	mov	r0, r4
   80fbe:	47a8      	blx	r5
	TC0->TC_CHANNEL[0].TC_RC = 210;//238; // 210 cycles of MCLK/8 to reach 50Khz  -- 420 to reach 25KHz -- 230 to 45.6KHz~
   80fc0:	23d2      	movs	r3, #210	; 0xd2
   80fc2:	61e3      	str	r3, [r4, #28]
	TC0->TC_CHANNEL[0].TC_RA = 105;//119; // 105 for 50Khz , 210 for 25kH
   80fc4:	2369      	movs	r3, #105	; 0x69
   80fc6:	6163      	str	r3, [r4, #20]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80fcc:	4b09      	ldr	r3, [pc, #36]	; (80ff4 <Timer_init+0x70>)
   80fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	NVIC_DisableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC0_IRQn);
	//tc_enable_interrupt(TC0,0,TC_IER_CPCS);
	tc_start(TC0,0);
   80fd2:	2100      	movs	r1, #0
   80fd4:	4620      	mov	r0, r4
   80fd6:	4b08      	ldr	r3, [pc, #32]	; (80ff8 <Timer_init+0x74>)
   80fd8:	4798      	blx	r3
   80fda:	bd38      	pop	{r3, r4, r5, pc}
   80fdc:	000814f9 	.word	0x000814f9
   80fe0:	40080000 	.word	0x40080000
   80fe4:	00080bd1 	.word	0x00080bd1
   80fe8:	400e1070 	.word	0x400e1070
   80fec:	0009c001 	.word	0x0009c001
   80ff0:	00080ba9 	.word	0x00080ba9
   80ff4:	e000e100 	.word	0xe000e100
   80ff8:	00080bc1 	.word	0x00080bc1

00080ffc <Timer_Sleep>:
	
}

void Timer_Sleep(uint32_t msDelay)
{
   80ffc:	b510      	push	{r4, lr}
   80ffe:	4604      	mov	r4, r0
	tc_start(TC0,1);	
   81000:	2101      	movs	r1, #1
   81002:	4808      	ldr	r0, [pc, #32]	; (81024 <Timer_Sleep+0x28>)
   81004:	4b08      	ldr	r3, [pc, #32]	; (81028 <Timer_Sleep+0x2c>)
   81006:	4798      	blx	r3
	//PrintLn("wait\n");
	while(TC0->TC_CHANNEL[1].TC_CV < 656*msDelay);
   81008:	f44f 7024 	mov.w	r0, #656	; 0x290
   8100c:	fb00 f004 	mul.w	r0, r0, r4
   81010:	4a04      	ldr	r2, [pc, #16]	; (81024 <Timer_Sleep+0x28>)
   81012:	6d13      	ldr	r3, [r2, #80]	; 0x50
   81014:	4283      	cmp	r3, r0
   81016:	d3fc      	bcc.n	81012 <Timer_Sleep+0x16>
	//PrintLn("done wait\n");
	tc_stop(TC0,1);
   81018:	2101      	movs	r1, #1
   8101a:	4802      	ldr	r0, [pc, #8]	; (81024 <Timer_Sleep+0x28>)
   8101c:	4b03      	ldr	r3, [pc, #12]	; (8102c <Timer_Sleep+0x30>)
   8101e:	4798      	blx	r3
   81020:	bd10      	pop	{r4, pc}
   81022:	bf00      	nop
   81024:	40080000 	.word	0x40080000
   81028:	00080bc1 	.word	0x00080bc1
   8102c:	00080bc9 	.word	0x00080bc9

00081030 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81030:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81032:	480e      	ldr	r0, [pc, #56]	; (8106c <sysclk_init+0x3c>)
   81034:	4b0e      	ldr	r3, [pc, #56]	; (81070 <sysclk_init+0x40>)
   81036:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81038:	213e      	movs	r1, #62	; 0x3e
   8103a:	2000      	movs	r0, #0
   8103c:	4b0d      	ldr	r3, [pc, #52]	; (81074 <sysclk_init+0x44>)
   8103e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81040:	4c0d      	ldr	r4, [pc, #52]	; (81078 <sysclk_init+0x48>)
   81042:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81044:	2800      	cmp	r0, #0
   81046:	d0fc      	beq.n	81042 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81048:	4b0c      	ldr	r3, [pc, #48]	; (8107c <sysclk_init+0x4c>)
   8104a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8104c:	4a0c      	ldr	r2, [pc, #48]	; (81080 <sysclk_init+0x50>)
   8104e:	4b0d      	ldr	r3, [pc, #52]	; (81084 <sysclk_init+0x54>)
   81050:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81052:	4c0d      	ldr	r4, [pc, #52]	; (81088 <sysclk_init+0x58>)
   81054:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81056:	2800      	cmp	r0, #0
   81058:	d0fc      	beq.n	81054 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8105a:	2010      	movs	r0, #16
   8105c:	4b0b      	ldr	r3, [pc, #44]	; (8108c <sysclk_init+0x5c>)
   8105e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81060:	4b0b      	ldr	r3, [pc, #44]	; (81090 <sysclk_init+0x60>)
   81062:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81064:	4801      	ldr	r0, [pc, #4]	; (8106c <sysclk_init+0x3c>)
   81066:	4b02      	ldr	r3, [pc, #8]	; (81070 <sysclk_init+0x40>)
   81068:	4798      	blx	r3
   8106a:	bd10      	pop	{r4, pc}
   8106c:	0501bd00 	.word	0x0501bd00
   81070:	2007013d 	.word	0x2007013d
   81074:	00081475 	.word	0x00081475
   81078:	000814c9 	.word	0x000814c9
   8107c:	000814d9 	.word	0x000814d9
   81080:	200d3f01 	.word	0x200d3f01
   81084:	400e0600 	.word	0x400e0600
   81088:	000814e9 	.word	0x000814e9
   8108c:	00081411 	.word	0x00081411
   81090:	000815b5 	.word	0x000815b5

00081094 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81094:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81096:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8109a:	4b16      	ldr	r3, [pc, #88]	; (810f4 <board_init+0x60>)
   8109c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8109e:	200b      	movs	r0, #11
   810a0:	4c15      	ldr	r4, [pc, #84]	; (810f8 <board_init+0x64>)
   810a2:	47a0      	blx	r4
   810a4:	200c      	movs	r0, #12
   810a6:	47a0      	blx	r4
   810a8:	200d      	movs	r0, #13
   810aa:	47a0      	blx	r4
   810ac:	200e      	movs	r0, #14
   810ae:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   810b0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810b4:	203b      	movs	r0, #59	; 0x3b
   810b6:	4c11      	ldr	r4, [pc, #68]	; (810fc <board_init+0x68>)
   810b8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   810ba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810be:	2055      	movs	r0, #85	; 0x55
   810c0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   810c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   810c6:	2056      	movs	r0, #86	; 0x56
   810c8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   810ca:	490d      	ldr	r1, [pc, #52]	; (81100 <board_init+0x6c>)
   810cc:	2068      	movs	r0, #104	; 0x68
   810ce:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   810d0:	490c      	ldr	r1, [pc, #48]	; (81104 <board_init+0x70>)
   810d2:	205c      	movs	r0, #92	; 0x5c
   810d4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   810d6:	4a0c      	ldr	r2, [pc, #48]	; (81108 <board_init+0x74>)
   810d8:	f44f 7140 	mov.w	r1, #768	; 0x300
   810dc:	480b      	ldr	r0, [pc, #44]	; (8110c <board_init+0x78>)
   810de:	4b0c      	ldr	r3, [pc, #48]	; (81110 <board_init+0x7c>)
   810e0:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   810e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810e6:	202b      	movs	r0, #43	; 0x2b
   810e8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   810ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810ee:	202a      	movs	r0, #42	; 0x2a
   810f0:	47a0      	blx	r4
   810f2:	bd10      	pop	{r4, pc}
   810f4:	400e1a50 	.word	0x400e1a50
   810f8:	000814f9 	.word	0x000814f9
   810fc:	00081205 	.word	0x00081205
   81100:	28000079 	.word	0x28000079
   81104:	28000001 	.word	0x28000001
   81108:	08000001 	.word	0x08000001
   8110c:	400e0e00 	.word	0x400e0e00
   81110:	000812d5 	.word	0x000812d5

00081114 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81114:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81116:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8111a:	d016      	beq.n	8114a <pio_set_peripheral+0x36>
   8111c:	d80b      	bhi.n	81136 <pio_set_peripheral+0x22>
   8111e:	b149      	cbz	r1, 81134 <pio_set_peripheral+0x20>
   81120:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81124:	d105      	bne.n	81132 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81126:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81128:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8112a:	400b      	ands	r3, r1
   8112c:	ea23 0302 	bic.w	r3, r3, r2
   81130:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81132:	6042      	str	r2, [r0, #4]
   81134:	4770      	bx	lr
	switch (ul_type) {
   81136:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8113a:	d0fb      	beq.n	81134 <pio_set_peripheral+0x20>
   8113c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81140:	d0f8      	beq.n	81134 <pio_set_peripheral+0x20>
   81142:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81146:	d1f4      	bne.n	81132 <pio_set_peripheral+0x1e>
   81148:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8114a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8114c:	4313      	orrs	r3, r2
   8114e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81150:	e7ef      	b.n	81132 <pio_set_peripheral+0x1e>

00081152 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81152:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81154:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81158:	bf14      	ite	ne
   8115a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8115c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8115e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81162:	bf14      	ite	ne
   81164:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81166:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81168:	f012 0f02 	tst.w	r2, #2
   8116c:	d107      	bne.n	8117e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8116e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81172:	bf18      	it	ne
   81174:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81178:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8117a:	6001      	str	r1, [r0, #0]
   8117c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8117e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81182:	e7f9      	b.n	81178 <pio_set_input+0x26>

00081184 <pio_set_output>:
{
   81184:	b410      	push	{r4}
   81186:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81188:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8118a:	b944      	cbnz	r4, 8119e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8118c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8118e:	b143      	cbz	r3, 811a2 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81190:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81192:	b942      	cbnz	r2, 811a6 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81194:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81196:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81198:	6001      	str	r1, [r0, #0]
}
   8119a:	bc10      	pop	{r4}
   8119c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8119e:	6641      	str	r1, [r0, #100]	; 0x64
   811a0:	e7f5      	b.n	8118e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   811a2:	6541      	str	r1, [r0, #84]	; 0x54
   811a4:	e7f5      	b.n	81192 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   811a6:	6301      	str	r1, [r0, #48]	; 0x30
   811a8:	e7f5      	b.n	81196 <pio_set_output+0x12>

000811aa <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   811aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   811ac:	4770      	bx	lr

000811ae <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   811ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   811b0:	4770      	bx	lr

000811b2 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811b2:	0943      	lsrs	r3, r0, #5
   811b4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811b8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811bc:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   811be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   811c0:	f000 001f 	and.w	r0, r0, #31
   811c4:	fa23 f000 	lsr.w	r0, r3, r0
}
   811c8:	f000 0001 	and.w	r0, r0, #1
   811cc:	4770      	bx	lr

000811ce <pio_set_pin_high>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811ce:	0943      	lsrs	r3, r0, #5
   811d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811d4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811d8:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   811da:	f000 001f 	and.w	r0, r0, #31
   811de:	2201      	movs	r2, #1
   811e0:	fa02 f000 	lsl.w	r0, r2, r0
   811e4:	6318      	str	r0, [r3, #48]	; 0x30
   811e6:	4770      	bx	lr

000811e8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   811e8:	0943      	lsrs	r3, r0, #5
   811ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   811ee:	f203 7307 	addw	r3, r3, #1799	; 0x707
   811f2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   811f4:	f000 001f 	and.w	r0, r0, #31
   811f8:	2201      	movs	r2, #1
   811fa:	fa02 f000 	lsl.w	r0, r2, r0
   811fe:	6358      	str	r0, [r3, #52]	; 0x34
   81200:	4770      	bx	lr
	...

00081204 <pio_configure_pin>:
{
   81204:	b570      	push	{r4, r5, r6, lr}
   81206:	b082      	sub	sp, #8
   81208:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8120a:	0943      	lsrs	r3, r0, #5
   8120c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81210:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81214:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81216:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8121a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8121e:	d031      	beq.n	81284 <pio_configure_pin+0x80>
   81220:	d816      	bhi.n	81250 <pio_configure_pin+0x4c>
   81222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81226:	d01b      	beq.n	81260 <pio_configure_pin+0x5c>
   81228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8122c:	d116      	bne.n	8125c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8122e:	f000 001f 	and.w	r0, r0, #31
   81232:	2601      	movs	r6, #1
   81234:	4086      	lsls	r6, r0
   81236:	4632      	mov	r2, r6
   81238:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8123c:	4620      	mov	r0, r4
   8123e:	4b22      	ldr	r3, [pc, #136]	; (812c8 <pio_configure_pin+0xc4>)
   81240:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81242:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81246:	bf14      	ite	ne
   81248:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8124a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8124c:	2001      	movs	r0, #1
   8124e:	e017      	b.n	81280 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81250:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81254:	d021      	beq.n	8129a <pio_configure_pin+0x96>
   81256:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8125a:	d01e      	beq.n	8129a <pio_configure_pin+0x96>
		return 0;
   8125c:	2000      	movs	r0, #0
   8125e:	e00f      	b.n	81280 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81260:	f000 001f 	and.w	r0, r0, #31
   81264:	2601      	movs	r6, #1
   81266:	4086      	lsls	r6, r0
   81268:	4632      	mov	r2, r6
   8126a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8126e:	4620      	mov	r0, r4
   81270:	4b15      	ldr	r3, [pc, #84]	; (812c8 <pio_configure_pin+0xc4>)
   81272:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81274:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81278:	bf14      	ite	ne
   8127a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8127c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8127e:	2001      	movs	r0, #1
}
   81280:	b002      	add	sp, #8
   81282:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81284:	f000 011f 	and.w	r1, r0, #31
   81288:	2601      	movs	r6, #1
   8128a:	462a      	mov	r2, r5
   8128c:	fa06 f101 	lsl.w	r1, r6, r1
   81290:	4620      	mov	r0, r4
   81292:	4b0e      	ldr	r3, [pc, #56]	; (812cc <pio_configure_pin+0xc8>)
   81294:	4798      	blx	r3
	return 1;
   81296:	4630      	mov	r0, r6
		break;
   81298:	e7f2      	b.n	81280 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8129a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8129e:	f000 011f 	and.w	r1, r0, #31
   812a2:	2601      	movs	r6, #1
   812a4:	ea05 0306 	and.w	r3, r5, r6
   812a8:	9300      	str	r3, [sp, #0]
   812aa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   812ae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   812b2:	bf14      	ite	ne
   812b4:	2200      	movne	r2, #0
   812b6:	2201      	moveq	r2, #1
   812b8:	fa06 f101 	lsl.w	r1, r6, r1
   812bc:	4620      	mov	r0, r4
   812be:	4c04      	ldr	r4, [pc, #16]	; (812d0 <pio_configure_pin+0xcc>)
   812c0:	47a0      	blx	r4
	return 1;
   812c2:	4630      	mov	r0, r6
		break;
   812c4:	e7dc      	b.n	81280 <pio_configure_pin+0x7c>
   812c6:	bf00      	nop
   812c8:	00081115 	.word	0x00081115
   812cc:	00081153 	.word	0x00081153
   812d0:	00081185 	.word	0x00081185

000812d4 <pio_configure_pin_group>:
{
   812d4:	b570      	push	{r4, r5, r6, lr}
   812d6:	b082      	sub	sp, #8
   812d8:	4605      	mov	r5, r0
   812da:	460e      	mov	r6, r1
   812dc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   812de:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   812e2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   812e6:	d027      	beq.n	81338 <pio_configure_pin_group+0x64>
   812e8:	d811      	bhi.n	8130e <pio_configure_pin_group+0x3a>
   812ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   812ee:	d016      	beq.n	8131e <pio_configure_pin_group+0x4a>
   812f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   812f4:	d111      	bne.n	8131a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   812f6:	460a      	mov	r2, r1
   812f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   812fc:	4b19      	ldr	r3, [pc, #100]	; (81364 <pio_configure_pin_group+0x90>)
   812fe:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81300:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81304:	bf14      	ite	ne
   81306:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81308:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8130a:	2001      	movs	r0, #1
   8130c:	e012      	b.n	81334 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8130e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81312:	d015      	beq.n	81340 <pio_configure_pin_group+0x6c>
   81314:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81318:	d012      	beq.n	81340 <pio_configure_pin_group+0x6c>
		return 0;
   8131a:	2000      	movs	r0, #0
   8131c:	e00a      	b.n	81334 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8131e:	460a      	mov	r2, r1
   81320:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81324:	4b0f      	ldr	r3, [pc, #60]	; (81364 <pio_configure_pin_group+0x90>)
   81326:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81328:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8132c:	bf14      	ite	ne
   8132e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81330:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81332:	2001      	movs	r0, #1
}
   81334:	b002      	add	sp, #8
   81336:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81338:	4b0b      	ldr	r3, [pc, #44]	; (81368 <pio_configure_pin_group+0x94>)
   8133a:	4798      	blx	r3
	return 1;
   8133c:	2001      	movs	r0, #1
		break;
   8133e:	e7f9      	b.n	81334 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81340:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81344:	f004 0301 	and.w	r3, r4, #1
   81348:	9300      	str	r3, [sp, #0]
   8134a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8134e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81352:	bf14      	ite	ne
   81354:	2200      	movne	r2, #0
   81356:	2201      	moveq	r2, #1
   81358:	4631      	mov	r1, r6
   8135a:	4628      	mov	r0, r5
   8135c:	4c03      	ldr	r4, [pc, #12]	; (8136c <pio_configure_pin_group+0x98>)
   8135e:	47a0      	blx	r4
	return 1;
   81360:	2001      	movs	r0, #1
		break;
   81362:	e7e7      	b.n	81334 <pio_configure_pin_group+0x60>
   81364:	00081115 	.word	0x00081115
   81368:	00081153 	.word	0x00081153
   8136c:	00081185 	.word	0x00081185

00081370 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81374:	4604      	mov	r4, r0
   81376:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81378:	4b0e      	ldr	r3, [pc, #56]	; (813b4 <pio_handler_process+0x44>)
   8137a:	4798      	blx	r3
   8137c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8137e:	4620      	mov	r0, r4
   81380:	4b0d      	ldr	r3, [pc, #52]	; (813b8 <pio_handler_process+0x48>)
   81382:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81384:	4005      	ands	r5, r0
   81386:	d013      	beq.n	813b0 <pio_handler_process+0x40>
   81388:	4c0c      	ldr	r4, [pc, #48]	; (813bc <pio_handler_process+0x4c>)
   8138a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8138e:	e003      	b.n	81398 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   81390:	42b4      	cmp	r4, r6
   81392:	d00d      	beq.n	813b0 <pio_handler_process+0x40>
   81394:	3410      	adds	r4, #16
		while (status != 0) {
   81396:	b15d      	cbz	r5, 813b0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81398:	6820      	ldr	r0, [r4, #0]
   8139a:	4540      	cmp	r0, r8
   8139c:	d1f8      	bne.n	81390 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8139e:	6861      	ldr	r1, [r4, #4]
   813a0:	4229      	tst	r1, r5
   813a2:	d0f5      	beq.n	81390 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   813a4:	68e3      	ldr	r3, [r4, #12]
   813a6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   813a8:	6863      	ldr	r3, [r4, #4]
   813aa:	ea25 0503 	bic.w	r5, r5, r3
   813ae:	e7ef      	b.n	81390 <pio_handler_process+0x20>
   813b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813b4:	000811ab 	.word	0x000811ab
   813b8:	000811af 	.word	0x000811af
   813bc:	20070fb8 	.word	0x20070fb8

000813c0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   813c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   813c2:	210b      	movs	r1, #11
   813c4:	4801      	ldr	r0, [pc, #4]	; (813cc <PIOA_Handler+0xc>)
   813c6:	4b02      	ldr	r3, [pc, #8]	; (813d0 <PIOA_Handler+0x10>)
   813c8:	4798      	blx	r3
   813ca:	bd08      	pop	{r3, pc}
   813cc:	400e0e00 	.word	0x400e0e00
   813d0:	00081371 	.word	0x00081371

000813d4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   813d4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   813d6:	210c      	movs	r1, #12
   813d8:	4801      	ldr	r0, [pc, #4]	; (813e0 <PIOB_Handler+0xc>)
   813da:	4b02      	ldr	r3, [pc, #8]	; (813e4 <PIOB_Handler+0x10>)
   813dc:	4798      	blx	r3
   813de:	bd08      	pop	{r3, pc}
   813e0:	400e1000 	.word	0x400e1000
   813e4:	00081371 	.word	0x00081371

000813e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   813e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   813ea:	210d      	movs	r1, #13
   813ec:	4801      	ldr	r0, [pc, #4]	; (813f4 <PIOC_Handler+0xc>)
   813ee:	4b02      	ldr	r3, [pc, #8]	; (813f8 <PIOC_Handler+0x10>)
   813f0:	4798      	blx	r3
   813f2:	bd08      	pop	{r3, pc}
   813f4:	400e1200 	.word	0x400e1200
   813f8:	00081371 	.word	0x00081371

000813fc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   813fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   813fe:	210e      	movs	r1, #14
   81400:	4801      	ldr	r0, [pc, #4]	; (81408 <PIOD_Handler+0xc>)
   81402:	4b02      	ldr	r3, [pc, #8]	; (8140c <PIOD_Handler+0x10>)
   81404:	4798      	blx	r3
   81406:	bd08      	pop	{r3, pc}
   81408:	400e1400 	.word	0x400e1400
   8140c:	00081371 	.word	0x00081371

00081410 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81410:	4a17      	ldr	r2, [pc, #92]	; (81470 <pmc_switch_mck_to_pllack+0x60>)
   81412:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81418:	4318      	orrs	r0, r3
   8141a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8141c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8141e:	f013 0f08 	tst.w	r3, #8
   81422:	d10a      	bne.n	8143a <pmc_switch_mck_to_pllack+0x2a>
   81424:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81428:	4911      	ldr	r1, [pc, #68]	; (81470 <pmc_switch_mck_to_pllack+0x60>)
   8142a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8142c:	f012 0f08 	tst.w	r2, #8
   81430:	d103      	bne.n	8143a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81432:	3b01      	subs	r3, #1
   81434:	d1f9      	bne.n	8142a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81436:	2001      	movs	r0, #1
   81438:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8143a:	4a0d      	ldr	r2, [pc, #52]	; (81470 <pmc_switch_mck_to_pllack+0x60>)
   8143c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8143e:	f023 0303 	bic.w	r3, r3, #3
   81442:	f043 0302 	orr.w	r3, r3, #2
   81446:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81448:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8144a:	f013 0f08 	tst.w	r3, #8
   8144e:	d10a      	bne.n	81466 <pmc_switch_mck_to_pllack+0x56>
   81450:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81454:	4906      	ldr	r1, [pc, #24]	; (81470 <pmc_switch_mck_to_pllack+0x60>)
   81456:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81458:	f012 0f08 	tst.w	r2, #8
   8145c:	d105      	bne.n	8146a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8145e:	3b01      	subs	r3, #1
   81460:	d1f9      	bne.n	81456 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81462:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81464:	4770      	bx	lr
	return 0;
   81466:	2000      	movs	r0, #0
   81468:	4770      	bx	lr
   8146a:	2000      	movs	r0, #0
   8146c:	4770      	bx	lr
   8146e:	bf00      	nop
   81470:	400e0600 	.word	0x400e0600

00081474 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81474:	b9c8      	cbnz	r0, 814aa <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81476:	4a11      	ldr	r2, [pc, #68]	; (814bc <pmc_switch_mainck_to_xtal+0x48>)
   81478:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8147a:	0209      	lsls	r1, r1, #8
   8147c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8147e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81482:	f023 0303 	bic.w	r3, r3, #3
   81486:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8148a:	f043 0301 	orr.w	r3, r3, #1
   8148e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81490:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81492:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81494:	f013 0f01 	tst.w	r3, #1
   81498:	d0fb      	beq.n	81492 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8149a:	4a08      	ldr	r2, [pc, #32]	; (814bc <pmc_switch_mainck_to_xtal+0x48>)
   8149c:	6a13      	ldr	r3, [r2, #32]
   8149e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   814a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   814a6:	6213      	str	r3, [r2, #32]
   814a8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   814aa:	4904      	ldr	r1, [pc, #16]	; (814bc <pmc_switch_mainck_to_xtal+0x48>)
   814ac:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   814ae:	4a04      	ldr	r2, [pc, #16]	; (814c0 <pmc_switch_mainck_to_xtal+0x4c>)
   814b0:	401a      	ands	r2, r3
   814b2:	4b04      	ldr	r3, [pc, #16]	; (814c4 <pmc_switch_mainck_to_xtal+0x50>)
   814b4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   814b6:	620b      	str	r3, [r1, #32]
   814b8:	4770      	bx	lr
   814ba:	bf00      	nop
   814bc:	400e0600 	.word	0x400e0600
   814c0:	fec8fffc 	.word	0xfec8fffc
   814c4:	01370002 	.word	0x01370002

000814c8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   814c8:	4b02      	ldr	r3, [pc, #8]	; (814d4 <pmc_osc_is_ready_mainck+0xc>)
   814ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   814cc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   814d0:	4770      	bx	lr
   814d2:	bf00      	nop
   814d4:	400e0600 	.word	0x400e0600

000814d8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   814d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   814dc:	4b01      	ldr	r3, [pc, #4]	; (814e4 <pmc_disable_pllack+0xc>)
   814de:	629a      	str	r2, [r3, #40]	; 0x28
   814e0:	4770      	bx	lr
   814e2:	bf00      	nop
   814e4:	400e0600 	.word	0x400e0600

000814e8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   814e8:	4b02      	ldr	r3, [pc, #8]	; (814f4 <pmc_is_locked_pllack+0xc>)
   814ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   814ec:	f000 0002 	and.w	r0, r0, #2
   814f0:	4770      	bx	lr
   814f2:	bf00      	nop
   814f4:	400e0600 	.word	0x400e0600

000814f8 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   814f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   814fc:	4b05      	ldr	r3, [pc, #20]	; (81514 <pmc_enable_periph_clk+0x1c>)
   814fe:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   81502:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
   81506:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   8150a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   8150e:	2000      	movs	r0, #0
   81510:	4770      	bx	lr
   81512:	bf00      	nop
   81514:	400e0600 	.word	0x400e0600

00081518 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81518:	e7fe      	b.n	81518 <Dummy_Handler>
	...

0008151c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8151c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8151e:	4b1c      	ldr	r3, [pc, #112]	; (81590 <Reset_Handler+0x74>)
   81520:	4a1c      	ldr	r2, [pc, #112]	; (81594 <Reset_Handler+0x78>)
   81522:	429a      	cmp	r2, r3
   81524:	d010      	beq.n	81548 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81526:	4b1c      	ldr	r3, [pc, #112]	; (81598 <Reset_Handler+0x7c>)
   81528:	4a19      	ldr	r2, [pc, #100]	; (81590 <Reset_Handler+0x74>)
   8152a:	429a      	cmp	r2, r3
   8152c:	d20c      	bcs.n	81548 <Reset_Handler+0x2c>
   8152e:	3b01      	subs	r3, #1
   81530:	1a9b      	subs	r3, r3, r2
   81532:	f023 0303 	bic.w	r3, r3, #3
   81536:	3304      	adds	r3, #4
   81538:	4413      	add	r3, r2
   8153a:	4916      	ldr	r1, [pc, #88]	; (81594 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   8153c:	f851 0b04 	ldr.w	r0, [r1], #4
   81540:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81544:	429a      	cmp	r2, r3
   81546:	d1f9      	bne.n	8153c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81548:	4b14      	ldr	r3, [pc, #80]	; (8159c <Reset_Handler+0x80>)
   8154a:	4a15      	ldr	r2, [pc, #84]	; (815a0 <Reset_Handler+0x84>)
   8154c:	429a      	cmp	r2, r3
   8154e:	d20a      	bcs.n	81566 <Reset_Handler+0x4a>
   81550:	3b01      	subs	r3, #1
   81552:	1a9b      	subs	r3, r3, r2
   81554:	f023 0303 	bic.w	r3, r3, #3
   81558:	3304      	adds	r3, #4
   8155a:	4413      	add	r3, r2
		*pDest++ = 0;
   8155c:	2100      	movs	r1, #0
   8155e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81562:	4293      	cmp	r3, r2
   81564:	d1fb      	bne.n	8155e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81566:	4b0f      	ldr	r3, [pc, #60]	; (815a4 <Reset_Handler+0x88>)
   81568:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8156c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81570:	490d      	ldr	r1, [pc, #52]	; (815a8 <Reset_Handler+0x8c>)
   81572:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81574:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8157c:	d203      	bcs.n	81586 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8157e:	688b      	ldr	r3, [r1, #8]
   81580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81584:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81586:	4b09      	ldr	r3, [pc, #36]	; (815ac <Reset_Handler+0x90>)
   81588:	4798      	blx	r3

	/* Branch to main function */
	main();
   8158a:	4b09      	ldr	r3, [pc, #36]	; (815b0 <Reset_Handler+0x94>)
   8158c:	4798      	blx	r3
   8158e:	e7fe      	b.n	8158e <Reset_Handler+0x72>
   81590:	20070000 	.word	0x20070000
   81594:	0008661c 	.word	0x0008661c
   81598:	20070e98 	.word	0x20070e98
   8159c:	20071128 	.word	0x20071128
   815a0:	20070e98 	.word	0x20070e98
   815a4:	00080000 	.word	0x00080000
   815a8:	e000ed00 	.word	0xe000ed00
   815ac:	000819f9 	.word	0x000819f9
   815b0:	00081759 	.word	0x00081759

000815b4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   815b4:	4b3d      	ldr	r3, [pc, #244]	; (816ac <SystemCoreClockUpdate+0xf8>)
   815b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   815b8:	f003 0303 	and.w	r3, r3, #3
   815bc:	2b03      	cmp	r3, #3
   815be:	d80e      	bhi.n	815de <SystemCoreClockUpdate+0x2a>
   815c0:	e8df f003 	tbb	[pc, r3]
   815c4:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   815c8:	4b39      	ldr	r3, [pc, #228]	; (816b0 <SystemCoreClockUpdate+0xfc>)
   815ca:	695b      	ldr	r3, [r3, #20]
   815cc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   815d0:	bf14      	ite	ne
   815d2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   815d6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   815da:	4b36      	ldr	r3, [pc, #216]	; (816b4 <SystemCoreClockUpdate+0x100>)
   815dc:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   815de:	4b33      	ldr	r3, [pc, #204]	; (816ac <SystemCoreClockUpdate+0xf8>)
   815e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   815e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   815e6:	2b70      	cmp	r3, #112	; 0x70
   815e8:	d057      	beq.n	8169a <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   815ea:	4b30      	ldr	r3, [pc, #192]	; (816ac <SystemCoreClockUpdate+0xf8>)
   815ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   815ee:	4931      	ldr	r1, [pc, #196]	; (816b4 <SystemCoreClockUpdate+0x100>)
   815f0:	f3c2 1202 	ubfx	r2, r2, #4, #3
   815f4:	680b      	ldr	r3, [r1, #0]
   815f6:	40d3      	lsrs	r3, r2
   815f8:	600b      	str	r3, [r1, #0]
   815fa:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   815fc:	4b2b      	ldr	r3, [pc, #172]	; (816ac <SystemCoreClockUpdate+0xf8>)
   815fe:	6a1b      	ldr	r3, [r3, #32]
   81600:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81604:	d003      	beq.n	8160e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81606:	4a2c      	ldr	r2, [pc, #176]	; (816b8 <SystemCoreClockUpdate+0x104>)
   81608:	4b2a      	ldr	r3, [pc, #168]	; (816b4 <SystemCoreClockUpdate+0x100>)
   8160a:	601a      	str	r2, [r3, #0]
   8160c:	e7e7      	b.n	815de <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8160e:	4a2b      	ldr	r2, [pc, #172]	; (816bc <SystemCoreClockUpdate+0x108>)
   81610:	4b28      	ldr	r3, [pc, #160]	; (816b4 <SystemCoreClockUpdate+0x100>)
   81612:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81614:	4b25      	ldr	r3, [pc, #148]	; (816ac <SystemCoreClockUpdate+0xf8>)
   81616:	6a1b      	ldr	r3, [r3, #32]
   81618:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8161c:	2b10      	cmp	r3, #16
   8161e:	d005      	beq.n	8162c <SystemCoreClockUpdate+0x78>
   81620:	2b20      	cmp	r3, #32
   81622:	d1dc      	bne.n	815de <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81624:	4a24      	ldr	r2, [pc, #144]	; (816b8 <SystemCoreClockUpdate+0x104>)
   81626:	4b23      	ldr	r3, [pc, #140]	; (816b4 <SystemCoreClockUpdate+0x100>)
   81628:	601a      	str	r2, [r3, #0]
				break;
   8162a:	e7d8      	b.n	815de <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8162c:	4a24      	ldr	r2, [pc, #144]	; (816c0 <SystemCoreClockUpdate+0x10c>)
   8162e:	4b21      	ldr	r3, [pc, #132]	; (816b4 <SystemCoreClockUpdate+0x100>)
   81630:	601a      	str	r2, [r3, #0]
				break;
   81632:	e7d4      	b.n	815de <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81634:	4b1d      	ldr	r3, [pc, #116]	; (816ac <SystemCoreClockUpdate+0xf8>)
   81636:	6a1b      	ldr	r3, [r3, #32]
   81638:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8163c:	d00c      	beq.n	81658 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8163e:	4a1e      	ldr	r2, [pc, #120]	; (816b8 <SystemCoreClockUpdate+0x104>)
   81640:	4b1c      	ldr	r3, [pc, #112]	; (816b4 <SystemCoreClockUpdate+0x100>)
   81642:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81644:	4b19      	ldr	r3, [pc, #100]	; (816ac <SystemCoreClockUpdate+0xf8>)
   81646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81648:	f003 0303 	and.w	r3, r3, #3
   8164c:	2b02      	cmp	r3, #2
   8164e:	d016      	beq.n	8167e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81650:	4a1c      	ldr	r2, [pc, #112]	; (816c4 <SystemCoreClockUpdate+0x110>)
   81652:	4b18      	ldr	r3, [pc, #96]	; (816b4 <SystemCoreClockUpdate+0x100>)
   81654:	601a      	str	r2, [r3, #0]
   81656:	e7c2      	b.n	815de <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81658:	4a18      	ldr	r2, [pc, #96]	; (816bc <SystemCoreClockUpdate+0x108>)
   8165a:	4b16      	ldr	r3, [pc, #88]	; (816b4 <SystemCoreClockUpdate+0x100>)
   8165c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8165e:	4b13      	ldr	r3, [pc, #76]	; (816ac <SystemCoreClockUpdate+0xf8>)
   81660:	6a1b      	ldr	r3, [r3, #32]
   81662:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81666:	2b10      	cmp	r3, #16
   81668:	d005      	beq.n	81676 <SystemCoreClockUpdate+0xc2>
   8166a:	2b20      	cmp	r3, #32
   8166c:	d1ea      	bne.n	81644 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8166e:	4a12      	ldr	r2, [pc, #72]	; (816b8 <SystemCoreClockUpdate+0x104>)
   81670:	4b10      	ldr	r3, [pc, #64]	; (816b4 <SystemCoreClockUpdate+0x100>)
   81672:	601a      	str	r2, [r3, #0]
				break;
   81674:	e7e6      	b.n	81644 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81676:	4a12      	ldr	r2, [pc, #72]	; (816c0 <SystemCoreClockUpdate+0x10c>)
   81678:	4b0e      	ldr	r3, [pc, #56]	; (816b4 <SystemCoreClockUpdate+0x100>)
   8167a:	601a      	str	r2, [r3, #0]
				break;
   8167c:	e7e2      	b.n	81644 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8167e:	4a0b      	ldr	r2, [pc, #44]	; (816ac <SystemCoreClockUpdate+0xf8>)
   81680:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81682:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81684:	480b      	ldr	r0, [pc, #44]	; (816b4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81686:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8168a:	6803      	ldr	r3, [r0, #0]
   8168c:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81690:	b2d2      	uxtb	r2, r2
   81692:	fbb3 f3f2 	udiv	r3, r3, r2
   81696:	6003      	str	r3, [r0, #0]
   81698:	e7a1      	b.n	815de <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8169a:	4a06      	ldr	r2, [pc, #24]	; (816b4 <SystemCoreClockUpdate+0x100>)
   8169c:	6813      	ldr	r3, [r2, #0]
   8169e:	490a      	ldr	r1, [pc, #40]	; (816c8 <SystemCoreClockUpdate+0x114>)
   816a0:	fba1 1303 	umull	r1, r3, r1, r3
   816a4:	085b      	lsrs	r3, r3, #1
   816a6:	6013      	str	r3, [r2, #0]
   816a8:	4770      	bx	lr
   816aa:	bf00      	nop
   816ac:	400e0600 	.word	0x400e0600
   816b0:	400e1a10 	.word	0x400e1a10
   816b4:	200704dc 	.word	0x200704dc
   816b8:	00b71b00 	.word	0x00b71b00
   816bc:	003d0900 	.word	0x003d0900
   816c0:	007a1200 	.word	0x007a1200
   816c4:	0e4e1c00 	.word	0x0e4e1c00
   816c8:	aaaaaaab 	.word	0xaaaaaaab

000816cc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   816cc:	4b0a      	ldr	r3, [pc, #40]	; (816f8 <_sbrk+0x2c>)
   816ce:	681b      	ldr	r3, [r3, #0]
   816d0:	b153      	cbz	r3, 816e8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   816d2:	4b09      	ldr	r3, [pc, #36]	; (816f8 <_sbrk+0x2c>)
   816d4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   816d6:	181a      	adds	r2, r3, r0
   816d8:	4908      	ldr	r1, [pc, #32]	; (816fc <_sbrk+0x30>)
   816da:	4291      	cmp	r1, r2
   816dc:	db08      	blt.n	816f0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   816de:	4610      	mov	r0, r2
   816e0:	4a05      	ldr	r2, [pc, #20]	; (816f8 <_sbrk+0x2c>)
   816e2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   816e4:	4618      	mov	r0, r3
   816e6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   816e8:	4a05      	ldr	r2, [pc, #20]	; (81700 <_sbrk+0x34>)
   816ea:	4b03      	ldr	r3, [pc, #12]	; (816f8 <_sbrk+0x2c>)
   816ec:	601a      	str	r2, [r3, #0]
   816ee:	e7f0      	b.n	816d2 <_sbrk+0x6>
		return (caddr_t) -1;	
   816f0:	f04f 30ff 	mov.w	r0, #4294967295
}
   816f4:	4770      	bx	lr
   816f6:	bf00      	nop
   816f8:	20071028 	.word	0x20071028
   816fc:	20087ffc 	.word	0x20087ffc
   81700:	20073128 	.word	0x20073128

00081704 <GetDetectState>:

uint GetDetectState(void);
void Detector_Calib2Regular(void);

uint GetDetectState()
{
   81704:	b508      	push	{r3, lr}
	uint32_t inputpin;
	uint RetVal;
	inputpin = pio_get_pin_value(PIO_PB26_IDX);
   81706:	203a      	movs	r0, #58	; 0x3a
   81708:	4b04      	ldr	r3, [pc, #16]	; (8171c <GetDetectState+0x18>)
   8170a:	4798      	blx	r3
	switch(inputpin)
   8170c:	b120      	cbz	r0, 81718 <GetDetectState+0x14>
		break;
		case CALIBRATE_Detector:
		RetVal = CALIBRATE_Detector;
		break;
		default:
		RetVal = UNKNOWN_Detector;
   8170e:	2801      	cmp	r0, #1
   81710:	bf0c      	ite	eq
   81712:	2001      	moveq	r0, #1
   81714:	2002      	movne	r0, #2
   81716:	bd08      	pop	{r3, pc}
		RetVal = REGULAR_Detector;
   81718:	2000      	movs	r0, #0
		break;
	}
	return RetVal;
}
   8171a:	bd08      	pop	{r3, pc}
   8171c:	000811b3 	.word	0x000811b3

00081720 <Detector_Calib2Regular>:

void Detector_Calib2Regular()
{
   81720:	b500      	push	{lr}
   81722:	b085      	sub	sp, #20
	// stop ADC channel 1 
	// save Calibration in FLASH (NFC)	
	Byte b2[10];
	FilterState = 6;
   81724:	2206      	movs	r2, #6
   81726:	4b07      	ldr	r3, [pc, #28]	; (81744 <Detector_Calib2Regular+0x24>)
   81728:	601a      	str	r2, [r3, #0]
	memcpy(b2,&Threshold,sizeof(uint32_t));
   8172a:	4b07      	ldr	r3, [pc, #28]	; (81748 <Detector_Calib2Regular+0x28>)
   8172c:	681b      	ldr	r3, [r3, #0]
   8172e:	a804      	add	r0, sp, #16
   81730:	f840 3d0c 	str.w	r3, [r0, #-12]!
	//memcpy(b2,&TTest,sizeof(uint32_t));
	WriteCalibToFlash(b2);
   81734:	4b05      	ldr	r3, [pc, #20]	; (8174c <Detector_Calib2Regular+0x2c>)
   81736:	4798      	blx	r3
	PrintLn("Write to flash\n");
   81738:	4805      	ldr	r0, [pc, #20]	; (81750 <Detector_Calib2Regular+0x30>)
   8173a:	4b06      	ldr	r3, [pc, #24]	; (81754 <Detector_Calib2Regular+0x34>)
   8173c:	4798      	blx	r3
//	adc_disable_interrupt(ADC,ADC_IER_EOC0);	
	
}
   8173e:	b005      	add	sp, #20
   81740:	f85d fb04 	ldr.w	pc, [sp], #4
   81744:	200704e0 	.word	0x200704e0
   81748:	200704e8 	.word	0x200704e8
   8174c:	000805bd 	.word	0x000805bd
   81750:	00086344 	.word	0x00086344
   81754:	00080635 	.word	0x00080635

00081758 <main>:
	// start ADC Channel 1 
	// Update Calibration according to potentiometer ADC ch1	
}*/

int main (void)
{
   81758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	char out_str[70] = {0};
	int i;	


	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   8175c:	4b81      	ldr	r3, [pc, #516]	; (81964 <main+0x20c>)
   8175e:	4798      	blx	r3
	//Allow UART to control PB2 and PB3
	pio_set_peripheral(PIOA, PIO_PERIPH_A, PINS_UART);
	//Enable UART1 Clock	
	sysclk_enable_peripheral_clock(ID_UART);
	#endif
	gpio_configure_group(PIOB, PIO_PB26, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 22
   81760:	4e81      	ldr	r6, [pc, #516]	; (81968 <main+0x210>)
   81762:	4d82      	ldr	r5, [pc, #520]	; (8196c <main+0x214>)
   81764:	4632      	mov	r2, r6
   81766:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8176a:	4628      	mov	r0, r5
   8176c:	4c80      	ldr	r4, [pc, #512]	; (81970 <main+0x218>)
   8176e:	47a0      	blx	r4
	gpio_configure_group(PIOD, PIO_PD1, PIO_OUTPUT_1); // arduino due pin # 26 OUTPUT red LED error
   81770:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
   81774:	2102      	movs	r1, #2
   81776:	487f      	ldr	r0, [pc, #508]	; (81974 <main+0x21c>)
   81778:	47a0      	blx	r4
	gpio_configure_group(PIOB, PIO_PB21, PIO_OUTPUT_1); // arduino Blue LED
   8177a:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
   8177e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   81782:	4628      	mov	r0, r5
   81784:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA7, PIO_OUTPUT_0); // arduino RT meas
   81786:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
   8178a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   8178e:	2180      	movs	r1, #128	; 0x80
   81790:	4628      	mov	r0, r5
   81792:	47a0      	blx	r4
	gpio_configure_group(PIOA, PIO_PA15, PIO_INPUT|PIO_DEBOUNCE); // arduino due pin # 24 BUTTON
   81794:	4632      	mov	r2, r6
   81796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8179a:	4628      	mov	r0, r5
   8179c:	47a0      	blx	r4
	// might conister to use pull down instead of debouncer
	board_init();
   8179e:	4b76      	ldr	r3, [pc, #472]	; (81978 <main+0x220>)
   817a0:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);	 // Green LED
   817a2:	2056      	movs	r0, #86	; 0x56
   817a4:	4c75      	ldr	r4, [pc, #468]	; (8197c <main+0x224>)
   817a6:	47a0      	blx	r4
	pio_set_pin_high(PIO_PD1_IDX); // Red LED
   817a8:	2061      	movs	r0, #97	; 0x61
   817aa:	4d75      	ldr	r5, [pc, #468]	; (81980 <main+0x228>)
   817ac:	47a8      	blx	r5
	pio_set_pin_high(PIO_PB21_IDX); // Blue LED
   817ae:	2035      	movs	r0, #53	; 0x35
   817b0:	47a8      	blx	r5
	pio_set_pin_low(PIO_PA7_IDX); 
   817b2:	2007      	movs	r0, #7
   817b4:	47a0      	blx	r4
	
	
	// Init FIFO's
	FIFO_Init(&Fifo);
   817b6:	4873      	ldr	r0, [pc, #460]	; (81984 <main+0x22c>)
   817b8:	4b73      	ldr	r3, [pc, #460]	; (81988 <main+0x230>)
   817ba:	4798      	blx	r3
	FIFO2_Init(&WaveArray,FIFO2_LEN);
   817bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
   817c0:	4872      	ldr	r0, [pc, #456]	; (8198c <main+0x234>)
   817c2:	4c73      	ldr	r4, [pc, #460]	; (81990 <main+0x238>)
   817c4:	47a0      	blx	r4
	//Fifo2LenAverage = 1.0f/((float)Fifo2p1.len);
	//FIFO2_Init(&Fifo2p2,5435);
	FIFO2_Init(&fifoDebug,3000);
   817c6:	f640 31b8 	movw	r1, #3000	; 0xbb8
   817ca:	4872      	ldr	r0, [pc, #456]	; (81994 <main+0x23c>)
   817cc:	47a0      	blx	r4
		
	
	Timer_init();
   817ce:	4b72      	ldr	r3, [pc, #456]	; (81998 <main+0x240>)
   817d0:	4798      	blx	r3
	
	SPI_Init();
   817d2:	4b72      	ldr	r3, [pc, #456]	; (8199c <main+0x244>)
   817d4:	4798      	blx	r3
	FLASH_Init();
   817d6:	4b72      	ldr	r3, [pc, #456]	; (819a0 <main+0x248>)
   817d8:	4798      	blx	r3
	#if DEBUG_UART
	uart_init(UART, &uart1Settings);
	//irq_register_handler(UART_IRQn, 0);
	#endif
	
	RF_InitTX();
   817da:	4b72      	ldr	r3, [pc, #456]	; (819a4 <main+0x24c>)
   817dc:	4798      	blx	r3
   817de:	23ff      	movs	r3, #255	; 0xff
	for(i=0;i<0xff;i++)
   817e0:	3b01      	subs	r3, #1
   817e2:	d1fd      	bne.n	817e0 <main+0x88>
		__NOP;
	RF_SendBell(RF24_TEST);
   817e4:	2000      	movs	r0, #0
   817e6:	4b70      	ldr	r3, [pc, #448]	; (819a8 <main+0x250>)
   817e8:	4798      	blx	r3
	pio_set_pin_high(LED2_GPIO);
   817ea:	2056      	movs	r0, #86	; 0x56
   817ec:	4c64      	ldr	r4, [pc, #400]	; (81980 <main+0x228>)
   817ee:	47a0      	blx	r4
	pio_set_pin_low(PIO_PD1_IDX);
   817f0:	2061      	movs	r0, #97	; 0x61
   817f2:	4d62      	ldr	r5, [pc, #392]	; (8197c <main+0x224>)
   817f4:	47a8      	blx	r5
	pio_set_pin_low(PIO_PB21_IDX);
   817f6:	2035      	movs	r0, #53	; 0x35
   817f8:	47a8      	blx	r5
	Timer_Sleep(1000);
   817fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   817fe:	4b6b      	ldr	r3, [pc, #428]	; (819ac <main+0x254>)
   81800:	4798      	blx	r3
	pio_set_pin_low(LED2_GPIO);
   81802:	2056      	movs	r0, #86	; 0x56
   81804:	47a8      	blx	r5
	pio_set_pin_high(PIO_PD1_IDX);
   81806:	2061      	movs	r0, #97	; 0x61
   81808:	47a0      	blx	r4
	pio_set_pin_high(PIO_PB21_IDX);
   8180a:	2035      	movs	r0, #53	; 0x35
   8180c:	47a0      	blx	r4
	
	//Timer_Sleep(10000);
	DetectorState = GetDetectState();
   8180e:	4b68      	ldr	r3, [pc, #416]	; (819b0 <main+0x258>)
   81810:	4798      	blx	r3
   81812:	b2c0      	uxtb	r0, r0
   81814:	4b67      	ldr	r3, [pc, #412]	; (819b4 <main+0x25c>)
   81816:	7018      	strb	r0, [r3, #0]
	PrevDetectorState = DetectorState;
   81818:	4b67      	ldr	r3, [pc, #412]	; (819b8 <main+0x260>)
   8181a:	7018      	strb	r0, [r3, #0]

	if(DetectorState == REGULAR_Detector)
   8181c:	b138      	cbz	r0, 8182e <main+0xd6>
		Byte *p;
		p = ReadCalibFromFlash();
		memcpy(&Threshold,p,sizeof(uint32_t));
	}
		
	ADCC_Init();
   8181e:	4b67      	ldr	r3, [pc, #412]	; (819bc <main+0x264>)
   81820:	4798      	blx	r3
	DAC3X8E_Init();
   81822:	4b67      	ldr	r3, [pc, #412]	; (819c0 <main+0x268>)
   81824:	4798      	blx	r3
	Insert application code here, after the board has been initialized. */
	while(1)
	{	
		//Calibration = ADC->ADC_CDR[1];		
		Calibration = ADCC_GlobalRawData[1];
		DetectorState = GetDetectState();
   81826:	4d63      	ldr	r5, [pc, #396]	; (819b4 <main+0x25c>)
			{
				case REGULAR_Detector:				
				Detector_Calib2Regular();
				break;
				case CALIBRATE_Detector:
				FilterState = 6;				
   81828:	4f66      	ldr	r7, [pc, #408]	; (819c4 <main+0x26c>)
			FIFO_Init(&Fifo);
			FIFO2_Reset(&WaveArray);
			FilterState = 6;
			delay = 0;
			//FIFO2_Reset(&Fifo2p2);
			Timer_Sleep(20);
   8182a:	4e60      	ldr	r6, [pc, #384]	; (819ac <main+0x254>)
   8182c:	e046      	b.n	818bc <main+0x164>
		p = ReadCalibFromFlash();
   8182e:	4b66      	ldr	r3, [pc, #408]	; (819c8 <main+0x270>)
   81830:	4798      	blx	r3
		memcpy(&Threshold,p,sizeof(uint32_t));
   81832:	6802      	ldr	r2, [r0, #0]
   81834:	4b65      	ldr	r3, [pc, #404]	; (819cc <main+0x274>)
   81836:	601a      	str	r2, [r3, #0]
   81838:	e7f1      	b.n	8181e <main+0xc6>
				Detector_Calib2Regular();
   8183a:	4b65      	ldr	r3, [pc, #404]	; (819d0 <main+0x278>)
   8183c:	4798      	blx	r3
			PrevDetectorState = DetectorState;
   8183e:	782a      	ldrb	r2, [r5, #0]
   81840:	4b5d      	ldr	r3, [pc, #372]	; (819b8 <main+0x260>)
   81842:	701a      	strb	r2, [r3, #0]
		switch(DetectorState)
   81844:	782b      	ldrb	r3, [r5, #0]
   81846:	b163      	cbz	r3, 81862 <main+0x10a>
   81848:	2b01      	cmp	r3, #1
   8184a:	d110      	bne.n	8186e <main+0x116>
			pio_set_pin_high(PIO_PD1_IDX);
   8184c:	2061      	movs	r0, #97	; 0x61
   8184e:	4b4c      	ldr	r3, [pc, #304]	; (81980 <main+0x228>)
   81850:	4798      	blx	r3
			MaxAllowedFirstVal = UINT32_MAX;
   81852:	f04f 32ff 	mov.w	r2, #4294967295
   81856:	4b5f      	ldr	r3, [pc, #380]	; (819d4 <main+0x27c>)
   81858:	601a      	str	r2, [r3, #0]
			break;
   8185a:	e008      	b.n	8186e <main+0x116>
				FilterState = 6;				
   8185c:	2306      	movs	r3, #6
   8185e:	603b      	str	r3, [r7, #0]
				break;
   81860:	e7ed      	b.n	8183e <main+0xe6>
			MaxAllowedFirstVal = Threshold + (4<<17);//(29<<17)/10;
   81862:	4b5a      	ldr	r3, [pc, #360]	; (819cc <main+0x274>)
   81864:	681b      	ldr	r3, [r3, #0]
   81866:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
   8186a:	4a5a      	ldr	r2, [pc, #360]	; (819d4 <main+0x27c>)
   8186c:	6013      	str	r3, [r2, #0]
		if(FilterState == 5)
   8186e:	683b      	ldr	r3, [r7, #0]
   81870:	2b05      	cmp	r3, #5
			pio_set_pin_low(PIO_PD1_IDX);
   81872:	f04f 0061 	mov.w	r0, #97	; 0x61
   81876:	bf0c      	ite	eq
   81878:	4b40      	ldreq	r3, [pc, #256]	; (8197c <main+0x224>)
			pio_set_pin_high(PIO_PD1_IDX);
   8187a:	4b41      	ldrne	r3, [pc, #260]	; (81980 <main+0x228>)
   8187c:	4798      	blx	r3
		if(Det_flag)
   8187e:	4b56      	ldr	r3, [pc, #344]	; (819d8 <main+0x280>)
   81880:	681b      	ldr	r3, [r3, #0]
   81882:	b1b3      	cbz	r3, 818b2 <main+0x15a>
			Det_flag = 0;				
   81884:	2200      	movs	r2, #0
   81886:	4b54      	ldr	r3, [pc, #336]	; (819d8 <main+0x280>)
   81888:	601a      	str	r2, [r3, #0]
			switch (DetectorState)
   8188a:	782b      	ldrb	r3, [r5, #0]
   8188c:	2b00      	cmp	r3, #0
   8188e:	d02e      	beq.n	818ee <main+0x196>
   81890:	2b01      	cmp	r3, #1
   81892:	d041      	beq.n	81918 <main+0x1c0>
			FIFO_Init(&Fifo);
   81894:	483b      	ldr	r0, [pc, #236]	; (81984 <main+0x22c>)
   81896:	4b3c      	ldr	r3, [pc, #240]	; (81988 <main+0x230>)
   81898:	4798      	blx	r3
			FIFO2_Reset(&WaveArray);
   8189a:	483c      	ldr	r0, [pc, #240]	; (8198c <main+0x234>)
   8189c:	4b4f      	ldr	r3, [pc, #316]	; (819dc <main+0x284>)
   8189e:	4798      	blx	r3
			FilterState = 6;
   818a0:	2306      	movs	r3, #6
   818a2:	603b      	str	r3, [r7, #0]
			delay = 0;
   818a4:	2200      	movs	r2, #0
   818a6:	4b4e      	ldr	r3, [pc, #312]	; (819e0 <main+0x288>)
   818a8:	601a      	str	r2, [r3, #0]
			Timer_Sleep(20);
   818aa:	2014      	movs	r0, #20
   818ac:	47b0      	blx	r6
			ADCC_Init();
   818ae:	4b43      	ldr	r3, [pc, #268]	; (819bc <main+0x264>)
   818b0:	4798      	blx	r3
		}
		if(DetectorState == CALIBRATE_Detector){
   818b2:	782b      	ldrb	r3, [r5, #0]
   818b4:	2b01      	cmp	r3, #1
   818b6:	d04c      	beq.n	81952 <main+0x1fa>
		#if DEBUG_UART
		Timer_Sleep(10);
		sprintf(out_str,"%lu\r\n", ADCC_GlobalRawData[2]);//ADC->ADC_CDR[2]);
		PrintLn(out_str);		
		#endif
		Timer_Sleep(100);
   818b8:	2064      	movs	r0, #100	; 0x64
   818ba:	47b0      	blx	r6
		Calibration = ADCC_GlobalRawData[1];
   818bc:	4b49      	ldr	r3, [pc, #292]	; (819e4 <main+0x28c>)
   818be:	885a      	ldrh	r2, [r3, #2]
   818c0:	4b49      	ldr	r3, [pc, #292]	; (819e8 <main+0x290>)
   818c2:	601a      	str	r2, [r3, #0]
		DetectorState = GetDetectState();
   818c4:	4b3a      	ldr	r3, [pc, #232]	; (819b0 <main+0x258>)
   818c6:	4798      	blx	r3
   818c8:	b2c0      	uxtb	r0, r0
   818ca:	7028      	strb	r0, [r5, #0]
		if((DetectorState != UNKNOWN_Detector) &&(DetectorState != PrevDetectorState)) // State changed
   818cc:	2802      	cmp	r0, #2
   818ce:	d0ce      	beq.n	8186e <main+0x116>
   818d0:	4b39      	ldr	r3, [pc, #228]	; (819b8 <main+0x260>)
   818d2:	781b      	ldrb	r3, [r3, #0]
   818d4:	4283      	cmp	r3, r0
   818d6:	d0b5      	beq.n	81844 <main+0xec>
			PrintLn("State change\n");
   818d8:	4844      	ldr	r0, [pc, #272]	; (819ec <main+0x294>)
   818da:	4b45      	ldr	r3, [pc, #276]	; (819f0 <main+0x298>)
   818dc:	4798      	blx	r3
			switch(DetectorState)
   818de:	782b      	ldrb	r3, [r5, #0]
   818e0:	2b00      	cmp	r3, #0
   818e2:	d0aa      	beq.n	8183a <main+0xe2>
   818e4:	2b01      	cmp	r3, #1
   818e6:	d0b9      	beq.n	8185c <main+0x104>
				Detector_Calib2Regular();
   818e8:	4b39      	ldr	r3, [pc, #228]	; (819d0 <main+0x278>)
   818ea:	4798      	blx	r3
   818ec:	e7a7      	b.n	8183e <main+0xe6>
			switch (DetectorState)
   818ee:	240a      	movs	r4, #10
					Timer_Sleep(20);				
   818f0:	f04f 0914 	mov.w	r9, #20
					RF_SendBell(RF24_BELLDOOR);
   818f4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 819a8 <main+0x250>
					Timer_Sleep(20);				
   818f8:	4648      	mov	r0, r9
   818fa:	47b0      	blx	r6
					RF_SendBell(RF24_BELLDOOR);
   818fc:	2001      	movs	r0, #1
   818fe:	47c0      	blx	r8
				for(i=0;i<10;i++)
   81900:	3c01      	subs	r4, #1
   81902:	d1f9      	bne.n	818f8 <main+0x1a0>
				pio_set_pin_high(LED2_GPIO);
   81904:	2056      	movs	r0, #86	; 0x56
   81906:	4b1e      	ldr	r3, [pc, #120]	; (81980 <main+0x228>)
   81908:	4798      	blx	r3
				Timer_Sleep(500);
   8190a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   8190e:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   81910:	2056      	movs	r0, #86	; 0x56
   81912:	4b1a      	ldr	r3, [pc, #104]	; (8197c <main+0x224>)
   81914:	4798      	blx	r3
				break;
   81916:	e7bd      	b.n	81894 <main+0x13c>
				pio_set_pin_high(LED2_GPIO);
   81918:	2056      	movs	r0, #86	; 0x56
   8191a:	4b19      	ldr	r3, [pc, #100]	; (81980 <main+0x228>)
   8191c:	4798      	blx	r3
				if((FirstDetVal>(Threshold+(1<<17))) && (FirstDetVal<(Threshold+(3<<17))))
   8191e:	4b2b      	ldr	r3, [pc, #172]	; (819cc <main+0x274>)
   81920:	681b      	ldr	r3, [r3, #0]
   81922:	4a34      	ldr	r2, [pc, #208]	; (819f4 <main+0x29c>)
   81924:	6812      	ldr	r2, [r2, #0]
   81926:	f503 3100 	add.w	r1, r3, #131072	; 0x20000
   8192a:	4291      	cmp	r1, r2
   8192c:	d203      	bcs.n	81936 <main+0x1de>
   8192e:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
   81932:	429a      	cmp	r2, r3
   81934:	d309      	bcc.n	8194a <main+0x1f2>
				Timer_Sleep(3000);				
   81936:	f640 30b8 	movw	r0, #3000	; 0xbb8
   8193a:	47b0      	blx	r6
				pio_set_pin_low(LED2_GPIO);
   8193c:	2056      	movs	r0, #86	; 0x56
   8193e:	4b0f      	ldr	r3, [pc, #60]	; (8197c <main+0x224>)
   81940:	4798      	blx	r3
				pio_set_pin_high(PIO_PB21_IDX);
   81942:	2035      	movs	r0, #53	; 0x35
   81944:	4b0e      	ldr	r3, [pc, #56]	; (81980 <main+0x228>)
   81946:	4798      	blx	r3
				break;
   81948:	e7a4      	b.n	81894 <main+0x13c>
					pio_set_pin_low(PIO_PB21_IDX);
   8194a:	2035      	movs	r0, #53	; 0x35
   8194c:	4b0b      	ldr	r3, [pc, #44]	; (8197c <main+0x224>)
   8194e:	4798      	blx	r3
   81950:	e7f1      	b.n	81936 <main+0x1de>
			Threshold = Calibration*(1<<5)*MAX_CALIBRATION;
   81952:	4b25      	ldr	r3, [pc, #148]	; (819e8 <main+0x290>)
   81954:	681b      	ldr	r3, [r3, #0]
   81956:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8195a:	019b      	lsls	r3, r3, #6
   8195c:	4a1b      	ldr	r2, [pc, #108]	; (819cc <main+0x274>)
   8195e:	6013      	str	r3, [r2, #0]
   81960:	e7aa      	b.n	818b8 <main+0x160>
   81962:	bf00      	nop
   81964:	00081031 	.word	0x00081031
   81968:	28000008 	.word	0x28000008
   8196c:	400e1000 	.word	0x400e1000
   81970:	000812d5 	.word	0x000812d5
   81974:	400e1400 	.word	0x400e1400
   81978:	00081095 	.word	0x00081095
   8197c:	000811e9 	.word	0x000811e9
   81980:	000811cf 	.word	0x000811cf
   81984:	200710b4 	.word	0x200710b4
   81988:	0008028d 	.word	0x0008028d
   8198c:	20071074 	.word	0x20071074
   81990:	000802b9 	.word	0x000802b9
   81994:	200710f0 	.word	0x200710f0
   81998:	00080f85 	.word	0x00080f85
   8199c:	00080d25 	.word	0x00080d25
   819a0:	000803c1 	.word	0x000803c1
   819a4:	00080919 	.word	0x00080919
   819a8:	000809c9 	.word	0x000809c9
   819ac:	00080ffd 	.word	0x00080ffd
   819b0:	00081705 	.word	0x00081705
   819b4:	200710a0 	.word	0x200710a0
   819b8:	20071070 	.word	0x20071070
   819bc:	00080bed 	.word	0x00080bed
   819c0:	00080311 	.word	0x00080311
   819c4:	200704e0 	.word	0x200704e0
   819c8:	000803d9 	.word	0x000803d9
   819cc:	200704e8 	.word	0x200704e8
   819d0:	00081721 	.word	0x00081721
   819d4:	200704e4 	.word	0x200704e4
   819d8:	2007102c 	.word	0x2007102c
   819dc:	000802ed 	.word	0x000802ed
   819e0:	200710a8 	.word	0x200710a8
   819e4:	20071068 	.word	0x20071068
   819e8:	20071094 	.word	0x20071094
   819ec:	00086354 	.word	0x00086354
   819f0:	00080635 	.word	0x00080635
   819f4:	200710a4 	.word	0x200710a4

000819f8 <__libc_init_array>:
   819f8:	b570      	push	{r4, r5, r6, lr}
   819fa:	4e0f      	ldr	r6, [pc, #60]	; (81a38 <__libc_init_array+0x40>)
   819fc:	4d0f      	ldr	r5, [pc, #60]	; (81a3c <__libc_init_array+0x44>)
   819fe:	1b76      	subs	r6, r6, r5
   81a00:	10b6      	asrs	r6, r6, #2
   81a02:	bf18      	it	ne
   81a04:	2400      	movne	r4, #0
   81a06:	d005      	beq.n	81a14 <__libc_init_array+0x1c>
   81a08:	3401      	adds	r4, #1
   81a0a:	f855 3b04 	ldr.w	r3, [r5], #4
   81a0e:	4798      	blx	r3
   81a10:	42a6      	cmp	r6, r4
   81a12:	d1f9      	bne.n	81a08 <__libc_init_array+0x10>
   81a14:	4e0a      	ldr	r6, [pc, #40]	; (81a40 <__libc_init_array+0x48>)
   81a16:	4d0b      	ldr	r5, [pc, #44]	; (81a44 <__libc_init_array+0x4c>)
   81a18:	f004 fdea 	bl	865f0 <_init>
   81a1c:	1b76      	subs	r6, r6, r5
   81a1e:	10b6      	asrs	r6, r6, #2
   81a20:	bf18      	it	ne
   81a22:	2400      	movne	r4, #0
   81a24:	d006      	beq.n	81a34 <__libc_init_array+0x3c>
   81a26:	3401      	adds	r4, #1
   81a28:	f855 3b04 	ldr.w	r3, [r5], #4
   81a2c:	4798      	blx	r3
   81a2e:	42a6      	cmp	r6, r4
   81a30:	d1f9      	bne.n	81a26 <__libc_init_array+0x2e>
   81a32:	bd70      	pop	{r4, r5, r6, pc}
   81a34:	bd70      	pop	{r4, r5, r6, pc}
   81a36:	bf00      	nop
   81a38:	000865fc 	.word	0x000865fc
   81a3c:	000865fc 	.word	0x000865fc
   81a40:	00086604 	.word	0x00086604
   81a44:	000865fc 	.word	0x000865fc

00081a48 <malloc>:
   81a48:	4b02      	ldr	r3, [pc, #8]	; (81a54 <malloc+0xc>)
   81a4a:	4601      	mov	r1, r0
   81a4c:	6818      	ldr	r0, [r3, #0]
   81a4e:	f000 b803 	b.w	81a58 <_malloc_r>
   81a52:	bf00      	nop
   81a54:	200704ec 	.word	0x200704ec

00081a58 <_malloc_r>:
   81a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a5c:	f101 060b 	add.w	r6, r1, #11
   81a60:	2e16      	cmp	r6, #22
   81a62:	b083      	sub	sp, #12
   81a64:	4605      	mov	r5, r0
   81a66:	f240 809e 	bls.w	81ba6 <_malloc_r+0x14e>
   81a6a:	f036 0607 	bics.w	r6, r6, #7
   81a6e:	f100 80bd 	bmi.w	81bec <_malloc_r+0x194>
   81a72:	42b1      	cmp	r1, r6
   81a74:	f200 80ba 	bhi.w	81bec <_malloc_r+0x194>
   81a78:	f000 fb54 	bl	82124 <__malloc_lock>
   81a7c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81a80:	f0c0 8285 	bcc.w	81f8e <_malloc_r+0x536>
   81a84:	0a73      	lsrs	r3, r6, #9
   81a86:	f000 80b8 	beq.w	81bfa <_malloc_r+0x1a2>
   81a8a:	2b04      	cmp	r3, #4
   81a8c:	f200 816c 	bhi.w	81d68 <_malloc_r+0x310>
   81a90:	09b3      	lsrs	r3, r6, #6
   81a92:	f103 0039 	add.w	r0, r3, #57	; 0x39
   81a96:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   81a9a:	00c1      	lsls	r1, r0, #3
   81a9c:	4fb8      	ldr	r7, [pc, #736]	; (81d80 <_malloc_r+0x328>)
   81a9e:	4439      	add	r1, r7
   81aa0:	684c      	ldr	r4, [r1, #4]
   81aa2:	3908      	subs	r1, #8
   81aa4:	42a1      	cmp	r1, r4
   81aa6:	d106      	bne.n	81ab6 <_malloc_r+0x5e>
   81aa8:	e00c      	b.n	81ac4 <_malloc_r+0x6c>
   81aaa:	2a00      	cmp	r2, #0
   81aac:	f280 80ab 	bge.w	81c06 <_malloc_r+0x1ae>
   81ab0:	68e4      	ldr	r4, [r4, #12]
   81ab2:	42a1      	cmp	r1, r4
   81ab4:	d006      	beq.n	81ac4 <_malloc_r+0x6c>
   81ab6:	6863      	ldr	r3, [r4, #4]
   81ab8:	f023 0303 	bic.w	r3, r3, #3
   81abc:	1b9a      	subs	r2, r3, r6
   81abe:	2a0f      	cmp	r2, #15
   81ac0:	ddf3      	ble.n	81aaa <_malloc_r+0x52>
   81ac2:	4670      	mov	r0, lr
   81ac4:	693c      	ldr	r4, [r7, #16]
   81ac6:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 81d94 <_malloc_r+0x33c>
   81aca:	4574      	cmp	r4, lr
   81acc:	f000 819e 	beq.w	81e0c <_malloc_r+0x3b4>
   81ad0:	6863      	ldr	r3, [r4, #4]
   81ad2:	f023 0303 	bic.w	r3, r3, #3
   81ad6:	1b9a      	subs	r2, r3, r6
   81ad8:	2a0f      	cmp	r2, #15
   81ada:	f300 8183 	bgt.w	81de4 <_malloc_r+0x38c>
   81ade:	2a00      	cmp	r2, #0
   81ae0:	f8c7 e014 	str.w	lr, [r7, #20]
   81ae4:	f8c7 e010 	str.w	lr, [r7, #16]
   81ae8:	f280 8091 	bge.w	81c0e <_malloc_r+0x1b6>
   81aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81af0:	f080 8154 	bcs.w	81d9c <_malloc_r+0x344>
   81af4:	2201      	movs	r2, #1
   81af6:	08db      	lsrs	r3, r3, #3
   81af8:	6879      	ldr	r1, [r7, #4]
   81afa:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   81afe:	4413      	add	r3, r2
   81b00:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   81b04:	fa02 f20c 	lsl.w	r2, r2, ip
   81b08:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   81b0c:	430a      	orrs	r2, r1
   81b0e:	f1ac 0108 	sub.w	r1, ip, #8
   81b12:	60e1      	str	r1, [r4, #12]
   81b14:	f8c4 8008 	str.w	r8, [r4, #8]
   81b18:	607a      	str	r2, [r7, #4]
   81b1a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   81b1e:	f8c8 400c 	str.w	r4, [r8, #12]
   81b22:	2401      	movs	r4, #1
   81b24:	1083      	asrs	r3, r0, #2
   81b26:	409c      	lsls	r4, r3
   81b28:	4294      	cmp	r4, r2
   81b2a:	d87d      	bhi.n	81c28 <_malloc_r+0x1d0>
   81b2c:	4214      	tst	r4, r2
   81b2e:	d106      	bne.n	81b3e <_malloc_r+0xe6>
   81b30:	f020 0003 	bic.w	r0, r0, #3
   81b34:	0064      	lsls	r4, r4, #1
   81b36:	4214      	tst	r4, r2
   81b38:	f100 0004 	add.w	r0, r0, #4
   81b3c:	d0fa      	beq.n	81b34 <_malloc_r+0xdc>
   81b3e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   81b42:	46cc      	mov	ip, r9
   81b44:	4680      	mov	r8, r0
   81b46:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81b4a:	459c      	cmp	ip, r3
   81b4c:	d107      	bne.n	81b5e <_malloc_r+0x106>
   81b4e:	e15f      	b.n	81e10 <_malloc_r+0x3b8>
   81b50:	2a00      	cmp	r2, #0
   81b52:	f280 816d 	bge.w	81e30 <_malloc_r+0x3d8>
   81b56:	68db      	ldr	r3, [r3, #12]
   81b58:	459c      	cmp	ip, r3
   81b5a:	f000 8159 	beq.w	81e10 <_malloc_r+0x3b8>
   81b5e:	6859      	ldr	r1, [r3, #4]
   81b60:	f021 0103 	bic.w	r1, r1, #3
   81b64:	1b8a      	subs	r2, r1, r6
   81b66:	2a0f      	cmp	r2, #15
   81b68:	ddf2      	ble.n	81b50 <_malloc_r+0xf8>
   81b6a:	68dc      	ldr	r4, [r3, #12]
   81b6c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   81b70:	f046 0801 	orr.w	r8, r6, #1
   81b74:	4628      	mov	r0, r5
   81b76:	441e      	add	r6, r3
   81b78:	f042 0501 	orr.w	r5, r2, #1
   81b7c:	f8c3 8004 	str.w	r8, [r3, #4]
   81b80:	f8cc 400c 	str.w	r4, [ip, #12]
   81b84:	f8c4 c008 	str.w	ip, [r4, #8]
   81b88:	617e      	str	r6, [r7, #20]
   81b8a:	613e      	str	r6, [r7, #16]
   81b8c:	f8c6 e00c 	str.w	lr, [r6, #12]
   81b90:	f8c6 e008 	str.w	lr, [r6, #8]
   81b94:	6075      	str	r5, [r6, #4]
   81b96:	505a      	str	r2, [r3, r1]
   81b98:	9300      	str	r3, [sp, #0]
   81b9a:	f000 fac9 	bl	82130 <__malloc_unlock>
   81b9e:	9b00      	ldr	r3, [sp, #0]
   81ba0:	f103 0408 	add.w	r4, r3, #8
   81ba4:	e01e      	b.n	81be4 <_malloc_r+0x18c>
   81ba6:	2910      	cmp	r1, #16
   81ba8:	d820      	bhi.n	81bec <_malloc_r+0x194>
   81baa:	f000 fabb 	bl	82124 <__malloc_lock>
   81bae:	2610      	movs	r6, #16
   81bb0:	2318      	movs	r3, #24
   81bb2:	2002      	movs	r0, #2
   81bb4:	4f72      	ldr	r7, [pc, #456]	; (81d80 <_malloc_r+0x328>)
   81bb6:	443b      	add	r3, r7
   81bb8:	685c      	ldr	r4, [r3, #4]
   81bba:	f1a3 0208 	sub.w	r2, r3, #8
   81bbe:	4294      	cmp	r4, r2
   81bc0:	f000 812f 	beq.w	81e22 <_malloc_r+0x3ca>
   81bc4:	6863      	ldr	r3, [r4, #4]
   81bc6:	68e1      	ldr	r1, [r4, #12]
   81bc8:	f023 0303 	bic.w	r3, r3, #3
   81bcc:	4423      	add	r3, r4
   81bce:	685a      	ldr	r2, [r3, #4]
   81bd0:	68a6      	ldr	r6, [r4, #8]
   81bd2:	f042 0201 	orr.w	r2, r2, #1
   81bd6:	60f1      	str	r1, [r6, #12]
   81bd8:	4628      	mov	r0, r5
   81bda:	608e      	str	r6, [r1, #8]
   81bdc:	605a      	str	r2, [r3, #4]
   81bde:	f000 faa7 	bl	82130 <__malloc_unlock>
   81be2:	3408      	adds	r4, #8
   81be4:	4620      	mov	r0, r4
   81be6:	b003      	add	sp, #12
   81be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bec:	2400      	movs	r4, #0
   81bee:	230c      	movs	r3, #12
   81bf0:	4620      	mov	r0, r4
   81bf2:	602b      	str	r3, [r5, #0]
   81bf4:	b003      	add	sp, #12
   81bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bfa:	2040      	movs	r0, #64	; 0x40
   81bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
   81c00:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   81c04:	e74a      	b.n	81a9c <_malloc_r+0x44>
   81c06:	4423      	add	r3, r4
   81c08:	685a      	ldr	r2, [r3, #4]
   81c0a:	68e1      	ldr	r1, [r4, #12]
   81c0c:	e7e0      	b.n	81bd0 <_malloc_r+0x178>
   81c0e:	4423      	add	r3, r4
   81c10:	685a      	ldr	r2, [r3, #4]
   81c12:	4628      	mov	r0, r5
   81c14:	f042 0201 	orr.w	r2, r2, #1
   81c18:	605a      	str	r2, [r3, #4]
   81c1a:	3408      	adds	r4, #8
   81c1c:	f000 fa88 	bl	82130 <__malloc_unlock>
   81c20:	4620      	mov	r0, r4
   81c22:	b003      	add	sp, #12
   81c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c28:	68bc      	ldr	r4, [r7, #8]
   81c2a:	6863      	ldr	r3, [r4, #4]
   81c2c:	f023 0803 	bic.w	r8, r3, #3
   81c30:	45b0      	cmp	r8, r6
   81c32:	d304      	bcc.n	81c3e <_malloc_r+0x1e6>
   81c34:	eba8 0306 	sub.w	r3, r8, r6
   81c38:	2b0f      	cmp	r3, #15
   81c3a:	f300 8085 	bgt.w	81d48 <_malloc_r+0x2f0>
   81c3e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 81d98 <_malloc_r+0x340>
   81c42:	4b50      	ldr	r3, [pc, #320]	; (81d84 <_malloc_r+0x32c>)
   81c44:	f8d9 2000 	ldr.w	r2, [r9]
   81c48:	681b      	ldr	r3, [r3, #0]
   81c4a:	3201      	adds	r2, #1
   81c4c:	4433      	add	r3, r6
   81c4e:	eb04 0a08 	add.w	sl, r4, r8
   81c52:	f000 8154 	beq.w	81efe <_malloc_r+0x4a6>
   81c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   81c5a:	330f      	adds	r3, #15
   81c5c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   81c60:	f02b 0b0f 	bic.w	fp, fp, #15
   81c64:	4659      	mov	r1, fp
   81c66:	4628      	mov	r0, r5
   81c68:	f000 fa68 	bl	8213c <_sbrk_r>
   81c6c:	1c41      	adds	r1, r0, #1
   81c6e:	4602      	mov	r2, r0
   81c70:	f000 80fb 	beq.w	81e6a <_malloc_r+0x412>
   81c74:	4582      	cmp	sl, r0
   81c76:	f200 80f6 	bhi.w	81e66 <_malloc_r+0x40e>
   81c7a:	4b43      	ldr	r3, [pc, #268]	; (81d88 <_malloc_r+0x330>)
   81c7c:	6819      	ldr	r1, [r3, #0]
   81c7e:	4459      	add	r1, fp
   81c80:	6019      	str	r1, [r3, #0]
   81c82:	f000 814c 	beq.w	81f1e <_malloc_r+0x4c6>
   81c86:	f8d9 0000 	ldr.w	r0, [r9]
   81c8a:	3001      	adds	r0, #1
   81c8c:	bf1b      	ittet	ne
   81c8e:	eba2 0a0a 	subne.w	sl, r2, sl
   81c92:	4451      	addne	r1, sl
   81c94:	f8c9 2000 	streq.w	r2, [r9]
   81c98:	6019      	strne	r1, [r3, #0]
   81c9a:	f012 0107 	ands.w	r1, r2, #7
   81c9e:	f000 8114 	beq.w	81eca <_malloc_r+0x472>
   81ca2:	f1c1 0008 	rsb	r0, r1, #8
   81ca6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   81caa:	4402      	add	r2, r0
   81cac:	3108      	adds	r1, #8
   81cae:	eb02 090b 	add.w	r9, r2, fp
   81cb2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   81cb6:	eba1 0909 	sub.w	r9, r1, r9
   81cba:	4649      	mov	r1, r9
   81cbc:	4628      	mov	r0, r5
   81cbe:	9301      	str	r3, [sp, #4]
   81cc0:	9200      	str	r2, [sp, #0]
   81cc2:	f000 fa3b 	bl	8213c <_sbrk_r>
   81cc6:	1c43      	adds	r3, r0, #1
   81cc8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   81ccc:	f000 8142 	beq.w	81f54 <_malloc_r+0x4fc>
   81cd0:	1a80      	subs	r0, r0, r2
   81cd2:	4448      	add	r0, r9
   81cd4:	f040 0001 	orr.w	r0, r0, #1
   81cd8:	6819      	ldr	r1, [r3, #0]
   81cda:	42bc      	cmp	r4, r7
   81cdc:	4449      	add	r1, r9
   81cde:	60ba      	str	r2, [r7, #8]
   81ce0:	6019      	str	r1, [r3, #0]
   81ce2:	6050      	str	r0, [r2, #4]
   81ce4:	d017      	beq.n	81d16 <_malloc_r+0x2be>
   81ce6:	f1b8 0f0f 	cmp.w	r8, #15
   81cea:	f240 80fa 	bls.w	81ee2 <_malloc_r+0x48a>
   81cee:	f04f 0c05 	mov.w	ip, #5
   81cf2:	6862      	ldr	r2, [r4, #4]
   81cf4:	f1a8 000c 	sub.w	r0, r8, #12
   81cf8:	f020 0007 	bic.w	r0, r0, #7
   81cfc:	f002 0201 	and.w	r2, r2, #1
   81d00:	eb04 0e00 	add.w	lr, r4, r0
   81d04:	4302      	orrs	r2, r0
   81d06:	280f      	cmp	r0, #15
   81d08:	6062      	str	r2, [r4, #4]
   81d0a:	f8ce c004 	str.w	ip, [lr, #4]
   81d0e:	f8ce c008 	str.w	ip, [lr, #8]
   81d12:	f200 8116 	bhi.w	81f42 <_malloc_r+0x4ea>
   81d16:	4b1d      	ldr	r3, [pc, #116]	; (81d8c <_malloc_r+0x334>)
   81d18:	68bc      	ldr	r4, [r7, #8]
   81d1a:	681a      	ldr	r2, [r3, #0]
   81d1c:	4291      	cmp	r1, r2
   81d1e:	bf88      	it	hi
   81d20:	6019      	strhi	r1, [r3, #0]
   81d22:	4b1b      	ldr	r3, [pc, #108]	; (81d90 <_malloc_r+0x338>)
   81d24:	681a      	ldr	r2, [r3, #0]
   81d26:	4291      	cmp	r1, r2
   81d28:	6862      	ldr	r2, [r4, #4]
   81d2a:	bf88      	it	hi
   81d2c:	6019      	strhi	r1, [r3, #0]
   81d2e:	f022 0203 	bic.w	r2, r2, #3
   81d32:	4296      	cmp	r6, r2
   81d34:	eba2 0306 	sub.w	r3, r2, r6
   81d38:	d801      	bhi.n	81d3e <_malloc_r+0x2e6>
   81d3a:	2b0f      	cmp	r3, #15
   81d3c:	dc04      	bgt.n	81d48 <_malloc_r+0x2f0>
   81d3e:	4628      	mov	r0, r5
   81d40:	f000 f9f6 	bl	82130 <__malloc_unlock>
   81d44:	2400      	movs	r4, #0
   81d46:	e74d      	b.n	81be4 <_malloc_r+0x18c>
   81d48:	f046 0201 	orr.w	r2, r6, #1
   81d4c:	f043 0301 	orr.w	r3, r3, #1
   81d50:	4426      	add	r6, r4
   81d52:	6062      	str	r2, [r4, #4]
   81d54:	4628      	mov	r0, r5
   81d56:	60be      	str	r6, [r7, #8]
   81d58:	3408      	adds	r4, #8
   81d5a:	6073      	str	r3, [r6, #4]
   81d5c:	f000 f9e8 	bl	82130 <__malloc_unlock>
   81d60:	4620      	mov	r0, r4
   81d62:	b003      	add	sp, #12
   81d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d68:	2b14      	cmp	r3, #20
   81d6a:	d970      	bls.n	81e4e <_malloc_r+0x3f6>
   81d6c:	2b54      	cmp	r3, #84	; 0x54
   81d6e:	f200 80a2 	bhi.w	81eb6 <_malloc_r+0x45e>
   81d72:	0b33      	lsrs	r3, r6, #12
   81d74:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   81d78:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   81d7c:	00c1      	lsls	r1, r0, #3
   81d7e:	e68d      	b.n	81a9c <_malloc_r+0x44>
   81d80:	20070918 	.word	0x20070918
   81d84:	20071064 	.word	0x20071064
   81d88:	20071034 	.word	0x20071034
   81d8c:	2007105c 	.word	0x2007105c
   81d90:	20071060 	.word	0x20071060
   81d94:	20070920 	.word	0x20070920
   81d98:	20070d20 	.word	0x20070d20
   81d9c:	0a5a      	lsrs	r2, r3, #9
   81d9e:	2a04      	cmp	r2, #4
   81da0:	d95b      	bls.n	81e5a <_malloc_r+0x402>
   81da2:	2a14      	cmp	r2, #20
   81da4:	f200 80ae 	bhi.w	81f04 <_malloc_r+0x4ac>
   81da8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81dac:	00c9      	lsls	r1, r1, #3
   81dae:	325b      	adds	r2, #91	; 0x5b
   81db0:	eb07 0c01 	add.w	ip, r7, r1
   81db4:	5879      	ldr	r1, [r7, r1]
   81db6:	f1ac 0c08 	sub.w	ip, ip, #8
   81dba:	458c      	cmp	ip, r1
   81dbc:	f000 8088 	beq.w	81ed0 <_malloc_r+0x478>
   81dc0:	684a      	ldr	r2, [r1, #4]
   81dc2:	f022 0203 	bic.w	r2, r2, #3
   81dc6:	4293      	cmp	r3, r2
   81dc8:	d273      	bcs.n	81eb2 <_malloc_r+0x45a>
   81dca:	6889      	ldr	r1, [r1, #8]
   81dcc:	458c      	cmp	ip, r1
   81dce:	d1f7      	bne.n	81dc0 <_malloc_r+0x368>
   81dd0:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81dd4:	687a      	ldr	r2, [r7, #4]
   81dd6:	60e3      	str	r3, [r4, #12]
   81dd8:	f8c4 c008 	str.w	ip, [r4, #8]
   81ddc:	609c      	str	r4, [r3, #8]
   81dde:	f8cc 400c 	str.w	r4, [ip, #12]
   81de2:	e69e      	b.n	81b22 <_malloc_r+0xca>
   81de4:	f046 0c01 	orr.w	ip, r6, #1
   81de8:	f042 0101 	orr.w	r1, r2, #1
   81dec:	4426      	add	r6, r4
   81dee:	f8c4 c004 	str.w	ip, [r4, #4]
   81df2:	4628      	mov	r0, r5
   81df4:	617e      	str	r6, [r7, #20]
   81df6:	613e      	str	r6, [r7, #16]
   81df8:	f8c6 e00c 	str.w	lr, [r6, #12]
   81dfc:	f8c6 e008 	str.w	lr, [r6, #8]
   81e00:	6071      	str	r1, [r6, #4]
   81e02:	50e2      	str	r2, [r4, r3]
   81e04:	f000 f994 	bl	82130 <__malloc_unlock>
   81e08:	3408      	adds	r4, #8
   81e0a:	e6eb      	b.n	81be4 <_malloc_r+0x18c>
   81e0c:	687a      	ldr	r2, [r7, #4]
   81e0e:	e688      	b.n	81b22 <_malloc_r+0xca>
   81e10:	f108 0801 	add.w	r8, r8, #1
   81e14:	f018 0f03 	tst.w	r8, #3
   81e18:	f10c 0c08 	add.w	ip, ip, #8
   81e1c:	f47f ae93 	bne.w	81b46 <_malloc_r+0xee>
   81e20:	e02d      	b.n	81e7e <_malloc_r+0x426>
   81e22:	68dc      	ldr	r4, [r3, #12]
   81e24:	42a3      	cmp	r3, r4
   81e26:	bf08      	it	eq
   81e28:	3002      	addeq	r0, #2
   81e2a:	f43f ae4b 	beq.w	81ac4 <_malloc_r+0x6c>
   81e2e:	e6c9      	b.n	81bc4 <_malloc_r+0x16c>
   81e30:	461c      	mov	r4, r3
   81e32:	4419      	add	r1, r3
   81e34:	684a      	ldr	r2, [r1, #4]
   81e36:	68db      	ldr	r3, [r3, #12]
   81e38:	f854 6f08 	ldr.w	r6, [r4, #8]!
   81e3c:	f042 0201 	orr.w	r2, r2, #1
   81e40:	604a      	str	r2, [r1, #4]
   81e42:	4628      	mov	r0, r5
   81e44:	60f3      	str	r3, [r6, #12]
   81e46:	609e      	str	r6, [r3, #8]
   81e48:	f000 f972 	bl	82130 <__malloc_unlock>
   81e4c:	e6ca      	b.n	81be4 <_malloc_r+0x18c>
   81e4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   81e52:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   81e56:	00c1      	lsls	r1, r0, #3
   81e58:	e620      	b.n	81a9c <_malloc_r+0x44>
   81e5a:	099a      	lsrs	r2, r3, #6
   81e5c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   81e60:	00c9      	lsls	r1, r1, #3
   81e62:	3238      	adds	r2, #56	; 0x38
   81e64:	e7a4      	b.n	81db0 <_malloc_r+0x358>
   81e66:	42bc      	cmp	r4, r7
   81e68:	d054      	beq.n	81f14 <_malloc_r+0x4bc>
   81e6a:	68bc      	ldr	r4, [r7, #8]
   81e6c:	6862      	ldr	r2, [r4, #4]
   81e6e:	f022 0203 	bic.w	r2, r2, #3
   81e72:	e75e      	b.n	81d32 <_malloc_r+0x2da>
   81e74:	f859 3908 	ldr.w	r3, [r9], #-8
   81e78:	4599      	cmp	r9, r3
   81e7a:	f040 8086 	bne.w	81f8a <_malloc_r+0x532>
   81e7e:	f010 0f03 	tst.w	r0, #3
   81e82:	f100 30ff 	add.w	r0, r0, #4294967295
   81e86:	d1f5      	bne.n	81e74 <_malloc_r+0x41c>
   81e88:	687b      	ldr	r3, [r7, #4]
   81e8a:	ea23 0304 	bic.w	r3, r3, r4
   81e8e:	607b      	str	r3, [r7, #4]
   81e90:	0064      	lsls	r4, r4, #1
   81e92:	429c      	cmp	r4, r3
   81e94:	f63f aec8 	bhi.w	81c28 <_malloc_r+0x1d0>
   81e98:	2c00      	cmp	r4, #0
   81e9a:	f43f aec5 	beq.w	81c28 <_malloc_r+0x1d0>
   81e9e:	421c      	tst	r4, r3
   81ea0:	4640      	mov	r0, r8
   81ea2:	f47f ae4c 	bne.w	81b3e <_malloc_r+0xe6>
   81ea6:	0064      	lsls	r4, r4, #1
   81ea8:	421c      	tst	r4, r3
   81eaa:	f100 0004 	add.w	r0, r0, #4
   81eae:	d0fa      	beq.n	81ea6 <_malloc_r+0x44e>
   81eb0:	e645      	b.n	81b3e <_malloc_r+0xe6>
   81eb2:	468c      	mov	ip, r1
   81eb4:	e78c      	b.n	81dd0 <_malloc_r+0x378>
   81eb6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   81eba:	d815      	bhi.n	81ee8 <_malloc_r+0x490>
   81ebc:	0bf3      	lsrs	r3, r6, #15
   81ebe:	f103 0078 	add.w	r0, r3, #120	; 0x78
   81ec2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   81ec6:	00c1      	lsls	r1, r0, #3
   81ec8:	e5e8      	b.n	81a9c <_malloc_r+0x44>
   81eca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81ece:	e6ee      	b.n	81cae <_malloc_r+0x256>
   81ed0:	2101      	movs	r1, #1
   81ed2:	687b      	ldr	r3, [r7, #4]
   81ed4:	1092      	asrs	r2, r2, #2
   81ed6:	fa01 f202 	lsl.w	r2, r1, r2
   81eda:	431a      	orrs	r2, r3
   81edc:	607a      	str	r2, [r7, #4]
   81ede:	4663      	mov	r3, ip
   81ee0:	e779      	b.n	81dd6 <_malloc_r+0x37e>
   81ee2:	2301      	movs	r3, #1
   81ee4:	6053      	str	r3, [r2, #4]
   81ee6:	e72a      	b.n	81d3e <_malloc_r+0x2e6>
   81ee8:	f240 5254 	movw	r2, #1364	; 0x554
   81eec:	4293      	cmp	r3, r2
   81eee:	d822      	bhi.n	81f36 <_malloc_r+0x4de>
   81ef0:	0cb3      	lsrs	r3, r6, #18
   81ef2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   81ef6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   81efa:	00c1      	lsls	r1, r0, #3
   81efc:	e5ce      	b.n	81a9c <_malloc_r+0x44>
   81efe:	f103 0b10 	add.w	fp, r3, #16
   81f02:	e6af      	b.n	81c64 <_malloc_r+0x20c>
   81f04:	2a54      	cmp	r2, #84	; 0x54
   81f06:	d829      	bhi.n	81f5c <_malloc_r+0x504>
   81f08:	0b1a      	lsrs	r2, r3, #12
   81f0a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   81f0e:	00c9      	lsls	r1, r1, #3
   81f10:	326e      	adds	r2, #110	; 0x6e
   81f12:	e74d      	b.n	81db0 <_malloc_r+0x358>
   81f14:	4b20      	ldr	r3, [pc, #128]	; (81f98 <_malloc_r+0x540>)
   81f16:	6819      	ldr	r1, [r3, #0]
   81f18:	4459      	add	r1, fp
   81f1a:	6019      	str	r1, [r3, #0]
   81f1c:	e6b3      	b.n	81c86 <_malloc_r+0x22e>
   81f1e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   81f22:	2800      	cmp	r0, #0
   81f24:	f47f aeaf 	bne.w	81c86 <_malloc_r+0x22e>
   81f28:	eb08 030b 	add.w	r3, r8, fp
   81f2c:	68ba      	ldr	r2, [r7, #8]
   81f2e:	f043 0301 	orr.w	r3, r3, #1
   81f32:	6053      	str	r3, [r2, #4]
   81f34:	e6ef      	b.n	81d16 <_malloc_r+0x2be>
   81f36:	207f      	movs	r0, #127	; 0x7f
   81f38:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81f3c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   81f40:	e5ac      	b.n	81a9c <_malloc_r+0x44>
   81f42:	f104 0108 	add.w	r1, r4, #8
   81f46:	4628      	mov	r0, r5
   81f48:	9300      	str	r3, [sp, #0]
   81f4a:	f002 fc0d 	bl	84768 <_free_r>
   81f4e:	9b00      	ldr	r3, [sp, #0]
   81f50:	6819      	ldr	r1, [r3, #0]
   81f52:	e6e0      	b.n	81d16 <_malloc_r+0x2be>
   81f54:	2001      	movs	r0, #1
   81f56:	f04f 0900 	mov.w	r9, #0
   81f5a:	e6bd      	b.n	81cd8 <_malloc_r+0x280>
   81f5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81f60:	d805      	bhi.n	81f6e <_malloc_r+0x516>
   81f62:	0bda      	lsrs	r2, r3, #15
   81f64:	f102 0178 	add.w	r1, r2, #120	; 0x78
   81f68:	00c9      	lsls	r1, r1, #3
   81f6a:	3277      	adds	r2, #119	; 0x77
   81f6c:	e720      	b.n	81db0 <_malloc_r+0x358>
   81f6e:	f240 5154 	movw	r1, #1364	; 0x554
   81f72:	428a      	cmp	r2, r1
   81f74:	d805      	bhi.n	81f82 <_malloc_r+0x52a>
   81f76:	0c9a      	lsrs	r2, r3, #18
   81f78:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81f7c:	00c9      	lsls	r1, r1, #3
   81f7e:	327c      	adds	r2, #124	; 0x7c
   81f80:	e716      	b.n	81db0 <_malloc_r+0x358>
   81f82:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   81f86:	227e      	movs	r2, #126	; 0x7e
   81f88:	e712      	b.n	81db0 <_malloc_r+0x358>
   81f8a:	687b      	ldr	r3, [r7, #4]
   81f8c:	e780      	b.n	81e90 <_malloc_r+0x438>
   81f8e:	08f0      	lsrs	r0, r6, #3
   81f90:	f106 0308 	add.w	r3, r6, #8
   81f94:	e60e      	b.n	81bb4 <_malloc_r+0x15c>
   81f96:	bf00      	nop
   81f98:	20071034 	.word	0x20071034

00081f9c <memcpy>:
   81f9c:	4684      	mov	ip, r0
   81f9e:	ea41 0300 	orr.w	r3, r1, r0
   81fa2:	f013 0303 	ands.w	r3, r3, #3
   81fa6:	d149      	bne.n	8203c <memcpy+0xa0>
   81fa8:	3a40      	subs	r2, #64	; 0x40
   81faa:	d323      	bcc.n	81ff4 <memcpy+0x58>
   81fac:	680b      	ldr	r3, [r1, #0]
   81fae:	6003      	str	r3, [r0, #0]
   81fb0:	684b      	ldr	r3, [r1, #4]
   81fb2:	6043      	str	r3, [r0, #4]
   81fb4:	688b      	ldr	r3, [r1, #8]
   81fb6:	6083      	str	r3, [r0, #8]
   81fb8:	68cb      	ldr	r3, [r1, #12]
   81fba:	60c3      	str	r3, [r0, #12]
   81fbc:	690b      	ldr	r3, [r1, #16]
   81fbe:	6103      	str	r3, [r0, #16]
   81fc0:	694b      	ldr	r3, [r1, #20]
   81fc2:	6143      	str	r3, [r0, #20]
   81fc4:	698b      	ldr	r3, [r1, #24]
   81fc6:	6183      	str	r3, [r0, #24]
   81fc8:	69cb      	ldr	r3, [r1, #28]
   81fca:	61c3      	str	r3, [r0, #28]
   81fcc:	6a0b      	ldr	r3, [r1, #32]
   81fce:	6203      	str	r3, [r0, #32]
   81fd0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81fd2:	6243      	str	r3, [r0, #36]	; 0x24
   81fd4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81fd6:	6283      	str	r3, [r0, #40]	; 0x28
   81fd8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81fda:	62c3      	str	r3, [r0, #44]	; 0x2c
   81fdc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81fde:	6303      	str	r3, [r0, #48]	; 0x30
   81fe0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81fe2:	6343      	str	r3, [r0, #52]	; 0x34
   81fe4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81fe6:	6383      	str	r3, [r0, #56]	; 0x38
   81fe8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81fea:	63c3      	str	r3, [r0, #60]	; 0x3c
   81fec:	3040      	adds	r0, #64	; 0x40
   81fee:	3140      	adds	r1, #64	; 0x40
   81ff0:	3a40      	subs	r2, #64	; 0x40
   81ff2:	d2db      	bcs.n	81fac <memcpy+0x10>
   81ff4:	3230      	adds	r2, #48	; 0x30
   81ff6:	d30b      	bcc.n	82010 <memcpy+0x74>
   81ff8:	680b      	ldr	r3, [r1, #0]
   81ffa:	6003      	str	r3, [r0, #0]
   81ffc:	684b      	ldr	r3, [r1, #4]
   81ffe:	6043      	str	r3, [r0, #4]
   82000:	688b      	ldr	r3, [r1, #8]
   82002:	6083      	str	r3, [r0, #8]
   82004:	68cb      	ldr	r3, [r1, #12]
   82006:	60c3      	str	r3, [r0, #12]
   82008:	3010      	adds	r0, #16
   8200a:	3110      	adds	r1, #16
   8200c:	3a10      	subs	r2, #16
   8200e:	d2f3      	bcs.n	81ff8 <memcpy+0x5c>
   82010:	320c      	adds	r2, #12
   82012:	d305      	bcc.n	82020 <memcpy+0x84>
   82014:	f851 3b04 	ldr.w	r3, [r1], #4
   82018:	f840 3b04 	str.w	r3, [r0], #4
   8201c:	3a04      	subs	r2, #4
   8201e:	d2f9      	bcs.n	82014 <memcpy+0x78>
   82020:	3204      	adds	r2, #4
   82022:	d008      	beq.n	82036 <memcpy+0x9a>
   82024:	07d2      	lsls	r2, r2, #31
   82026:	bf1c      	itt	ne
   82028:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8202c:	f800 3b01 	strbne.w	r3, [r0], #1
   82030:	d301      	bcc.n	82036 <memcpy+0x9a>
   82032:	880b      	ldrh	r3, [r1, #0]
   82034:	8003      	strh	r3, [r0, #0]
   82036:	4660      	mov	r0, ip
   82038:	4770      	bx	lr
   8203a:	bf00      	nop
   8203c:	2a08      	cmp	r2, #8
   8203e:	d313      	bcc.n	82068 <memcpy+0xcc>
   82040:	078b      	lsls	r3, r1, #30
   82042:	d0b1      	beq.n	81fa8 <memcpy+0xc>
   82044:	f010 0303 	ands.w	r3, r0, #3
   82048:	d0ae      	beq.n	81fa8 <memcpy+0xc>
   8204a:	f1c3 0304 	rsb	r3, r3, #4
   8204e:	1ad2      	subs	r2, r2, r3
   82050:	07db      	lsls	r3, r3, #31
   82052:	bf1c      	itt	ne
   82054:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82058:	f800 3b01 	strbne.w	r3, [r0], #1
   8205c:	d3a4      	bcc.n	81fa8 <memcpy+0xc>
   8205e:	f831 3b02 	ldrh.w	r3, [r1], #2
   82062:	f820 3b02 	strh.w	r3, [r0], #2
   82066:	e79f      	b.n	81fa8 <memcpy+0xc>
   82068:	3a04      	subs	r2, #4
   8206a:	d3d9      	bcc.n	82020 <memcpy+0x84>
   8206c:	3a01      	subs	r2, #1
   8206e:	f811 3b01 	ldrb.w	r3, [r1], #1
   82072:	f800 3b01 	strb.w	r3, [r0], #1
   82076:	d2f9      	bcs.n	8206c <memcpy+0xd0>
   82078:	780b      	ldrb	r3, [r1, #0]
   8207a:	7003      	strb	r3, [r0, #0]
   8207c:	784b      	ldrb	r3, [r1, #1]
   8207e:	7043      	strb	r3, [r0, #1]
   82080:	788b      	ldrb	r3, [r1, #2]
   82082:	7083      	strb	r3, [r0, #2]
   82084:	4660      	mov	r0, ip
   82086:	4770      	bx	lr

00082088 <memset>:
   82088:	b470      	push	{r4, r5, r6}
   8208a:	0786      	lsls	r6, r0, #30
   8208c:	d046      	beq.n	8211c <memset+0x94>
   8208e:	1e54      	subs	r4, r2, #1
   82090:	2a00      	cmp	r2, #0
   82092:	d041      	beq.n	82118 <memset+0x90>
   82094:	b2ca      	uxtb	r2, r1
   82096:	4603      	mov	r3, r0
   82098:	e002      	b.n	820a0 <memset+0x18>
   8209a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8209e:	d33b      	bcc.n	82118 <memset+0x90>
   820a0:	f803 2b01 	strb.w	r2, [r3], #1
   820a4:	079d      	lsls	r5, r3, #30
   820a6:	d1f8      	bne.n	8209a <memset+0x12>
   820a8:	2c03      	cmp	r4, #3
   820aa:	d92e      	bls.n	8210a <memset+0x82>
   820ac:	b2cd      	uxtb	r5, r1
   820ae:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   820b2:	2c0f      	cmp	r4, #15
   820b4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   820b8:	d919      	bls.n	820ee <memset+0x66>
   820ba:	4626      	mov	r6, r4
   820bc:	f103 0210 	add.w	r2, r3, #16
   820c0:	3e10      	subs	r6, #16
   820c2:	2e0f      	cmp	r6, #15
   820c4:	f842 5c10 	str.w	r5, [r2, #-16]
   820c8:	f842 5c0c 	str.w	r5, [r2, #-12]
   820cc:	f842 5c08 	str.w	r5, [r2, #-8]
   820d0:	f842 5c04 	str.w	r5, [r2, #-4]
   820d4:	f102 0210 	add.w	r2, r2, #16
   820d8:	d8f2      	bhi.n	820c0 <memset+0x38>
   820da:	f1a4 0210 	sub.w	r2, r4, #16
   820de:	f022 020f 	bic.w	r2, r2, #15
   820e2:	f004 040f 	and.w	r4, r4, #15
   820e6:	3210      	adds	r2, #16
   820e8:	2c03      	cmp	r4, #3
   820ea:	4413      	add	r3, r2
   820ec:	d90d      	bls.n	8210a <memset+0x82>
   820ee:	461e      	mov	r6, r3
   820f0:	4622      	mov	r2, r4
   820f2:	3a04      	subs	r2, #4
   820f4:	2a03      	cmp	r2, #3
   820f6:	f846 5b04 	str.w	r5, [r6], #4
   820fa:	d8fa      	bhi.n	820f2 <memset+0x6a>
   820fc:	1f22      	subs	r2, r4, #4
   820fe:	f022 0203 	bic.w	r2, r2, #3
   82102:	3204      	adds	r2, #4
   82104:	4413      	add	r3, r2
   82106:	f004 0403 	and.w	r4, r4, #3
   8210a:	b12c      	cbz	r4, 82118 <memset+0x90>
   8210c:	b2c9      	uxtb	r1, r1
   8210e:	441c      	add	r4, r3
   82110:	f803 1b01 	strb.w	r1, [r3], #1
   82114:	429c      	cmp	r4, r3
   82116:	d1fb      	bne.n	82110 <memset+0x88>
   82118:	bc70      	pop	{r4, r5, r6}
   8211a:	4770      	bx	lr
   8211c:	4614      	mov	r4, r2
   8211e:	4603      	mov	r3, r0
   82120:	e7c2      	b.n	820a8 <memset+0x20>
   82122:	bf00      	nop

00082124 <__malloc_lock>:
   82124:	4801      	ldr	r0, [pc, #4]	; (8212c <__malloc_lock+0x8>)
   82126:	f002 bc13 	b.w	84950 <__retarget_lock_acquire_recursive>
   8212a:	bf00      	nop
   8212c:	20071110 	.word	0x20071110

00082130 <__malloc_unlock>:
   82130:	4801      	ldr	r0, [pc, #4]	; (82138 <__malloc_unlock+0x8>)
   82132:	f002 bc0f 	b.w	84954 <__retarget_lock_release_recursive>
   82136:	bf00      	nop
   82138:	20071110 	.word	0x20071110

0008213c <_sbrk_r>:
   8213c:	b538      	push	{r3, r4, r5, lr}
   8213e:	2300      	movs	r3, #0
   82140:	4c06      	ldr	r4, [pc, #24]	; (8215c <_sbrk_r+0x20>)
   82142:	4605      	mov	r5, r0
   82144:	4608      	mov	r0, r1
   82146:	6023      	str	r3, [r4, #0]
   82148:	f7ff fac0 	bl	816cc <_sbrk>
   8214c:	1c43      	adds	r3, r0, #1
   8214e:	d000      	beq.n	82152 <_sbrk_r+0x16>
   82150:	bd38      	pop	{r3, r4, r5, pc}
   82152:	6823      	ldr	r3, [r4, #0]
   82154:	2b00      	cmp	r3, #0
   82156:	d0fb      	beq.n	82150 <_sbrk_r+0x14>
   82158:	602b      	str	r3, [r5, #0]
   8215a:	bd38      	pop	{r3, r4, r5, pc}
   8215c:	20071124 	.word	0x20071124

00082160 <sprintf>:
   82160:	b40e      	push	{r1, r2, r3}
   82162:	4601      	mov	r1, r0
   82164:	b5f0      	push	{r4, r5, r6, r7, lr}
   82166:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8216a:	f44f 7702 	mov.w	r7, #520	; 0x208
   8216e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   82172:	b09c      	sub	sp, #112	; 0x70
   82174:	ac21      	add	r4, sp, #132	; 0x84
   82176:	f854 2b04 	ldr.w	r2, [r4], #4
   8217a:	4b0b      	ldr	r3, [pc, #44]	; (821a8 <sprintf+0x48>)
   8217c:	9102      	str	r1, [sp, #8]
   8217e:	9106      	str	r1, [sp, #24]
   82180:	6818      	ldr	r0, [r3, #0]
   82182:	a902      	add	r1, sp, #8
   82184:	4623      	mov	r3, r4
   82186:	9401      	str	r4, [sp, #4]
   82188:	f8ad 7014 	strh.w	r7, [sp, #20]
   8218c:	9504      	str	r5, [sp, #16]
   8218e:	9507      	str	r5, [sp, #28]
   82190:	f8ad 6016 	strh.w	r6, [sp, #22]
   82194:	f000 f838 	bl	82208 <_svfprintf_r>
   82198:	2200      	movs	r2, #0
   8219a:	9b02      	ldr	r3, [sp, #8]
   8219c:	701a      	strb	r2, [r3, #0]
   8219e:	b01c      	add	sp, #112	; 0x70
   821a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   821a4:	b003      	add	sp, #12
   821a6:	4770      	bx	lr
   821a8:	200704ec 	.word	0x200704ec

000821ac <strlen>:
   821ac:	f020 0103 	bic.w	r1, r0, #3
   821b0:	f010 0003 	ands.w	r0, r0, #3
   821b4:	f1c0 0000 	rsb	r0, r0, #0
   821b8:	f851 3b04 	ldr.w	r3, [r1], #4
   821bc:	f100 0c04 	add.w	ip, r0, #4
   821c0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   821c4:	f06f 0200 	mvn.w	r2, #0
   821c8:	bf1c      	itt	ne
   821ca:	fa22 f20c 	lsrne.w	r2, r2, ip
   821ce:	4313      	orrne	r3, r2
   821d0:	f04f 0c01 	mov.w	ip, #1
   821d4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   821d8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   821dc:	eba3 020c 	sub.w	r2, r3, ip
   821e0:	ea22 0203 	bic.w	r2, r2, r3
   821e4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   821e8:	bf04      	itt	eq
   821ea:	f851 3b04 	ldreq.w	r3, [r1], #4
   821ee:	3004      	addeq	r0, #4
   821f0:	d0f4      	beq.n	821dc <strlen+0x30>
   821f2:	f1c2 0100 	rsb	r1, r2, #0
   821f6:	ea02 0201 	and.w	r2, r2, r1
   821fa:	fab2 f282 	clz	r2, r2
   821fe:	f1c2 021f 	rsb	r2, r2, #31
   82202:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82206:	4770      	bx	lr

00082208 <_svfprintf_r>:
   82208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8220c:	b0c3      	sub	sp, #268	; 0x10c
   8220e:	460c      	mov	r4, r1
   82210:	910b      	str	r1, [sp, #44]	; 0x2c
   82212:	4692      	mov	sl, r2
   82214:	930f      	str	r3, [sp, #60]	; 0x3c
   82216:	900c      	str	r0, [sp, #48]	; 0x30
   82218:	f002 fb8c 	bl	84934 <_localeconv_r>
   8221c:	6803      	ldr	r3, [r0, #0]
   8221e:	4618      	mov	r0, r3
   82220:	931a      	str	r3, [sp, #104]	; 0x68
   82222:	f7ff ffc3 	bl	821ac <strlen>
   82226:	89a3      	ldrh	r3, [r4, #12]
   82228:	9019      	str	r0, [sp, #100]	; 0x64
   8222a:	0619      	lsls	r1, r3, #24
   8222c:	d503      	bpl.n	82236 <_svfprintf_r+0x2e>
   8222e:	6923      	ldr	r3, [r4, #16]
   82230:	2b00      	cmp	r3, #0
   82232:	f001 8035 	beq.w	832a0 <_svfprintf_r+0x1098>
   82236:	2300      	movs	r3, #0
   82238:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   8223c:	46c8      	mov	r8, r9
   8223e:	9315      	str	r3, [sp, #84]	; 0x54
   82240:	9313      	str	r3, [sp, #76]	; 0x4c
   82242:	9314      	str	r3, [sp, #80]	; 0x50
   82244:	9318      	str	r3, [sp, #96]	; 0x60
   82246:	931b      	str	r3, [sp, #108]	; 0x6c
   82248:	9309      	str	r3, [sp, #36]	; 0x24
   8224a:	9316      	str	r3, [sp, #88]	; 0x58
   8224c:	9317      	str	r3, [sp, #92]	; 0x5c
   8224e:	9327      	str	r3, [sp, #156]	; 0x9c
   82250:	9326      	str	r3, [sp, #152]	; 0x98
   82252:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   82256:	f89a 3000 	ldrb.w	r3, [sl]
   8225a:	4654      	mov	r4, sl
   8225c:	b1eb      	cbz	r3, 8229a <_svfprintf_r+0x92>
   8225e:	2b25      	cmp	r3, #37	; 0x25
   82260:	d102      	bne.n	82268 <_svfprintf_r+0x60>
   82262:	e01a      	b.n	8229a <_svfprintf_r+0x92>
   82264:	2b25      	cmp	r3, #37	; 0x25
   82266:	d003      	beq.n	82270 <_svfprintf_r+0x68>
   82268:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8226c:	2b00      	cmp	r3, #0
   8226e:	d1f9      	bne.n	82264 <_svfprintf_r+0x5c>
   82270:	eba4 050a 	sub.w	r5, r4, sl
   82274:	b18d      	cbz	r5, 8229a <_svfprintf_r+0x92>
   82276:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82278:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8227a:	3301      	adds	r3, #1
   8227c:	442a      	add	r2, r5
   8227e:	2b07      	cmp	r3, #7
   82280:	f8c8 a000 	str.w	sl, [r8]
   82284:	f8c8 5004 	str.w	r5, [r8, #4]
   82288:	9227      	str	r2, [sp, #156]	; 0x9c
   8228a:	9326      	str	r3, [sp, #152]	; 0x98
   8228c:	f300 808a 	bgt.w	823a4 <_svfprintf_r+0x19c>
   82290:	f108 0808 	add.w	r8, r8, #8
   82294:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82296:	442b      	add	r3, r5
   82298:	9309      	str	r3, [sp, #36]	; 0x24
   8229a:	7823      	ldrb	r3, [r4, #0]
   8229c:	2b00      	cmp	r3, #0
   8229e:	f000 8089 	beq.w	823b4 <_svfprintf_r+0x1ac>
   822a2:	2300      	movs	r3, #0
   822a4:	f04f 30ff 	mov.w	r0, #4294967295
   822a8:	461a      	mov	r2, r3
   822aa:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   822ae:	4619      	mov	r1, r3
   822b0:	930d      	str	r3, [sp, #52]	; 0x34
   822b2:	469b      	mov	fp, r3
   822b4:	7863      	ldrb	r3, [r4, #1]
   822b6:	f104 0a01 	add.w	sl, r4, #1
   822ba:	900a      	str	r0, [sp, #40]	; 0x28
   822bc:	f10a 0a01 	add.w	sl, sl, #1
   822c0:	f1a3 0020 	sub.w	r0, r3, #32
   822c4:	2858      	cmp	r0, #88	; 0x58
   822c6:	f200 83b7 	bhi.w	82a38 <_svfprintf_r+0x830>
   822ca:	e8df f010 	tbh	[pc, r0, lsl #1]
   822ce:	034c      	.short	0x034c
   822d0:	03b503b5 	.word	0x03b503b5
   822d4:	03b50354 	.word	0x03b50354
   822d8:	03b503b5 	.word	0x03b503b5
   822dc:	03b503b5 	.word	0x03b503b5
   822e0:	005903b5 	.word	0x005903b5
   822e4:	03b50359 	.word	0x03b50359
   822e8:	02140066 	.word	0x02140066
   822ec:	022f03b5 	.word	0x022f03b5
   822f0:	03a503a5 	.word	0x03a503a5
   822f4:	03a503a5 	.word	0x03a503a5
   822f8:	03a503a5 	.word	0x03a503a5
   822fc:	03a503a5 	.word	0x03a503a5
   82300:	03b503a5 	.word	0x03b503a5
   82304:	03b503b5 	.word	0x03b503b5
   82308:	03b503b5 	.word	0x03b503b5
   8230c:	03b503b5 	.word	0x03b503b5
   82310:	03b503b5 	.word	0x03b503b5
   82314:	028b03b5 	.word	0x028b03b5
   82318:	03b502d3 	.word	0x03b502d3
   8231c:	03b502d3 	.word	0x03b502d3
   82320:	03b503b5 	.word	0x03b503b5
   82324:	031b03b5 	.word	0x031b03b5
   82328:	03b503b5 	.word	0x03b503b5
   8232c:	03b50320 	.word	0x03b50320
   82330:	03b503b5 	.word	0x03b503b5
   82334:	03b503b5 	.word	0x03b503b5
   82338:	03b50234 	.word	0x03b50234
   8233c:	024b03b5 	.word	0x024b03b5
   82340:	03b503b5 	.word	0x03b503b5
   82344:	03b503b5 	.word	0x03b503b5
   82348:	03b503b5 	.word	0x03b503b5
   8234c:	03b503b5 	.word	0x03b503b5
   82350:	03b503b5 	.word	0x03b503b5
   82354:	039e0276 	.word	0x039e0276
   82358:	02d302d3 	.word	0x02d302d3
   8235c:	036302d3 	.word	0x036302d3
   82360:	03b5039e 	.word	0x03b5039e
   82364:	036803b5 	.word	0x036803b5
   82368:	037503b5 	.word	0x037503b5
   8236c:	038c01dd 	.word	0x038c01dd
   82370:	03b5035e 	.word	0x03b5035e
   82374:	03b501f2 	.word	0x03b501f2
   82378:	03b50087 	.word	0x03b50087
   8237c:	033203b5 	.word	0x033203b5
   82380:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82382:	6823      	ldr	r3, [r4, #0]
   82384:	4618      	mov	r0, r3
   82386:	930d      	str	r3, [sp, #52]	; 0x34
   82388:	4623      	mov	r3, r4
   8238a:	2800      	cmp	r0, #0
   8238c:	f103 0304 	add.w	r3, r3, #4
   82390:	930f      	str	r3, [sp, #60]	; 0x3c
   82392:	da04      	bge.n	8239e <_svfprintf_r+0x196>
   82394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82396:	425b      	negs	r3, r3
   82398:	930d      	str	r3, [sp, #52]	; 0x34
   8239a:	f04b 0b04 	orr.w	fp, fp, #4
   8239e:	f89a 3000 	ldrb.w	r3, [sl]
   823a2:	e78b      	b.n	822bc <_svfprintf_r+0xb4>
   823a4:	aa25      	add	r2, sp, #148	; 0x94
   823a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   823a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   823aa:	f003 f847 	bl	8543c <__ssprint_r>
   823ae:	b940      	cbnz	r0, 823c2 <_svfprintf_r+0x1ba>
   823b0:	46c8      	mov	r8, r9
   823b2:	e76f      	b.n	82294 <_svfprintf_r+0x8c>
   823b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   823b6:	b123      	cbz	r3, 823c2 <_svfprintf_r+0x1ba>
   823b8:	980c      	ldr	r0, [sp, #48]	; 0x30
   823ba:	aa25      	add	r2, sp, #148	; 0x94
   823bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   823be:	f003 f83d 	bl	8543c <__ssprint_r>
   823c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   823c4:	899b      	ldrh	r3, [r3, #12]
   823c6:	f013 0f40 	tst.w	r3, #64	; 0x40
   823ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   823cc:	bf18      	it	ne
   823ce:	f04f 33ff 	movne.w	r3, #4294967295
   823d2:	9309      	str	r3, [sp, #36]	; 0x24
   823d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   823d6:	b043      	add	sp, #268	; 0x10c
   823d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823dc:	f01b 0f20 	tst.w	fp, #32
   823e0:	9311      	str	r3, [sp, #68]	; 0x44
   823e2:	f040 81af 	bne.w	82744 <_svfprintf_r+0x53c>
   823e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   823e8:	f01b 0f10 	tst.w	fp, #16
   823ec:	4613      	mov	r3, r2
   823ee:	f040 859a 	bne.w	82f26 <_svfprintf_r+0xd1e>
   823f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   823f6:	f000 8596 	beq.w	82f26 <_svfprintf_r+0xd1e>
   823fa:	2500      	movs	r5, #0
   823fc:	2301      	movs	r3, #1
   823fe:	8814      	ldrh	r4, [r2, #0]
   82400:	3204      	adds	r2, #4
   82402:	920f      	str	r2, [sp, #60]	; 0x3c
   82404:	2200      	movs	r2, #0
   82406:	4617      	mov	r7, r2
   82408:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
   8240c:	990a      	ldr	r1, [sp, #40]	; 0x28
   8240e:	1c4a      	adds	r2, r1, #1
   82410:	f000 8210 	beq.w	82834 <_svfprintf_r+0x62c>
   82414:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   82418:	9207      	str	r2, [sp, #28]
   8241a:	ea54 0205 	orrs.w	r2, r4, r5
   8241e:	f040 820f 	bne.w	82840 <_svfprintf_r+0x638>
   82422:	2900      	cmp	r1, #0
   82424:	f040 8431 	bne.w	82c8a <_svfprintf_r+0xa82>
   82428:	2b00      	cmp	r3, #0
   8242a:	f040 8539 	bne.w	82ea0 <_svfprintf_r+0xc98>
   8242e:	f01b 0301 	ands.w	r3, fp, #1
   82432:	930e      	str	r3, [sp, #56]	; 0x38
   82434:	f000 8662 	beq.w	830fc <_svfprintf_r+0xef4>
   82438:	2330      	movs	r3, #48	; 0x30
   8243a:	ae42      	add	r6, sp, #264	; 0x108
   8243c:	f806 3d41 	strb.w	r3, [r6, #-65]!
   82440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82444:	4293      	cmp	r3, r2
   82446:	bfb8      	it	lt
   82448:	4613      	movlt	r3, r2
   8244a:	9308      	str	r3, [sp, #32]
   8244c:	2300      	movs	r3, #0
   8244e:	9312      	str	r3, [sp, #72]	; 0x48
   82450:	b117      	cbz	r7, 82458 <_svfprintf_r+0x250>
   82452:	9b08      	ldr	r3, [sp, #32]
   82454:	3301      	adds	r3, #1
   82456:	9308      	str	r3, [sp, #32]
   82458:	9b07      	ldr	r3, [sp, #28]
   8245a:	f013 0302 	ands.w	r3, r3, #2
   8245e:	9310      	str	r3, [sp, #64]	; 0x40
   82460:	d002      	beq.n	82468 <_svfprintf_r+0x260>
   82462:	9b08      	ldr	r3, [sp, #32]
   82464:	3302      	adds	r3, #2
   82466:	9308      	str	r3, [sp, #32]
   82468:	9b07      	ldr	r3, [sp, #28]
   8246a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   8246e:	f040 8310 	bne.w	82a92 <_svfprintf_r+0x88a>
   82472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82474:	9a08      	ldr	r2, [sp, #32]
   82476:	eba3 0b02 	sub.w	fp, r3, r2
   8247a:	f1bb 0f00 	cmp.w	fp, #0
   8247e:	f340 8308 	ble.w	82a92 <_svfprintf_r+0x88a>
   82482:	f1bb 0f10 	cmp.w	fp, #16
   82486:	f340 87b2 	ble.w	833ee <_svfprintf_r+0x11e6>
   8248a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8248c:	4643      	mov	r3, r8
   8248e:	4621      	mov	r1, r4
   82490:	46a8      	mov	r8, r5
   82492:	2710      	movs	r7, #16
   82494:	9a26      	ldr	r2, [sp, #152]	; 0x98
   82496:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82498:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8249a:	e006      	b.n	824aa <_svfprintf_r+0x2a2>
   8249c:	f1ab 0b10 	sub.w	fp, fp, #16
   824a0:	f1bb 0f10 	cmp.w	fp, #16
   824a4:	f103 0308 	add.w	r3, r3, #8
   824a8:	dd18      	ble.n	824dc <_svfprintf_r+0x2d4>
   824aa:	3201      	adds	r2, #1
   824ac:	48ab      	ldr	r0, [pc, #684]	; (8275c <_svfprintf_r+0x554>)
   824ae:	3110      	adds	r1, #16
   824b0:	2a07      	cmp	r2, #7
   824b2:	9127      	str	r1, [sp, #156]	; 0x9c
   824b4:	9226      	str	r2, [sp, #152]	; 0x98
   824b6:	e883 0081 	stmia.w	r3, {r0, r7}
   824ba:	ddef      	ble.n	8249c <_svfprintf_r+0x294>
   824bc:	aa25      	add	r2, sp, #148	; 0x94
   824be:	4629      	mov	r1, r5
   824c0:	4620      	mov	r0, r4
   824c2:	f002 ffbb 	bl	8543c <__ssprint_r>
   824c6:	2800      	cmp	r0, #0
   824c8:	f47f af7b 	bne.w	823c2 <_svfprintf_r+0x1ba>
   824cc:	f1ab 0b10 	sub.w	fp, fp, #16
   824d0:	f1bb 0f10 	cmp.w	fp, #16
   824d4:	464b      	mov	r3, r9
   824d6:	9927      	ldr	r1, [sp, #156]	; 0x9c
   824d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   824da:	dce6      	bgt.n	824aa <_svfprintf_r+0x2a2>
   824dc:	4645      	mov	r5, r8
   824de:	460c      	mov	r4, r1
   824e0:	4698      	mov	r8, r3
   824e2:	3201      	adds	r2, #1
   824e4:	4b9d      	ldr	r3, [pc, #628]	; (8275c <_svfprintf_r+0x554>)
   824e6:	445c      	add	r4, fp
   824e8:	2a07      	cmp	r2, #7
   824ea:	9427      	str	r4, [sp, #156]	; 0x9c
   824ec:	9226      	str	r2, [sp, #152]	; 0x98
   824ee:	e888 0808 	stmia.w	r8, {r3, fp}
   824f2:	f300 82c3 	bgt.w	82a7c <_svfprintf_r+0x874>
   824f6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   824fa:	f108 0808 	add.w	r8, r8, #8
   824fe:	b187      	cbz	r7, 82522 <_svfprintf_r+0x31a>
   82500:	2101      	movs	r1, #1
   82502:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82504:	440c      	add	r4, r1
   82506:	440b      	add	r3, r1
   82508:	f10d 0277 	add.w	r2, sp, #119	; 0x77
   8250c:	2b07      	cmp	r3, #7
   8250e:	9427      	str	r4, [sp, #156]	; 0x9c
   82510:	9326      	str	r3, [sp, #152]	; 0x98
   82512:	f8c8 1004 	str.w	r1, [r8, #4]
   82516:	f8c8 2000 	str.w	r2, [r8]
   8251a:	f300 83cd 	bgt.w	82cb8 <_svfprintf_r+0xab0>
   8251e:	f108 0808 	add.w	r8, r8, #8
   82522:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82524:	b17b      	cbz	r3, 82546 <_svfprintf_r+0x33e>
   82526:	2102      	movs	r1, #2
   82528:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8252a:	440c      	add	r4, r1
   8252c:	3301      	adds	r3, #1
   8252e:	aa1e      	add	r2, sp, #120	; 0x78
   82530:	2b07      	cmp	r3, #7
   82532:	9427      	str	r4, [sp, #156]	; 0x9c
   82534:	9326      	str	r3, [sp, #152]	; 0x98
   82536:	f8c8 1004 	str.w	r1, [r8, #4]
   8253a:	f8c8 2000 	str.w	r2, [r8]
   8253e:	f300 8411 	bgt.w	82d64 <_svfprintf_r+0xb5c>
   82542:	f108 0808 	add.w	r8, r8, #8
   82546:	2d80      	cmp	r5, #128	; 0x80
   82548:	f000 8304 	beq.w	82b54 <_svfprintf_r+0x94c>
   8254c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8254e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   82550:	1a9f      	subs	r7, r3, r2
   82552:	2f00      	cmp	r7, #0
   82554:	dd37      	ble.n	825c6 <_svfprintf_r+0x3be>
   82556:	2f10      	cmp	r7, #16
   82558:	f340 8679 	ble.w	8324e <_svfprintf_r+0x1046>
   8255c:	4d80      	ldr	r5, [pc, #512]	; (82760 <_svfprintf_r+0x558>)
   8255e:	4642      	mov	r2, r8
   82560:	4621      	mov	r1, r4
   82562:	46b0      	mov	r8, r6
   82564:	f04f 0b10 	mov.w	fp, #16
   82568:	462e      	mov	r6, r5
   8256a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8256c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8256e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82570:	e004      	b.n	8257c <_svfprintf_r+0x374>
   82572:	3f10      	subs	r7, #16
   82574:	2f10      	cmp	r7, #16
   82576:	f102 0208 	add.w	r2, r2, #8
   8257a:	dd15      	ble.n	825a8 <_svfprintf_r+0x3a0>
   8257c:	3301      	adds	r3, #1
   8257e:	3110      	adds	r1, #16
   82580:	2b07      	cmp	r3, #7
   82582:	9127      	str	r1, [sp, #156]	; 0x9c
   82584:	9326      	str	r3, [sp, #152]	; 0x98
   82586:	e882 0840 	stmia.w	r2, {r6, fp}
   8258a:	ddf2      	ble.n	82572 <_svfprintf_r+0x36a>
   8258c:	aa25      	add	r2, sp, #148	; 0x94
   8258e:	4629      	mov	r1, r5
   82590:	4620      	mov	r0, r4
   82592:	f002 ff53 	bl	8543c <__ssprint_r>
   82596:	2800      	cmp	r0, #0
   82598:	f47f af13 	bne.w	823c2 <_svfprintf_r+0x1ba>
   8259c:	3f10      	subs	r7, #16
   8259e:	2f10      	cmp	r7, #16
   825a0:	464a      	mov	r2, r9
   825a2:	9927      	ldr	r1, [sp, #156]	; 0x9c
   825a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825a6:	dce9      	bgt.n	8257c <_svfprintf_r+0x374>
   825a8:	4635      	mov	r5, r6
   825aa:	460c      	mov	r4, r1
   825ac:	4646      	mov	r6, r8
   825ae:	4690      	mov	r8, r2
   825b0:	3301      	adds	r3, #1
   825b2:	443c      	add	r4, r7
   825b4:	2b07      	cmp	r3, #7
   825b6:	9427      	str	r4, [sp, #156]	; 0x9c
   825b8:	9326      	str	r3, [sp, #152]	; 0x98
   825ba:	e888 00a0 	stmia.w	r8, {r5, r7}
   825be:	f300 8370 	bgt.w	82ca2 <_svfprintf_r+0xa9a>
   825c2:	f108 0808 	add.w	r8, r8, #8
   825c6:	9b07      	ldr	r3, [sp, #28]
   825c8:	05df      	lsls	r7, r3, #23
   825ca:	f100 8264 	bmi.w	82a96 <_svfprintf_r+0x88e>
   825ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   825d0:	990e      	ldr	r1, [sp, #56]	; 0x38
   825d2:	3301      	adds	r3, #1
   825d4:	440c      	add	r4, r1
   825d6:	2b07      	cmp	r3, #7
   825d8:	9427      	str	r4, [sp, #156]	; 0x9c
   825da:	f8c8 6000 	str.w	r6, [r8]
   825de:	f8c8 1004 	str.w	r1, [r8, #4]
   825e2:	9326      	str	r3, [sp, #152]	; 0x98
   825e4:	f300 83b3 	bgt.w	82d4e <_svfprintf_r+0xb46>
   825e8:	f108 0808 	add.w	r8, r8, #8
   825ec:	9b07      	ldr	r3, [sp, #28]
   825ee:	075b      	lsls	r3, r3, #29
   825f0:	d53b      	bpl.n	8266a <_svfprintf_r+0x462>
   825f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   825f4:	9a08      	ldr	r2, [sp, #32]
   825f6:	1a9d      	subs	r5, r3, r2
   825f8:	2d00      	cmp	r5, #0
   825fa:	dd36      	ble.n	8266a <_svfprintf_r+0x462>
   825fc:	2d10      	cmp	r5, #16
   825fe:	f340 8721 	ble.w	83444 <_svfprintf_r+0x123c>
   82602:	2610      	movs	r6, #16
   82604:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82606:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   82608:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   8260c:	e004      	b.n	82618 <_svfprintf_r+0x410>
   8260e:	3d10      	subs	r5, #16
   82610:	2d10      	cmp	r5, #16
   82612:	f108 0808 	add.w	r8, r8, #8
   82616:	dd16      	ble.n	82646 <_svfprintf_r+0x43e>
   82618:	3301      	adds	r3, #1
   8261a:	4a50      	ldr	r2, [pc, #320]	; (8275c <_svfprintf_r+0x554>)
   8261c:	3410      	adds	r4, #16
   8261e:	2b07      	cmp	r3, #7
   82620:	9427      	str	r4, [sp, #156]	; 0x9c
   82622:	9326      	str	r3, [sp, #152]	; 0x98
   82624:	e888 0044 	stmia.w	r8, {r2, r6}
   82628:	ddf1      	ble.n	8260e <_svfprintf_r+0x406>
   8262a:	aa25      	add	r2, sp, #148	; 0x94
   8262c:	4659      	mov	r1, fp
   8262e:	4638      	mov	r0, r7
   82630:	f002 ff04 	bl	8543c <__ssprint_r>
   82634:	2800      	cmp	r0, #0
   82636:	f47f aec4 	bne.w	823c2 <_svfprintf_r+0x1ba>
   8263a:	3d10      	subs	r5, #16
   8263c:	2d10      	cmp	r5, #16
   8263e:	46c8      	mov	r8, r9
   82640:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82642:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82644:	dce8      	bgt.n	82618 <_svfprintf_r+0x410>
   82646:	3301      	adds	r3, #1
   82648:	4a44      	ldr	r2, [pc, #272]	; (8275c <_svfprintf_r+0x554>)
   8264a:	442c      	add	r4, r5
   8264c:	2b07      	cmp	r3, #7
   8264e:	9427      	str	r4, [sp, #156]	; 0x9c
   82650:	9326      	str	r3, [sp, #152]	; 0x98
   82652:	e888 0024 	stmia.w	r8, {r2, r5}
   82656:	dd08      	ble.n	8266a <_svfprintf_r+0x462>
   82658:	aa25      	add	r2, sp, #148	; 0x94
   8265a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8265c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8265e:	f002 feed 	bl	8543c <__ssprint_r>
   82662:	2800      	cmp	r0, #0
   82664:	f47f aead 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82668:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8266a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8266c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8266e:	9908      	ldr	r1, [sp, #32]
   82670:	428a      	cmp	r2, r1
   82672:	bfac      	ite	ge
   82674:	189b      	addge	r3, r3, r2
   82676:	185b      	addlt	r3, r3, r1
   82678:	9309      	str	r3, [sp, #36]	; 0x24
   8267a:	2c00      	cmp	r4, #0
   8267c:	f040 82fb 	bne.w	82c76 <_svfprintf_r+0xa6e>
   82680:	2300      	movs	r3, #0
   82682:	46c8      	mov	r8, r9
   82684:	9326      	str	r3, [sp, #152]	; 0x98
   82686:	e5e6      	b.n	82256 <_svfprintf_r+0x4e>
   82688:	9311      	str	r3, [sp, #68]	; 0x44
   8268a:	f01b 0320 	ands.w	r3, fp, #32
   8268e:	f040 8145 	bne.w	8291c <_svfprintf_r+0x714>
   82692:	f01b 0210 	ands.w	r2, fp, #16
   82696:	f040 8466 	bne.w	82f66 <_svfprintf_r+0xd5e>
   8269a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   8269e:	f000 8462 	beq.w	82f66 <_svfprintf_r+0xd5e>
   826a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   826a4:	4613      	mov	r3, r2
   826a6:	460a      	mov	r2, r1
   826a8:	3204      	adds	r2, #4
   826aa:	880c      	ldrh	r4, [r1, #0]
   826ac:	2500      	movs	r5, #0
   826ae:	920f      	str	r2, [sp, #60]	; 0x3c
   826b0:	e6a8      	b.n	82404 <_svfprintf_r+0x1fc>
   826b2:	2500      	movs	r5, #0
   826b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   826b6:	9311      	str	r3, [sp, #68]	; 0x44
   826b8:	6816      	ldr	r6, [r2, #0]
   826ba:	f88d 5077 	strb.w	r5, [sp, #119]	; 0x77
   826be:	1d14      	adds	r4, r2, #4
   826c0:	2e00      	cmp	r6, #0
   826c2:	f000 86cd 	beq.w	83460 <_svfprintf_r+0x1258>
   826c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   826c8:	1c53      	adds	r3, r2, #1
   826ca:	f000 861b 	beq.w	83304 <_svfprintf_r+0x10fc>
   826ce:	4629      	mov	r1, r5
   826d0:	4630      	mov	r0, r6
   826d2:	f002 f957 	bl	84984 <memchr>
   826d6:	2800      	cmp	r0, #0
   826d8:	f000 870d 	beq.w	834f6 <_svfprintf_r+0x12ee>
   826dc:	1b83      	subs	r3, r0, r6
   826de:	950a      	str	r5, [sp, #40]	; 0x28
   826e0:	930e      	str	r3, [sp, #56]	; 0x38
   826e2:	940f      	str	r4, [sp, #60]	; 0x3c
   826e4:	f8cd b01c 	str.w	fp, [sp, #28]
   826e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   826ec:	9308      	str	r3, [sp, #32]
   826ee:	9512      	str	r5, [sp, #72]	; 0x48
   826f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   826f4:	e6ac      	b.n	82450 <_svfprintf_r+0x248>
   826f6:	f89a 3000 	ldrb.w	r3, [sl]
   826fa:	f10a 0401 	add.w	r4, sl, #1
   826fe:	2b2a      	cmp	r3, #42	; 0x2a
   82700:	f000 87c2 	beq.w	83688 <_svfprintf_r+0x1480>
   82704:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82708:	2809      	cmp	r0, #9
   8270a:	46a2      	mov	sl, r4
   8270c:	f200 8718 	bhi.w	83540 <_svfprintf_r+0x1338>
   82710:	2300      	movs	r3, #0
   82712:	461c      	mov	r4, r3
   82714:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82718:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8271c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82720:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82724:	2809      	cmp	r0, #9
   82726:	d9f5      	bls.n	82714 <_svfprintf_r+0x50c>
   82728:	940a      	str	r4, [sp, #40]	; 0x28
   8272a:	e5c9      	b.n	822c0 <_svfprintf_r+0xb8>
   8272c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   82730:	f89a 3000 	ldrb.w	r3, [sl]
   82734:	e5c2      	b.n	822bc <_svfprintf_r+0xb4>
   82736:	f04b 0b10 	orr.w	fp, fp, #16
   8273a:	f01b 0f20 	tst.w	fp, #32
   8273e:	9311      	str	r3, [sp, #68]	; 0x44
   82740:	f43f ae51 	beq.w	823e6 <_svfprintf_r+0x1de>
   82744:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82746:	3407      	adds	r4, #7
   82748:	f024 0307 	bic.w	r3, r4, #7
   8274c:	f103 0208 	add.w	r2, r3, #8
   82750:	e9d3 4500 	ldrd	r4, r5, [r3]
   82754:	920f      	str	r2, [sp, #60]	; 0x3c
   82756:	2301      	movs	r3, #1
   82758:	e654      	b.n	82404 <_svfprintf_r+0x1fc>
   8275a:	bf00      	nop
   8275c:	000863ac 	.word	0x000863ac
   82760:	000863bc 	.word	0x000863bc
   82764:	9311      	str	r3, [sp, #68]	; 0x44
   82766:	2a00      	cmp	r2, #0
   82768:	f040 87ad 	bne.w	836c6 <_svfprintf_r+0x14be>
   8276c:	4bbe      	ldr	r3, [pc, #760]	; (82a68 <_svfprintf_r+0x860>)
   8276e:	f01b 0f20 	tst.w	fp, #32
   82772:	9318      	str	r3, [sp, #96]	; 0x60
   82774:	f040 80e7 	bne.w	82946 <_svfprintf_r+0x73e>
   82778:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8277a:	f01b 0f10 	tst.w	fp, #16
   8277e:	4613      	mov	r3, r2
   82780:	f040 83d8 	bne.w	82f34 <_svfprintf_r+0xd2c>
   82784:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82788:	f000 83d4 	beq.w	82f34 <_svfprintf_r+0xd2c>
   8278c:	2500      	movs	r5, #0
   8278e:	3304      	adds	r3, #4
   82790:	8814      	ldrh	r4, [r2, #0]
   82792:	930f      	str	r3, [sp, #60]	; 0x3c
   82794:	f01b 0f01 	tst.w	fp, #1
   82798:	f000 80e3 	beq.w	82962 <_svfprintf_r+0x75a>
   8279c:	ea54 0305 	orrs.w	r3, r4, r5
   827a0:	f000 80df 	beq.w	82962 <_svfprintf_r+0x75a>
   827a4:	2330      	movs	r3, #48	; 0x30
   827a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   827aa:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   827ae:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   827b2:	f04b 0b02 	orr.w	fp, fp, #2
   827b6:	2302      	movs	r3, #2
   827b8:	e624      	b.n	82404 <_svfprintf_r+0x1fc>
   827ba:	2201      	movs	r2, #1
   827bc:	9311      	str	r3, [sp, #68]	; 0x44
   827be:	2300      	movs	r3, #0
   827c0:	4611      	mov	r1, r2
   827c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   827c4:	9208      	str	r2, [sp, #32]
   827c6:	6802      	ldr	r2, [r0, #0]
   827c8:	461f      	mov	r7, r3
   827ca:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   827ce:	930a      	str	r3, [sp, #40]	; 0x28
   827d0:	9312      	str	r3, [sp, #72]	; 0x48
   827d2:	1d03      	adds	r3, r0, #4
   827d4:	f8cd b01c 	str.w	fp, [sp, #28]
   827d8:	910e      	str	r1, [sp, #56]	; 0x38
   827da:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   827de:	930f      	str	r3, [sp, #60]	; 0x3c
   827e0:	ae28      	add	r6, sp, #160	; 0xa0
   827e2:	e639      	b.n	82458 <_svfprintf_r+0x250>
   827e4:	9311      	str	r3, [sp, #68]	; 0x44
   827e6:	2a00      	cmp	r2, #0
   827e8:	f040 8784 	bne.w	836f4 <_svfprintf_r+0x14ec>
   827ec:	f04b 0b10 	orr.w	fp, fp, #16
   827f0:	f01b 0f20 	tst.w	fp, #32
   827f4:	f040 8475 	bne.w	830e2 <_svfprintf_r+0xeda>
   827f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   827fa:	f01b 0f10 	tst.w	fp, #16
   827fe:	4613      	mov	r3, r2
   82800:	f040 839d 	bne.w	82f3e <_svfprintf_r+0xd36>
   82804:	f01b 0f40 	tst.w	fp, #64	; 0x40
   82808:	f000 8399 	beq.w	82f3e <_svfprintf_r+0xd36>
   8280c:	f9b2 4000 	ldrsh.w	r4, [r2]
   82810:	3304      	adds	r3, #4
   82812:	17e5      	asrs	r5, r4, #31
   82814:	930f      	str	r3, [sp, #60]	; 0x3c
   82816:	4622      	mov	r2, r4
   82818:	462b      	mov	r3, r5
   8281a:	2a00      	cmp	r2, #0
   8281c:	f173 0300 	sbcs.w	r3, r3, #0
   82820:	f2c0 8398 	blt.w	82f54 <_svfprintf_r+0xd4c>
   82824:	990a      	ldr	r1, [sp, #40]	; 0x28
   82826:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8282a:	1c4a      	adds	r2, r1, #1
   8282c:	f04f 0301 	mov.w	r3, #1
   82830:	f47f adf0 	bne.w	82414 <_svfprintf_r+0x20c>
   82834:	ea54 0205 	orrs.w	r2, r4, r5
   82838:	f000 8229 	beq.w	82c8e <_svfprintf_r+0xa86>
   8283c:	f8cd b01c 	str.w	fp, [sp, #28]
   82840:	2b01      	cmp	r3, #1
   82842:	f000 830e 	beq.w	82e62 <_svfprintf_r+0xc5a>
   82846:	2b02      	cmp	r3, #2
   82848:	f040 829c 	bne.w	82d84 <_svfprintf_r+0xb7c>
   8284c:	464e      	mov	r6, r9
   8284e:	9818      	ldr	r0, [sp, #96]	; 0x60
   82850:	0923      	lsrs	r3, r4, #4
   82852:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   82856:	0929      	lsrs	r1, r5, #4
   82858:	f004 020f 	and.w	r2, r4, #15
   8285c:	460d      	mov	r5, r1
   8285e:	461c      	mov	r4, r3
   82860:	5c83      	ldrb	r3, [r0, r2]
   82862:	f806 3d01 	strb.w	r3, [r6, #-1]!
   82866:	ea54 0305 	orrs.w	r3, r4, r5
   8286a:	d1f1      	bne.n	82850 <_svfprintf_r+0x648>
   8286c:	eba9 0306 	sub.w	r3, r9, r6
   82870:	930e      	str	r3, [sp, #56]	; 0x38
   82872:	e5e5      	b.n	82440 <_svfprintf_r+0x238>
   82874:	9311      	str	r3, [sp, #68]	; 0x44
   82876:	2a00      	cmp	r2, #0
   82878:	f040 8738 	bne.w	836ec <_svfprintf_r+0x14e4>
   8287c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8287e:	f01b 0f08 	tst.w	fp, #8
   82882:	f104 0407 	add.w	r4, r4, #7
   82886:	f000 84cf 	beq.w	83228 <_svfprintf_r+0x1020>
   8288a:	f024 0307 	bic.w	r3, r4, #7
   8288e:	f103 0208 	add.w	r2, r3, #8
   82892:	920f      	str	r2, [sp, #60]	; 0x3c
   82894:	681a      	ldr	r2, [r3, #0]
   82896:	685b      	ldr	r3, [r3, #4]
   82898:	9215      	str	r2, [sp, #84]	; 0x54
   8289a:	9314      	str	r3, [sp, #80]	; 0x50
   8289c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8289e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   828a0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   828a4:	4628      	mov	r0, r5
   828a6:	4621      	mov	r1, r4
   828a8:	f04f 32ff 	mov.w	r2, #4294967295
   828ac:	4b6f      	ldr	r3, [pc, #444]	; (82a6c <_svfprintf_r+0x864>)
   828ae:	f003 fb33 	bl	85f18 <__aeabi_dcmpun>
   828b2:	2800      	cmp	r0, #0
   828b4:	f040 8434 	bne.w	83120 <_svfprintf_r+0xf18>
   828b8:	4628      	mov	r0, r5
   828ba:	4621      	mov	r1, r4
   828bc:	f04f 32ff 	mov.w	r2, #4294967295
   828c0:	4b6a      	ldr	r3, [pc, #424]	; (82a6c <_svfprintf_r+0x864>)
   828c2:	f003 fb0b 	bl	85edc <__aeabi_dcmple>
   828c6:	2800      	cmp	r0, #0
   828c8:	f040 842a 	bne.w	83120 <_svfprintf_r+0xf18>
   828cc:	a815      	add	r0, sp, #84	; 0x54
   828ce:	c80d      	ldmia	r0, {r0, r2, r3}
   828d0:	9914      	ldr	r1, [sp, #80]	; 0x50
   828d2:	f003 faf9 	bl	85ec8 <__aeabi_dcmplt>
   828d6:	2800      	cmp	r0, #0
   828d8:	f040 85d4 	bne.w	83484 <_svfprintf_r+0x127c>
   828dc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   828e0:	2303      	movs	r3, #3
   828e2:	461a      	mov	r2, r3
   828e4:	9308      	str	r3, [sp, #32]
   828e6:	2300      	movs	r3, #0
   828e8:	4e61      	ldr	r6, [pc, #388]	; (82a70 <_svfprintf_r+0x868>)
   828ea:	4619      	mov	r1, r3
   828ec:	930a      	str	r3, [sp, #40]	; 0x28
   828ee:	4b61      	ldr	r3, [pc, #388]	; (82a74 <_svfprintf_r+0x86c>)
   828f0:	920e      	str	r2, [sp, #56]	; 0x38
   828f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   828f4:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   828f8:	9007      	str	r0, [sp, #28]
   828fa:	9112      	str	r1, [sp, #72]	; 0x48
   828fc:	2a47      	cmp	r2, #71	; 0x47
   828fe:	bfd8      	it	le
   82900:	461e      	movle	r6, r3
   82902:	e5a5      	b.n	82450 <_svfprintf_r+0x248>
   82904:	f04b 0b08 	orr.w	fp, fp, #8
   82908:	f89a 3000 	ldrb.w	r3, [sl]
   8290c:	e4d6      	b.n	822bc <_svfprintf_r+0xb4>
   8290e:	f04b 0b10 	orr.w	fp, fp, #16
   82912:	9311      	str	r3, [sp, #68]	; 0x44
   82914:	f01b 0320 	ands.w	r3, fp, #32
   82918:	f43f aebb 	beq.w	82692 <_svfprintf_r+0x48a>
   8291c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   8291e:	3407      	adds	r4, #7
   82920:	f024 0307 	bic.w	r3, r4, #7
   82924:	f103 0208 	add.w	r2, r3, #8
   82928:	e9d3 4500 	ldrd	r4, r5, [r3]
   8292c:	920f      	str	r2, [sp, #60]	; 0x3c
   8292e:	2300      	movs	r3, #0
   82930:	e568      	b.n	82404 <_svfprintf_r+0x1fc>
   82932:	9311      	str	r3, [sp, #68]	; 0x44
   82934:	2a00      	cmp	r2, #0
   82936:	f040 86c2 	bne.w	836be <_svfprintf_r+0x14b6>
   8293a:	4b4f      	ldr	r3, [pc, #316]	; (82a78 <_svfprintf_r+0x870>)
   8293c:	f01b 0f20 	tst.w	fp, #32
   82940:	9318      	str	r3, [sp, #96]	; 0x60
   82942:	f43f af19 	beq.w	82778 <_svfprintf_r+0x570>
   82946:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82948:	f01b 0f01 	tst.w	fp, #1
   8294c:	f104 0407 	add.w	r4, r4, #7
   82950:	f024 0307 	bic.w	r3, r4, #7
   82954:	f103 0208 	add.w	r2, r3, #8
   82958:	920f      	str	r2, [sp, #60]	; 0x3c
   8295a:	e9d3 4500 	ldrd	r4, r5, [r3]
   8295e:	f47f af1d 	bne.w	8279c <_svfprintf_r+0x594>
   82962:	2302      	movs	r3, #2
   82964:	e54e      	b.n	82404 <_svfprintf_r+0x1fc>
   82966:	f89a 3000 	ldrb.w	r3, [sl]
   8296a:	2900      	cmp	r1, #0
   8296c:	f47f aca6 	bne.w	822bc <_svfprintf_r+0xb4>
   82970:	2201      	movs	r2, #1
   82972:	2120      	movs	r1, #32
   82974:	e4a2      	b.n	822bc <_svfprintf_r+0xb4>
   82976:	f04b 0b01 	orr.w	fp, fp, #1
   8297a:	f89a 3000 	ldrb.w	r3, [sl]
   8297e:	e49d      	b.n	822bc <_svfprintf_r+0xb4>
   82980:	f89a 3000 	ldrb.w	r3, [sl]
   82984:	2201      	movs	r2, #1
   82986:	212b      	movs	r1, #43	; 0x2b
   82988:	e498      	b.n	822bc <_svfprintf_r+0xb4>
   8298a:	f04b 0b20 	orr.w	fp, fp, #32
   8298e:	f89a 3000 	ldrb.w	r3, [sl]
   82992:	e493      	b.n	822bc <_svfprintf_r+0xb4>
   82994:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   82998:	f89a 3000 	ldrb.w	r3, [sl]
   8299c:	e48e      	b.n	822bc <_svfprintf_r+0xb4>
   8299e:	f89a 3000 	ldrb.w	r3, [sl]
   829a2:	2b6c      	cmp	r3, #108	; 0x6c
   829a4:	bf03      	ittte	eq
   829a6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   829aa:	f04b 0b20 	orreq.w	fp, fp, #32
   829ae:	f10a 0a01 	addeq.w	sl, sl, #1
   829b2:	f04b 0b10 	orrne.w	fp, fp, #16
   829b6:	e481      	b.n	822bc <_svfprintf_r+0xb4>
   829b8:	2a00      	cmp	r2, #0
   829ba:	f040 867c 	bne.w	836b6 <_svfprintf_r+0x14ae>
   829be:	f01b 0f20 	tst.w	fp, #32
   829c2:	f040 8452 	bne.w	8326a <_svfprintf_r+0x1062>
   829c6:	f01b 0f10 	tst.w	fp, #16
   829ca:	f040 8438 	bne.w	8323e <_svfprintf_r+0x1036>
   829ce:	f01b 0f40 	tst.w	fp, #64	; 0x40
   829d2:	f000 8434 	beq.w	8323e <_svfprintf_r+0x1036>
   829d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   829d8:	6813      	ldr	r3, [r2, #0]
   829da:	3204      	adds	r2, #4
   829dc:	920f      	str	r2, [sp, #60]	; 0x3c
   829de:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   829e2:	801a      	strh	r2, [r3, #0]
   829e4:	e437      	b.n	82256 <_svfprintf_r+0x4e>
   829e6:	2378      	movs	r3, #120	; 0x78
   829e8:	2230      	movs	r2, #48	; 0x30
   829ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
   829ec:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   829f0:	9311      	str	r3, [sp, #68]	; 0x44
   829f2:	1d03      	adds	r3, r0, #4
   829f4:	930f      	str	r3, [sp, #60]	; 0x3c
   829f6:	4b20      	ldr	r3, [pc, #128]	; (82a78 <_svfprintf_r+0x870>)
   829f8:	6804      	ldr	r4, [r0, #0]
   829fa:	9318      	str	r3, [sp, #96]	; 0x60
   829fc:	f04b 0b02 	orr.w	fp, fp, #2
   82a00:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   82a04:	2500      	movs	r5, #0
   82a06:	2302      	movs	r3, #2
   82a08:	e4fc      	b.n	82404 <_svfprintf_r+0x1fc>
   82a0a:	9311      	str	r3, [sp, #68]	; 0x44
   82a0c:	2a00      	cmp	r2, #0
   82a0e:	f43f aeef 	beq.w	827f0 <_svfprintf_r+0x5e8>
   82a12:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   82a16:	e6eb      	b.n	827f0 <_svfprintf_r+0x5e8>
   82a18:	2000      	movs	r0, #0
   82a1a:	4604      	mov	r4, r0
   82a1c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a20:	f81a 3b01 	ldrb.w	r3, [sl], #1
   82a24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82a28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   82a2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   82a30:	2809      	cmp	r0, #9
   82a32:	d9f5      	bls.n	82a20 <_svfprintf_r+0x818>
   82a34:	940d      	str	r4, [sp, #52]	; 0x34
   82a36:	e443      	b.n	822c0 <_svfprintf_r+0xb8>
   82a38:	9311      	str	r3, [sp, #68]	; 0x44
   82a3a:	2a00      	cmp	r2, #0
   82a3c:	f040 864a 	bne.w	836d4 <_svfprintf_r+0x14cc>
   82a40:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82a42:	2a00      	cmp	r2, #0
   82a44:	f43f acb6 	beq.w	823b4 <_svfprintf_r+0x1ac>
   82a48:	2300      	movs	r3, #0
   82a4a:	2101      	movs	r1, #1
   82a4c:	461f      	mov	r7, r3
   82a4e:	9108      	str	r1, [sp, #32]
   82a50:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   82a54:	f8cd b01c 	str.w	fp, [sp, #28]
   82a58:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   82a5c:	930a      	str	r3, [sp, #40]	; 0x28
   82a5e:	9312      	str	r3, [sp, #72]	; 0x48
   82a60:	910e      	str	r1, [sp, #56]	; 0x38
   82a62:	ae28      	add	r6, sp, #160	; 0xa0
   82a64:	e4f8      	b.n	82458 <_svfprintf_r+0x250>
   82a66:	bf00      	nop
   82a68:	00086378 	.word	0x00086378
   82a6c:	7fefffff 	.word	0x7fefffff
   82a70:	0008636c 	.word	0x0008636c
   82a74:	00086368 	.word	0x00086368
   82a78:	0008638c 	.word	0x0008638c
   82a7c:	aa25      	add	r2, sp, #148	; 0x94
   82a7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82a80:	980c      	ldr	r0, [sp, #48]	; 0x30
   82a82:	f002 fcdb 	bl	8543c <__ssprint_r>
   82a86:	2800      	cmp	r0, #0
   82a88:	f47f ac9b 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82a8c:	46c8      	mov	r8, r9
   82a8e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   82a92:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82a94:	e533      	b.n	824fe <_svfprintf_r+0x2f6>
   82a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82a98:	2b65      	cmp	r3, #101	; 0x65
   82a9a:	f340 809a 	ble.w	82bd2 <_svfprintf_r+0x9ca>
   82a9e:	a815      	add	r0, sp, #84	; 0x54
   82aa0:	c80d      	ldmia	r0, {r0, r2, r3}
   82aa2:	9914      	ldr	r1, [sp, #80]	; 0x50
   82aa4:	f003 fa06 	bl	85eb4 <__aeabi_dcmpeq>
   82aa8:	2800      	cmp	r0, #0
   82aaa:	f000 8193 	beq.w	82dd4 <_svfprintf_r+0xbcc>
   82aae:	2101      	movs	r1, #1
   82ab0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ab2:	4ab5      	ldr	r2, [pc, #724]	; (82d88 <_svfprintf_r+0xb80>)
   82ab4:	440b      	add	r3, r1
   82ab6:	440c      	add	r4, r1
   82ab8:	2b07      	cmp	r3, #7
   82aba:	9427      	str	r4, [sp, #156]	; 0x9c
   82abc:	9326      	str	r3, [sp, #152]	; 0x98
   82abe:	f8c8 1004 	str.w	r1, [r8, #4]
   82ac2:	f8c8 2000 	str.w	r2, [r8]
   82ac6:	f300 83c6 	bgt.w	83256 <_svfprintf_r+0x104e>
   82aca:	f108 0808 	add.w	r8, r8, #8
   82ace:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   82ad0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82ad2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82ad4:	4293      	cmp	r3, r2
   82ad6:	db03      	blt.n	82ae0 <_svfprintf_r+0x8d8>
   82ad8:	9b07      	ldr	r3, [sp, #28]
   82ada:	07dd      	lsls	r5, r3, #31
   82adc:	f57f ad86 	bpl.w	825ec <_svfprintf_r+0x3e4>
   82ae0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82ae2:	9919      	ldr	r1, [sp, #100]	; 0x64
   82ae4:	3301      	adds	r3, #1
   82ae6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   82ae8:	440c      	add	r4, r1
   82aea:	2b07      	cmp	r3, #7
   82aec:	f8c8 2000 	str.w	r2, [r8]
   82af0:	f8c8 1004 	str.w	r1, [r8, #4]
   82af4:	9427      	str	r4, [sp, #156]	; 0x9c
   82af6:	9326      	str	r3, [sp, #152]	; 0x98
   82af8:	f300 83c4 	bgt.w	83284 <_svfprintf_r+0x107c>
   82afc:	f108 0808 	add.w	r8, r8, #8
   82b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82b02:	1e5e      	subs	r6, r3, #1
   82b04:	2e00      	cmp	r6, #0
   82b06:	f77f ad71 	ble.w	825ec <_svfprintf_r+0x3e4>
   82b0a:	2e10      	cmp	r6, #16
   82b0c:	f340 8575 	ble.w	835fa <_svfprintf_r+0x13f2>
   82b10:	4622      	mov	r2, r4
   82b12:	2710      	movs	r7, #16
   82b14:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b16:	4d9d      	ldr	r5, [pc, #628]	; (82d8c <_svfprintf_r+0xb84>)
   82b18:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   82b1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   82b1e:	e005      	b.n	82b2c <_svfprintf_r+0x924>
   82b20:	f108 0808 	add.w	r8, r8, #8
   82b24:	3e10      	subs	r6, #16
   82b26:	2e10      	cmp	r6, #16
   82b28:	f340 8225 	ble.w	82f76 <_svfprintf_r+0xd6e>
   82b2c:	3301      	adds	r3, #1
   82b2e:	3210      	adds	r2, #16
   82b30:	2b07      	cmp	r3, #7
   82b32:	9227      	str	r2, [sp, #156]	; 0x9c
   82b34:	9326      	str	r3, [sp, #152]	; 0x98
   82b36:	e888 00a0 	stmia.w	r8, {r5, r7}
   82b3a:	ddf1      	ble.n	82b20 <_svfprintf_r+0x918>
   82b3c:	aa25      	add	r2, sp, #148	; 0x94
   82b3e:	4621      	mov	r1, r4
   82b40:	4658      	mov	r0, fp
   82b42:	f002 fc7b 	bl	8543c <__ssprint_r>
   82b46:	2800      	cmp	r0, #0
   82b48:	f47f ac3b 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82b4c:	46c8      	mov	r8, r9
   82b4e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82b50:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b52:	e7e7      	b.n	82b24 <_svfprintf_r+0x91c>
   82b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   82b56:	9a08      	ldr	r2, [sp, #32]
   82b58:	1a9f      	subs	r7, r3, r2
   82b5a:	2f00      	cmp	r7, #0
   82b5c:	f77f acf6 	ble.w	8254c <_svfprintf_r+0x344>
   82b60:	2f10      	cmp	r7, #16
   82b62:	f340 84a8 	ble.w	834b6 <_svfprintf_r+0x12ae>
   82b66:	4d89      	ldr	r5, [pc, #548]	; (82d8c <_svfprintf_r+0xb84>)
   82b68:	4642      	mov	r2, r8
   82b6a:	4621      	mov	r1, r4
   82b6c:	46b0      	mov	r8, r6
   82b6e:	f04f 0b10 	mov.w	fp, #16
   82b72:	462e      	mov	r6, r5
   82b74:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82b76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82b78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82b7a:	e004      	b.n	82b86 <_svfprintf_r+0x97e>
   82b7c:	3f10      	subs	r7, #16
   82b7e:	2f10      	cmp	r7, #16
   82b80:	f102 0208 	add.w	r2, r2, #8
   82b84:	dd15      	ble.n	82bb2 <_svfprintf_r+0x9aa>
   82b86:	3301      	adds	r3, #1
   82b88:	3110      	adds	r1, #16
   82b8a:	2b07      	cmp	r3, #7
   82b8c:	9127      	str	r1, [sp, #156]	; 0x9c
   82b8e:	9326      	str	r3, [sp, #152]	; 0x98
   82b90:	e882 0840 	stmia.w	r2, {r6, fp}
   82b94:	ddf2      	ble.n	82b7c <_svfprintf_r+0x974>
   82b96:	aa25      	add	r2, sp, #148	; 0x94
   82b98:	4629      	mov	r1, r5
   82b9a:	4620      	mov	r0, r4
   82b9c:	f002 fc4e 	bl	8543c <__ssprint_r>
   82ba0:	2800      	cmp	r0, #0
   82ba2:	f47f ac0e 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82ba6:	3f10      	subs	r7, #16
   82ba8:	2f10      	cmp	r7, #16
   82baa:	464a      	mov	r2, r9
   82bac:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82bae:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82bb0:	dce9      	bgt.n	82b86 <_svfprintf_r+0x97e>
   82bb2:	4635      	mov	r5, r6
   82bb4:	460c      	mov	r4, r1
   82bb6:	4646      	mov	r6, r8
   82bb8:	4690      	mov	r8, r2
   82bba:	3301      	adds	r3, #1
   82bbc:	443c      	add	r4, r7
   82bbe:	2b07      	cmp	r3, #7
   82bc0:	9427      	str	r4, [sp, #156]	; 0x9c
   82bc2:	9326      	str	r3, [sp, #152]	; 0x98
   82bc4:	e888 00a0 	stmia.w	r8, {r5, r7}
   82bc8:	f300 829e 	bgt.w	83108 <_svfprintf_r+0xf00>
   82bcc:	f108 0808 	add.w	r8, r8, #8
   82bd0:	e4bc      	b.n	8254c <_svfprintf_r+0x344>
   82bd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82bd4:	2b01      	cmp	r3, #1
   82bd6:	f340 824f 	ble.w	83078 <_svfprintf_r+0xe70>
   82bda:	2301      	movs	r3, #1
   82bdc:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82bde:	441c      	add	r4, r3
   82be0:	441f      	add	r7, r3
   82be2:	2f07      	cmp	r7, #7
   82be4:	9427      	str	r4, [sp, #156]	; 0x9c
   82be6:	f8c8 6000 	str.w	r6, [r8]
   82bea:	9726      	str	r7, [sp, #152]	; 0x98
   82bec:	f8c8 3004 	str.w	r3, [r8, #4]
   82bf0:	f300 825f 	bgt.w	830b2 <_svfprintf_r+0xeaa>
   82bf4:	f108 0808 	add.w	r8, r8, #8
   82bf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   82bfa:	3701      	adds	r7, #1
   82bfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   82bfe:	4414      	add	r4, r2
   82c00:	2f07      	cmp	r7, #7
   82c02:	9427      	str	r4, [sp, #156]	; 0x9c
   82c04:	9726      	str	r7, [sp, #152]	; 0x98
   82c06:	f8c8 3000 	str.w	r3, [r8]
   82c0a:	f8c8 2004 	str.w	r2, [r8, #4]
   82c0e:	f300 825c 	bgt.w	830ca <_svfprintf_r+0xec2>
   82c12:	f108 0808 	add.w	r8, r8, #8
   82c16:	a815      	add	r0, sp, #84	; 0x54
   82c18:	c80d      	ldmia	r0, {r0, r2, r3}
   82c1a:	9914      	ldr	r1, [sp, #80]	; 0x50
   82c1c:	f003 f94a 	bl	85eb4 <__aeabi_dcmpeq>
   82c20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82c22:	2800      	cmp	r0, #0
   82c24:	f040 8141 	bne.w	82eaa <_svfprintf_r+0xca2>
   82c28:	3b01      	subs	r3, #1
   82c2a:	3701      	adds	r7, #1
   82c2c:	3601      	adds	r6, #1
   82c2e:	441c      	add	r4, r3
   82c30:	2f07      	cmp	r7, #7
   82c32:	f8c8 6000 	str.w	r6, [r8]
   82c36:	9726      	str	r7, [sp, #152]	; 0x98
   82c38:	9427      	str	r4, [sp, #156]	; 0x9c
   82c3a:	f8c8 3004 	str.w	r3, [r8, #4]
   82c3e:	f300 8166 	bgt.w	82f0e <_svfprintf_r+0xd06>
   82c42:	f108 0808 	add.w	r8, r8, #8
   82c46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   82c48:	3701      	adds	r7, #1
   82c4a:	4414      	add	r4, r2
   82c4c:	ab21      	add	r3, sp, #132	; 0x84
   82c4e:	2f07      	cmp	r7, #7
   82c50:	9427      	str	r4, [sp, #156]	; 0x9c
   82c52:	9726      	str	r7, [sp, #152]	; 0x98
   82c54:	f8c8 2004 	str.w	r2, [r8, #4]
   82c58:	f8c8 3000 	str.w	r3, [r8]
   82c5c:	f77f acc4 	ble.w	825e8 <_svfprintf_r+0x3e0>
   82c60:	aa25      	add	r2, sp, #148	; 0x94
   82c62:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c64:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c66:	f002 fbe9 	bl	8543c <__ssprint_r>
   82c6a:	2800      	cmp	r0, #0
   82c6c:	f47f aba9 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82c70:	46c8      	mov	r8, r9
   82c72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82c74:	e4ba      	b.n	825ec <_svfprintf_r+0x3e4>
   82c76:	aa25      	add	r2, sp, #148	; 0x94
   82c78:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82c7a:	980c      	ldr	r0, [sp, #48]	; 0x30
   82c7c:	f002 fbde 	bl	8543c <__ssprint_r>
   82c80:	2800      	cmp	r0, #0
   82c82:	f43f acfd 	beq.w	82680 <_svfprintf_r+0x478>
   82c86:	f7ff bb9c 	b.w	823c2 <_svfprintf_r+0x1ba>
   82c8a:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82c8e:	2b01      	cmp	r3, #1
   82c90:	f000 817e 	beq.w	82f90 <_svfprintf_r+0xd88>
   82c94:	2b02      	cmp	r3, #2
   82c96:	d171      	bne.n	82d7c <_svfprintf_r+0xb74>
   82c98:	f8cd b01c 	str.w	fp, [sp, #28]
   82c9c:	2400      	movs	r4, #0
   82c9e:	2500      	movs	r5, #0
   82ca0:	e5d4      	b.n	8284c <_svfprintf_r+0x644>
   82ca2:	aa25      	add	r2, sp, #148	; 0x94
   82ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82ca6:	980c      	ldr	r0, [sp, #48]	; 0x30
   82ca8:	f002 fbc8 	bl	8543c <__ssprint_r>
   82cac:	2800      	cmp	r0, #0
   82cae:	f47f ab88 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82cb2:	46c8      	mov	r8, r9
   82cb4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82cb6:	e486      	b.n	825c6 <_svfprintf_r+0x3be>
   82cb8:	aa25      	add	r2, sp, #148	; 0x94
   82cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82cbc:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cbe:	f002 fbbd 	bl	8543c <__ssprint_r>
   82cc2:	2800      	cmp	r0, #0
   82cc4:	f47f ab7d 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82cc8:	46c8      	mov	r8, r9
   82cca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82ccc:	e429      	b.n	82522 <_svfprintf_r+0x31a>
   82cce:	2001      	movs	r0, #1
   82cd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82cd2:	4a2d      	ldr	r2, [pc, #180]	; (82d88 <_svfprintf_r+0xb80>)
   82cd4:	4403      	add	r3, r0
   82cd6:	4404      	add	r4, r0
   82cd8:	2b07      	cmp	r3, #7
   82cda:	9427      	str	r4, [sp, #156]	; 0x9c
   82cdc:	9326      	str	r3, [sp, #152]	; 0x98
   82cde:	f8c8 0004 	str.w	r0, [r8, #4]
   82ce2:	f8c8 2000 	str.w	r2, [r8]
   82ce6:	f340 82d8 	ble.w	8329a <_svfprintf_r+0x1092>
   82cea:	aa25      	add	r2, sp, #148	; 0x94
   82cec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82cee:	980c      	ldr	r0, [sp, #48]	; 0x30
   82cf0:	f002 fba4 	bl	8543c <__ssprint_r>
   82cf4:	2800      	cmp	r0, #0
   82cf6:	f47f ab64 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82cfa:	46c8      	mov	r8, r9
   82cfc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82cfe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d00:	b929      	cbnz	r1, 82d0e <_svfprintf_r+0xb06>
   82d02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82d04:	b91b      	cbnz	r3, 82d0e <_svfprintf_r+0xb06>
   82d06:	9b07      	ldr	r3, [sp, #28]
   82d08:	07d8      	lsls	r0, r3, #31
   82d0a:	f57f ac6f 	bpl.w	825ec <_svfprintf_r+0x3e4>
   82d0e:	9819      	ldr	r0, [sp, #100]	; 0x64
   82d10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82d12:	4602      	mov	r2, r0
   82d14:	3301      	adds	r3, #1
   82d16:	4422      	add	r2, r4
   82d18:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   82d1a:	2b07      	cmp	r3, #7
   82d1c:	9227      	str	r2, [sp, #156]	; 0x9c
   82d1e:	f8c8 4000 	str.w	r4, [r8]
   82d22:	f8c8 0004 	str.w	r0, [r8, #4]
   82d26:	9326      	str	r3, [sp, #152]	; 0x98
   82d28:	f300 8431 	bgt.w	8358e <_svfprintf_r+0x1386>
   82d2c:	f108 0808 	add.w	r8, r8, #8
   82d30:	2900      	cmp	r1, #0
   82d32:	f2c0 8409 	blt.w	83548 <_svfprintf_r+0x1340>
   82d36:	9913      	ldr	r1, [sp, #76]	; 0x4c
   82d38:	3301      	adds	r3, #1
   82d3a:	188c      	adds	r4, r1, r2
   82d3c:	2b07      	cmp	r3, #7
   82d3e:	9427      	str	r4, [sp, #156]	; 0x9c
   82d40:	9326      	str	r3, [sp, #152]	; 0x98
   82d42:	f8c8 6000 	str.w	r6, [r8]
   82d46:	f8c8 1004 	str.w	r1, [r8, #4]
   82d4a:	f77f ac4d 	ble.w	825e8 <_svfprintf_r+0x3e0>
   82d4e:	aa25      	add	r2, sp, #148	; 0x94
   82d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d52:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d54:	f002 fb72 	bl	8543c <__ssprint_r>
   82d58:	2800      	cmp	r0, #0
   82d5a:	f47f ab32 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82d5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d60:	46c8      	mov	r8, r9
   82d62:	e443      	b.n	825ec <_svfprintf_r+0x3e4>
   82d64:	aa25      	add	r2, sp, #148	; 0x94
   82d66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82d68:	980c      	ldr	r0, [sp, #48]	; 0x30
   82d6a:	f002 fb67 	bl	8543c <__ssprint_r>
   82d6e:	2800      	cmp	r0, #0
   82d70:	f47f ab27 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82d74:	46c8      	mov	r8, r9
   82d76:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82d78:	f7ff bbe5 	b.w	82546 <_svfprintf_r+0x33e>
   82d7c:	2400      	movs	r4, #0
   82d7e:	2500      	movs	r5, #0
   82d80:	f8cd b01c 	str.w	fp, [sp, #28]
   82d84:	4649      	mov	r1, r9
   82d86:	e004      	b.n	82d92 <_svfprintf_r+0xb8a>
   82d88:	000863a8 	.word	0x000863a8
   82d8c:	000863bc 	.word	0x000863bc
   82d90:	4631      	mov	r1, r6
   82d92:	08e2      	lsrs	r2, r4, #3
   82d94:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   82d98:	08e8      	lsrs	r0, r5, #3
   82d9a:	f004 0307 	and.w	r3, r4, #7
   82d9e:	4605      	mov	r5, r0
   82da0:	4614      	mov	r4, r2
   82da2:	3330      	adds	r3, #48	; 0x30
   82da4:	ea54 0205 	orrs.w	r2, r4, r5
   82da8:	f801 3c01 	strb.w	r3, [r1, #-1]
   82dac:	f101 36ff 	add.w	r6, r1, #4294967295
   82db0:	d1ee      	bne.n	82d90 <_svfprintf_r+0xb88>
   82db2:	9a07      	ldr	r2, [sp, #28]
   82db4:	07d2      	lsls	r2, r2, #31
   82db6:	f57f ad59 	bpl.w	8286c <_svfprintf_r+0x664>
   82dba:	2b30      	cmp	r3, #48	; 0x30
   82dbc:	f43f ad56 	beq.w	8286c <_svfprintf_r+0x664>
   82dc0:	2330      	movs	r3, #48	; 0x30
   82dc2:	3902      	subs	r1, #2
   82dc4:	f806 3c01 	strb.w	r3, [r6, #-1]
   82dc8:	eba9 0301 	sub.w	r3, r9, r1
   82dcc:	930e      	str	r3, [sp, #56]	; 0x38
   82dce:	460e      	mov	r6, r1
   82dd0:	f7ff bb36 	b.w	82440 <_svfprintf_r+0x238>
   82dd4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   82dd6:	2900      	cmp	r1, #0
   82dd8:	f77f af79 	ble.w	82cce <_svfprintf_r+0xac6>
   82ddc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82dde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   82de0:	4293      	cmp	r3, r2
   82de2:	bfa8      	it	ge
   82de4:	4613      	movge	r3, r2
   82de6:	2b00      	cmp	r3, #0
   82de8:	461f      	mov	r7, r3
   82dea:	dd0b      	ble.n	82e04 <_svfprintf_r+0xbfc>
   82dec:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82dee:	443c      	add	r4, r7
   82df0:	3301      	adds	r3, #1
   82df2:	2b07      	cmp	r3, #7
   82df4:	9427      	str	r4, [sp, #156]	; 0x9c
   82df6:	e888 00c0 	stmia.w	r8, {r6, r7}
   82dfa:	9326      	str	r3, [sp, #152]	; 0x98
   82dfc:	f300 82fb 	bgt.w	833f6 <_svfprintf_r+0x11ee>
   82e00:	f108 0808 	add.w	r8, r8, #8
   82e04:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82e06:	2f00      	cmp	r7, #0
   82e08:	bfa8      	it	ge
   82e0a:	1bdb      	subge	r3, r3, r7
   82e0c:	2b00      	cmp	r3, #0
   82e0e:	461f      	mov	r7, r3
   82e10:	f340 80d7 	ble.w	82fc2 <_svfprintf_r+0xdba>
   82e14:	2b10      	cmp	r3, #16
   82e16:	f340 8434 	ble.w	83682 <_svfprintf_r+0x147a>
   82e1a:	4dba      	ldr	r5, [pc, #744]	; (83104 <_svfprintf_r+0xefc>)
   82e1c:	4642      	mov	r2, r8
   82e1e:	4621      	mov	r1, r4
   82e20:	46b0      	mov	r8, r6
   82e22:	f04f 0b10 	mov.w	fp, #16
   82e26:	462e      	mov	r6, r5
   82e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82e2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82e2e:	e004      	b.n	82e3a <_svfprintf_r+0xc32>
   82e30:	3208      	adds	r2, #8
   82e32:	3f10      	subs	r7, #16
   82e34:	2f10      	cmp	r7, #16
   82e36:	f340 80b5 	ble.w	82fa4 <_svfprintf_r+0xd9c>
   82e3a:	3301      	adds	r3, #1
   82e3c:	3110      	adds	r1, #16
   82e3e:	2b07      	cmp	r3, #7
   82e40:	9127      	str	r1, [sp, #156]	; 0x9c
   82e42:	9326      	str	r3, [sp, #152]	; 0x98
   82e44:	e882 0840 	stmia.w	r2, {r6, fp}
   82e48:	ddf2      	ble.n	82e30 <_svfprintf_r+0xc28>
   82e4a:	aa25      	add	r2, sp, #148	; 0x94
   82e4c:	4629      	mov	r1, r5
   82e4e:	4620      	mov	r0, r4
   82e50:	f002 faf4 	bl	8543c <__ssprint_r>
   82e54:	2800      	cmp	r0, #0
   82e56:	f47f aab4 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82e5a:	464a      	mov	r2, r9
   82e5c:	9927      	ldr	r1, [sp, #156]	; 0x9c
   82e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   82e60:	e7e7      	b.n	82e32 <_svfprintf_r+0xc2a>
   82e62:	2d00      	cmp	r5, #0
   82e64:	bf08      	it	eq
   82e66:	2c0a      	cmpeq	r4, #10
   82e68:	f0c0 8090 	bcc.w	82f8c <_svfprintf_r+0xd84>
   82e6c:	464e      	mov	r6, r9
   82e6e:	4620      	mov	r0, r4
   82e70:	4629      	mov	r1, r5
   82e72:	220a      	movs	r2, #10
   82e74:	2300      	movs	r3, #0
   82e76:	f003 f88d 	bl	85f94 <__aeabi_uldivmod>
   82e7a:	3230      	adds	r2, #48	; 0x30
   82e7c:	f806 2d01 	strb.w	r2, [r6, #-1]!
   82e80:	4620      	mov	r0, r4
   82e82:	4629      	mov	r1, r5
   82e84:	2300      	movs	r3, #0
   82e86:	220a      	movs	r2, #10
   82e88:	f003 f884 	bl	85f94 <__aeabi_uldivmod>
   82e8c:	4604      	mov	r4, r0
   82e8e:	460d      	mov	r5, r1
   82e90:	ea54 0305 	orrs.w	r3, r4, r5
   82e94:	d1eb      	bne.n	82e6e <_svfprintf_r+0xc66>
   82e96:	eba9 0306 	sub.w	r3, r9, r6
   82e9a:	930e      	str	r3, [sp, #56]	; 0x38
   82e9c:	f7ff bad0 	b.w	82440 <_svfprintf_r+0x238>
   82ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82ea2:	464e      	mov	r6, r9
   82ea4:	930e      	str	r3, [sp, #56]	; 0x38
   82ea6:	f7ff bacb 	b.w	82440 <_svfprintf_r+0x238>
   82eaa:	1e5e      	subs	r6, r3, #1
   82eac:	2e00      	cmp	r6, #0
   82eae:	f77f aeca 	ble.w	82c46 <_svfprintf_r+0xa3e>
   82eb2:	2e10      	cmp	r6, #16
   82eb4:	f340 83e3 	ble.w	8367e <_svfprintf_r+0x1476>
   82eb8:	4622      	mov	r2, r4
   82eba:	f04f 0b10 	mov.w	fp, #16
   82ebe:	4d91      	ldr	r5, [pc, #580]	; (83104 <_svfprintf_r+0xefc>)
   82ec0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82ec2:	e004      	b.n	82ece <_svfprintf_r+0xcc6>
   82ec4:	3e10      	subs	r6, #16
   82ec6:	2e10      	cmp	r6, #16
   82ec8:	f108 0808 	add.w	r8, r8, #8
   82ecc:	dd15      	ble.n	82efa <_svfprintf_r+0xcf2>
   82ece:	3701      	adds	r7, #1
   82ed0:	3210      	adds	r2, #16
   82ed2:	2f07      	cmp	r7, #7
   82ed4:	9227      	str	r2, [sp, #156]	; 0x9c
   82ed6:	9726      	str	r7, [sp, #152]	; 0x98
   82ed8:	e888 0820 	stmia.w	r8, {r5, fp}
   82edc:	ddf2      	ble.n	82ec4 <_svfprintf_r+0xcbc>
   82ede:	aa25      	add	r2, sp, #148	; 0x94
   82ee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82ee2:	4620      	mov	r0, r4
   82ee4:	f002 faaa 	bl	8543c <__ssprint_r>
   82ee8:	2800      	cmp	r0, #0
   82eea:	f47f aa6a 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82eee:	3e10      	subs	r6, #16
   82ef0:	2e10      	cmp	r6, #16
   82ef2:	46c8      	mov	r8, r9
   82ef4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   82ef6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82ef8:	dce9      	bgt.n	82ece <_svfprintf_r+0xcc6>
   82efa:	4614      	mov	r4, r2
   82efc:	3701      	adds	r7, #1
   82efe:	4434      	add	r4, r6
   82f00:	2f07      	cmp	r7, #7
   82f02:	9427      	str	r4, [sp, #156]	; 0x9c
   82f04:	9726      	str	r7, [sp, #152]	; 0x98
   82f06:	e888 0060 	stmia.w	r8, {r5, r6}
   82f0a:	f77f ae9a 	ble.w	82c42 <_svfprintf_r+0xa3a>
   82f0e:	aa25      	add	r2, sp, #148	; 0x94
   82f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
   82f12:	980c      	ldr	r0, [sp, #48]	; 0x30
   82f14:	f002 fa92 	bl	8543c <__ssprint_r>
   82f18:	2800      	cmp	r0, #0
   82f1a:	f47f aa52 	bne.w	823c2 <_svfprintf_r+0x1ba>
   82f1e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   82f20:	9f26      	ldr	r7, [sp, #152]	; 0x98
   82f22:	46c8      	mov	r8, r9
   82f24:	e68f      	b.n	82c46 <_svfprintf_r+0xa3e>
   82f26:	3204      	adds	r2, #4
   82f28:	681c      	ldr	r4, [r3, #0]
   82f2a:	2500      	movs	r5, #0
   82f2c:	2301      	movs	r3, #1
   82f2e:	920f      	str	r2, [sp, #60]	; 0x3c
   82f30:	f7ff ba68 	b.w	82404 <_svfprintf_r+0x1fc>
   82f34:	681c      	ldr	r4, [r3, #0]
   82f36:	3304      	adds	r3, #4
   82f38:	930f      	str	r3, [sp, #60]	; 0x3c
   82f3a:	2500      	movs	r5, #0
   82f3c:	e42a      	b.n	82794 <_svfprintf_r+0x58c>
   82f3e:	681c      	ldr	r4, [r3, #0]
   82f40:	3304      	adds	r3, #4
   82f42:	17e5      	asrs	r5, r4, #31
   82f44:	4622      	mov	r2, r4
   82f46:	930f      	str	r3, [sp, #60]	; 0x3c
   82f48:	462b      	mov	r3, r5
   82f4a:	2a00      	cmp	r2, #0
   82f4c:	f173 0300 	sbcs.w	r3, r3, #0
   82f50:	f6bf ac68 	bge.w	82824 <_svfprintf_r+0x61c>
   82f54:	272d      	movs	r7, #45	; 0x2d
   82f56:	4264      	negs	r4, r4
   82f58:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   82f5c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   82f60:	2301      	movs	r3, #1
   82f62:	f7ff ba53 	b.w	8240c <_svfprintf_r+0x204>
   82f66:	990f      	ldr	r1, [sp, #60]	; 0x3c
   82f68:	2500      	movs	r5, #0
   82f6a:	460a      	mov	r2, r1
   82f6c:	3204      	adds	r2, #4
   82f6e:	680c      	ldr	r4, [r1, #0]
   82f70:	920f      	str	r2, [sp, #60]	; 0x3c
   82f72:	f7ff ba47 	b.w	82404 <_svfprintf_r+0x1fc>
   82f76:	4614      	mov	r4, r2
   82f78:	3301      	adds	r3, #1
   82f7a:	4434      	add	r4, r6
   82f7c:	2b07      	cmp	r3, #7
   82f7e:	9427      	str	r4, [sp, #156]	; 0x9c
   82f80:	9326      	str	r3, [sp, #152]	; 0x98
   82f82:	e888 0060 	stmia.w	r8, {r5, r6}
   82f86:	f77f ab2f 	ble.w	825e8 <_svfprintf_r+0x3e0>
   82f8a:	e6e0      	b.n	82d4e <_svfprintf_r+0xb46>
   82f8c:	f8dd b01c 	ldr.w	fp, [sp, #28]
   82f90:	2301      	movs	r3, #1
   82f92:	ae42      	add	r6, sp, #264	; 0x108
   82f94:	3430      	adds	r4, #48	; 0x30
   82f96:	f8cd b01c 	str.w	fp, [sp, #28]
   82f9a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   82f9e:	930e      	str	r3, [sp, #56]	; 0x38
   82fa0:	f7ff ba4e 	b.w	82440 <_svfprintf_r+0x238>
   82fa4:	4635      	mov	r5, r6
   82fa6:	460c      	mov	r4, r1
   82fa8:	4646      	mov	r6, r8
   82faa:	4690      	mov	r8, r2
   82fac:	3301      	adds	r3, #1
   82fae:	443c      	add	r4, r7
   82fb0:	2b07      	cmp	r3, #7
   82fb2:	9427      	str	r4, [sp, #156]	; 0x9c
   82fb4:	9326      	str	r3, [sp, #152]	; 0x98
   82fb6:	e888 00a0 	stmia.w	r8, {r5, r7}
   82fba:	f300 8246 	bgt.w	8344a <_svfprintf_r+0x1242>
   82fbe:	f108 0808 	add.w	r8, r8, #8
   82fc2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   82fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82fc6:	429a      	cmp	r2, r3
   82fc8:	db45      	blt.n	83056 <_svfprintf_r+0xe4e>
   82fca:	9b07      	ldr	r3, [sp, #28]
   82fcc:	07d9      	lsls	r1, r3, #31
   82fce:	d442      	bmi.n	83056 <_svfprintf_r+0xe4e>
   82fd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   82fd2:	9812      	ldr	r0, [sp, #72]	; 0x48
   82fd4:	1a9a      	subs	r2, r3, r2
   82fd6:	1a1d      	subs	r5, r3, r0
   82fd8:	4295      	cmp	r5, r2
   82fda:	bfa8      	it	ge
   82fdc:	4615      	movge	r5, r2
   82fde:	2d00      	cmp	r5, #0
   82fe0:	dd0e      	ble.n	83000 <_svfprintf_r+0xdf8>
   82fe2:	9926      	ldr	r1, [sp, #152]	; 0x98
   82fe4:	4406      	add	r6, r0
   82fe6:	3101      	adds	r1, #1
   82fe8:	442c      	add	r4, r5
   82fea:	2907      	cmp	r1, #7
   82fec:	f8c8 6000 	str.w	r6, [r8]
   82ff0:	9427      	str	r4, [sp, #156]	; 0x9c
   82ff2:	f8c8 5004 	str.w	r5, [r8, #4]
   82ff6:	9126      	str	r1, [sp, #152]	; 0x98
   82ff8:	f300 8216 	bgt.w	83428 <_svfprintf_r+0x1220>
   82ffc:	f108 0808 	add.w	r8, r8, #8
   83000:	2d00      	cmp	r5, #0
   83002:	bfb4      	ite	lt
   83004:	4616      	movlt	r6, r2
   83006:	1b56      	subge	r6, r2, r5
   83008:	2e00      	cmp	r6, #0
   8300a:	f77f aaef 	ble.w	825ec <_svfprintf_r+0x3e4>
   8300e:	2e10      	cmp	r6, #16
   83010:	f340 82f3 	ble.w	835fa <_svfprintf_r+0x13f2>
   83014:	4622      	mov	r2, r4
   83016:	2710      	movs	r7, #16
   83018:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8301a:	4d3a      	ldr	r5, [pc, #232]	; (83104 <_svfprintf_r+0xefc>)
   8301c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83020:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83022:	e004      	b.n	8302e <_svfprintf_r+0xe26>
   83024:	f108 0808 	add.w	r8, r8, #8
   83028:	3e10      	subs	r6, #16
   8302a:	2e10      	cmp	r6, #16
   8302c:	dda3      	ble.n	82f76 <_svfprintf_r+0xd6e>
   8302e:	3301      	adds	r3, #1
   83030:	3210      	adds	r2, #16
   83032:	2b07      	cmp	r3, #7
   83034:	9227      	str	r2, [sp, #156]	; 0x9c
   83036:	9326      	str	r3, [sp, #152]	; 0x98
   83038:	e888 00a0 	stmia.w	r8, {r5, r7}
   8303c:	ddf2      	ble.n	83024 <_svfprintf_r+0xe1c>
   8303e:	aa25      	add	r2, sp, #148	; 0x94
   83040:	4621      	mov	r1, r4
   83042:	4658      	mov	r0, fp
   83044:	f002 f9fa 	bl	8543c <__ssprint_r>
   83048:	2800      	cmp	r0, #0
   8304a:	f47f a9ba 	bne.w	823c2 <_svfprintf_r+0x1ba>
   8304e:	46c8      	mov	r8, r9
   83050:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   83052:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83054:	e7e8      	b.n	83028 <_svfprintf_r+0xe20>
   83056:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83058:	9819      	ldr	r0, [sp, #100]	; 0x64
   8305a:	3301      	adds	r3, #1
   8305c:	991a      	ldr	r1, [sp, #104]	; 0x68
   8305e:	4404      	add	r4, r0
   83060:	2b07      	cmp	r3, #7
   83062:	9427      	str	r4, [sp, #156]	; 0x9c
   83064:	f8c8 1000 	str.w	r1, [r8]
   83068:	f8c8 0004 	str.w	r0, [r8, #4]
   8306c:	9326      	str	r3, [sp, #152]	; 0x98
   8306e:	f300 81cf 	bgt.w	83410 <_svfprintf_r+0x1208>
   83072:	f108 0808 	add.w	r8, r8, #8
   83076:	e7ab      	b.n	82fd0 <_svfprintf_r+0xdc8>
   83078:	9b07      	ldr	r3, [sp, #28]
   8307a:	07da      	lsls	r2, r3, #31
   8307c:	f53f adad 	bmi.w	82bda <_svfprintf_r+0x9d2>
   83080:	2301      	movs	r3, #1
   83082:	9f26      	ldr	r7, [sp, #152]	; 0x98
   83084:	441c      	add	r4, r3
   83086:	441f      	add	r7, r3
   83088:	2f07      	cmp	r7, #7
   8308a:	9427      	str	r4, [sp, #156]	; 0x9c
   8308c:	f8c8 6000 	str.w	r6, [r8]
   83090:	9726      	str	r7, [sp, #152]	; 0x98
   83092:	f8c8 3004 	str.w	r3, [r8, #4]
   83096:	f77f add4 	ble.w	82c42 <_svfprintf_r+0xa3a>
   8309a:	aa25      	add	r2, sp, #148	; 0x94
   8309c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8309e:	980c      	ldr	r0, [sp, #48]	; 0x30
   830a0:	f002 f9cc 	bl	8543c <__ssprint_r>
   830a4:	2800      	cmp	r0, #0
   830a6:	f47f a98c 	bne.w	823c2 <_svfprintf_r+0x1ba>
   830aa:	46c8      	mov	r8, r9
   830ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830ae:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830b0:	e5c9      	b.n	82c46 <_svfprintf_r+0xa3e>
   830b2:	aa25      	add	r2, sp, #148	; 0x94
   830b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   830b8:	f002 f9c0 	bl	8543c <__ssprint_r>
   830bc:	2800      	cmp	r0, #0
   830be:	f47f a980 	bne.w	823c2 <_svfprintf_r+0x1ba>
   830c2:	46c8      	mov	r8, r9
   830c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830c6:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830c8:	e596      	b.n	82bf8 <_svfprintf_r+0x9f0>
   830ca:	aa25      	add	r2, sp, #148	; 0x94
   830cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   830ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   830d0:	f002 f9b4 	bl	8543c <__ssprint_r>
   830d4:	2800      	cmp	r0, #0
   830d6:	f47f a974 	bne.w	823c2 <_svfprintf_r+0x1ba>
   830da:	46c8      	mov	r8, r9
   830dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   830de:	9f26      	ldr	r7, [sp, #152]	; 0x98
   830e0:	e599      	b.n	82c16 <_svfprintf_r+0xa0e>
   830e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   830e4:	3407      	adds	r4, #7
   830e6:	f024 0407 	bic.w	r4, r4, #7
   830ea:	f104 0108 	add.w	r1, r4, #8
   830ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   830f2:	910f      	str	r1, [sp, #60]	; 0x3c
   830f4:	4614      	mov	r4, r2
   830f6:	461d      	mov	r5, r3
   830f8:	f7ff bb8f 	b.w	8281a <_svfprintf_r+0x612>
   830fc:	464e      	mov	r6, r9
   830fe:	f7ff b99f 	b.w	82440 <_svfprintf_r+0x238>
   83102:	bf00      	nop
   83104:	000863bc 	.word	0x000863bc
   83108:	aa25      	add	r2, sp, #148	; 0x94
   8310a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8310c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8310e:	f002 f995 	bl	8543c <__ssprint_r>
   83112:	2800      	cmp	r0, #0
   83114:	f47f a955 	bne.w	823c2 <_svfprintf_r+0x1ba>
   83118:	46c8      	mov	r8, r9
   8311a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8311c:	f7ff ba16 	b.w	8254c <_svfprintf_r+0x344>
   83120:	9c15      	ldr	r4, [sp, #84]	; 0x54
   83122:	4622      	mov	r2, r4
   83124:	4620      	mov	r0, r4
   83126:	9c14      	ldr	r4, [sp, #80]	; 0x50
   83128:	4623      	mov	r3, r4
   8312a:	4621      	mov	r1, r4
   8312c:	f002 fef4 	bl	85f18 <__aeabi_dcmpun>
   83130:	2800      	cmp	r0, #0
   83132:	f040 8273 	bne.w	8361c <_svfprintf_r+0x1414>
   83136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83138:	3301      	adds	r3, #1
   8313a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8313c:	f023 0320 	bic.w	r3, r3, #32
   83140:	930e      	str	r3, [sp, #56]	; 0x38
   83142:	f000 819c 	beq.w	8347e <_svfprintf_r+0x1276>
   83146:	2b47      	cmp	r3, #71	; 0x47
   83148:	f000 80d6 	beq.w	832f8 <_svfprintf_r+0x10f0>
   8314c:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   83150:	9307      	str	r3, [sp, #28]
   83152:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83154:	1e1f      	subs	r7, r3, #0
   83156:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83158:	9308      	str	r3, [sp, #32]
   8315a:	bfb7      	itett	lt
   8315c:	463b      	movlt	r3, r7
   8315e:	2300      	movge	r3, #0
   83160:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   83164:	232d      	movlt	r3, #45	; 0x2d
   83166:	9310      	str	r3, [sp, #64]	; 0x40
   83168:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8316a:	2b66      	cmp	r3, #102	; 0x66
   8316c:	f000 8190 	beq.w	83490 <_svfprintf_r+0x1288>
   83170:	2b46      	cmp	r3, #70	; 0x46
   83172:	f000 80a4 	beq.w	832be <_svfprintf_r+0x10b6>
   83176:	2002      	movs	r0, #2
   83178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8317a:	a923      	add	r1, sp, #140	; 0x8c
   8317c:	2b45      	cmp	r3, #69	; 0x45
   8317e:	bf0a      	itet	eq
   83180:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   83182:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   83184:	1c5d      	addeq	r5, r3, #1
   83186:	e88d 0021 	stmia.w	sp, {r0, r5}
   8318a:	9104      	str	r1, [sp, #16]
   8318c:	a820      	add	r0, sp, #128	; 0x80
   8318e:	a91f      	add	r1, sp, #124	; 0x7c
   83190:	463b      	mov	r3, r7
   83192:	9003      	str	r0, [sp, #12]
   83194:	9a08      	ldr	r2, [sp, #32]
   83196:	9102      	str	r1, [sp, #8]
   83198:	980c      	ldr	r0, [sp, #48]	; 0x30
   8319a:	f000 fb59 	bl	83850 <_dtoa_r>
   8319e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831a0:	4606      	mov	r6, r0
   831a2:	2b67      	cmp	r3, #103	; 0x67
   831a4:	f040 81ba 	bne.w	8351c <_svfprintf_r+0x1314>
   831a8:	f01b 0f01 	tst.w	fp, #1
   831ac:	f000 8223 	beq.w	835f6 <_svfprintf_r+0x13ee>
   831b0:	1974      	adds	r4, r6, r5
   831b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   831b4:	9808      	ldr	r0, [sp, #32]
   831b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   831b8:	4639      	mov	r1, r7
   831ba:	f002 fe7b 	bl	85eb4 <__aeabi_dcmpeq>
   831be:	2800      	cmp	r0, #0
   831c0:	f040 8124 	bne.w	8340c <_svfprintf_r+0x1204>
   831c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   831c6:	42a3      	cmp	r3, r4
   831c8:	d206      	bcs.n	831d8 <_svfprintf_r+0xfd0>
   831ca:	2130      	movs	r1, #48	; 0x30
   831cc:	1c5a      	adds	r2, r3, #1
   831ce:	9223      	str	r2, [sp, #140]	; 0x8c
   831d0:	7019      	strb	r1, [r3, #0]
   831d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   831d4:	429c      	cmp	r4, r3
   831d6:	d8f9      	bhi.n	831cc <_svfprintf_r+0xfc4>
   831d8:	1b9b      	subs	r3, r3, r6
   831da:	9313      	str	r3, [sp, #76]	; 0x4c
   831dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   831de:	2b47      	cmp	r3, #71	; 0x47
   831e0:	f000 80a2 	beq.w	83328 <_svfprintf_r+0x1120>
   831e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831e6:	2b65      	cmp	r3, #101	; 0x65
   831e8:	f340 81a7 	ble.w	8353a <_svfprintf_r+0x1332>
   831ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831ee:	2b66      	cmp	r3, #102	; 0x66
   831f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   831f2:	9312      	str	r3, [sp, #72]	; 0x48
   831f4:	f000 8171 	beq.w	834da <_svfprintf_r+0x12d2>
   831f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   831fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   831fc:	4619      	mov	r1, r3
   831fe:	4291      	cmp	r1, r2
   83200:	f300 815d 	bgt.w	834be <_svfprintf_r+0x12b6>
   83204:	f01b 0f01 	tst.w	fp, #1
   83208:	f040 81f0 	bne.w	835ec <_svfprintf_r+0x13e4>
   8320c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83210:	9308      	str	r3, [sp, #32]
   83212:	2367      	movs	r3, #103	; 0x67
   83214:	920e      	str	r2, [sp, #56]	; 0x38
   83216:	9311      	str	r3, [sp, #68]	; 0x44
   83218:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8321a:	2b00      	cmp	r3, #0
   8321c:	d17d      	bne.n	8331a <_svfprintf_r+0x1112>
   8321e:	930a      	str	r3, [sp, #40]	; 0x28
   83220:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   83224:	f7ff b914 	b.w	82450 <_svfprintf_r+0x248>
   83228:	f024 0407 	bic.w	r4, r4, #7
   8322c:	6823      	ldr	r3, [r4, #0]
   8322e:	9315      	str	r3, [sp, #84]	; 0x54
   83230:	6863      	ldr	r3, [r4, #4]
   83232:	9314      	str	r3, [sp, #80]	; 0x50
   83234:	f104 0308 	add.w	r3, r4, #8
   83238:	930f      	str	r3, [sp, #60]	; 0x3c
   8323a:	f7ff bb2f 	b.w	8289c <_svfprintf_r+0x694>
   8323e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83240:	6813      	ldr	r3, [r2, #0]
   83242:	3204      	adds	r2, #4
   83244:	920f      	str	r2, [sp, #60]	; 0x3c
   83246:	9a09      	ldr	r2, [sp, #36]	; 0x24
   83248:	601a      	str	r2, [r3, #0]
   8324a:	f7ff b804 	b.w	82256 <_svfprintf_r+0x4e>
   8324e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83250:	4daf      	ldr	r5, [pc, #700]	; (83510 <_svfprintf_r+0x1308>)
   83252:	f7ff b9ad 	b.w	825b0 <_svfprintf_r+0x3a8>
   83256:	aa25      	add	r2, sp, #148	; 0x94
   83258:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8325a:	980c      	ldr	r0, [sp, #48]	; 0x30
   8325c:	f002 f8ee 	bl	8543c <__ssprint_r>
   83260:	2800      	cmp	r0, #0
   83262:	f47f a8ae 	bne.w	823c2 <_svfprintf_r+0x1ba>
   83266:	46c8      	mov	r8, r9
   83268:	e431      	b.n	82ace <_svfprintf_r+0x8c6>
   8326a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8326c:	4613      	mov	r3, r2
   8326e:	3304      	adds	r3, #4
   83270:	930f      	str	r3, [sp, #60]	; 0x3c
   83272:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83274:	6811      	ldr	r1, [r2, #0]
   83276:	17dd      	asrs	r5, r3, #31
   83278:	461a      	mov	r2, r3
   8327a:	462b      	mov	r3, r5
   8327c:	e9c1 2300 	strd	r2, r3, [r1]
   83280:	f7fe bfe9 	b.w	82256 <_svfprintf_r+0x4e>
   83284:	aa25      	add	r2, sp, #148	; 0x94
   83286:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83288:	980c      	ldr	r0, [sp, #48]	; 0x30
   8328a:	f002 f8d7 	bl	8543c <__ssprint_r>
   8328e:	2800      	cmp	r0, #0
   83290:	f47f a897 	bne.w	823c2 <_svfprintf_r+0x1ba>
   83294:	46c8      	mov	r8, r9
   83296:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83298:	e432      	b.n	82b00 <_svfprintf_r+0x8f8>
   8329a:	f108 0808 	add.w	r8, r8, #8
   8329e:	e52f      	b.n	82d00 <_svfprintf_r+0xaf8>
   832a0:	2140      	movs	r1, #64	; 0x40
   832a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   832a4:	f7fe fbd8 	bl	81a58 <_malloc_r>
   832a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   832aa:	6010      	str	r0, [r2, #0]
   832ac:	6110      	str	r0, [r2, #16]
   832ae:	2800      	cmp	r0, #0
   832b0:	f000 8214 	beq.w	836dc <_svfprintf_r+0x14d4>
   832b4:	2340      	movs	r3, #64	; 0x40
   832b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   832b8:	6153      	str	r3, [r2, #20]
   832ba:	f7fe bfbc 	b.w	82236 <_svfprintf_r+0x2e>
   832be:	2003      	movs	r0, #3
   832c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   832c2:	a923      	add	r1, sp, #140	; 0x8c
   832c4:	e88d 0011 	stmia.w	sp, {r0, r4}
   832c8:	9104      	str	r1, [sp, #16]
   832ca:	a820      	add	r0, sp, #128	; 0x80
   832cc:	a91f      	add	r1, sp, #124	; 0x7c
   832ce:	9003      	str	r0, [sp, #12]
   832d0:	9a08      	ldr	r2, [sp, #32]
   832d2:	463b      	mov	r3, r7
   832d4:	9102      	str	r1, [sp, #8]
   832d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   832d8:	f000 faba 	bl	83850 <_dtoa_r>
   832dc:	4625      	mov	r5, r4
   832de:	4606      	mov	r6, r0
   832e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   832e2:	1974      	adds	r4, r6, r5
   832e4:	2b46      	cmp	r3, #70	; 0x46
   832e6:	f47f af64 	bne.w	831b2 <_svfprintf_r+0xfaa>
   832ea:	7833      	ldrb	r3, [r6, #0]
   832ec:	2b30      	cmp	r3, #48	; 0x30
   832ee:	f000 8187 	beq.w	83600 <_svfprintf_r+0x13f8>
   832f2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   832f4:	442c      	add	r4, r5
   832f6:	e75c      	b.n	831b2 <_svfprintf_r+0xfaa>
   832f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   832fa:	2b00      	cmp	r3, #0
   832fc:	bf08      	it	eq
   832fe:	2301      	moveq	r3, #1
   83300:	930a      	str	r3, [sp, #40]	; 0x28
   83302:	e723      	b.n	8314c <_svfprintf_r+0xf44>
   83304:	4630      	mov	r0, r6
   83306:	950a      	str	r5, [sp, #40]	; 0x28
   83308:	f7fe ff50 	bl	821ac <strlen>
   8330c:	940f      	str	r4, [sp, #60]	; 0x3c
   8330e:	900e      	str	r0, [sp, #56]	; 0x38
   83310:	f8cd b01c 	str.w	fp, [sp, #28]
   83314:	4603      	mov	r3, r0
   83316:	f7ff b9e7 	b.w	826e8 <_svfprintf_r+0x4e0>
   8331a:	272d      	movs	r7, #45	; 0x2d
   8331c:	2300      	movs	r3, #0
   8331e:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   83322:	930a      	str	r3, [sp, #40]	; 0x28
   83324:	f7ff b895 	b.w	82452 <_svfprintf_r+0x24a>
   83328:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8332a:	461a      	mov	r2, r3
   8332c:	9312      	str	r3, [sp, #72]	; 0x48
   8332e:	3303      	adds	r3, #3
   83330:	db04      	blt.n	8333c <_svfprintf_r+0x1134>
   83332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83334:	4619      	mov	r1, r3
   83336:	4291      	cmp	r1, r2
   83338:	f6bf af5e 	bge.w	831f8 <_svfprintf_r+0xff0>
   8333c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8333e:	3b02      	subs	r3, #2
   83340:	9311      	str	r3, [sp, #68]	; 0x44
   83342:	9b12      	ldr	r3, [sp, #72]	; 0x48
   83344:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   83348:	3b01      	subs	r3, #1
   8334a:	2b00      	cmp	r3, #0
   8334c:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   83350:	bfb4      	ite	lt
   83352:	222d      	movlt	r2, #45	; 0x2d
   83354:	222b      	movge	r2, #43	; 0x2b
   83356:	931f      	str	r3, [sp, #124]	; 0x7c
   83358:	bfb8      	it	lt
   8335a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   8335c:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   83360:	bfb8      	it	lt
   83362:	f1c3 0301 	rsblt	r3, r3, #1
   83366:	2b09      	cmp	r3, #9
   83368:	f340 811f 	ble.w	835aa <_svfprintf_r+0x13a2>
   8336c:	f10d 0093 	add.w	r0, sp, #147	; 0x93
   83370:	4601      	mov	r1, r0
   83372:	4c68      	ldr	r4, [pc, #416]	; (83514 <_svfprintf_r+0x130c>)
   83374:	e000      	b.n	83378 <_svfprintf_r+0x1170>
   83376:	4611      	mov	r1, r2
   83378:	fb84 5203 	smull	r5, r2, r4, r3
   8337c:	17dd      	asrs	r5, r3, #31
   8337e:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
   83382:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   83386:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   8338a:	3230      	adds	r2, #48	; 0x30
   8338c:	2d09      	cmp	r5, #9
   8338e:	f801 2c01 	strb.w	r2, [r1, #-1]
   83392:	462b      	mov	r3, r5
   83394:	f101 32ff 	add.w	r2, r1, #4294967295
   83398:	dced      	bgt.n	83376 <_svfprintf_r+0x116e>
   8339a:	3330      	adds	r3, #48	; 0x30
   8339c:	3902      	subs	r1, #2
   8339e:	b2dc      	uxtb	r4, r3
   833a0:	4288      	cmp	r0, r1
   833a2:	f802 4c01 	strb.w	r4, [r2, #-1]
   833a6:	f240 8192 	bls.w	836ce <_svfprintf_r+0x14c6>
   833aa:	f10d 0186 	add.w	r1, sp, #134	; 0x86
   833ae:	4613      	mov	r3, r2
   833b0:	e001      	b.n	833b6 <_svfprintf_r+0x11ae>
   833b2:	f813 4b01 	ldrb.w	r4, [r3], #1
   833b6:	4283      	cmp	r3, r0
   833b8:	f801 4b01 	strb.w	r4, [r1], #1
   833bc:	d1f9      	bne.n	833b2 <_svfprintf_r+0x11aa>
   833be:	3301      	adds	r3, #1
   833c0:	1a9b      	subs	r3, r3, r2
   833c2:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   833c6:	4413      	add	r3, r2
   833c8:	aa21      	add	r2, sp, #132	; 0x84
   833ca:	1a9b      	subs	r3, r3, r2
   833cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   833ce:	931b      	str	r3, [sp, #108]	; 0x6c
   833d0:	2a01      	cmp	r2, #1
   833d2:	4413      	add	r3, r2
   833d4:	930e      	str	r3, [sp, #56]	; 0x38
   833d6:	f340 8148 	ble.w	8366a <_svfprintf_r+0x1462>
   833da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   833dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   833de:	4413      	add	r3, r2
   833e0:	930e      	str	r3, [sp, #56]	; 0x38
   833e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   833e6:	9308      	str	r3, [sp, #32]
   833e8:	2300      	movs	r3, #0
   833ea:	9312      	str	r3, [sp, #72]	; 0x48
   833ec:	e714      	b.n	83218 <_svfprintf_r+0x1010>
   833ee:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   833f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   833f2:	f7ff b876 	b.w	824e2 <_svfprintf_r+0x2da>
   833f6:	aa25      	add	r2, sp, #148	; 0x94
   833f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   833fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   833fc:	f002 f81e 	bl	8543c <__ssprint_r>
   83400:	2800      	cmp	r0, #0
   83402:	f47e afde 	bne.w	823c2 <_svfprintf_r+0x1ba>
   83406:	46c8      	mov	r8, r9
   83408:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8340a:	e4fb      	b.n	82e04 <_svfprintf_r+0xbfc>
   8340c:	4623      	mov	r3, r4
   8340e:	e6e3      	b.n	831d8 <_svfprintf_r+0xfd0>
   83410:	aa25      	add	r2, sp, #148	; 0x94
   83412:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83414:	980c      	ldr	r0, [sp, #48]	; 0x30
   83416:	f002 f811 	bl	8543c <__ssprint_r>
   8341a:	2800      	cmp	r0, #0
   8341c:	f47e afd1 	bne.w	823c2 <_svfprintf_r+0x1ba>
   83420:	46c8      	mov	r8, r9
   83422:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   83424:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83426:	e5d3      	b.n	82fd0 <_svfprintf_r+0xdc8>
   83428:	aa25      	add	r2, sp, #148	; 0x94
   8342a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8342c:	980c      	ldr	r0, [sp, #48]	; 0x30
   8342e:	f002 f805 	bl	8543c <__ssprint_r>
   83432:	2800      	cmp	r0, #0
   83434:	f47e afc5 	bne.w	823c2 <_svfprintf_r+0x1ba>
   83438:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   8343a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   8343c:	46c8      	mov	r8, r9
   8343e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   83440:	1a9a      	subs	r2, r3, r2
   83442:	e5dd      	b.n	83000 <_svfprintf_r+0xdf8>
   83444:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83446:	f7ff b8fe 	b.w	82646 <_svfprintf_r+0x43e>
   8344a:	aa25      	add	r2, sp, #148	; 0x94
   8344c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8344e:	980c      	ldr	r0, [sp, #48]	; 0x30
   83450:	f001 fff4 	bl	8543c <__ssprint_r>
   83454:	2800      	cmp	r0, #0
   83456:	f47e afb4 	bne.w	823c2 <_svfprintf_r+0x1ba>
   8345a:	46c8      	mov	r8, r9
   8345c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   8345e:	e5b0      	b.n	82fc2 <_svfprintf_r+0xdba>
   83460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83462:	4637      	mov	r7, r6
   83464:	2b06      	cmp	r3, #6
   83466:	bf28      	it	cs
   83468:	2306      	movcs	r3, #6
   8346a:	960a      	str	r6, [sp, #40]	; 0x28
   8346c:	9612      	str	r6, [sp, #72]	; 0x48
   8346e:	9308      	str	r3, [sp, #32]
   83470:	940f      	str	r4, [sp, #60]	; 0x3c
   83472:	f8cd b01c 	str.w	fp, [sp, #28]
   83476:	930e      	str	r3, [sp, #56]	; 0x38
   83478:	4e27      	ldr	r6, [pc, #156]	; (83518 <_svfprintf_r+0x1310>)
   8347a:	f7fe bfe9 	b.w	82450 <_svfprintf_r+0x248>
   8347e:	2306      	movs	r3, #6
   83480:	930a      	str	r3, [sp, #40]	; 0x28
   83482:	e663      	b.n	8314c <_svfprintf_r+0xf44>
   83484:	232d      	movs	r3, #45	; 0x2d
   83486:	461f      	mov	r7, r3
   83488:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   8348c:	f7ff ba28 	b.w	828e0 <_svfprintf_r+0x6d8>
   83490:	2003      	movs	r0, #3
   83492:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83494:	a923      	add	r1, sp, #140	; 0x8c
   83496:	e88d 0011 	stmia.w	sp, {r0, r4}
   8349a:	9104      	str	r1, [sp, #16]
   8349c:	a820      	add	r0, sp, #128	; 0x80
   8349e:	a91f      	add	r1, sp, #124	; 0x7c
   834a0:	9003      	str	r0, [sp, #12]
   834a2:	9a08      	ldr	r2, [sp, #32]
   834a4:	463b      	mov	r3, r7
   834a6:	9102      	str	r1, [sp, #8]
   834a8:	980c      	ldr	r0, [sp, #48]	; 0x30
   834aa:	f000 f9d1 	bl	83850 <_dtoa_r>
   834ae:	4625      	mov	r5, r4
   834b0:	4606      	mov	r6, r0
   834b2:	1904      	adds	r4, r0, r4
   834b4:	e719      	b.n	832ea <_svfprintf_r+0x10e2>
   834b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   834b8:	4d15      	ldr	r5, [pc, #84]	; (83510 <_svfprintf_r+0x1308>)
   834ba:	f7ff bb7e 	b.w	82bba <_svfprintf_r+0x9b2>
   834be:	9a19      	ldr	r2, [sp, #100]	; 0x64
   834c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   834c2:	4413      	add	r3, r2
   834c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   834c6:	930e      	str	r3, [sp, #56]	; 0x38
   834c8:	2a00      	cmp	r2, #0
   834ca:	f340 80c7 	ble.w	8365c <_svfprintf_r+0x1454>
   834ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   834d2:	9308      	str	r3, [sp, #32]
   834d4:	2367      	movs	r3, #103	; 0x67
   834d6:	9311      	str	r3, [sp, #68]	; 0x44
   834d8:	e69e      	b.n	83218 <_svfprintf_r+0x1010>
   834da:	2b00      	cmp	r3, #0
   834dc:	f340 80e1 	ble.w	836a2 <_svfprintf_r+0x149a>
   834e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   834e2:	2a00      	cmp	r2, #0
   834e4:	f040 80b0 	bne.w	83648 <_svfprintf_r+0x1440>
   834e8:	f01b 0f01 	tst.w	fp, #1
   834ec:	f040 80ac 	bne.w	83648 <_svfprintf_r+0x1440>
   834f0:	9308      	str	r3, [sp, #32]
   834f2:	930e      	str	r3, [sp, #56]	; 0x38
   834f4:	e690      	b.n	83218 <_svfprintf_r+0x1010>
   834f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   834f8:	940f      	str	r4, [sp, #60]	; 0x3c
   834fa:	9308      	str	r3, [sp, #32]
   834fc:	930e      	str	r3, [sp, #56]	; 0x38
   834fe:	900a      	str	r0, [sp, #40]	; 0x28
   83500:	f8cd b01c 	str.w	fp, [sp, #28]
   83504:	9012      	str	r0, [sp, #72]	; 0x48
   83506:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   8350a:	f7fe bfa1 	b.w	82450 <_svfprintf_r+0x248>
   8350e:	bf00      	nop
   83510:	000863bc 	.word	0x000863bc
   83514:	66666667 	.word	0x66666667
   83518:	000863a0 	.word	0x000863a0
   8351c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8351e:	2b47      	cmp	r3, #71	; 0x47
   83520:	f47f ae46 	bne.w	831b0 <_svfprintf_r+0xfa8>
   83524:	f01b 0f01 	tst.w	fp, #1
   83528:	f47f aeda 	bne.w	832e0 <_svfprintf_r+0x10d8>
   8352c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8352e:	1b9b      	subs	r3, r3, r6
   83530:	9313      	str	r3, [sp, #76]	; 0x4c
   83532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83534:	2b47      	cmp	r3, #71	; 0x47
   83536:	f43f aef7 	beq.w	83328 <_svfprintf_r+0x1120>
   8353a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   8353c:	9312      	str	r3, [sp, #72]	; 0x48
   8353e:	e700      	b.n	83342 <_svfprintf_r+0x113a>
   83540:	2000      	movs	r0, #0
   83542:	900a      	str	r0, [sp, #40]	; 0x28
   83544:	f7fe bebc 	b.w	822c0 <_svfprintf_r+0xb8>
   83548:	424f      	negs	r7, r1
   8354a:	3110      	adds	r1, #16
   8354c:	da35      	bge.n	835ba <_svfprintf_r+0x13b2>
   8354e:	2410      	movs	r4, #16
   83550:	4d6a      	ldr	r5, [pc, #424]	; (836fc <_svfprintf_r+0x14f4>)
   83552:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   83556:	e004      	b.n	83562 <_svfprintf_r+0x135a>
   83558:	f108 0808 	add.w	r8, r8, #8
   8355c:	3f10      	subs	r7, #16
   8355e:	2f10      	cmp	r7, #16
   83560:	dd2c      	ble.n	835bc <_svfprintf_r+0x13b4>
   83562:	3301      	adds	r3, #1
   83564:	3210      	adds	r2, #16
   83566:	2b07      	cmp	r3, #7
   83568:	9227      	str	r2, [sp, #156]	; 0x9c
   8356a:	9326      	str	r3, [sp, #152]	; 0x98
   8356c:	f8c8 5000 	str.w	r5, [r8]
   83570:	f8c8 4004 	str.w	r4, [r8, #4]
   83574:	ddf0      	ble.n	83558 <_svfprintf_r+0x1350>
   83576:	aa25      	add	r2, sp, #148	; 0x94
   83578:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8357a:	4658      	mov	r0, fp
   8357c:	f001 ff5e 	bl	8543c <__ssprint_r>
   83580:	2800      	cmp	r0, #0
   83582:	f47e af1e 	bne.w	823c2 <_svfprintf_r+0x1ba>
   83586:	46c8      	mov	r8, r9
   83588:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   8358a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8358c:	e7e6      	b.n	8355c <_svfprintf_r+0x1354>
   8358e:	aa25      	add	r2, sp, #148	; 0x94
   83590:	990b      	ldr	r1, [sp, #44]	; 0x2c
   83592:	980c      	ldr	r0, [sp, #48]	; 0x30
   83594:	f001 ff52 	bl	8543c <__ssprint_r>
   83598:	2800      	cmp	r0, #0
   8359a:	f47e af12 	bne.w	823c2 <_svfprintf_r+0x1ba>
   8359e:	46c8      	mov	r8, r9
   835a0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   835a2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   835a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835a6:	f7ff bbc3 	b.w	82d30 <_svfprintf_r+0xb28>
   835aa:	2230      	movs	r2, #48	; 0x30
   835ac:	4413      	add	r3, r2
   835ae:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   835b2:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   835b6:	ab22      	add	r3, sp, #136	; 0x88
   835b8:	e706      	b.n	833c8 <_svfprintf_r+0x11c0>
   835ba:	4d50      	ldr	r5, [pc, #320]	; (836fc <_svfprintf_r+0x14f4>)
   835bc:	3301      	adds	r3, #1
   835be:	443a      	add	r2, r7
   835c0:	2b07      	cmp	r3, #7
   835c2:	e888 00a0 	stmia.w	r8, {r5, r7}
   835c6:	9227      	str	r2, [sp, #156]	; 0x9c
   835c8:	9326      	str	r3, [sp, #152]	; 0x98
   835ca:	f108 0808 	add.w	r8, r8, #8
   835ce:	f77f abb2 	ble.w	82d36 <_svfprintf_r+0xb2e>
   835d2:	aa25      	add	r2, sp, #148	; 0x94
   835d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   835d6:	980c      	ldr	r0, [sp, #48]	; 0x30
   835d8:	f001 ff30 	bl	8543c <__ssprint_r>
   835dc:	2800      	cmp	r0, #0
   835de:	f47e aef0 	bne.w	823c2 <_svfprintf_r+0x1ba>
   835e2:	46c8      	mov	r8, r9
   835e4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   835e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835e8:	f7ff bba5 	b.w	82d36 <_svfprintf_r+0xb2e>
   835ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   835ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
   835f0:	4413      	add	r3, r2
   835f2:	930e      	str	r3, [sp, #56]	; 0x38
   835f4:	e76b      	b.n	834ce <_svfprintf_r+0x12c6>
   835f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   835f8:	e5ee      	b.n	831d8 <_svfprintf_r+0xfd0>
   835fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   835fc:	4d3f      	ldr	r5, [pc, #252]	; (836fc <_svfprintf_r+0x14f4>)
   835fe:	e4bb      	b.n	82f78 <_svfprintf_r+0xd70>
   83600:	9a16      	ldr	r2, [sp, #88]	; 0x58
   83602:	9808      	ldr	r0, [sp, #32]
   83604:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   83606:	4639      	mov	r1, r7
   83608:	f002 fc54 	bl	85eb4 <__aeabi_dcmpeq>
   8360c:	2800      	cmp	r0, #0
   8360e:	f47f ae70 	bne.w	832f2 <_svfprintf_r+0x10ea>
   83612:	f1c5 0501 	rsb	r5, r5, #1
   83616:	951f      	str	r5, [sp, #124]	; 0x7c
   83618:	442c      	add	r4, r5
   8361a:	e5ca      	b.n	831b2 <_svfprintf_r+0xfaa>
   8361c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8361e:	4e38      	ldr	r6, [pc, #224]	; (83700 <_svfprintf_r+0x14f8>)
   83620:	2b00      	cmp	r3, #0
   83622:	bfbe      	ittt	lt
   83624:	232d      	movlt	r3, #45	; 0x2d
   83626:	461f      	movlt	r7, r3
   83628:	f88d 3077 	strblt.w	r3, [sp, #119]	; 0x77
   8362c:	f04f 0303 	mov.w	r3, #3
   83630:	461a      	mov	r2, r3
   83632:	9308      	str	r3, [sp, #32]
   83634:	f04f 0300 	mov.w	r3, #0
   83638:	bfa8      	it	ge
   8363a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   8363e:	4619      	mov	r1, r3
   83640:	930a      	str	r3, [sp, #40]	; 0x28
   83642:	4b30      	ldr	r3, [pc, #192]	; (83704 <_svfprintf_r+0x14fc>)
   83644:	f7ff b954 	b.w	828f0 <_svfprintf_r+0x6e8>
   83648:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8364a:	9a19      	ldr	r2, [sp, #100]	; 0x64
   8364c:	4413      	add	r3, r2
   8364e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83650:	441a      	add	r2, r3
   83652:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   83656:	920e      	str	r2, [sp, #56]	; 0x38
   83658:	9308      	str	r3, [sp, #32]
   8365a:	e5dd      	b.n	83218 <_svfprintf_r+0x1010>
   8365c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8365e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   83660:	f1c3 0301 	rsb	r3, r3, #1
   83664:	441a      	add	r2, r3
   83666:	4613      	mov	r3, r2
   83668:	e7c3      	b.n	835f2 <_svfprintf_r+0x13ea>
   8366a:	f01b 0301 	ands.w	r3, fp, #1
   8366e:	9312      	str	r3, [sp, #72]	; 0x48
   83670:	f47f aeb3 	bne.w	833da <_svfprintf_r+0x11d2>
   83674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83676:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8367a:	9308      	str	r3, [sp, #32]
   8367c:	e5cc      	b.n	83218 <_svfprintf_r+0x1010>
   8367e:	4d1f      	ldr	r5, [pc, #124]	; (836fc <_svfprintf_r+0x14f4>)
   83680:	e43c      	b.n	82efc <_svfprintf_r+0xcf4>
   83682:	9b26      	ldr	r3, [sp, #152]	; 0x98
   83684:	4d1d      	ldr	r5, [pc, #116]	; (836fc <_svfprintf_r+0x14f4>)
   83686:	e491      	b.n	82fac <_svfprintf_r+0xda4>
   83688:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   8368a:	f89a 3001 	ldrb.w	r3, [sl, #1]
   8368e:	6828      	ldr	r0, [r5, #0]
   83690:	46a2      	mov	sl, r4
   83692:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   83696:	900a      	str	r0, [sp, #40]	; 0x28
   83698:	4628      	mov	r0, r5
   8369a:	3004      	adds	r0, #4
   8369c:	900f      	str	r0, [sp, #60]	; 0x3c
   8369e:	f7fe be0d 	b.w	822bc <_svfprintf_r+0xb4>
   836a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   836a4:	b913      	cbnz	r3, 836ac <_svfprintf_r+0x14a4>
   836a6:	f01b 0f01 	tst.w	fp, #1
   836aa:	d002      	beq.n	836b2 <_svfprintf_r+0x14aa>
   836ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   836ae:	3301      	adds	r3, #1
   836b0:	e7cd      	b.n	8364e <_svfprintf_r+0x1446>
   836b2:	2301      	movs	r3, #1
   836b4:	e71c      	b.n	834f0 <_svfprintf_r+0x12e8>
   836b6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836ba:	f7ff b980 	b.w	829be <_svfprintf_r+0x7b6>
   836be:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836c2:	f7ff b93a 	b.w	8293a <_svfprintf_r+0x732>
   836c6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836ca:	f7ff b84f 	b.w	8276c <_svfprintf_r+0x564>
   836ce:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   836d2:	e679      	b.n	833c8 <_svfprintf_r+0x11c0>
   836d4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836d8:	f7ff b9b2 	b.w	82a40 <_svfprintf_r+0x838>
   836dc:	f04f 32ff 	mov.w	r2, #4294967295
   836e0:	230c      	movs	r3, #12
   836e2:	9209      	str	r2, [sp, #36]	; 0x24
   836e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   836e6:	6013      	str	r3, [r2, #0]
   836e8:	f7fe be74 	b.w	823d4 <_svfprintf_r+0x1cc>
   836ec:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836f0:	f7ff b8c4 	b.w	8287c <_svfprintf_r+0x674>
   836f4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   836f8:	f7ff b878 	b.w	827ec <_svfprintf_r+0x5e4>
   836fc:	000863bc 	.word	0x000863bc
   83700:	00086374 	.word	0x00086374
   83704:	00086370 	.word	0x00086370

00083708 <register_fini>:
   83708:	4b02      	ldr	r3, [pc, #8]	; (83714 <register_fini+0xc>)
   8370a:	b113      	cbz	r3, 83712 <register_fini+0xa>
   8370c:	4802      	ldr	r0, [pc, #8]	; (83718 <register_fini+0x10>)
   8370e:	f000 b805 	b.w	8371c <atexit>
   83712:	4770      	bx	lr
   83714:	00000000 	.word	0x00000000
   83718:	00084695 	.word	0x00084695

0008371c <atexit>:
   8371c:	2300      	movs	r3, #0
   8371e:	4601      	mov	r1, r0
   83720:	461a      	mov	r2, r3
   83722:	4618      	mov	r0, r3
   83724:	f001 bf14 	b.w	85550 <__register_exitproc>

00083728 <quorem>:
   83728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8372c:	6903      	ldr	r3, [r0, #16]
   8372e:	690f      	ldr	r7, [r1, #16]
   83730:	b083      	sub	sp, #12
   83732:	429f      	cmp	r7, r3
   83734:	f300 8088 	bgt.w	83848 <quorem+0x120>
   83738:	3f01      	subs	r7, #1
   8373a:	f101 0614 	add.w	r6, r1, #20
   8373e:	f100 0a14 	add.w	sl, r0, #20
   83742:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
   83746:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8374a:	3301      	adds	r3, #1
   8374c:	fbb2 f8f3 	udiv	r8, r2, r3
   83750:	00bb      	lsls	r3, r7, #2
   83752:	9300      	str	r3, [sp, #0]
   83754:	eb06 0903 	add.w	r9, r6, r3
   83758:	4453      	add	r3, sl
   8375a:	9301      	str	r3, [sp, #4]
   8375c:	f1b8 0f00 	cmp.w	r8, #0
   83760:	d03b      	beq.n	837da <quorem+0xb2>
   83762:	2300      	movs	r3, #0
   83764:	46b4      	mov	ip, r6
   83766:	461c      	mov	r4, r3
   83768:	46d6      	mov	lr, sl
   8376a:	f85c 2b04 	ldr.w	r2, [ip], #4
   8376e:	f8de 5000 	ldr.w	r5, [lr]
   83772:	fa1f fb82 	uxth.w	fp, r2
   83776:	fb08 330b 	mla	r3, r8, fp, r3
   8377a:	0c12      	lsrs	r2, r2, #16
   8377c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
   83780:	fb08 bb02 	mla	fp, r8, r2, fp
   83784:	b29a      	uxth	r2, r3
   83786:	1aa2      	subs	r2, r4, r2
   83788:	b2ab      	uxth	r3, r5
   8378a:	fa1f f48b 	uxth.w	r4, fp
   8378e:	441a      	add	r2, r3
   83790:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   83794:	eb04 4422 	add.w	r4, r4, r2, asr #16
   83798:	b292      	uxth	r2, r2
   8379a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   8379e:	45e1      	cmp	r9, ip
   837a0:	f84e 2b04 	str.w	r2, [lr], #4
   837a4:	ea4f 4424 	mov.w	r4, r4, asr #16
   837a8:	ea4f 431b 	mov.w	r3, fp, lsr #16
   837ac:	d2dd      	bcs.n	8376a <quorem+0x42>
   837ae:	9b00      	ldr	r3, [sp, #0]
   837b0:	f85a 3003 	ldr.w	r3, [sl, r3]
   837b4:	b98b      	cbnz	r3, 837da <quorem+0xb2>
   837b6:	9c01      	ldr	r4, [sp, #4]
   837b8:	1f23      	subs	r3, r4, #4
   837ba:	459a      	cmp	sl, r3
   837bc:	d20c      	bcs.n	837d8 <quorem+0xb0>
   837be:	f854 3c04 	ldr.w	r3, [r4, #-4]
   837c2:	b94b      	cbnz	r3, 837d8 <quorem+0xb0>
   837c4:	f1a4 0308 	sub.w	r3, r4, #8
   837c8:	e002      	b.n	837d0 <quorem+0xa8>
   837ca:	681a      	ldr	r2, [r3, #0]
   837cc:	3b04      	subs	r3, #4
   837ce:	b91a      	cbnz	r2, 837d8 <quorem+0xb0>
   837d0:	459a      	cmp	sl, r3
   837d2:	f107 37ff 	add.w	r7, r7, #4294967295
   837d6:	d3f8      	bcc.n	837ca <quorem+0xa2>
   837d8:	6107      	str	r7, [r0, #16]
   837da:	4604      	mov	r4, r0
   837dc:	f001 fb7a 	bl	84ed4 <__mcmp>
   837e0:	2800      	cmp	r0, #0
   837e2:	db2d      	blt.n	83840 <quorem+0x118>
   837e4:	4655      	mov	r5, sl
   837e6:	2300      	movs	r3, #0
   837e8:	f108 0801 	add.w	r8, r8, #1
   837ec:	f856 1b04 	ldr.w	r1, [r6], #4
   837f0:	6828      	ldr	r0, [r5, #0]
   837f2:	b28a      	uxth	r2, r1
   837f4:	1a9a      	subs	r2, r3, r2
   837f6:	0c0b      	lsrs	r3, r1, #16
   837f8:	b281      	uxth	r1, r0
   837fa:	440a      	add	r2, r1
   837fc:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   83800:	eb03 4322 	add.w	r3, r3, r2, asr #16
   83804:	b292      	uxth	r2, r2
   83806:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   8380a:	45b1      	cmp	r9, r6
   8380c:	f845 2b04 	str.w	r2, [r5], #4
   83810:	ea4f 4323 	mov.w	r3, r3, asr #16
   83814:	d2ea      	bcs.n	837ec <quorem+0xc4>
   83816:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
   8381a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
   8381e:	b97a      	cbnz	r2, 83840 <quorem+0x118>
   83820:	1f1a      	subs	r2, r3, #4
   83822:	4592      	cmp	sl, r2
   83824:	d20b      	bcs.n	8383e <quorem+0x116>
   83826:	f853 2c04 	ldr.w	r2, [r3, #-4]
   8382a:	b942      	cbnz	r2, 8383e <quorem+0x116>
   8382c:	3b08      	subs	r3, #8
   8382e:	e002      	b.n	83836 <quorem+0x10e>
   83830:	681a      	ldr	r2, [r3, #0]
   83832:	3b04      	subs	r3, #4
   83834:	b91a      	cbnz	r2, 8383e <quorem+0x116>
   83836:	459a      	cmp	sl, r3
   83838:	f107 37ff 	add.w	r7, r7, #4294967295
   8383c:	d3f8      	bcc.n	83830 <quorem+0x108>
   8383e:	6127      	str	r7, [r4, #16]
   83840:	4640      	mov	r0, r8
   83842:	b003      	add	sp, #12
   83844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83848:	2000      	movs	r0, #0
   8384a:	b003      	add	sp, #12
   8384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00083850 <_dtoa_r>:
   83850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83854:	6c05      	ldr	r5, [r0, #64]	; 0x40
   83856:	b09b      	sub	sp, #108	; 0x6c
   83858:	4604      	mov	r4, r0
   8385a:	4692      	mov	sl, r2
   8385c:	469b      	mov	fp, r3
   8385e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   83860:	b14d      	cbz	r5, 83876 <_dtoa_r+0x26>
   83862:	2301      	movs	r3, #1
   83864:	6c42      	ldr	r2, [r0, #68]	; 0x44
   83866:	4629      	mov	r1, r5
   83868:	4093      	lsls	r3, r2
   8386a:	60ab      	str	r3, [r5, #8]
   8386c:	606a      	str	r2, [r5, #4]
   8386e:	f001 f959 	bl	84b24 <_Bfree>
   83872:	2300      	movs	r3, #0
   83874:	6423      	str	r3, [r4, #64]	; 0x40
   83876:	f1bb 0f00 	cmp.w	fp, #0
   8387a:	465d      	mov	r5, fp
   8387c:	db35      	blt.n	838ea <_dtoa_r+0x9a>
   8387e:	2300      	movs	r3, #0
   83880:	6033      	str	r3, [r6, #0]
   83882:	4b9d      	ldr	r3, [pc, #628]	; (83af8 <_dtoa_r+0x2a8>)
   83884:	43ab      	bics	r3, r5
   83886:	d015      	beq.n	838b4 <_dtoa_r+0x64>
   83888:	2200      	movs	r2, #0
   8388a:	2300      	movs	r3, #0
   8388c:	4650      	mov	r0, sl
   8388e:	4659      	mov	r1, fp
   83890:	f002 fb10 	bl	85eb4 <__aeabi_dcmpeq>
   83894:	4680      	mov	r8, r0
   83896:	2800      	cmp	r0, #0
   83898:	d02d      	beq.n	838f6 <_dtoa_r+0xa6>
   8389a:	2301      	movs	r3, #1
   8389c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8389e:	6013      	str	r3, [r2, #0]
   838a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   838a2:	2b00      	cmp	r3, #0
   838a4:	f000 80bd 	beq.w	83a22 <_dtoa_r+0x1d2>
   838a8:	4894      	ldr	r0, [pc, #592]	; (83afc <_dtoa_r+0x2ac>)
   838aa:	6018      	str	r0, [r3, #0]
   838ac:	3801      	subs	r0, #1
   838ae:	b01b      	add	sp, #108	; 0x6c
   838b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838b4:	f242 730f 	movw	r3, #9999	; 0x270f
   838b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   838ba:	6013      	str	r3, [r2, #0]
   838bc:	f1ba 0f00 	cmp.w	sl, #0
   838c0:	d10d      	bne.n	838de <_dtoa_r+0x8e>
   838c2:	f3c5 0513 	ubfx	r5, r5, #0, #20
   838c6:	b955      	cbnz	r5, 838de <_dtoa_r+0x8e>
   838c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   838ca:	488d      	ldr	r0, [pc, #564]	; (83b00 <_dtoa_r+0x2b0>)
   838cc:	2b00      	cmp	r3, #0
   838ce:	d0ee      	beq.n	838ae <_dtoa_r+0x5e>
   838d0:	f100 0308 	add.w	r3, r0, #8
   838d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   838d6:	6013      	str	r3, [r2, #0]
   838d8:	b01b      	add	sp, #108	; 0x6c
   838da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   838de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   838e0:	4888      	ldr	r0, [pc, #544]	; (83b04 <_dtoa_r+0x2b4>)
   838e2:	2b00      	cmp	r3, #0
   838e4:	d0e3      	beq.n	838ae <_dtoa_r+0x5e>
   838e6:	1cc3      	adds	r3, r0, #3
   838e8:	e7f4      	b.n	838d4 <_dtoa_r+0x84>
   838ea:	2301      	movs	r3, #1
   838ec:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   838f0:	6033      	str	r3, [r6, #0]
   838f2:	46ab      	mov	fp, r5
   838f4:	e7c5      	b.n	83882 <_dtoa_r+0x32>
   838f6:	aa18      	add	r2, sp, #96	; 0x60
   838f8:	ab19      	add	r3, sp, #100	; 0x64
   838fa:	9201      	str	r2, [sp, #4]
   838fc:	9300      	str	r3, [sp, #0]
   838fe:	4652      	mov	r2, sl
   83900:	465b      	mov	r3, fp
   83902:	4620      	mov	r0, r4
   83904:	f001 fb90 	bl	85028 <__d2b>
   83908:	0d2b      	lsrs	r3, r5, #20
   8390a:	4681      	mov	r9, r0
   8390c:	d071      	beq.n	839f2 <_dtoa_r+0x1a2>
   8390e:	4650      	mov	r0, sl
   83910:	f3cb 0213 	ubfx	r2, fp, #0, #20
   83914:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   83918:	9f18      	ldr	r7, [sp, #96]	; 0x60
   8391a:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   8391e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   83922:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   83926:	2200      	movs	r2, #0
   83928:	4b77      	ldr	r3, [pc, #476]	; (83b08 <_dtoa_r+0x2b8>)
   8392a:	f001 fea7 	bl	8567c <__aeabi_dsub>
   8392e:	a36c      	add	r3, pc, #432	; (adr r3, 83ae0 <_dtoa_r+0x290>)
   83930:	e9d3 2300 	ldrd	r2, r3, [r3]
   83934:	f002 f856 	bl	859e4 <__aeabi_dmul>
   83938:	a36b      	add	r3, pc, #428	; (adr r3, 83ae8 <_dtoa_r+0x298>)
   8393a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8393e:	f001 fe9f 	bl	85680 <__adddf3>
   83942:	e9cd 0102 	strd	r0, r1, [sp, #8]
   83946:	4630      	mov	r0, r6
   83948:	f001 ffe6 	bl	85918 <__aeabi_i2d>
   8394c:	a368      	add	r3, pc, #416	; (adr r3, 83af0 <_dtoa_r+0x2a0>)
   8394e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83952:	f002 f847 	bl	859e4 <__aeabi_dmul>
   83956:	4602      	mov	r2, r0
   83958:	460b      	mov	r3, r1
   8395a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   8395e:	f001 fe8f 	bl	85680 <__adddf3>
   83962:	e9cd 0104 	strd	r0, r1, [sp, #16]
   83966:	f002 faed 	bl	85f44 <__aeabi_d2iz>
   8396a:	2200      	movs	r2, #0
   8396c:	9002      	str	r0, [sp, #8]
   8396e:	2300      	movs	r3, #0
   83970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83974:	f002 faa8 	bl	85ec8 <__aeabi_dcmplt>
   83978:	2800      	cmp	r0, #0
   8397a:	f040 816d 	bne.w	83c58 <_dtoa_r+0x408>
   8397e:	9d02      	ldr	r5, [sp, #8]
   83980:	2d16      	cmp	r5, #22
   83982:	f200 8157 	bhi.w	83c34 <_dtoa_r+0x3e4>
   83986:	4961      	ldr	r1, [pc, #388]	; (83b0c <_dtoa_r+0x2bc>)
   83988:	4652      	mov	r2, sl
   8398a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   8398e:	465b      	mov	r3, fp
   83990:	e9d1 0100 	ldrd	r0, r1, [r1]
   83994:	f002 fab6 	bl	85f04 <__aeabi_dcmpgt>
   83998:	2800      	cmp	r0, #0
   8399a:	f000 81be 	beq.w	83d1a <_dtoa_r+0x4ca>
   8399e:	1e6b      	subs	r3, r5, #1
   839a0:	9302      	str	r3, [sp, #8]
   839a2:	2300      	movs	r3, #0
   839a4:	930e      	str	r3, [sp, #56]	; 0x38
   839a6:	1bbf      	subs	r7, r7, r6
   839a8:	1e7b      	subs	r3, r7, #1
   839aa:	9308      	str	r3, [sp, #32]
   839ac:	f100 814e 	bmi.w	83c4c <_dtoa_r+0x3fc>
   839b0:	2300      	movs	r3, #0
   839b2:	930a      	str	r3, [sp, #40]	; 0x28
   839b4:	9b02      	ldr	r3, [sp, #8]
   839b6:	2b00      	cmp	r3, #0
   839b8:	f2c0 813f 	blt.w	83c3a <_dtoa_r+0x3ea>
   839bc:	9a08      	ldr	r2, [sp, #32]
   839be:	930d      	str	r3, [sp, #52]	; 0x34
   839c0:	4611      	mov	r1, r2
   839c2:	4419      	add	r1, r3
   839c4:	2300      	movs	r3, #0
   839c6:	9108      	str	r1, [sp, #32]
   839c8:	930c      	str	r3, [sp, #48]	; 0x30
   839ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
   839cc:	2b09      	cmp	r3, #9
   839ce:	d82a      	bhi.n	83a26 <_dtoa_r+0x1d6>
   839d0:	2b05      	cmp	r3, #5
   839d2:	f340 8658 	ble.w	84686 <_dtoa_r+0xe36>
   839d6:	2500      	movs	r5, #0
   839d8:	3b04      	subs	r3, #4
   839da:	9324      	str	r3, [sp, #144]	; 0x90
   839dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   839de:	3b02      	subs	r3, #2
   839e0:	2b03      	cmp	r3, #3
   839e2:	f200 863f 	bhi.w	84664 <_dtoa_r+0xe14>
   839e6:	e8df f013 	tbh	[pc, r3, lsl #1]
   839ea:	03ce      	.short	0x03ce
   839ec:	03d902c3 	.word	0x03d902c3
   839f0:	045b      	.short	0x045b
   839f2:	9f18      	ldr	r7, [sp, #96]	; 0x60
   839f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
   839f6:	443e      	add	r6, r7
   839f8:	f206 4332 	addw	r3, r6, #1074	; 0x432
   839fc:	2b20      	cmp	r3, #32
   839fe:	f340 8187 	ble.w	83d10 <_dtoa_r+0x4c0>
   83a02:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   83a06:	f206 4012 	addw	r0, r6, #1042	; 0x412
   83a0a:	409d      	lsls	r5, r3
   83a0c:	fa2a f000 	lsr.w	r0, sl, r0
   83a10:	4328      	orrs	r0, r5
   83a12:	f001 ff71 	bl	858f8 <__aeabi_ui2d>
   83a16:	2301      	movs	r3, #1
   83a18:	3e01      	subs	r6, #1
   83a1a:	9314      	str	r3, [sp, #80]	; 0x50
   83a1c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   83a20:	e781      	b.n	83926 <_dtoa_r+0xd6>
   83a22:	483b      	ldr	r0, [pc, #236]	; (83b10 <_dtoa_r+0x2c0>)
   83a24:	e743      	b.n	838ae <_dtoa_r+0x5e>
   83a26:	2100      	movs	r1, #0
   83a28:	4620      	mov	r0, r4
   83a2a:	6461      	str	r1, [r4, #68]	; 0x44
   83a2c:	9125      	str	r1, [sp, #148]	; 0x94
   83a2e:	f001 f853 	bl	84ad8 <_Balloc>
   83a32:	f04f 33ff 	mov.w	r3, #4294967295
   83a36:	9307      	str	r3, [sp, #28]
   83a38:	930f      	str	r3, [sp, #60]	; 0x3c
   83a3a:	2301      	movs	r3, #1
   83a3c:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83a3e:	9004      	str	r0, [sp, #16]
   83a40:	6420      	str	r0, [r4, #64]	; 0x40
   83a42:	9224      	str	r2, [sp, #144]	; 0x90
   83a44:	930b      	str	r3, [sp, #44]	; 0x2c
   83a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
   83a48:	2b00      	cmp	r3, #0
   83a4a:	f2c0 80d3 	blt.w	83bf4 <_dtoa_r+0x3a4>
   83a4e:	9a02      	ldr	r2, [sp, #8]
   83a50:	2a0e      	cmp	r2, #14
   83a52:	f300 80cf 	bgt.w	83bf4 <_dtoa_r+0x3a4>
   83a56:	4b2d      	ldr	r3, [pc, #180]	; (83b0c <_dtoa_r+0x2bc>)
   83a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83a60:	e9cd 2308 	strd	r2, r3, [sp, #32]
   83a64:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83a66:	2b00      	cmp	r3, #0
   83a68:	f2c0 83b4 	blt.w	841d4 <_dtoa_r+0x984>
   83a6c:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   83a70:	4650      	mov	r0, sl
   83a72:	462a      	mov	r2, r5
   83a74:	4633      	mov	r3, r6
   83a76:	4659      	mov	r1, fp
   83a78:	f002 f8de 	bl	85c38 <__aeabi_ddiv>
   83a7c:	f002 fa62 	bl	85f44 <__aeabi_d2iz>
   83a80:	4680      	mov	r8, r0
   83a82:	f001 ff49 	bl	85918 <__aeabi_i2d>
   83a86:	462a      	mov	r2, r5
   83a88:	4633      	mov	r3, r6
   83a8a:	f001 ffab 	bl	859e4 <__aeabi_dmul>
   83a8e:	4602      	mov	r2, r0
   83a90:	460b      	mov	r3, r1
   83a92:	4650      	mov	r0, sl
   83a94:	4659      	mov	r1, fp
   83a96:	f001 fdf1 	bl	8567c <__aeabi_dsub>
   83a9a:	9e07      	ldr	r6, [sp, #28]
   83a9c:	9f04      	ldr	r7, [sp, #16]
   83a9e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   83aa2:	2e01      	cmp	r6, #1
   83aa4:	703d      	strb	r5, [r7, #0]
   83aa6:	4602      	mov	r2, r0
   83aa8:	460b      	mov	r3, r1
   83aaa:	f107 0501 	add.w	r5, r7, #1
   83aae:	d064      	beq.n	83b7a <_dtoa_r+0x32a>
   83ab0:	2200      	movs	r2, #0
   83ab2:	4b18      	ldr	r3, [pc, #96]	; (83b14 <_dtoa_r+0x2c4>)
   83ab4:	f001 ff96 	bl	859e4 <__aeabi_dmul>
   83ab8:	2200      	movs	r2, #0
   83aba:	2300      	movs	r3, #0
   83abc:	4606      	mov	r6, r0
   83abe:	460f      	mov	r7, r1
   83ac0:	f002 f9f8 	bl	85eb4 <__aeabi_dcmpeq>
   83ac4:	2800      	cmp	r0, #0
   83ac6:	f040 8082 	bne.w	83bce <_dtoa_r+0x37e>
   83aca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   83ace:	f04f 0a00 	mov.w	sl, #0
   83ad2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   83ad6:	f04f 0b00 	mov.w	fp, #0
   83ada:	940b      	str	r4, [sp, #44]	; 0x2c
   83adc:	e029      	b.n	83b32 <_dtoa_r+0x2e2>
   83ade:	bf00      	nop
   83ae0:	636f4361 	.word	0x636f4361
   83ae4:	3fd287a7 	.word	0x3fd287a7
   83ae8:	8b60c8b3 	.word	0x8b60c8b3
   83aec:	3fc68a28 	.word	0x3fc68a28
   83af0:	509f79fb 	.word	0x509f79fb
   83af4:	3fd34413 	.word	0x3fd34413
   83af8:	7ff00000 	.word	0x7ff00000
   83afc:	000863a9 	.word	0x000863a9
   83b00:	000863cc 	.word	0x000863cc
   83b04:	000863d8 	.word	0x000863d8
   83b08:	3ff80000 	.word	0x3ff80000
   83b0c:	00086418 	.word	0x00086418
   83b10:	000863a8 	.word	0x000863a8
   83b14:	40240000 	.word	0x40240000
   83b18:	2200      	movs	r2, #0
   83b1a:	4b81      	ldr	r3, [pc, #516]	; (83d20 <_dtoa_r+0x4d0>)
   83b1c:	f001 ff62 	bl	859e4 <__aeabi_dmul>
   83b20:	4652      	mov	r2, sl
   83b22:	465b      	mov	r3, fp
   83b24:	4606      	mov	r6, r0
   83b26:	460f      	mov	r7, r1
   83b28:	f002 f9c4 	bl	85eb4 <__aeabi_dcmpeq>
   83b2c:	2800      	cmp	r0, #0
   83b2e:	f040 83ba 	bne.w	842a6 <_dtoa_r+0xa56>
   83b32:	4642      	mov	r2, r8
   83b34:	464b      	mov	r3, r9
   83b36:	4630      	mov	r0, r6
   83b38:	4639      	mov	r1, r7
   83b3a:	f002 f87d 	bl	85c38 <__aeabi_ddiv>
   83b3e:	f002 fa01 	bl	85f44 <__aeabi_d2iz>
   83b42:	4604      	mov	r4, r0
   83b44:	f001 fee8 	bl	85918 <__aeabi_i2d>
   83b48:	4642      	mov	r2, r8
   83b4a:	464b      	mov	r3, r9
   83b4c:	f001 ff4a 	bl	859e4 <__aeabi_dmul>
   83b50:	4602      	mov	r2, r0
   83b52:	460b      	mov	r3, r1
   83b54:	4630      	mov	r0, r6
   83b56:	4639      	mov	r1, r7
   83b58:	f001 fd90 	bl	8567c <__aeabi_dsub>
   83b5c:	f104 0630 	add.w	r6, r4, #48	; 0x30
   83b60:	f805 6b01 	strb.w	r6, [r5], #1
   83b64:	9e04      	ldr	r6, [sp, #16]
   83b66:	9f07      	ldr	r7, [sp, #28]
   83b68:	1bae      	subs	r6, r5, r6
   83b6a:	42be      	cmp	r6, r7
   83b6c:	4602      	mov	r2, r0
   83b6e:	460b      	mov	r3, r1
   83b70:	d1d2      	bne.n	83b18 <_dtoa_r+0x2c8>
   83b72:	46a0      	mov	r8, r4
   83b74:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   83b78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   83b7a:	4610      	mov	r0, r2
   83b7c:	4619      	mov	r1, r3
   83b7e:	f001 fd7f 	bl	85680 <__adddf3>
   83b82:	4606      	mov	r6, r0
   83b84:	460f      	mov	r7, r1
   83b86:	4602      	mov	r2, r0
   83b88:	460b      	mov	r3, r1
   83b8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83b8e:	f002 f99b 	bl	85ec8 <__aeabi_dcmplt>
   83b92:	b948      	cbnz	r0, 83ba8 <_dtoa_r+0x358>
   83b94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   83b98:	4632      	mov	r2, r6
   83b9a:	463b      	mov	r3, r7
   83b9c:	f002 f98a 	bl	85eb4 <__aeabi_dcmpeq>
   83ba0:	b1a8      	cbz	r0, 83bce <_dtoa_r+0x37e>
   83ba2:	f018 0f01 	tst.w	r8, #1
   83ba6:	d012      	beq.n	83bce <_dtoa_r+0x37e>
   83ba8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   83bac:	1e6b      	subs	r3, r5, #1
   83bae:	9a04      	ldr	r2, [sp, #16]
   83bb0:	e004      	b.n	83bbc <_dtoa_r+0x36c>
   83bb2:	429a      	cmp	r2, r3
   83bb4:	f000 8402 	beq.w	843bc <_dtoa_r+0xb6c>
   83bb8:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   83bbc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   83bc0:	f103 0501 	add.w	r5, r3, #1
   83bc4:	d0f5      	beq.n	83bb2 <_dtoa_r+0x362>
   83bc6:	f108 0801 	add.w	r8, r8, #1
   83bca:	f883 8000 	strb.w	r8, [r3]
   83bce:	4649      	mov	r1, r9
   83bd0:	4620      	mov	r0, r4
   83bd2:	f000 ffa7 	bl	84b24 <_Bfree>
   83bd6:	2200      	movs	r2, #0
   83bd8:	9b02      	ldr	r3, [sp, #8]
   83bda:	702a      	strb	r2, [r5, #0]
   83bdc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   83bde:	3301      	adds	r3, #1
   83be0:	6013      	str	r3, [r2, #0]
   83be2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   83be4:	2b00      	cmp	r3, #0
   83be6:	f000 839f 	beq.w	84328 <_dtoa_r+0xad8>
   83bea:	9804      	ldr	r0, [sp, #16]
   83bec:	601d      	str	r5, [r3, #0]
   83bee:	b01b      	add	sp, #108	; 0x6c
   83bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83bf6:	2a00      	cmp	r2, #0
   83bf8:	d03e      	beq.n	83c78 <_dtoa_r+0x428>
   83bfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83bfc:	2a01      	cmp	r2, #1
   83bfe:	f340 8311 	ble.w	84224 <_dtoa_r+0x9d4>
   83c02:	9b07      	ldr	r3, [sp, #28]
   83c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83c06:	1e5f      	subs	r7, r3, #1
   83c08:	42ba      	cmp	r2, r7
   83c0a:	f2c0 8390 	blt.w	8432e <_dtoa_r+0xade>
   83c0e:	1bd7      	subs	r7, r2, r7
   83c10:	9b07      	ldr	r3, [sp, #28]
   83c12:	2b00      	cmp	r3, #0
   83c14:	f2c0 848c 	blt.w	84530 <_dtoa_r+0xce0>
   83c18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83c1a:	9b07      	ldr	r3, [sp, #28]
   83c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c1e:	2101      	movs	r1, #1
   83c20:	441a      	add	r2, r3
   83c22:	920a      	str	r2, [sp, #40]	; 0x28
   83c24:	9a08      	ldr	r2, [sp, #32]
   83c26:	4620      	mov	r0, r4
   83c28:	441a      	add	r2, r3
   83c2a:	9208      	str	r2, [sp, #32]
   83c2c:	f001 f816 	bl	84c5c <__i2b>
   83c30:	4606      	mov	r6, r0
   83c32:	e023      	b.n	83c7c <_dtoa_r+0x42c>
   83c34:	2301      	movs	r3, #1
   83c36:	930e      	str	r3, [sp, #56]	; 0x38
   83c38:	e6b5      	b.n	839a6 <_dtoa_r+0x156>
   83c3a:	2300      	movs	r3, #0
   83c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c3e:	930d      	str	r3, [sp, #52]	; 0x34
   83c40:	9b02      	ldr	r3, [sp, #8]
   83c42:	1ad2      	subs	r2, r2, r3
   83c44:	425b      	negs	r3, r3
   83c46:	920a      	str	r2, [sp, #40]	; 0x28
   83c48:	930c      	str	r3, [sp, #48]	; 0x30
   83c4a:	e6be      	b.n	839ca <_dtoa_r+0x17a>
   83c4c:	f1c7 0301 	rsb	r3, r7, #1
   83c50:	930a      	str	r3, [sp, #40]	; 0x28
   83c52:	2300      	movs	r3, #0
   83c54:	9308      	str	r3, [sp, #32]
   83c56:	e6ad      	b.n	839b4 <_dtoa_r+0x164>
   83c58:	9d02      	ldr	r5, [sp, #8]
   83c5a:	4628      	mov	r0, r5
   83c5c:	f001 fe5c 	bl	85918 <__aeabi_i2d>
   83c60:	4602      	mov	r2, r0
   83c62:	460b      	mov	r3, r1
   83c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   83c68:	f002 f924 	bl	85eb4 <__aeabi_dcmpeq>
   83c6c:	2800      	cmp	r0, #0
   83c6e:	f47f ae86 	bne.w	8397e <_dtoa_r+0x12e>
   83c72:	1e6b      	subs	r3, r5, #1
   83c74:	9302      	str	r3, [sp, #8]
   83c76:	e682      	b.n	8397e <_dtoa_r+0x12e>
   83c78:	ad0a      	add	r5, sp, #40	; 0x28
   83c7a:	cde0      	ldmia	r5, {r5, r6, r7}
   83c7c:	2d00      	cmp	r5, #0
   83c7e:	dd0c      	ble.n	83c9a <_dtoa_r+0x44a>
   83c80:	9908      	ldr	r1, [sp, #32]
   83c82:	2900      	cmp	r1, #0
   83c84:	460b      	mov	r3, r1
   83c86:	dd08      	ble.n	83c9a <_dtoa_r+0x44a>
   83c88:	42a9      	cmp	r1, r5
   83c8a:	bfa8      	it	ge
   83c8c:	462b      	movge	r3, r5
   83c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   83c90:	1aed      	subs	r5, r5, r3
   83c92:	1ad2      	subs	r2, r2, r3
   83c94:	1acb      	subs	r3, r1, r3
   83c96:	920a      	str	r2, [sp, #40]	; 0x28
   83c98:	9308      	str	r3, [sp, #32]
   83c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83c9c:	b1d3      	cbz	r3, 83cd4 <_dtoa_r+0x484>
   83c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83ca0:	2b00      	cmp	r3, #0
   83ca2:	f000 82b8 	beq.w	84216 <_dtoa_r+0x9c6>
   83ca6:	2f00      	cmp	r7, #0
   83ca8:	dd10      	ble.n	83ccc <_dtoa_r+0x47c>
   83caa:	4631      	mov	r1, r6
   83cac:	463a      	mov	r2, r7
   83cae:	4620      	mov	r0, r4
   83cb0:	f001 f870 	bl	84d94 <__pow5mult>
   83cb4:	464a      	mov	r2, r9
   83cb6:	4601      	mov	r1, r0
   83cb8:	4606      	mov	r6, r0
   83cba:	4620      	mov	r0, r4
   83cbc:	f000 ffd8 	bl	84c70 <__multiply>
   83cc0:	4603      	mov	r3, r0
   83cc2:	4649      	mov	r1, r9
   83cc4:	4620      	mov	r0, r4
   83cc6:	4699      	mov	r9, r3
   83cc8:	f000 ff2c 	bl	84b24 <_Bfree>
   83ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83cce:	1bda      	subs	r2, r3, r7
   83cd0:	f040 82a2 	bne.w	84218 <_dtoa_r+0x9c8>
   83cd4:	2101      	movs	r1, #1
   83cd6:	4620      	mov	r0, r4
   83cd8:	f000 ffc0 	bl	84c5c <__i2b>
   83cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83cde:	4680      	mov	r8, r0
   83ce0:	2b00      	cmp	r3, #0
   83ce2:	dd1f      	ble.n	83d24 <_dtoa_r+0x4d4>
   83ce4:	4601      	mov	r1, r0
   83ce6:	461a      	mov	r2, r3
   83ce8:	4620      	mov	r0, r4
   83cea:	f001 f853 	bl	84d94 <__pow5mult>
   83cee:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83cf0:	4680      	mov	r8, r0
   83cf2:	2b01      	cmp	r3, #1
   83cf4:	f340 8255 	ble.w	841a2 <_dtoa_r+0x952>
   83cf8:	2300      	movs	r3, #0
   83cfa:	930c      	str	r3, [sp, #48]	; 0x30
   83cfc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   83d00:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   83d04:	6918      	ldr	r0, [r3, #16]
   83d06:	f000 ff59 	bl	84bbc <__hi0bits>
   83d0a:	f1c0 0020 	rsb	r0, r0, #32
   83d0e:	e013      	b.n	83d38 <_dtoa_r+0x4e8>
   83d10:	f1c3 0520 	rsb	r5, r3, #32
   83d14:	fa0a f005 	lsl.w	r0, sl, r5
   83d18:	e67b      	b.n	83a12 <_dtoa_r+0x1c2>
   83d1a:	900e      	str	r0, [sp, #56]	; 0x38
   83d1c:	e643      	b.n	839a6 <_dtoa_r+0x156>
   83d1e:	bf00      	nop
   83d20:	40240000 	.word	0x40240000
   83d24:	9b24      	ldr	r3, [sp, #144]	; 0x90
   83d26:	2b01      	cmp	r3, #1
   83d28:	f340 8285 	ble.w	84236 <_dtoa_r+0x9e6>
   83d2c:	2300      	movs	r3, #0
   83d2e:	930c      	str	r3, [sp, #48]	; 0x30
   83d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   83d32:	2001      	movs	r0, #1
   83d34:	2b00      	cmp	r3, #0
   83d36:	d1e1      	bne.n	83cfc <_dtoa_r+0x4ac>
   83d38:	9a08      	ldr	r2, [sp, #32]
   83d3a:	4410      	add	r0, r2
   83d3c:	f010 001f 	ands.w	r0, r0, #31
   83d40:	f000 80a1 	beq.w	83e86 <_dtoa_r+0x636>
   83d44:	f1c0 0320 	rsb	r3, r0, #32
   83d48:	2b04      	cmp	r3, #4
   83d4a:	f340 8486 	ble.w	8465a <_dtoa_r+0xe0a>
   83d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d50:	f1c0 001c 	rsb	r0, r0, #28
   83d54:	4403      	add	r3, r0
   83d56:	930a      	str	r3, [sp, #40]	; 0x28
   83d58:	4613      	mov	r3, r2
   83d5a:	4403      	add	r3, r0
   83d5c:	4405      	add	r5, r0
   83d5e:	9308      	str	r3, [sp, #32]
   83d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83d62:	2b00      	cmp	r3, #0
   83d64:	dd05      	ble.n	83d72 <_dtoa_r+0x522>
   83d66:	4649      	mov	r1, r9
   83d68:	461a      	mov	r2, r3
   83d6a:	4620      	mov	r0, r4
   83d6c:	f001 f862 	bl	84e34 <__lshift>
   83d70:	4681      	mov	r9, r0
   83d72:	9b08      	ldr	r3, [sp, #32]
   83d74:	2b00      	cmp	r3, #0
   83d76:	dd05      	ble.n	83d84 <_dtoa_r+0x534>
   83d78:	4641      	mov	r1, r8
   83d7a:	461a      	mov	r2, r3
   83d7c:	4620      	mov	r0, r4
   83d7e:	f001 f859 	bl	84e34 <__lshift>
   83d82:	4680      	mov	r8, r0
   83d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83d86:	2b00      	cmp	r3, #0
   83d88:	f040 8086 	bne.w	83e98 <_dtoa_r+0x648>
   83d8c:	9b07      	ldr	r3, [sp, #28]
   83d8e:	2b00      	cmp	r3, #0
   83d90:	f340 8264 	ble.w	8425c <_dtoa_r+0xa0c>
   83d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83d96:	2b00      	cmp	r3, #0
   83d98:	f000 8098 	beq.w	83ecc <_dtoa_r+0x67c>
   83d9c:	2d00      	cmp	r5, #0
   83d9e:	dd05      	ble.n	83dac <_dtoa_r+0x55c>
   83da0:	4631      	mov	r1, r6
   83da2:	462a      	mov	r2, r5
   83da4:	4620      	mov	r0, r4
   83da6:	f001 f845 	bl	84e34 <__lshift>
   83daa:	4606      	mov	r6, r0
   83dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   83dae:	2b00      	cmp	r3, #0
   83db0:	f040 8336 	bne.w	84420 <_dtoa_r+0xbd0>
   83db4:	9608      	str	r6, [sp, #32]
   83db6:	9b07      	ldr	r3, [sp, #28]
   83db8:	9a04      	ldr	r2, [sp, #16]
   83dba:	3b01      	subs	r3, #1
   83dbc:	18d3      	adds	r3, r2, r3
   83dbe:	930b      	str	r3, [sp, #44]	; 0x2c
   83dc0:	4617      	mov	r7, r2
   83dc2:	f00a 0301 	and.w	r3, sl, #1
   83dc6:	46c2      	mov	sl, r8
   83dc8:	f8dd b020 	ldr.w	fp, [sp, #32]
   83dcc:	930c      	str	r3, [sp, #48]	; 0x30
   83dce:	4651      	mov	r1, sl
   83dd0:	4648      	mov	r0, r9
   83dd2:	f7ff fca9 	bl	83728 <quorem>
   83dd6:	4631      	mov	r1, r6
   83dd8:	4605      	mov	r5, r0
   83dda:	4648      	mov	r0, r9
   83ddc:	f001 f87a 	bl	84ed4 <__mcmp>
   83de0:	465a      	mov	r2, fp
   83de2:	9007      	str	r0, [sp, #28]
   83de4:	4651      	mov	r1, sl
   83de6:	4620      	mov	r0, r4
   83de8:	f001 f890 	bl	84f0c <__mdiff>
   83dec:	68c2      	ldr	r2, [r0, #12]
   83dee:	4680      	mov	r8, r0
   83df0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   83df4:	2a00      	cmp	r2, #0
   83df6:	f040 8229 	bne.w	8424c <_dtoa_r+0x9fc>
   83dfa:	4601      	mov	r1, r0
   83dfc:	4648      	mov	r0, r9
   83dfe:	930a      	str	r3, [sp, #40]	; 0x28
   83e00:	f001 f868 	bl	84ed4 <__mcmp>
   83e04:	4641      	mov	r1, r8
   83e06:	9008      	str	r0, [sp, #32]
   83e08:	4620      	mov	r0, r4
   83e0a:	f000 fe8b 	bl	84b24 <_Bfree>
   83e0e:	9a08      	ldr	r2, [sp, #32]
   83e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e12:	b932      	cbnz	r2, 83e22 <_dtoa_r+0x5d2>
   83e14:	9924      	ldr	r1, [sp, #144]	; 0x90
   83e16:	b921      	cbnz	r1, 83e22 <_dtoa_r+0x5d2>
   83e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   83e1a:	2a00      	cmp	r2, #0
   83e1c:	f000 83ee 	beq.w	845fc <_dtoa_r+0xdac>
   83e20:	9a24      	ldr	r2, [sp, #144]	; 0x90
   83e22:	9907      	ldr	r1, [sp, #28]
   83e24:	2900      	cmp	r1, #0
   83e26:	f2c0 829f 	blt.w	84368 <_dtoa_r+0xb18>
   83e2a:	d105      	bne.n	83e38 <_dtoa_r+0x5e8>
   83e2c:	9924      	ldr	r1, [sp, #144]	; 0x90
   83e2e:	b919      	cbnz	r1, 83e38 <_dtoa_r+0x5e8>
   83e30:	990c      	ldr	r1, [sp, #48]	; 0x30
   83e32:	2900      	cmp	r1, #0
   83e34:	f000 8298 	beq.w	84368 <_dtoa_r+0xb18>
   83e38:	2a00      	cmp	r2, #0
   83e3a:	f300 8305 	bgt.w	84448 <_dtoa_r+0xbf8>
   83e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   83e40:	f107 0801 	add.w	r8, r7, #1
   83e44:	4297      	cmp	r7, r2
   83e46:	703b      	strb	r3, [r7, #0]
   83e48:	4645      	mov	r5, r8
   83e4a:	f000 830b 	beq.w	84464 <_dtoa_r+0xc14>
   83e4e:	4649      	mov	r1, r9
   83e50:	2300      	movs	r3, #0
   83e52:	220a      	movs	r2, #10
   83e54:	4620      	mov	r0, r4
   83e56:	f000 fe6f 	bl	84b38 <__multadd>
   83e5a:	455e      	cmp	r6, fp
   83e5c:	4681      	mov	r9, r0
   83e5e:	4631      	mov	r1, r6
   83e60:	f04f 0300 	mov.w	r3, #0
   83e64:	f04f 020a 	mov.w	r2, #10
   83e68:	4620      	mov	r0, r4
   83e6a:	f000 81e9 	beq.w	84240 <_dtoa_r+0x9f0>
   83e6e:	f000 fe63 	bl	84b38 <__multadd>
   83e72:	4659      	mov	r1, fp
   83e74:	4606      	mov	r6, r0
   83e76:	2300      	movs	r3, #0
   83e78:	220a      	movs	r2, #10
   83e7a:	4620      	mov	r0, r4
   83e7c:	f000 fe5c 	bl	84b38 <__multadd>
   83e80:	4647      	mov	r7, r8
   83e82:	4683      	mov	fp, r0
   83e84:	e7a3      	b.n	83dce <_dtoa_r+0x57e>
   83e86:	201c      	movs	r0, #28
   83e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83e8a:	4405      	add	r5, r0
   83e8c:	4403      	add	r3, r0
   83e8e:	930a      	str	r3, [sp, #40]	; 0x28
   83e90:	9b08      	ldr	r3, [sp, #32]
   83e92:	4403      	add	r3, r0
   83e94:	9308      	str	r3, [sp, #32]
   83e96:	e763      	b.n	83d60 <_dtoa_r+0x510>
   83e98:	4641      	mov	r1, r8
   83e9a:	4648      	mov	r0, r9
   83e9c:	f001 f81a 	bl	84ed4 <__mcmp>
   83ea0:	2800      	cmp	r0, #0
   83ea2:	f6bf af73 	bge.w	83d8c <_dtoa_r+0x53c>
   83ea6:	9f02      	ldr	r7, [sp, #8]
   83ea8:	4649      	mov	r1, r9
   83eaa:	2300      	movs	r3, #0
   83eac:	220a      	movs	r2, #10
   83eae:	4620      	mov	r0, r4
   83eb0:	3f01      	subs	r7, #1
   83eb2:	9702      	str	r7, [sp, #8]
   83eb4:	f000 fe40 	bl	84b38 <__multadd>
   83eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   83eba:	4681      	mov	r9, r0
   83ebc:	2b00      	cmp	r3, #0
   83ebe:	f040 83b5 	bne.w	8462c <_dtoa_r+0xddc>
   83ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83ec4:	2b00      	cmp	r3, #0
   83ec6:	f340 83be 	ble.w	84646 <_dtoa_r+0xdf6>
   83eca:	9307      	str	r3, [sp, #28]
   83ecc:	f8dd a010 	ldr.w	sl, [sp, #16]
   83ed0:	9f07      	ldr	r7, [sp, #28]
   83ed2:	4655      	mov	r5, sl
   83ed4:	e006      	b.n	83ee4 <_dtoa_r+0x694>
   83ed6:	4649      	mov	r1, r9
   83ed8:	2300      	movs	r3, #0
   83eda:	220a      	movs	r2, #10
   83edc:	4620      	mov	r0, r4
   83ede:	f000 fe2b 	bl	84b38 <__multadd>
   83ee2:	4681      	mov	r9, r0
   83ee4:	4641      	mov	r1, r8
   83ee6:	4648      	mov	r0, r9
   83ee8:	f7ff fc1e 	bl	83728 <quorem>
   83eec:	3030      	adds	r0, #48	; 0x30
   83eee:	f805 0b01 	strb.w	r0, [r5], #1
   83ef2:	eba5 030a 	sub.w	r3, r5, sl
   83ef6:	42bb      	cmp	r3, r7
   83ef8:	dbed      	blt.n	83ed6 <_dtoa_r+0x686>
   83efa:	9b04      	ldr	r3, [sp, #16]
   83efc:	9a07      	ldr	r2, [sp, #28]
   83efe:	4682      	mov	sl, r0
   83f00:	2a01      	cmp	r2, #1
   83f02:	bfac      	ite	ge
   83f04:	189b      	addge	r3, r3, r2
   83f06:	3301      	addlt	r3, #1
   83f08:	f04f 0b00 	mov.w	fp, #0
   83f0c:	461d      	mov	r5, r3
   83f0e:	4649      	mov	r1, r9
   83f10:	2201      	movs	r2, #1
   83f12:	4620      	mov	r0, r4
   83f14:	f000 ff8e 	bl	84e34 <__lshift>
   83f18:	4641      	mov	r1, r8
   83f1a:	4681      	mov	r9, r0
   83f1c:	f000 ffda 	bl	84ed4 <__mcmp>
   83f20:	2800      	cmp	r0, #0
   83f22:	f340 823f 	ble.w	843a4 <_dtoa_r+0xb54>
   83f26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   83f2a:	1e6b      	subs	r3, r5, #1
   83f2c:	9904      	ldr	r1, [sp, #16]
   83f2e:	e004      	b.n	83f3a <_dtoa_r+0x6ea>
   83f30:	428b      	cmp	r3, r1
   83f32:	f000 81ae 	beq.w	84292 <_dtoa_r+0xa42>
   83f36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   83f3a:	2a39      	cmp	r2, #57	; 0x39
   83f3c:	f103 0501 	add.w	r5, r3, #1
   83f40:	d0f6      	beq.n	83f30 <_dtoa_r+0x6e0>
   83f42:	3201      	adds	r2, #1
   83f44:	701a      	strb	r2, [r3, #0]
   83f46:	4641      	mov	r1, r8
   83f48:	4620      	mov	r0, r4
   83f4a:	f000 fdeb 	bl	84b24 <_Bfree>
   83f4e:	2e00      	cmp	r6, #0
   83f50:	f43f ae3d 	beq.w	83bce <_dtoa_r+0x37e>
   83f54:	f1bb 0f00 	cmp.w	fp, #0
   83f58:	d005      	beq.n	83f66 <_dtoa_r+0x716>
   83f5a:	45b3      	cmp	fp, r6
   83f5c:	d003      	beq.n	83f66 <_dtoa_r+0x716>
   83f5e:	4659      	mov	r1, fp
   83f60:	4620      	mov	r0, r4
   83f62:	f000 fddf 	bl	84b24 <_Bfree>
   83f66:	4631      	mov	r1, r6
   83f68:	4620      	mov	r0, r4
   83f6a:	f000 fddb 	bl	84b24 <_Bfree>
   83f6e:	e62e      	b.n	83bce <_dtoa_r+0x37e>
   83f70:	2300      	movs	r3, #0
   83f72:	930b      	str	r3, [sp, #44]	; 0x2c
   83f74:	9b02      	ldr	r3, [sp, #8]
   83f76:	9a25      	ldr	r2, [sp, #148]	; 0x94
   83f78:	4413      	add	r3, r2
   83f7a:	930f      	str	r3, [sp, #60]	; 0x3c
   83f7c:	3301      	adds	r3, #1
   83f7e:	2b01      	cmp	r3, #1
   83f80:	461f      	mov	r7, r3
   83f82:	461e      	mov	r6, r3
   83f84:	bfb8      	it	lt
   83f86:	2701      	movlt	r7, #1
   83f88:	9307      	str	r3, [sp, #28]
   83f8a:	2100      	movs	r1, #0
   83f8c:	2f17      	cmp	r7, #23
   83f8e:	6461      	str	r1, [r4, #68]	; 0x44
   83f90:	d90a      	bls.n	83fa8 <_dtoa_r+0x758>
   83f92:	2201      	movs	r2, #1
   83f94:	2304      	movs	r3, #4
   83f96:	005b      	lsls	r3, r3, #1
   83f98:	f103 0014 	add.w	r0, r3, #20
   83f9c:	4287      	cmp	r7, r0
   83f9e:	4611      	mov	r1, r2
   83fa0:	f102 0201 	add.w	r2, r2, #1
   83fa4:	d2f7      	bcs.n	83f96 <_dtoa_r+0x746>
   83fa6:	6461      	str	r1, [r4, #68]	; 0x44
   83fa8:	4620      	mov	r0, r4
   83faa:	f000 fd95 	bl	84ad8 <_Balloc>
   83fae:	2e0e      	cmp	r6, #14
   83fb0:	9004      	str	r0, [sp, #16]
   83fb2:	6420      	str	r0, [r4, #64]	; 0x40
   83fb4:	f63f ad47 	bhi.w	83a46 <_dtoa_r+0x1f6>
   83fb8:	2d00      	cmp	r5, #0
   83fba:	f43f ad44 	beq.w	83a46 <_dtoa_r+0x1f6>
   83fbe:	9902      	ldr	r1, [sp, #8]
   83fc0:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   83fc4:	2900      	cmp	r1, #0
   83fc6:	f340 8203 	ble.w	843d0 <_dtoa_r+0xb80>
   83fca:	4bb9      	ldr	r3, [pc, #740]	; (842b0 <_dtoa_r+0xa60>)
   83fcc:	f001 020f 	and.w	r2, r1, #15
   83fd0:	110d      	asrs	r5, r1, #4
   83fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   83fd6:	06e9      	lsls	r1, r5, #27
   83fd8:	e9d3 6700 	ldrd	r6, r7, [r3]
   83fdc:	f140 81af 	bpl.w	8433e <_dtoa_r+0xaee>
   83fe0:	4bb4      	ldr	r3, [pc, #720]	; (842b4 <_dtoa_r+0xa64>)
   83fe2:	4650      	mov	r0, sl
   83fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   83fe8:	4659      	mov	r1, fp
   83fea:	f001 fe25 	bl	85c38 <__aeabi_ddiv>
   83fee:	f04f 0a03 	mov.w	sl, #3
   83ff2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   83ff6:	f005 050f 	and.w	r5, r5, #15
   83ffa:	b18d      	cbz	r5, 84020 <_dtoa_r+0x7d0>
   83ffc:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 842b4 <_dtoa_r+0xa64>
   84000:	07ea      	lsls	r2, r5, #31
   84002:	d509      	bpl.n	84018 <_dtoa_r+0x7c8>
   84004:	e9d8 2300 	ldrd	r2, r3, [r8]
   84008:	4630      	mov	r0, r6
   8400a:	4639      	mov	r1, r7
   8400c:	f001 fcea 	bl	859e4 <__aeabi_dmul>
   84010:	4606      	mov	r6, r0
   84012:	460f      	mov	r7, r1
   84014:	f10a 0a01 	add.w	sl, sl, #1
   84018:	106d      	asrs	r5, r5, #1
   8401a:	f108 0808 	add.w	r8, r8, #8
   8401e:	d1ef      	bne.n	84000 <_dtoa_r+0x7b0>
   84020:	463b      	mov	r3, r7
   84022:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   84026:	4632      	mov	r2, r6
   84028:	f001 fe06 	bl	85c38 <__aeabi_ddiv>
   8402c:	4607      	mov	r7, r0
   8402e:	4688      	mov	r8, r1
   84030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84032:	b143      	cbz	r3, 84046 <_dtoa_r+0x7f6>
   84034:	2200      	movs	r2, #0
   84036:	4ba0      	ldr	r3, [pc, #640]	; (842b8 <_dtoa_r+0xa68>)
   84038:	4638      	mov	r0, r7
   8403a:	4641      	mov	r1, r8
   8403c:	f001 ff44 	bl	85ec8 <__aeabi_dcmplt>
   84040:	2800      	cmp	r0, #0
   84042:	f040 8287 	bne.w	84554 <_dtoa_r+0xd04>
   84046:	4650      	mov	r0, sl
   84048:	f001 fc66 	bl	85918 <__aeabi_i2d>
   8404c:	463a      	mov	r2, r7
   8404e:	4643      	mov	r3, r8
   84050:	f001 fcc8 	bl	859e4 <__aeabi_dmul>
   84054:	4b99      	ldr	r3, [pc, #612]	; (842bc <_dtoa_r+0xa6c>)
   84056:	2200      	movs	r2, #0
   84058:	f001 fb12 	bl	85680 <__adddf3>
   8405c:	9b07      	ldr	r3, [sp, #28]
   8405e:	4605      	mov	r5, r0
   84060:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   84064:	2b00      	cmp	r3, #0
   84066:	f000 813f 	beq.w	842e8 <_dtoa_r+0xa98>
   8406a:	9b02      	ldr	r3, [sp, #8]
   8406c:	9315      	str	r3, [sp, #84]	; 0x54
   8406e:	9b07      	ldr	r3, [sp, #28]
   84070:	9312      	str	r3, [sp, #72]	; 0x48
   84072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   84074:	2b00      	cmp	r3, #0
   84076:	f000 81fb 	beq.w	84470 <_dtoa_r+0xc20>
   8407a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8407c:	4b8c      	ldr	r3, [pc, #560]	; (842b0 <_dtoa_r+0xa60>)
   8407e:	2000      	movs	r0, #0
   84080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   84084:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   84088:	498d      	ldr	r1, [pc, #564]	; (842c0 <_dtoa_r+0xa70>)
   8408a:	f001 fdd5 	bl	85c38 <__aeabi_ddiv>
   8408e:	462a      	mov	r2, r5
   84090:	4633      	mov	r3, r6
   84092:	f001 faf3 	bl	8567c <__aeabi_dsub>
   84096:	4682      	mov	sl, r0
   84098:	468b      	mov	fp, r1
   8409a:	4638      	mov	r0, r7
   8409c:	4641      	mov	r1, r8
   8409e:	f001 ff51 	bl	85f44 <__aeabi_d2iz>
   840a2:	4605      	mov	r5, r0
   840a4:	f001 fc38 	bl	85918 <__aeabi_i2d>
   840a8:	4602      	mov	r2, r0
   840aa:	460b      	mov	r3, r1
   840ac:	4638      	mov	r0, r7
   840ae:	4641      	mov	r1, r8
   840b0:	f001 fae4 	bl	8567c <__aeabi_dsub>
   840b4:	3530      	adds	r5, #48	; 0x30
   840b6:	fa5f f885 	uxtb.w	r8, r5
   840ba:	9d04      	ldr	r5, [sp, #16]
   840bc:	4606      	mov	r6, r0
   840be:	460f      	mov	r7, r1
   840c0:	f885 8000 	strb.w	r8, [r5]
   840c4:	4602      	mov	r2, r0
   840c6:	460b      	mov	r3, r1
   840c8:	4650      	mov	r0, sl
   840ca:	4659      	mov	r1, fp
   840cc:	3501      	adds	r5, #1
   840ce:	f001 ff19 	bl	85f04 <__aeabi_dcmpgt>
   840d2:	2800      	cmp	r0, #0
   840d4:	d154      	bne.n	84180 <_dtoa_r+0x930>
   840d6:	4632      	mov	r2, r6
   840d8:	463b      	mov	r3, r7
   840da:	2000      	movs	r0, #0
   840dc:	4976      	ldr	r1, [pc, #472]	; (842b8 <_dtoa_r+0xa68>)
   840de:	f001 facd 	bl	8567c <__aeabi_dsub>
   840e2:	4602      	mov	r2, r0
   840e4:	460b      	mov	r3, r1
   840e6:	4650      	mov	r0, sl
   840e8:	4659      	mov	r1, fp
   840ea:	f001 ff0b 	bl	85f04 <__aeabi_dcmpgt>
   840ee:	2800      	cmp	r0, #0
   840f0:	f040 8270 	bne.w	845d4 <_dtoa_r+0xd84>
   840f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   840f6:	2a01      	cmp	r2, #1
   840f8:	f000 8112 	beq.w	84320 <_dtoa_r+0xad0>
   840fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   840fe:	9a04      	ldr	r2, [sp, #16]
   84100:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   84104:	4413      	add	r3, r2
   84106:	4699      	mov	r9, r3
   84108:	e00f      	b.n	8412a <_dtoa_r+0x8da>
   8410a:	4632      	mov	r2, r6
   8410c:	463b      	mov	r3, r7
   8410e:	2000      	movs	r0, #0
   84110:	4969      	ldr	r1, [pc, #420]	; (842b8 <_dtoa_r+0xa68>)
   84112:	f001 fab3 	bl	8567c <__aeabi_dsub>
   84116:	4652      	mov	r2, sl
   84118:	465b      	mov	r3, fp
   8411a:	f001 fed5 	bl	85ec8 <__aeabi_dcmplt>
   8411e:	2800      	cmp	r0, #0
   84120:	f040 8256 	bne.w	845d0 <_dtoa_r+0xd80>
   84124:	454d      	cmp	r5, r9
   84126:	f000 80f9 	beq.w	8431c <_dtoa_r+0xacc>
   8412a:	4650      	mov	r0, sl
   8412c:	4659      	mov	r1, fp
   8412e:	2200      	movs	r2, #0
   84130:	4b64      	ldr	r3, [pc, #400]	; (842c4 <_dtoa_r+0xa74>)
   84132:	f001 fc57 	bl	859e4 <__aeabi_dmul>
   84136:	2200      	movs	r2, #0
   84138:	4b62      	ldr	r3, [pc, #392]	; (842c4 <_dtoa_r+0xa74>)
   8413a:	4682      	mov	sl, r0
   8413c:	468b      	mov	fp, r1
   8413e:	4630      	mov	r0, r6
   84140:	4639      	mov	r1, r7
   84142:	f001 fc4f 	bl	859e4 <__aeabi_dmul>
   84146:	460f      	mov	r7, r1
   84148:	4606      	mov	r6, r0
   8414a:	f001 fefb 	bl	85f44 <__aeabi_d2iz>
   8414e:	4680      	mov	r8, r0
   84150:	f001 fbe2 	bl	85918 <__aeabi_i2d>
   84154:	4602      	mov	r2, r0
   84156:	460b      	mov	r3, r1
   84158:	4630      	mov	r0, r6
   8415a:	4639      	mov	r1, r7
   8415c:	f001 fa8e 	bl	8567c <__aeabi_dsub>
   84160:	f108 0830 	add.w	r8, r8, #48	; 0x30
   84164:	fa5f f888 	uxtb.w	r8, r8
   84168:	f805 8b01 	strb.w	r8, [r5], #1
   8416c:	4652      	mov	r2, sl
   8416e:	465b      	mov	r3, fp
   84170:	4606      	mov	r6, r0
   84172:	460f      	mov	r7, r1
   84174:	f001 fea8 	bl	85ec8 <__aeabi_dcmplt>
   84178:	2800      	cmp	r0, #0
   8417a:	d0c6      	beq.n	8410a <_dtoa_r+0x8ba>
   8417c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84180:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84182:	9302      	str	r3, [sp, #8]
   84184:	e523      	b.n	83bce <_dtoa_r+0x37e>
   84186:	2300      	movs	r3, #0
   84188:	930b      	str	r3, [sp, #44]	; 0x2c
   8418a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8418c:	2b00      	cmp	r3, #0
   8418e:	f340 80dd 	ble.w	8434c <_dtoa_r+0xafc>
   84192:	461f      	mov	r7, r3
   84194:	461e      	mov	r6, r3
   84196:	930f      	str	r3, [sp, #60]	; 0x3c
   84198:	9307      	str	r3, [sp, #28]
   8419a:	e6f6      	b.n	83f8a <_dtoa_r+0x73a>
   8419c:	2301      	movs	r3, #1
   8419e:	930b      	str	r3, [sp, #44]	; 0x2c
   841a0:	e7f3      	b.n	8418a <_dtoa_r+0x93a>
   841a2:	f1ba 0f00 	cmp.w	sl, #0
   841a6:	f47f ada7 	bne.w	83cf8 <_dtoa_r+0x4a8>
   841aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   841ae:	2b00      	cmp	r3, #0
   841b0:	f47f adbc 	bne.w	83d2c <_dtoa_r+0x4dc>
   841b4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   841b8:	0d3f      	lsrs	r7, r7, #20
   841ba:	053f      	lsls	r7, r7, #20
   841bc:	2f00      	cmp	r7, #0
   841be:	f000 820d 	beq.w	845dc <_dtoa_r+0xd8c>
   841c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   841c4:	3301      	adds	r3, #1
   841c6:	930a      	str	r3, [sp, #40]	; 0x28
   841c8:	9b08      	ldr	r3, [sp, #32]
   841ca:	3301      	adds	r3, #1
   841cc:	9308      	str	r3, [sp, #32]
   841ce:	2301      	movs	r3, #1
   841d0:	930c      	str	r3, [sp, #48]	; 0x30
   841d2:	e5ad      	b.n	83d30 <_dtoa_r+0x4e0>
   841d4:	9b07      	ldr	r3, [sp, #28]
   841d6:	2b00      	cmp	r3, #0
   841d8:	f73f ac48 	bgt.w	83a6c <_dtoa_r+0x21c>
   841dc:	f040 8222 	bne.w	84624 <_dtoa_r+0xdd4>
   841e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   841e4:	2200      	movs	r2, #0
   841e6:	4b38      	ldr	r3, [pc, #224]	; (842c8 <_dtoa_r+0xa78>)
   841e8:	f001 fbfc 	bl	859e4 <__aeabi_dmul>
   841ec:	4652      	mov	r2, sl
   841ee:	465b      	mov	r3, fp
   841f0:	f001 fe7e 	bl	85ef0 <__aeabi_dcmpge>
   841f4:	f8dd 801c 	ldr.w	r8, [sp, #28]
   841f8:	4646      	mov	r6, r8
   841fa:	2800      	cmp	r0, #0
   841fc:	d041      	beq.n	84282 <_dtoa_r+0xa32>
   841fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84200:	9d04      	ldr	r5, [sp, #16]
   84202:	43db      	mvns	r3, r3
   84204:	9302      	str	r3, [sp, #8]
   84206:	4641      	mov	r1, r8
   84208:	4620      	mov	r0, r4
   8420a:	f000 fc8b 	bl	84b24 <_Bfree>
   8420e:	2e00      	cmp	r6, #0
   84210:	f43f acdd 	beq.w	83bce <_dtoa_r+0x37e>
   84214:	e6a7      	b.n	83f66 <_dtoa_r+0x716>
   84216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   84218:	4649      	mov	r1, r9
   8421a:	4620      	mov	r0, r4
   8421c:	f000 fdba 	bl	84d94 <__pow5mult>
   84220:	4681      	mov	r9, r0
   84222:	e557      	b.n	83cd4 <_dtoa_r+0x484>
   84224:	9a14      	ldr	r2, [sp, #80]	; 0x50
   84226:	2a00      	cmp	r2, #0
   84228:	f000 8188 	beq.w	8453c <_dtoa_r+0xcec>
   8422c:	f203 4333 	addw	r3, r3, #1075	; 0x433
   84230:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84232:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   84234:	e4f2      	b.n	83c1c <_dtoa_r+0x3cc>
   84236:	f1ba 0f00 	cmp.w	sl, #0
   8423a:	f47f ad77 	bne.w	83d2c <_dtoa_r+0x4dc>
   8423e:	e7b4      	b.n	841aa <_dtoa_r+0x95a>
   84240:	f000 fc7a 	bl	84b38 <__multadd>
   84244:	4647      	mov	r7, r8
   84246:	4606      	mov	r6, r0
   84248:	4683      	mov	fp, r0
   8424a:	e5c0      	b.n	83dce <_dtoa_r+0x57e>
   8424c:	4601      	mov	r1, r0
   8424e:	4620      	mov	r0, r4
   84250:	9308      	str	r3, [sp, #32]
   84252:	f000 fc67 	bl	84b24 <_Bfree>
   84256:	2201      	movs	r2, #1
   84258:	9b08      	ldr	r3, [sp, #32]
   8425a:	e5e2      	b.n	83e22 <_dtoa_r+0x5d2>
   8425c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   8425e:	2b02      	cmp	r3, #2
   84260:	f77f ad98 	ble.w	83d94 <_dtoa_r+0x544>
   84264:	9b07      	ldr	r3, [sp, #28]
   84266:	2b00      	cmp	r3, #0
   84268:	d1c9      	bne.n	841fe <_dtoa_r+0x9ae>
   8426a:	4641      	mov	r1, r8
   8426c:	2205      	movs	r2, #5
   8426e:	4620      	mov	r0, r4
   84270:	f000 fc62 	bl	84b38 <__multadd>
   84274:	4601      	mov	r1, r0
   84276:	4680      	mov	r8, r0
   84278:	4648      	mov	r0, r9
   8427a:	f000 fe2b 	bl	84ed4 <__mcmp>
   8427e:	2800      	cmp	r0, #0
   84280:	ddbd      	ble.n	841fe <_dtoa_r+0x9ae>
   84282:	2331      	movs	r3, #49	; 0x31
   84284:	9a02      	ldr	r2, [sp, #8]
   84286:	9904      	ldr	r1, [sp, #16]
   84288:	3201      	adds	r2, #1
   8428a:	9202      	str	r2, [sp, #8]
   8428c:	700b      	strb	r3, [r1, #0]
   8428e:	1c4d      	adds	r5, r1, #1
   84290:	e7b9      	b.n	84206 <_dtoa_r+0x9b6>
   84292:	2331      	movs	r3, #49	; 0x31
   84294:	9a02      	ldr	r2, [sp, #8]
   84296:	3201      	adds	r2, #1
   84298:	9202      	str	r2, [sp, #8]
   8429a:	9a04      	ldr	r2, [sp, #16]
   8429c:	7013      	strb	r3, [r2, #0]
   8429e:	e652      	b.n	83f46 <_dtoa_r+0x6f6>
   842a0:	2301      	movs	r3, #1
   842a2:	930b      	str	r3, [sp, #44]	; 0x2c
   842a4:	e666      	b.n	83f74 <_dtoa_r+0x724>
   842a6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   842aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   842ac:	e48f      	b.n	83bce <_dtoa_r+0x37e>
   842ae:	bf00      	nop
   842b0:	00086418 	.word	0x00086418
   842b4:	000863f0 	.word	0x000863f0
   842b8:	3ff00000 	.word	0x3ff00000
   842bc:	401c0000 	.word	0x401c0000
   842c0:	3fe00000 	.word	0x3fe00000
   842c4:	40240000 	.word	0x40240000
   842c8:	40140000 	.word	0x40140000
   842cc:	4650      	mov	r0, sl
   842ce:	f001 fb23 	bl	85918 <__aeabi_i2d>
   842d2:	463a      	mov	r2, r7
   842d4:	4643      	mov	r3, r8
   842d6:	f001 fb85 	bl	859e4 <__aeabi_dmul>
   842da:	2200      	movs	r2, #0
   842dc:	4bc1      	ldr	r3, [pc, #772]	; (845e4 <_dtoa_r+0xd94>)
   842de:	f001 f9cf 	bl	85680 <__adddf3>
   842e2:	4605      	mov	r5, r0
   842e4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   842e8:	4641      	mov	r1, r8
   842ea:	2200      	movs	r2, #0
   842ec:	4bbe      	ldr	r3, [pc, #760]	; (845e8 <_dtoa_r+0xd98>)
   842ee:	4638      	mov	r0, r7
   842f0:	f001 f9c4 	bl	8567c <__aeabi_dsub>
   842f4:	462a      	mov	r2, r5
   842f6:	4633      	mov	r3, r6
   842f8:	4682      	mov	sl, r0
   842fa:	468b      	mov	fp, r1
   842fc:	f001 fe02 	bl	85f04 <__aeabi_dcmpgt>
   84300:	4680      	mov	r8, r0
   84302:	2800      	cmp	r0, #0
   84304:	f040 8110 	bne.w	84528 <_dtoa_r+0xcd8>
   84308:	462a      	mov	r2, r5
   8430a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   8430e:	4650      	mov	r0, sl
   84310:	4659      	mov	r1, fp
   84312:	f001 fdd9 	bl	85ec8 <__aeabi_dcmplt>
   84316:	b118      	cbz	r0, 84320 <_dtoa_r+0xad0>
   84318:	4646      	mov	r6, r8
   8431a:	e770      	b.n	841fe <_dtoa_r+0x9ae>
   8431c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84320:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   84324:	f7ff bb8f 	b.w	83a46 <_dtoa_r+0x1f6>
   84328:	9804      	ldr	r0, [sp, #16]
   8432a:	f7ff bac0 	b.w	838ae <_dtoa_r+0x5e>
   8432e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   84330:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   84332:	1afb      	subs	r3, r7, r3
   84334:	441a      	add	r2, r3
   84336:	970c      	str	r7, [sp, #48]	; 0x30
   84338:	920d      	str	r2, [sp, #52]	; 0x34
   8433a:	2700      	movs	r7, #0
   8433c:	e468      	b.n	83c10 <_dtoa_r+0x3c0>
   8433e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   84342:	f04f 0a02 	mov.w	sl, #2
   84346:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   8434a:	e656      	b.n	83ffa <_dtoa_r+0x7aa>
   8434c:	2100      	movs	r1, #0
   8434e:	2301      	movs	r3, #1
   84350:	4620      	mov	r0, r4
   84352:	6461      	str	r1, [r4, #68]	; 0x44
   84354:	9325      	str	r3, [sp, #148]	; 0x94
   84356:	f000 fbbf 	bl	84ad8 <_Balloc>
   8435a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8435c:	9004      	str	r0, [sp, #16]
   8435e:	9307      	str	r3, [sp, #28]
   84360:	9b25      	ldr	r3, [sp, #148]	; 0x94
   84362:	6420      	str	r0, [r4, #64]	; 0x40
   84364:	930f      	str	r3, [sp, #60]	; 0x3c
   84366:	e627      	b.n	83fb8 <_dtoa_r+0x768>
   84368:	2a00      	cmp	r2, #0
   8436a:	46d0      	mov	r8, sl
   8436c:	f8cd b020 	str.w	fp, [sp, #32]
   84370:	469a      	mov	sl, r3
   84372:	dd11      	ble.n	84398 <_dtoa_r+0xb48>
   84374:	4649      	mov	r1, r9
   84376:	2201      	movs	r2, #1
   84378:	4620      	mov	r0, r4
   8437a:	f000 fd5b 	bl	84e34 <__lshift>
   8437e:	4641      	mov	r1, r8
   84380:	4681      	mov	r9, r0
   84382:	f000 fda7 	bl	84ed4 <__mcmp>
   84386:	2800      	cmp	r0, #0
   84388:	f340 8145 	ble.w	84616 <_dtoa_r+0xdc6>
   8438c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   84390:	f000 8105 	beq.w	8459e <_dtoa_r+0xd4e>
   84394:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   84398:	46b3      	mov	fp, r6
   8439a:	f887 a000 	strb.w	sl, [r7]
   8439e:	1c7d      	adds	r5, r7, #1
   843a0:	9e08      	ldr	r6, [sp, #32]
   843a2:	e5d0      	b.n	83f46 <_dtoa_r+0x6f6>
   843a4:	d104      	bne.n	843b0 <_dtoa_r+0xb60>
   843a6:	f01a 0f01 	tst.w	sl, #1
   843aa:	d001      	beq.n	843b0 <_dtoa_r+0xb60>
   843ac:	e5bb      	b.n	83f26 <_dtoa_r+0x6d6>
   843ae:	4615      	mov	r5, r2
   843b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   843b4:	1e6a      	subs	r2, r5, #1
   843b6:	2b30      	cmp	r3, #48	; 0x30
   843b8:	d0f9      	beq.n	843ae <_dtoa_r+0xb5e>
   843ba:	e5c4      	b.n	83f46 <_dtoa_r+0x6f6>
   843bc:	2230      	movs	r2, #48	; 0x30
   843be:	9904      	ldr	r1, [sp, #16]
   843c0:	700a      	strb	r2, [r1, #0]
   843c2:	9a02      	ldr	r2, [sp, #8]
   843c4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   843c8:	3201      	adds	r2, #1
   843ca:	9202      	str	r2, [sp, #8]
   843cc:	f7ff bbfb 	b.w	83bc6 <_dtoa_r+0x376>
   843d0:	f000 80bb 	beq.w	8454a <_dtoa_r+0xcfa>
   843d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   843d8:	9b02      	ldr	r3, [sp, #8]
   843da:	f04f 0a02 	mov.w	sl, #2
   843de:	425d      	negs	r5, r3
   843e0:	4b82      	ldr	r3, [pc, #520]	; (845ec <_dtoa_r+0xd9c>)
   843e2:	f005 020f 	and.w	r2, r5, #15
   843e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   843ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   843ee:	f001 faf9 	bl	859e4 <__aeabi_dmul>
   843f2:	112d      	asrs	r5, r5, #4
   843f4:	4607      	mov	r7, r0
   843f6:	4688      	mov	r8, r1
   843f8:	f43f ae1a 	beq.w	84030 <_dtoa_r+0x7e0>
   843fc:	4e7c      	ldr	r6, [pc, #496]	; (845f0 <_dtoa_r+0xda0>)
   843fe:	07eb      	lsls	r3, r5, #31
   84400:	d509      	bpl.n	84416 <_dtoa_r+0xbc6>
   84402:	e9d6 2300 	ldrd	r2, r3, [r6]
   84406:	4638      	mov	r0, r7
   84408:	4641      	mov	r1, r8
   8440a:	f001 faeb 	bl	859e4 <__aeabi_dmul>
   8440e:	4607      	mov	r7, r0
   84410:	4688      	mov	r8, r1
   84412:	f10a 0a01 	add.w	sl, sl, #1
   84416:	106d      	asrs	r5, r5, #1
   84418:	f106 0608 	add.w	r6, r6, #8
   8441c:	d1ef      	bne.n	843fe <_dtoa_r+0xbae>
   8441e:	e607      	b.n	84030 <_dtoa_r+0x7e0>
   84420:	6871      	ldr	r1, [r6, #4]
   84422:	4620      	mov	r0, r4
   84424:	f000 fb58 	bl	84ad8 <_Balloc>
   84428:	4605      	mov	r5, r0
   8442a:	6933      	ldr	r3, [r6, #16]
   8442c:	f106 010c 	add.w	r1, r6, #12
   84430:	3302      	adds	r3, #2
   84432:	009a      	lsls	r2, r3, #2
   84434:	300c      	adds	r0, #12
   84436:	f7fd fdb1 	bl	81f9c <memcpy>
   8443a:	4629      	mov	r1, r5
   8443c:	2201      	movs	r2, #1
   8443e:	4620      	mov	r0, r4
   84440:	f000 fcf8 	bl	84e34 <__lshift>
   84444:	9008      	str	r0, [sp, #32]
   84446:	e4b6      	b.n	83db6 <_dtoa_r+0x566>
   84448:	2b39      	cmp	r3, #57	; 0x39
   8444a:	f8cd b020 	str.w	fp, [sp, #32]
   8444e:	46d0      	mov	r8, sl
   84450:	f000 80a5 	beq.w	8459e <_dtoa_r+0xd4e>
   84454:	f103 0a01 	add.w	sl, r3, #1
   84458:	46b3      	mov	fp, r6
   8445a:	f887 a000 	strb.w	sl, [r7]
   8445e:	1c7d      	adds	r5, r7, #1
   84460:	9e08      	ldr	r6, [sp, #32]
   84462:	e570      	b.n	83f46 <_dtoa_r+0x6f6>
   84464:	465a      	mov	r2, fp
   84466:	46d0      	mov	r8, sl
   84468:	46b3      	mov	fp, r6
   8446a:	469a      	mov	sl, r3
   8446c:	4616      	mov	r6, r2
   8446e:	e54e      	b.n	83f0e <_dtoa_r+0x6be>
   84470:	9812      	ldr	r0, [sp, #72]	; 0x48
   84472:	495e      	ldr	r1, [pc, #376]	; (845ec <_dtoa_r+0xd9c>)
   84474:	462a      	mov	r2, r5
   84476:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   8447a:	4633      	mov	r3, r6
   8447c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   84480:	f001 fab0 	bl	859e4 <__aeabi_dmul>
   84484:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   84488:	4638      	mov	r0, r7
   8448a:	4641      	mov	r1, r8
   8448c:	f001 fd5a 	bl	85f44 <__aeabi_d2iz>
   84490:	4605      	mov	r5, r0
   84492:	f001 fa41 	bl	85918 <__aeabi_i2d>
   84496:	4602      	mov	r2, r0
   84498:	460b      	mov	r3, r1
   8449a:	4638      	mov	r0, r7
   8449c:	4641      	mov	r1, r8
   8449e:	f001 f8ed 	bl	8567c <__aeabi_dsub>
   844a2:	4606      	mov	r6, r0
   844a4:	9812      	ldr	r0, [sp, #72]	; 0x48
   844a6:	9a04      	ldr	r2, [sp, #16]
   844a8:	3530      	adds	r5, #48	; 0x30
   844aa:	2801      	cmp	r0, #1
   844ac:	7015      	strb	r5, [r2, #0]
   844ae:	460f      	mov	r7, r1
   844b0:	f102 0501 	add.w	r5, r2, #1
   844b4:	d026      	beq.n	84504 <_dtoa_r+0xcb4>
   844b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   844b8:	9a04      	ldr	r2, [sp, #16]
   844ba:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   844be:	4413      	add	r3, r2
   844c0:	f04f 0a00 	mov.w	sl, #0
   844c4:	4699      	mov	r9, r3
   844c6:	f8df b130 	ldr.w	fp, [pc, #304]	; 845f8 <_dtoa_r+0xda8>
   844ca:	4652      	mov	r2, sl
   844cc:	465b      	mov	r3, fp
   844ce:	4630      	mov	r0, r6
   844d0:	4639      	mov	r1, r7
   844d2:	f001 fa87 	bl	859e4 <__aeabi_dmul>
   844d6:	460f      	mov	r7, r1
   844d8:	4606      	mov	r6, r0
   844da:	f001 fd33 	bl	85f44 <__aeabi_d2iz>
   844de:	4680      	mov	r8, r0
   844e0:	f001 fa1a 	bl	85918 <__aeabi_i2d>
   844e4:	4602      	mov	r2, r0
   844e6:	460b      	mov	r3, r1
   844e8:	4630      	mov	r0, r6
   844ea:	4639      	mov	r1, r7
   844ec:	f001 f8c6 	bl	8567c <__aeabi_dsub>
   844f0:	f108 0830 	add.w	r8, r8, #48	; 0x30
   844f4:	f805 8b01 	strb.w	r8, [r5], #1
   844f8:	454d      	cmp	r5, r9
   844fa:	4606      	mov	r6, r0
   844fc:	460f      	mov	r7, r1
   844fe:	d1e4      	bne.n	844ca <_dtoa_r+0xc7a>
   84500:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   84504:	2200      	movs	r2, #0
   84506:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   8450a:	4b3a      	ldr	r3, [pc, #232]	; (845f4 <_dtoa_r+0xda4>)
   8450c:	f001 f8b8 	bl	85680 <__adddf3>
   84510:	4632      	mov	r2, r6
   84512:	463b      	mov	r3, r7
   84514:	f001 fcd8 	bl	85ec8 <__aeabi_dcmplt>
   84518:	2800      	cmp	r0, #0
   8451a:	d046      	beq.n	845aa <_dtoa_r+0xd5a>
   8451c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8451e:	9302      	str	r3, [sp, #8]
   84520:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   84524:	f7ff bb42 	b.w	83bac <_dtoa_r+0x35c>
   84528:	f04f 0800 	mov.w	r8, #0
   8452c:	4646      	mov	r6, r8
   8452e:	e6a8      	b.n	84282 <_dtoa_r+0xa32>
   84530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84532:	9a07      	ldr	r2, [sp, #28]
   84534:	1a9d      	subs	r5, r3, r2
   84536:	2300      	movs	r3, #0
   84538:	f7ff bb70 	b.w	83c1c <_dtoa_r+0x3cc>
   8453c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   8453e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   84540:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   84544:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   84546:	f7ff bb69 	b.w	83c1c <_dtoa_r+0x3cc>
   8454a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   8454e:	f04f 0a02 	mov.w	sl, #2
   84552:	e56d      	b.n	84030 <_dtoa_r+0x7e0>
   84554:	9b07      	ldr	r3, [sp, #28]
   84556:	2b00      	cmp	r3, #0
   84558:	f43f aeb8 	beq.w	842cc <_dtoa_r+0xa7c>
   8455c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8455e:	2b00      	cmp	r3, #0
   84560:	f77f aede 	ble.w	84320 <_dtoa_r+0xad0>
   84564:	2200      	movs	r2, #0
   84566:	4b24      	ldr	r3, [pc, #144]	; (845f8 <_dtoa_r+0xda8>)
   84568:	4638      	mov	r0, r7
   8456a:	4641      	mov	r1, r8
   8456c:	f001 fa3a 	bl	859e4 <__aeabi_dmul>
   84570:	4607      	mov	r7, r0
   84572:	4688      	mov	r8, r1
   84574:	f10a 0001 	add.w	r0, sl, #1
   84578:	f001 f9ce 	bl	85918 <__aeabi_i2d>
   8457c:	463a      	mov	r2, r7
   8457e:	4643      	mov	r3, r8
   84580:	f001 fa30 	bl	859e4 <__aeabi_dmul>
   84584:	2200      	movs	r2, #0
   84586:	4b17      	ldr	r3, [pc, #92]	; (845e4 <_dtoa_r+0xd94>)
   84588:	f001 f87a 	bl	85680 <__adddf3>
   8458c:	9a02      	ldr	r2, [sp, #8]
   8458e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84590:	3a01      	subs	r2, #1
   84592:	4605      	mov	r5, r0
   84594:	9215      	str	r2, [sp, #84]	; 0x54
   84596:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   8459a:	9312      	str	r3, [sp, #72]	; 0x48
   8459c:	e569      	b.n	84072 <_dtoa_r+0x822>
   8459e:	2239      	movs	r2, #57	; 0x39
   845a0:	46b3      	mov	fp, r6
   845a2:	703a      	strb	r2, [r7, #0]
   845a4:	9e08      	ldr	r6, [sp, #32]
   845a6:	1c7d      	adds	r5, r7, #1
   845a8:	e4bf      	b.n	83f2a <_dtoa_r+0x6da>
   845aa:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   845ae:	2000      	movs	r0, #0
   845b0:	4910      	ldr	r1, [pc, #64]	; (845f4 <_dtoa_r+0xda4>)
   845b2:	f001 f863 	bl	8567c <__aeabi_dsub>
   845b6:	4632      	mov	r2, r6
   845b8:	463b      	mov	r3, r7
   845ba:	f001 fca3 	bl	85f04 <__aeabi_dcmpgt>
   845be:	b908      	cbnz	r0, 845c4 <_dtoa_r+0xd74>
   845c0:	e6ae      	b.n	84320 <_dtoa_r+0xad0>
   845c2:	4615      	mov	r5, r2
   845c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   845c8:	1e6a      	subs	r2, r5, #1
   845ca:	2b30      	cmp	r3, #48	; 0x30
   845cc:	d0f9      	beq.n	845c2 <_dtoa_r+0xd72>
   845ce:	e5d7      	b.n	84180 <_dtoa_r+0x930>
   845d0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   845d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   845d6:	9302      	str	r3, [sp, #8]
   845d8:	f7ff bae8 	b.w	83bac <_dtoa_r+0x35c>
   845dc:	970c      	str	r7, [sp, #48]	; 0x30
   845de:	f7ff bba7 	b.w	83d30 <_dtoa_r+0x4e0>
   845e2:	bf00      	nop
   845e4:	401c0000 	.word	0x401c0000
   845e8:	40140000 	.word	0x40140000
   845ec:	00086418 	.word	0x00086418
   845f0:	000863f0 	.word	0x000863f0
   845f4:	3fe00000 	.word	0x3fe00000
   845f8:	40240000 	.word	0x40240000
   845fc:	2b39      	cmp	r3, #57	; 0x39
   845fe:	f8cd b020 	str.w	fp, [sp, #32]
   84602:	46d0      	mov	r8, sl
   84604:	f8dd b01c 	ldr.w	fp, [sp, #28]
   84608:	469a      	mov	sl, r3
   8460a:	d0c8      	beq.n	8459e <_dtoa_r+0xd4e>
   8460c:	f1bb 0f00 	cmp.w	fp, #0
   84610:	f73f aec0 	bgt.w	84394 <_dtoa_r+0xb44>
   84614:	e6c0      	b.n	84398 <_dtoa_r+0xb48>
   84616:	f47f aebf 	bne.w	84398 <_dtoa_r+0xb48>
   8461a:	f01a 0f01 	tst.w	sl, #1
   8461e:	f43f aebb 	beq.w	84398 <_dtoa_r+0xb48>
   84622:	e6b3      	b.n	8438c <_dtoa_r+0xb3c>
   84624:	f04f 0800 	mov.w	r8, #0
   84628:	4646      	mov	r6, r8
   8462a:	e5e8      	b.n	841fe <_dtoa_r+0x9ae>
   8462c:	4631      	mov	r1, r6
   8462e:	2300      	movs	r3, #0
   84630:	220a      	movs	r2, #10
   84632:	4620      	mov	r0, r4
   84634:	f000 fa80 	bl	84b38 <__multadd>
   84638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8463a:	4606      	mov	r6, r0
   8463c:	2b00      	cmp	r3, #0
   8463e:	dd07      	ble.n	84650 <_dtoa_r+0xe00>
   84640:	9307      	str	r3, [sp, #28]
   84642:	f7ff bbab 	b.w	83d9c <_dtoa_r+0x54c>
   84646:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84648:	2b02      	cmp	r3, #2
   8464a:	dc1f      	bgt.n	8468c <_dtoa_r+0xe3c>
   8464c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8464e:	e43c      	b.n	83eca <_dtoa_r+0x67a>
   84650:	9b24      	ldr	r3, [sp, #144]	; 0x90
   84652:	2b02      	cmp	r3, #2
   84654:	dc1a      	bgt.n	8468c <_dtoa_r+0xe3c>
   84656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84658:	e7f2      	b.n	84640 <_dtoa_r+0xdf0>
   8465a:	f43f ab81 	beq.w	83d60 <_dtoa_r+0x510>
   8465e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   84662:	e411      	b.n	83e88 <_dtoa_r+0x638>
   84664:	2500      	movs	r5, #0
   84666:	4620      	mov	r0, r4
   84668:	6465      	str	r5, [r4, #68]	; 0x44
   8466a:	4629      	mov	r1, r5
   8466c:	f000 fa34 	bl	84ad8 <_Balloc>
   84670:	f04f 33ff 	mov.w	r3, #4294967295
   84674:	9307      	str	r3, [sp, #28]
   84676:	930f      	str	r3, [sp, #60]	; 0x3c
   84678:	2301      	movs	r3, #1
   8467a:	9004      	str	r0, [sp, #16]
   8467c:	9525      	str	r5, [sp, #148]	; 0x94
   8467e:	6420      	str	r0, [r4, #64]	; 0x40
   84680:	930b      	str	r3, [sp, #44]	; 0x2c
   84682:	f7ff b9e0 	b.w	83a46 <_dtoa_r+0x1f6>
   84686:	2501      	movs	r5, #1
   84688:	f7ff b9a8 	b.w	839dc <_dtoa_r+0x18c>
   8468c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8468e:	9307      	str	r3, [sp, #28]
   84690:	e5e8      	b.n	84264 <_dtoa_r+0xa14>
   84692:	bf00      	nop

00084694 <__libc_fini_array>:
   84694:	b538      	push	{r3, r4, r5, lr}
   84696:	4c0a      	ldr	r4, [pc, #40]	; (846c0 <__libc_fini_array+0x2c>)
   84698:	4d0a      	ldr	r5, [pc, #40]	; (846c4 <__libc_fini_array+0x30>)
   8469a:	1b64      	subs	r4, r4, r5
   8469c:	10a4      	asrs	r4, r4, #2
   8469e:	d00a      	beq.n	846b6 <__libc_fini_array+0x22>
   846a0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   846a4:	3b01      	subs	r3, #1
   846a6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   846aa:	3c01      	subs	r4, #1
   846ac:	f855 3904 	ldr.w	r3, [r5], #-4
   846b0:	4798      	blx	r3
   846b2:	2c00      	cmp	r4, #0
   846b4:	d1f9      	bne.n	846aa <__libc_fini_array+0x16>
   846b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   846ba:	f001 bfa3 	b.w	86604 <_fini>
   846be:	bf00      	nop
   846c0:	00086614 	.word	0x00086614
   846c4:	00086610 	.word	0x00086610

000846c8 <_malloc_trim_r>:
   846c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   846ca:	460c      	mov	r4, r1
   846cc:	4f23      	ldr	r7, [pc, #140]	; (8475c <_malloc_trim_r+0x94>)
   846ce:	4606      	mov	r6, r0
   846d0:	f7fd fd28 	bl	82124 <__malloc_lock>
   846d4:	68bb      	ldr	r3, [r7, #8]
   846d6:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   846da:	685d      	ldr	r5, [r3, #4]
   846dc:	310f      	adds	r1, #15
   846de:	f025 0503 	bic.w	r5, r5, #3
   846e2:	4429      	add	r1, r5
   846e4:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   846e8:	f021 010f 	bic.w	r1, r1, #15
   846ec:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   846f0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   846f4:	db07      	blt.n	84706 <_malloc_trim_r+0x3e>
   846f6:	2100      	movs	r1, #0
   846f8:	4630      	mov	r0, r6
   846fa:	f7fd fd1f 	bl	8213c <_sbrk_r>
   846fe:	68bb      	ldr	r3, [r7, #8]
   84700:	442b      	add	r3, r5
   84702:	4298      	cmp	r0, r3
   84704:	d004      	beq.n	84710 <_malloc_trim_r+0x48>
   84706:	4630      	mov	r0, r6
   84708:	f7fd fd12 	bl	82130 <__malloc_unlock>
   8470c:	2000      	movs	r0, #0
   8470e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84710:	4261      	negs	r1, r4
   84712:	4630      	mov	r0, r6
   84714:	f7fd fd12 	bl	8213c <_sbrk_r>
   84718:	3001      	adds	r0, #1
   8471a:	d00d      	beq.n	84738 <_malloc_trim_r+0x70>
   8471c:	4b10      	ldr	r3, [pc, #64]	; (84760 <_malloc_trim_r+0x98>)
   8471e:	68ba      	ldr	r2, [r7, #8]
   84720:	6819      	ldr	r1, [r3, #0]
   84722:	1b2d      	subs	r5, r5, r4
   84724:	f045 0501 	orr.w	r5, r5, #1
   84728:	4630      	mov	r0, r6
   8472a:	1b09      	subs	r1, r1, r4
   8472c:	6055      	str	r5, [r2, #4]
   8472e:	6019      	str	r1, [r3, #0]
   84730:	f7fd fcfe 	bl	82130 <__malloc_unlock>
   84734:	2001      	movs	r0, #1
   84736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84738:	2100      	movs	r1, #0
   8473a:	4630      	mov	r0, r6
   8473c:	f7fd fcfe 	bl	8213c <_sbrk_r>
   84740:	68ba      	ldr	r2, [r7, #8]
   84742:	1a83      	subs	r3, r0, r2
   84744:	2b0f      	cmp	r3, #15
   84746:	ddde      	ble.n	84706 <_malloc_trim_r+0x3e>
   84748:	4c06      	ldr	r4, [pc, #24]	; (84764 <_malloc_trim_r+0x9c>)
   8474a:	4905      	ldr	r1, [pc, #20]	; (84760 <_malloc_trim_r+0x98>)
   8474c:	6824      	ldr	r4, [r4, #0]
   8474e:	f043 0301 	orr.w	r3, r3, #1
   84752:	1b00      	subs	r0, r0, r4
   84754:	6053      	str	r3, [r2, #4]
   84756:	6008      	str	r0, [r1, #0]
   84758:	e7d5      	b.n	84706 <_malloc_trim_r+0x3e>
   8475a:	bf00      	nop
   8475c:	20070918 	.word	0x20070918
   84760:	20071034 	.word	0x20071034
   84764:	20070d20 	.word	0x20070d20

00084768 <_free_r>:
   84768:	2900      	cmp	r1, #0
   8476a:	d044      	beq.n	847f6 <_free_r+0x8e>
   8476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84770:	460d      	mov	r5, r1
   84772:	4680      	mov	r8, r0
   84774:	f7fd fcd6 	bl	82124 <__malloc_lock>
   84778:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8477c:	4969      	ldr	r1, [pc, #420]	; (84924 <_free_r+0x1bc>)
   8477e:	f1a5 0408 	sub.w	r4, r5, #8
   84782:	f027 0301 	bic.w	r3, r7, #1
   84786:	18e2      	adds	r2, r4, r3
   84788:	688e      	ldr	r6, [r1, #8]
   8478a:	6850      	ldr	r0, [r2, #4]
   8478c:	42b2      	cmp	r2, r6
   8478e:	f020 0003 	bic.w	r0, r0, #3
   84792:	d05e      	beq.n	84852 <_free_r+0xea>
   84794:	07fe      	lsls	r6, r7, #31
   84796:	6050      	str	r0, [r2, #4]
   84798:	d40b      	bmi.n	847b2 <_free_r+0x4a>
   8479a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8479e:	f101 0e08 	add.w	lr, r1, #8
   847a2:	1be4      	subs	r4, r4, r7
   847a4:	68a5      	ldr	r5, [r4, #8]
   847a6:	443b      	add	r3, r7
   847a8:	4575      	cmp	r5, lr
   847aa:	d06d      	beq.n	84888 <_free_r+0x120>
   847ac:	68e7      	ldr	r7, [r4, #12]
   847ae:	60ef      	str	r7, [r5, #12]
   847b0:	60bd      	str	r5, [r7, #8]
   847b2:	1815      	adds	r5, r2, r0
   847b4:	686d      	ldr	r5, [r5, #4]
   847b6:	07ed      	lsls	r5, r5, #31
   847b8:	d53e      	bpl.n	84838 <_free_r+0xd0>
   847ba:	f043 0201 	orr.w	r2, r3, #1
   847be:	6062      	str	r2, [r4, #4]
   847c0:	50e3      	str	r3, [r4, r3]
   847c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   847c6:	d217      	bcs.n	847f8 <_free_r+0x90>
   847c8:	2201      	movs	r2, #1
   847ca:	08db      	lsrs	r3, r3, #3
   847cc:	1098      	asrs	r0, r3, #2
   847ce:	684d      	ldr	r5, [r1, #4]
   847d0:	4413      	add	r3, r2
   847d2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   847d6:	4082      	lsls	r2, r0
   847d8:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   847dc:	432a      	orrs	r2, r5
   847de:	3808      	subs	r0, #8
   847e0:	60e0      	str	r0, [r4, #12]
   847e2:	60a7      	str	r7, [r4, #8]
   847e4:	604a      	str	r2, [r1, #4]
   847e6:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   847ea:	60fc      	str	r4, [r7, #12]
   847ec:	4640      	mov	r0, r8
   847ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   847f2:	f7fd bc9d 	b.w	82130 <__malloc_unlock>
   847f6:	4770      	bx	lr
   847f8:	0a5a      	lsrs	r2, r3, #9
   847fa:	2a04      	cmp	r2, #4
   847fc:	d852      	bhi.n	848a4 <_free_r+0x13c>
   847fe:	099a      	lsrs	r2, r3, #6
   84800:	f102 0739 	add.w	r7, r2, #57	; 0x39
   84804:	00ff      	lsls	r7, r7, #3
   84806:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8480a:	19c8      	adds	r0, r1, r7
   8480c:	59ca      	ldr	r2, [r1, r7]
   8480e:	3808      	subs	r0, #8
   84810:	4290      	cmp	r0, r2
   84812:	d04f      	beq.n	848b4 <_free_r+0x14c>
   84814:	6851      	ldr	r1, [r2, #4]
   84816:	f021 0103 	bic.w	r1, r1, #3
   8481a:	428b      	cmp	r3, r1
   8481c:	d232      	bcs.n	84884 <_free_r+0x11c>
   8481e:	6892      	ldr	r2, [r2, #8]
   84820:	4290      	cmp	r0, r2
   84822:	d1f7      	bne.n	84814 <_free_r+0xac>
   84824:	68c3      	ldr	r3, [r0, #12]
   84826:	60a0      	str	r0, [r4, #8]
   84828:	60e3      	str	r3, [r4, #12]
   8482a:	609c      	str	r4, [r3, #8]
   8482c:	60c4      	str	r4, [r0, #12]
   8482e:	4640      	mov	r0, r8
   84830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84834:	f7fd bc7c 	b.w	82130 <__malloc_unlock>
   84838:	6895      	ldr	r5, [r2, #8]
   8483a:	4f3b      	ldr	r7, [pc, #236]	; (84928 <_free_r+0x1c0>)
   8483c:	4403      	add	r3, r0
   8483e:	42bd      	cmp	r5, r7
   84840:	d040      	beq.n	848c4 <_free_r+0x15c>
   84842:	68d0      	ldr	r0, [r2, #12]
   84844:	f043 0201 	orr.w	r2, r3, #1
   84848:	60e8      	str	r0, [r5, #12]
   8484a:	6085      	str	r5, [r0, #8]
   8484c:	6062      	str	r2, [r4, #4]
   8484e:	50e3      	str	r3, [r4, r3]
   84850:	e7b7      	b.n	847c2 <_free_r+0x5a>
   84852:	07ff      	lsls	r7, r7, #31
   84854:	4403      	add	r3, r0
   84856:	d407      	bmi.n	84868 <_free_r+0x100>
   84858:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8485c:	1b64      	subs	r4, r4, r5
   8485e:	68e2      	ldr	r2, [r4, #12]
   84860:	68a0      	ldr	r0, [r4, #8]
   84862:	442b      	add	r3, r5
   84864:	60c2      	str	r2, [r0, #12]
   84866:	6090      	str	r0, [r2, #8]
   84868:	4a30      	ldr	r2, [pc, #192]	; (8492c <_free_r+0x1c4>)
   8486a:	f043 0001 	orr.w	r0, r3, #1
   8486e:	6812      	ldr	r2, [r2, #0]
   84870:	6060      	str	r0, [r4, #4]
   84872:	4293      	cmp	r3, r2
   84874:	608c      	str	r4, [r1, #8]
   84876:	d3b9      	bcc.n	847ec <_free_r+0x84>
   84878:	4b2d      	ldr	r3, [pc, #180]	; (84930 <_free_r+0x1c8>)
   8487a:	4640      	mov	r0, r8
   8487c:	6819      	ldr	r1, [r3, #0]
   8487e:	f7ff ff23 	bl	846c8 <_malloc_trim_r>
   84882:	e7b3      	b.n	847ec <_free_r+0x84>
   84884:	4610      	mov	r0, r2
   84886:	e7cd      	b.n	84824 <_free_r+0xbc>
   84888:	1811      	adds	r1, r2, r0
   8488a:	6849      	ldr	r1, [r1, #4]
   8488c:	07c9      	lsls	r1, r1, #31
   8488e:	d444      	bmi.n	8491a <_free_r+0x1b2>
   84890:	6891      	ldr	r1, [r2, #8]
   84892:	4403      	add	r3, r0
   84894:	68d2      	ldr	r2, [r2, #12]
   84896:	f043 0001 	orr.w	r0, r3, #1
   8489a:	60ca      	str	r2, [r1, #12]
   8489c:	6091      	str	r1, [r2, #8]
   8489e:	6060      	str	r0, [r4, #4]
   848a0:	50e3      	str	r3, [r4, r3]
   848a2:	e7a3      	b.n	847ec <_free_r+0x84>
   848a4:	2a14      	cmp	r2, #20
   848a6:	d816      	bhi.n	848d6 <_free_r+0x16e>
   848a8:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   848ac:	00ff      	lsls	r7, r7, #3
   848ae:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   848b2:	e7aa      	b.n	8480a <_free_r+0xa2>
   848b4:	2301      	movs	r3, #1
   848b6:	10aa      	asrs	r2, r5, #2
   848b8:	684d      	ldr	r5, [r1, #4]
   848ba:	4093      	lsls	r3, r2
   848bc:	432b      	orrs	r3, r5
   848be:	604b      	str	r3, [r1, #4]
   848c0:	4603      	mov	r3, r0
   848c2:	e7b0      	b.n	84826 <_free_r+0xbe>
   848c4:	f043 0201 	orr.w	r2, r3, #1
   848c8:	614c      	str	r4, [r1, #20]
   848ca:	610c      	str	r4, [r1, #16]
   848cc:	60e5      	str	r5, [r4, #12]
   848ce:	60a5      	str	r5, [r4, #8]
   848d0:	6062      	str	r2, [r4, #4]
   848d2:	50e3      	str	r3, [r4, r3]
   848d4:	e78a      	b.n	847ec <_free_r+0x84>
   848d6:	2a54      	cmp	r2, #84	; 0x54
   848d8:	d806      	bhi.n	848e8 <_free_r+0x180>
   848da:	0b1a      	lsrs	r2, r3, #12
   848dc:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   848e0:	00ff      	lsls	r7, r7, #3
   848e2:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   848e6:	e790      	b.n	8480a <_free_r+0xa2>
   848e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   848ec:	d806      	bhi.n	848fc <_free_r+0x194>
   848ee:	0bda      	lsrs	r2, r3, #15
   848f0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   848f4:	00ff      	lsls	r7, r7, #3
   848f6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   848fa:	e786      	b.n	8480a <_free_r+0xa2>
   848fc:	f240 5054 	movw	r0, #1364	; 0x554
   84900:	4282      	cmp	r2, r0
   84902:	d806      	bhi.n	84912 <_free_r+0x1aa>
   84904:	0c9a      	lsrs	r2, r3, #18
   84906:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8490a:	00ff      	lsls	r7, r7, #3
   8490c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84910:	e77b      	b.n	8480a <_free_r+0xa2>
   84912:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   84916:	257e      	movs	r5, #126	; 0x7e
   84918:	e777      	b.n	8480a <_free_r+0xa2>
   8491a:	f043 0101 	orr.w	r1, r3, #1
   8491e:	6061      	str	r1, [r4, #4]
   84920:	6013      	str	r3, [r2, #0]
   84922:	e763      	b.n	847ec <_free_r+0x84>
   84924:	20070918 	.word	0x20070918
   84928:	20070920 	.word	0x20070920
   8492c:	20070d24 	.word	0x20070d24
   84930:	20071064 	.word	0x20071064

00084934 <_localeconv_r>:
   84934:	4a04      	ldr	r2, [pc, #16]	; (84948 <_localeconv_r+0x14>)
   84936:	4b05      	ldr	r3, [pc, #20]	; (8494c <_localeconv_r+0x18>)
   84938:	6812      	ldr	r2, [r2, #0]
   8493a:	6b50      	ldr	r0, [r2, #52]	; 0x34
   8493c:	2800      	cmp	r0, #0
   8493e:	bf08      	it	eq
   84940:	4618      	moveq	r0, r3
   84942:	30f0      	adds	r0, #240	; 0xf0
   84944:	4770      	bx	lr
   84946:	bf00      	nop
   84948:	200704ec 	.word	0x200704ec
   8494c:	20070d2c 	.word	0x20070d2c

00084950 <__retarget_lock_acquire_recursive>:
   84950:	4770      	bx	lr
   84952:	bf00      	nop

00084954 <__retarget_lock_release_recursive>:
   84954:	4770      	bx	lr
   84956:	bf00      	nop

00084958 <__ascii_mbtowc>:
   84958:	b082      	sub	sp, #8
   8495a:	b149      	cbz	r1, 84970 <__ascii_mbtowc+0x18>
   8495c:	b15a      	cbz	r2, 84976 <__ascii_mbtowc+0x1e>
   8495e:	b16b      	cbz	r3, 8497c <__ascii_mbtowc+0x24>
   84960:	7813      	ldrb	r3, [r2, #0]
   84962:	600b      	str	r3, [r1, #0]
   84964:	7812      	ldrb	r2, [r2, #0]
   84966:	1c10      	adds	r0, r2, #0
   84968:	bf18      	it	ne
   8496a:	2001      	movne	r0, #1
   8496c:	b002      	add	sp, #8
   8496e:	4770      	bx	lr
   84970:	a901      	add	r1, sp, #4
   84972:	2a00      	cmp	r2, #0
   84974:	d1f3      	bne.n	8495e <__ascii_mbtowc+0x6>
   84976:	4610      	mov	r0, r2
   84978:	b002      	add	sp, #8
   8497a:	4770      	bx	lr
   8497c:	f06f 0001 	mvn.w	r0, #1
   84980:	e7f4      	b.n	8496c <__ascii_mbtowc+0x14>
   84982:	bf00      	nop

00084984 <memchr>:
   84984:	0783      	lsls	r3, r0, #30
   84986:	b470      	push	{r4, r5, r6}
   84988:	b2cd      	uxtb	r5, r1
   8498a:	d03d      	beq.n	84a08 <memchr+0x84>
   8498c:	1e54      	subs	r4, r2, #1
   8498e:	b30a      	cbz	r2, 849d4 <memchr+0x50>
   84990:	7803      	ldrb	r3, [r0, #0]
   84992:	42ab      	cmp	r3, r5
   84994:	d01f      	beq.n	849d6 <memchr+0x52>
   84996:	1c43      	adds	r3, r0, #1
   84998:	e005      	b.n	849a6 <memchr+0x22>
   8499a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8499e:	d319      	bcc.n	849d4 <memchr+0x50>
   849a0:	7802      	ldrb	r2, [r0, #0]
   849a2:	42aa      	cmp	r2, r5
   849a4:	d017      	beq.n	849d6 <memchr+0x52>
   849a6:	f013 0f03 	tst.w	r3, #3
   849aa:	4618      	mov	r0, r3
   849ac:	f103 0301 	add.w	r3, r3, #1
   849b0:	d1f3      	bne.n	8499a <memchr+0x16>
   849b2:	2c03      	cmp	r4, #3
   849b4:	d811      	bhi.n	849da <memchr+0x56>
   849b6:	b34c      	cbz	r4, 84a0c <memchr+0x88>
   849b8:	7803      	ldrb	r3, [r0, #0]
   849ba:	42ab      	cmp	r3, r5
   849bc:	d00b      	beq.n	849d6 <memchr+0x52>
   849be:	4404      	add	r4, r0
   849c0:	1c43      	adds	r3, r0, #1
   849c2:	e002      	b.n	849ca <memchr+0x46>
   849c4:	7802      	ldrb	r2, [r0, #0]
   849c6:	42aa      	cmp	r2, r5
   849c8:	d005      	beq.n	849d6 <memchr+0x52>
   849ca:	429c      	cmp	r4, r3
   849cc:	4618      	mov	r0, r3
   849ce:	f103 0301 	add.w	r3, r3, #1
   849d2:	d1f7      	bne.n	849c4 <memchr+0x40>
   849d4:	2000      	movs	r0, #0
   849d6:	bc70      	pop	{r4, r5, r6}
   849d8:	4770      	bx	lr
   849da:	0209      	lsls	r1, r1, #8
   849dc:	b289      	uxth	r1, r1
   849de:	4329      	orrs	r1, r5
   849e0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   849e4:	6803      	ldr	r3, [r0, #0]
   849e6:	4606      	mov	r6, r0
   849e8:	404b      	eors	r3, r1
   849ea:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   849ee:	ea22 0303 	bic.w	r3, r2, r3
   849f2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   849f6:	f100 0004 	add.w	r0, r0, #4
   849fa:	d103      	bne.n	84a04 <memchr+0x80>
   849fc:	3c04      	subs	r4, #4
   849fe:	2c03      	cmp	r4, #3
   84a00:	d8f0      	bhi.n	849e4 <memchr+0x60>
   84a02:	e7d8      	b.n	849b6 <memchr+0x32>
   84a04:	4630      	mov	r0, r6
   84a06:	e7d7      	b.n	849b8 <memchr+0x34>
   84a08:	4614      	mov	r4, r2
   84a0a:	e7d2      	b.n	849b2 <memchr+0x2e>
   84a0c:	4620      	mov	r0, r4
   84a0e:	e7e2      	b.n	849d6 <memchr+0x52>

00084a10 <memmove>:
   84a10:	4288      	cmp	r0, r1
   84a12:	b5f0      	push	{r4, r5, r6, r7, lr}
   84a14:	d90d      	bls.n	84a32 <memmove+0x22>
   84a16:	188b      	adds	r3, r1, r2
   84a18:	4298      	cmp	r0, r3
   84a1a:	d20a      	bcs.n	84a32 <memmove+0x22>
   84a1c:	1884      	adds	r4, r0, r2
   84a1e:	2a00      	cmp	r2, #0
   84a20:	d051      	beq.n	84ac6 <memmove+0xb6>
   84a22:	4622      	mov	r2, r4
   84a24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84a28:	4299      	cmp	r1, r3
   84a2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84a2e:	d1f9      	bne.n	84a24 <memmove+0x14>
   84a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84a32:	2a0f      	cmp	r2, #15
   84a34:	d948      	bls.n	84ac8 <memmove+0xb8>
   84a36:	ea41 0300 	orr.w	r3, r1, r0
   84a3a:	079b      	lsls	r3, r3, #30
   84a3c:	d146      	bne.n	84acc <memmove+0xbc>
   84a3e:	4615      	mov	r5, r2
   84a40:	f100 0410 	add.w	r4, r0, #16
   84a44:	f101 0310 	add.w	r3, r1, #16
   84a48:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84a4c:	3d10      	subs	r5, #16
   84a4e:	f844 6c10 	str.w	r6, [r4, #-16]
   84a52:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84a56:	2d0f      	cmp	r5, #15
   84a58:	f844 6c0c 	str.w	r6, [r4, #-12]
   84a5c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84a60:	f104 0410 	add.w	r4, r4, #16
   84a64:	f844 6c18 	str.w	r6, [r4, #-24]
   84a68:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84a6c:	f103 0310 	add.w	r3, r3, #16
   84a70:	f844 6c14 	str.w	r6, [r4, #-20]
   84a74:	d8e8      	bhi.n	84a48 <memmove+0x38>
   84a76:	f1a2 0310 	sub.w	r3, r2, #16
   84a7a:	f023 030f 	bic.w	r3, r3, #15
   84a7e:	f002 0e0f 	and.w	lr, r2, #15
   84a82:	3310      	adds	r3, #16
   84a84:	f1be 0f03 	cmp.w	lr, #3
   84a88:	4419      	add	r1, r3
   84a8a:	4403      	add	r3, r0
   84a8c:	d921      	bls.n	84ad2 <memmove+0xc2>
   84a8e:	460e      	mov	r6, r1
   84a90:	4674      	mov	r4, lr
   84a92:	1f1d      	subs	r5, r3, #4
   84a94:	f856 7b04 	ldr.w	r7, [r6], #4
   84a98:	3c04      	subs	r4, #4
   84a9a:	2c03      	cmp	r4, #3
   84a9c:	f845 7f04 	str.w	r7, [r5, #4]!
   84aa0:	d8f8      	bhi.n	84a94 <memmove+0x84>
   84aa2:	f1ae 0404 	sub.w	r4, lr, #4
   84aa6:	f024 0403 	bic.w	r4, r4, #3
   84aaa:	3404      	adds	r4, #4
   84aac:	4421      	add	r1, r4
   84aae:	4423      	add	r3, r4
   84ab0:	f002 0203 	and.w	r2, r2, #3
   84ab4:	b162      	cbz	r2, 84ad0 <memmove+0xc0>
   84ab6:	3b01      	subs	r3, #1
   84ab8:	440a      	add	r2, r1
   84aba:	f811 4b01 	ldrb.w	r4, [r1], #1
   84abe:	428a      	cmp	r2, r1
   84ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
   84ac4:	d1f9      	bne.n	84aba <memmove+0xaa>
   84ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ac8:	4603      	mov	r3, r0
   84aca:	e7f3      	b.n	84ab4 <memmove+0xa4>
   84acc:	4603      	mov	r3, r0
   84ace:	e7f2      	b.n	84ab6 <memmove+0xa6>
   84ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ad2:	4672      	mov	r2, lr
   84ad4:	e7ee      	b.n	84ab4 <memmove+0xa4>
   84ad6:	bf00      	nop

00084ad8 <_Balloc>:
   84ad8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84ada:	b570      	push	{r4, r5, r6, lr}
   84adc:	4605      	mov	r5, r0
   84ade:	460c      	mov	r4, r1
   84ae0:	b14b      	cbz	r3, 84af6 <_Balloc+0x1e>
   84ae2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   84ae6:	b180      	cbz	r0, 84b0a <_Balloc+0x32>
   84ae8:	6802      	ldr	r2, [r0, #0]
   84aea:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   84aee:	2300      	movs	r3, #0
   84af0:	6103      	str	r3, [r0, #16]
   84af2:	60c3      	str	r3, [r0, #12]
   84af4:	bd70      	pop	{r4, r5, r6, pc}
   84af6:	2221      	movs	r2, #33	; 0x21
   84af8:	2104      	movs	r1, #4
   84afa:	f000 fd8b 	bl	85614 <_calloc_r>
   84afe:	64e8      	str	r0, [r5, #76]	; 0x4c
   84b00:	4603      	mov	r3, r0
   84b02:	2800      	cmp	r0, #0
   84b04:	d1ed      	bne.n	84ae2 <_Balloc+0xa>
   84b06:	2000      	movs	r0, #0
   84b08:	bd70      	pop	{r4, r5, r6, pc}
   84b0a:	2101      	movs	r1, #1
   84b0c:	fa01 f604 	lsl.w	r6, r1, r4
   84b10:	1d72      	adds	r2, r6, #5
   84b12:	4628      	mov	r0, r5
   84b14:	0092      	lsls	r2, r2, #2
   84b16:	f000 fd7d 	bl	85614 <_calloc_r>
   84b1a:	2800      	cmp	r0, #0
   84b1c:	d0f3      	beq.n	84b06 <_Balloc+0x2e>
   84b1e:	6044      	str	r4, [r0, #4]
   84b20:	6086      	str	r6, [r0, #8]
   84b22:	e7e4      	b.n	84aee <_Balloc+0x16>

00084b24 <_Bfree>:
   84b24:	b131      	cbz	r1, 84b34 <_Bfree+0x10>
   84b26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   84b28:	684a      	ldr	r2, [r1, #4]
   84b2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   84b2e:	6008      	str	r0, [r1, #0]
   84b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   84b34:	4770      	bx	lr
   84b36:	bf00      	nop

00084b38 <__multadd>:
   84b38:	b5f0      	push	{r4, r5, r6, r7, lr}
   84b3a:	460c      	mov	r4, r1
   84b3c:	4605      	mov	r5, r0
   84b3e:	f04f 0e00 	mov.w	lr, #0
   84b42:	690e      	ldr	r6, [r1, #16]
   84b44:	b083      	sub	sp, #12
   84b46:	f101 0714 	add.w	r7, r1, #20
   84b4a:	6838      	ldr	r0, [r7, #0]
   84b4c:	f10e 0e01 	add.w	lr, lr, #1
   84b50:	b281      	uxth	r1, r0
   84b52:	fb02 3301 	mla	r3, r2, r1, r3
   84b56:	0c01      	lsrs	r1, r0, #16
   84b58:	0c18      	lsrs	r0, r3, #16
   84b5a:	fb02 0101 	mla	r1, r2, r1, r0
   84b5e:	b29b      	uxth	r3, r3
   84b60:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   84b64:	4576      	cmp	r6, lr
   84b66:	f847 3b04 	str.w	r3, [r7], #4
   84b6a:	ea4f 4311 	mov.w	r3, r1, lsr #16
   84b6e:	dcec      	bgt.n	84b4a <__multadd+0x12>
   84b70:	b13b      	cbz	r3, 84b82 <__multadd+0x4a>
   84b72:	68a2      	ldr	r2, [r4, #8]
   84b74:	4296      	cmp	r6, r2
   84b76:	da07      	bge.n	84b88 <__multadd+0x50>
   84b78:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   84b7c:	3601      	adds	r6, #1
   84b7e:	6153      	str	r3, [r2, #20]
   84b80:	6126      	str	r6, [r4, #16]
   84b82:	4620      	mov	r0, r4
   84b84:	b003      	add	sp, #12
   84b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84b88:	6861      	ldr	r1, [r4, #4]
   84b8a:	4628      	mov	r0, r5
   84b8c:	3101      	adds	r1, #1
   84b8e:	9301      	str	r3, [sp, #4]
   84b90:	f7ff ffa2 	bl	84ad8 <_Balloc>
   84b94:	4607      	mov	r7, r0
   84b96:	6922      	ldr	r2, [r4, #16]
   84b98:	f104 010c 	add.w	r1, r4, #12
   84b9c:	3202      	adds	r2, #2
   84b9e:	0092      	lsls	r2, r2, #2
   84ba0:	300c      	adds	r0, #12
   84ba2:	f7fd f9fb 	bl	81f9c <memcpy>
   84ba6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   84ba8:	6861      	ldr	r1, [r4, #4]
   84baa:	9b01      	ldr	r3, [sp, #4]
   84bac:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   84bb0:	6020      	str	r0, [r4, #0]
   84bb2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   84bb6:	463c      	mov	r4, r7
   84bb8:	e7de      	b.n	84b78 <__multadd+0x40>
   84bba:	bf00      	nop

00084bbc <__hi0bits>:
   84bbc:	0c02      	lsrs	r2, r0, #16
   84bbe:	0412      	lsls	r2, r2, #16
   84bc0:	4603      	mov	r3, r0
   84bc2:	b9b2      	cbnz	r2, 84bf2 <__hi0bits+0x36>
   84bc4:	0403      	lsls	r3, r0, #16
   84bc6:	2010      	movs	r0, #16
   84bc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   84bcc:	bf04      	itt	eq
   84bce:	021b      	lsleq	r3, r3, #8
   84bd0:	3008      	addeq	r0, #8
   84bd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   84bd6:	bf04      	itt	eq
   84bd8:	011b      	lsleq	r3, r3, #4
   84bda:	3004      	addeq	r0, #4
   84bdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   84be0:	bf04      	itt	eq
   84be2:	009b      	lsleq	r3, r3, #2
   84be4:	3002      	addeq	r0, #2
   84be6:	2b00      	cmp	r3, #0
   84be8:	db02      	blt.n	84bf0 <__hi0bits+0x34>
   84bea:	005b      	lsls	r3, r3, #1
   84bec:	d403      	bmi.n	84bf6 <__hi0bits+0x3a>
   84bee:	2020      	movs	r0, #32
   84bf0:	4770      	bx	lr
   84bf2:	2000      	movs	r0, #0
   84bf4:	e7e8      	b.n	84bc8 <__hi0bits+0xc>
   84bf6:	3001      	adds	r0, #1
   84bf8:	4770      	bx	lr
   84bfa:	bf00      	nop

00084bfc <__lo0bits>:
   84bfc:	6803      	ldr	r3, [r0, #0]
   84bfe:	4601      	mov	r1, r0
   84c00:	f013 0207 	ands.w	r2, r3, #7
   84c04:	d007      	beq.n	84c16 <__lo0bits+0x1a>
   84c06:	07da      	lsls	r2, r3, #31
   84c08:	d421      	bmi.n	84c4e <__lo0bits+0x52>
   84c0a:	0798      	lsls	r0, r3, #30
   84c0c:	d421      	bmi.n	84c52 <__lo0bits+0x56>
   84c0e:	089b      	lsrs	r3, r3, #2
   84c10:	600b      	str	r3, [r1, #0]
   84c12:	2002      	movs	r0, #2
   84c14:	4770      	bx	lr
   84c16:	b298      	uxth	r0, r3
   84c18:	b198      	cbz	r0, 84c42 <__lo0bits+0x46>
   84c1a:	4610      	mov	r0, r2
   84c1c:	f013 0fff 	tst.w	r3, #255	; 0xff
   84c20:	bf04      	itt	eq
   84c22:	0a1b      	lsreq	r3, r3, #8
   84c24:	3008      	addeq	r0, #8
   84c26:	071a      	lsls	r2, r3, #28
   84c28:	bf04      	itt	eq
   84c2a:	091b      	lsreq	r3, r3, #4
   84c2c:	3004      	addeq	r0, #4
   84c2e:	079a      	lsls	r2, r3, #30
   84c30:	bf04      	itt	eq
   84c32:	089b      	lsreq	r3, r3, #2
   84c34:	3002      	addeq	r0, #2
   84c36:	07da      	lsls	r2, r3, #31
   84c38:	d407      	bmi.n	84c4a <__lo0bits+0x4e>
   84c3a:	085b      	lsrs	r3, r3, #1
   84c3c:	d104      	bne.n	84c48 <__lo0bits+0x4c>
   84c3e:	2020      	movs	r0, #32
   84c40:	4770      	bx	lr
   84c42:	0c1b      	lsrs	r3, r3, #16
   84c44:	2010      	movs	r0, #16
   84c46:	e7e9      	b.n	84c1c <__lo0bits+0x20>
   84c48:	3001      	adds	r0, #1
   84c4a:	600b      	str	r3, [r1, #0]
   84c4c:	4770      	bx	lr
   84c4e:	2000      	movs	r0, #0
   84c50:	4770      	bx	lr
   84c52:	085b      	lsrs	r3, r3, #1
   84c54:	600b      	str	r3, [r1, #0]
   84c56:	2001      	movs	r0, #1
   84c58:	4770      	bx	lr
   84c5a:	bf00      	nop

00084c5c <__i2b>:
   84c5c:	b510      	push	{r4, lr}
   84c5e:	460c      	mov	r4, r1
   84c60:	2101      	movs	r1, #1
   84c62:	f7ff ff39 	bl	84ad8 <_Balloc>
   84c66:	2201      	movs	r2, #1
   84c68:	6144      	str	r4, [r0, #20]
   84c6a:	6102      	str	r2, [r0, #16]
   84c6c:	bd10      	pop	{r4, pc}
   84c6e:	bf00      	nop

00084c70 <__multiply>:
   84c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c74:	690c      	ldr	r4, [r1, #16]
   84c76:	6915      	ldr	r5, [r2, #16]
   84c78:	b083      	sub	sp, #12
   84c7a:	42ac      	cmp	r4, r5
   84c7c:	468b      	mov	fp, r1
   84c7e:	4616      	mov	r6, r2
   84c80:	da04      	bge.n	84c8c <__multiply+0x1c>
   84c82:	4622      	mov	r2, r4
   84c84:	46b3      	mov	fp, r6
   84c86:	462c      	mov	r4, r5
   84c88:	460e      	mov	r6, r1
   84c8a:	4615      	mov	r5, r2
   84c8c:	f8db 3008 	ldr.w	r3, [fp, #8]
   84c90:	eb04 0805 	add.w	r8, r4, r5
   84c94:	f8db 1004 	ldr.w	r1, [fp, #4]
   84c98:	4598      	cmp	r8, r3
   84c9a:	bfc8      	it	gt
   84c9c:	3101      	addgt	r1, #1
   84c9e:	f7ff ff1b 	bl	84ad8 <_Balloc>
   84ca2:	f100 0914 	add.w	r9, r0, #20
   84ca6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   84caa:	45d1      	cmp	r9, sl
   84cac:	9000      	str	r0, [sp, #0]
   84cae:	d205      	bcs.n	84cbc <__multiply+0x4c>
   84cb0:	464b      	mov	r3, r9
   84cb2:	2100      	movs	r1, #0
   84cb4:	f843 1b04 	str.w	r1, [r3], #4
   84cb8:	459a      	cmp	sl, r3
   84cba:	d8fb      	bhi.n	84cb4 <__multiply+0x44>
   84cbc:	f106 0c14 	add.w	ip, r6, #20
   84cc0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   84cc4:	f10b 0b14 	add.w	fp, fp, #20
   84cc8:	459c      	cmp	ip, r3
   84cca:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   84cce:	d24b      	bcs.n	84d68 <__multiply+0xf8>
   84cd0:	f8cd a004 	str.w	sl, [sp, #4]
   84cd4:	469a      	mov	sl, r3
   84cd6:	f8dc 5000 	ldr.w	r5, [ip]
   84cda:	b2af      	uxth	r7, r5
   84cdc:	b1e7      	cbz	r7, 84d18 <__multiply+0xa8>
   84cde:	464d      	mov	r5, r9
   84ce0:	465e      	mov	r6, fp
   84ce2:	2100      	movs	r1, #0
   84ce4:	f856 2b04 	ldr.w	r2, [r6], #4
   84ce8:	6828      	ldr	r0, [r5, #0]
   84cea:	b293      	uxth	r3, r2
   84cec:	b284      	uxth	r4, r0
   84cee:	0c12      	lsrs	r2, r2, #16
   84cf0:	fb07 4303 	mla	r3, r7, r3, r4
   84cf4:	0c00      	lsrs	r0, r0, #16
   84cf6:	fb07 0202 	mla	r2, r7, r2, r0
   84cfa:	440b      	add	r3, r1
   84cfc:	eb02 4113 	add.w	r1, r2, r3, lsr #16
   84d00:	b29b      	uxth	r3, r3
   84d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   84d06:	45b6      	cmp	lr, r6
   84d08:	f845 3b04 	str.w	r3, [r5], #4
   84d0c:	ea4f 4111 	mov.w	r1, r1, lsr #16
   84d10:	d8e8      	bhi.n	84ce4 <__multiply+0x74>
   84d12:	6029      	str	r1, [r5, #0]
   84d14:	f8dc 5000 	ldr.w	r5, [ip]
   84d18:	0c2d      	lsrs	r5, r5, #16
   84d1a:	d01d      	beq.n	84d58 <__multiply+0xe8>
   84d1c:	f8d9 3000 	ldr.w	r3, [r9]
   84d20:	4648      	mov	r0, r9
   84d22:	461c      	mov	r4, r3
   84d24:	4659      	mov	r1, fp
   84d26:	2200      	movs	r2, #0
   84d28:	880e      	ldrh	r6, [r1, #0]
   84d2a:	0c24      	lsrs	r4, r4, #16
   84d2c:	fb05 4406 	mla	r4, r5, r6, r4
   84d30:	b29b      	uxth	r3, r3
   84d32:	4422      	add	r2, r4
   84d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   84d38:	f840 3b04 	str.w	r3, [r0], #4
   84d3c:	f851 3b04 	ldr.w	r3, [r1], #4
   84d40:	6804      	ldr	r4, [r0, #0]
   84d42:	0c1b      	lsrs	r3, r3, #16
   84d44:	b2a6      	uxth	r6, r4
   84d46:	fb05 6303 	mla	r3, r5, r3, r6
   84d4a:	458e      	cmp	lr, r1
   84d4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   84d50:	ea4f 4213 	mov.w	r2, r3, lsr #16
   84d54:	d8e8      	bhi.n	84d28 <__multiply+0xb8>
   84d56:	6003      	str	r3, [r0, #0]
   84d58:	f10c 0c04 	add.w	ip, ip, #4
   84d5c:	45e2      	cmp	sl, ip
   84d5e:	f109 0904 	add.w	r9, r9, #4
   84d62:	d8b8      	bhi.n	84cd6 <__multiply+0x66>
   84d64:	f8dd a004 	ldr.w	sl, [sp, #4]
   84d68:	f1b8 0f00 	cmp.w	r8, #0
   84d6c:	dd0b      	ble.n	84d86 <__multiply+0x116>
   84d6e:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   84d72:	f1aa 0a04 	sub.w	sl, sl, #4
   84d76:	b11b      	cbz	r3, 84d80 <__multiply+0x110>
   84d78:	e005      	b.n	84d86 <__multiply+0x116>
   84d7a:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   84d7e:	b913      	cbnz	r3, 84d86 <__multiply+0x116>
   84d80:	f1b8 0801 	subs.w	r8, r8, #1
   84d84:	d1f9      	bne.n	84d7a <__multiply+0x10a>
   84d86:	9800      	ldr	r0, [sp, #0]
   84d88:	f8c0 8010 	str.w	r8, [r0, #16]
   84d8c:	b003      	add	sp, #12
   84d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d92:	bf00      	nop

00084d94 <__pow5mult>:
   84d94:	f012 0303 	ands.w	r3, r2, #3
   84d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d9c:	4614      	mov	r4, r2
   84d9e:	4607      	mov	r7, r0
   84da0:	d12e      	bne.n	84e00 <__pow5mult+0x6c>
   84da2:	460d      	mov	r5, r1
   84da4:	10a4      	asrs	r4, r4, #2
   84da6:	d01c      	beq.n	84de2 <__pow5mult+0x4e>
   84da8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   84daa:	b396      	cbz	r6, 84e12 <__pow5mult+0x7e>
   84dac:	07e3      	lsls	r3, r4, #31
   84dae:	f04f 0800 	mov.w	r8, #0
   84db2:	d406      	bmi.n	84dc2 <__pow5mult+0x2e>
   84db4:	1064      	asrs	r4, r4, #1
   84db6:	d014      	beq.n	84de2 <__pow5mult+0x4e>
   84db8:	6830      	ldr	r0, [r6, #0]
   84dba:	b1a8      	cbz	r0, 84de8 <__pow5mult+0x54>
   84dbc:	4606      	mov	r6, r0
   84dbe:	07e3      	lsls	r3, r4, #31
   84dc0:	d5f8      	bpl.n	84db4 <__pow5mult+0x20>
   84dc2:	4632      	mov	r2, r6
   84dc4:	4629      	mov	r1, r5
   84dc6:	4638      	mov	r0, r7
   84dc8:	f7ff ff52 	bl	84c70 <__multiply>
   84dcc:	b1b5      	cbz	r5, 84dfc <__pow5mult+0x68>
   84dce:	686a      	ldr	r2, [r5, #4]
   84dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   84dd2:	1064      	asrs	r4, r4, #1
   84dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   84dd8:	6029      	str	r1, [r5, #0]
   84dda:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   84dde:	4605      	mov	r5, r0
   84de0:	d1ea      	bne.n	84db8 <__pow5mult+0x24>
   84de2:	4628      	mov	r0, r5
   84de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84de8:	4632      	mov	r2, r6
   84dea:	4631      	mov	r1, r6
   84dec:	4638      	mov	r0, r7
   84dee:	f7ff ff3f 	bl	84c70 <__multiply>
   84df2:	6030      	str	r0, [r6, #0]
   84df4:	f8c0 8000 	str.w	r8, [r0]
   84df8:	4606      	mov	r6, r0
   84dfa:	e7e0      	b.n	84dbe <__pow5mult+0x2a>
   84dfc:	4605      	mov	r5, r0
   84dfe:	e7d9      	b.n	84db4 <__pow5mult+0x20>
   84e00:	4a0b      	ldr	r2, [pc, #44]	; (84e30 <__pow5mult+0x9c>)
   84e02:	3b01      	subs	r3, #1
   84e04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   84e08:	2300      	movs	r3, #0
   84e0a:	f7ff fe95 	bl	84b38 <__multadd>
   84e0e:	4605      	mov	r5, r0
   84e10:	e7c8      	b.n	84da4 <__pow5mult+0x10>
   84e12:	2101      	movs	r1, #1
   84e14:	4638      	mov	r0, r7
   84e16:	f7ff fe5f 	bl	84ad8 <_Balloc>
   84e1a:	f240 2171 	movw	r1, #625	; 0x271
   84e1e:	2201      	movs	r2, #1
   84e20:	2300      	movs	r3, #0
   84e22:	6141      	str	r1, [r0, #20]
   84e24:	6102      	str	r2, [r0, #16]
   84e26:	4606      	mov	r6, r0
   84e28:	64b8      	str	r0, [r7, #72]	; 0x48
   84e2a:	6003      	str	r3, [r0, #0]
   84e2c:	e7be      	b.n	84dac <__pow5mult+0x18>
   84e2e:	bf00      	nop
   84e30:	000864e0 	.word	0x000864e0

00084e34 <__lshift>:
   84e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84e38:	690b      	ldr	r3, [r1, #16]
   84e3a:	1154      	asrs	r4, r2, #5
   84e3c:	eb04 0803 	add.w	r8, r4, r3
   84e40:	688b      	ldr	r3, [r1, #8]
   84e42:	f108 0501 	add.w	r5, r8, #1
   84e46:	429d      	cmp	r5, r3
   84e48:	460e      	mov	r6, r1
   84e4a:	4691      	mov	r9, r2
   84e4c:	4607      	mov	r7, r0
   84e4e:	6849      	ldr	r1, [r1, #4]
   84e50:	dd04      	ble.n	84e5c <__lshift+0x28>
   84e52:	005b      	lsls	r3, r3, #1
   84e54:	429d      	cmp	r5, r3
   84e56:	f101 0101 	add.w	r1, r1, #1
   84e5a:	dcfa      	bgt.n	84e52 <__lshift+0x1e>
   84e5c:	4638      	mov	r0, r7
   84e5e:	f7ff fe3b 	bl	84ad8 <_Balloc>
   84e62:	2c00      	cmp	r4, #0
   84e64:	f100 0314 	add.w	r3, r0, #20
   84e68:	dd06      	ble.n	84e78 <__lshift+0x44>
   84e6a:	2100      	movs	r1, #0
   84e6c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   84e70:	f843 1b04 	str.w	r1, [r3], #4
   84e74:	429a      	cmp	r2, r3
   84e76:	d1fb      	bne.n	84e70 <__lshift+0x3c>
   84e78:	6934      	ldr	r4, [r6, #16]
   84e7a:	f106 0114 	add.w	r1, r6, #20
   84e7e:	f019 091f 	ands.w	r9, r9, #31
   84e82:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   84e86:	d01d      	beq.n	84ec4 <__lshift+0x90>
   84e88:	2200      	movs	r2, #0
   84e8a:	f1c9 0c20 	rsb	ip, r9, #32
   84e8e:	680c      	ldr	r4, [r1, #0]
   84e90:	fa04 f409 	lsl.w	r4, r4, r9
   84e94:	4314      	orrs	r4, r2
   84e96:	f843 4b04 	str.w	r4, [r3], #4
   84e9a:	f851 2b04 	ldr.w	r2, [r1], #4
   84e9e:	458e      	cmp	lr, r1
   84ea0:	fa22 f20c 	lsr.w	r2, r2, ip
   84ea4:	d8f3      	bhi.n	84e8e <__lshift+0x5a>
   84ea6:	601a      	str	r2, [r3, #0]
   84ea8:	b10a      	cbz	r2, 84eae <__lshift+0x7a>
   84eaa:	f108 0502 	add.w	r5, r8, #2
   84eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   84eb0:	6872      	ldr	r2, [r6, #4]
   84eb2:	3d01      	subs	r5, #1
   84eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   84eb8:	6105      	str	r5, [r0, #16]
   84eba:	6031      	str	r1, [r6, #0]
   84ebc:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   84ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84ec4:	3b04      	subs	r3, #4
   84ec6:	f851 2b04 	ldr.w	r2, [r1], #4
   84eca:	458e      	cmp	lr, r1
   84ecc:	f843 2f04 	str.w	r2, [r3, #4]!
   84ed0:	d8f9      	bhi.n	84ec6 <__lshift+0x92>
   84ed2:	e7ec      	b.n	84eae <__lshift+0x7a>

00084ed4 <__mcmp>:
   84ed4:	b430      	push	{r4, r5}
   84ed6:	690b      	ldr	r3, [r1, #16]
   84ed8:	4605      	mov	r5, r0
   84eda:	6900      	ldr	r0, [r0, #16]
   84edc:	1ac0      	subs	r0, r0, r3
   84ede:	d10f      	bne.n	84f00 <__mcmp+0x2c>
   84ee0:	009b      	lsls	r3, r3, #2
   84ee2:	3514      	adds	r5, #20
   84ee4:	3114      	adds	r1, #20
   84ee6:	4419      	add	r1, r3
   84ee8:	442b      	add	r3, r5
   84eea:	e001      	b.n	84ef0 <__mcmp+0x1c>
   84eec:	429d      	cmp	r5, r3
   84eee:	d207      	bcs.n	84f00 <__mcmp+0x2c>
   84ef0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   84ef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   84ef8:	4294      	cmp	r4, r2
   84efa:	d0f7      	beq.n	84eec <__mcmp+0x18>
   84efc:	d302      	bcc.n	84f04 <__mcmp+0x30>
   84efe:	2001      	movs	r0, #1
   84f00:	bc30      	pop	{r4, r5}
   84f02:	4770      	bx	lr
   84f04:	f04f 30ff 	mov.w	r0, #4294967295
   84f08:	e7fa      	b.n	84f00 <__mcmp+0x2c>
   84f0a:	bf00      	nop

00084f0c <__mdiff>:
   84f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f10:	690c      	ldr	r4, [r1, #16]
   84f12:	4689      	mov	r9, r1
   84f14:	6911      	ldr	r1, [r2, #16]
   84f16:	4692      	mov	sl, r2
   84f18:	1a64      	subs	r4, r4, r1
   84f1a:	2c00      	cmp	r4, #0
   84f1c:	d117      	bne.n	84f4e <__mdiff+0x42>
   84f1e:	0089      	lsls	r1, r1, #2
   84f20:	f109 0714 	add.w	r7, r9, #20
   84f24:	f102 0614 	add.w	r6, r2, #20
   84f28:	187b      	adds	r3, r7, r1
   84f2a:	4431      	add	r1, r6
   84f2c:	e001      	b.n	84f32 <__mdiff+0x26>
   84f2e:	429f      	cmp	r7, r3
   84f30:	d265      	bcs.n	84ffe <__mdiff+0xf2>
   84f32:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   84f36:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   84f3a:	4295      	cmp	r5, r2
   84f3c:	d0f7      	beq.n	84f2e <__mdiff+0x22>
   84f3e:	d267      	bcs.n	85010 <__mdiff+0x104>
   84f40:	464b      	mov	r3, r9
   84f42:	46bb      	mov	fp, r7
   84f44:	46d1      	mov	r9, sl
   84f46:	4637      	mov	r7, r6
   84f48:	469a      	mov	sl, r3
   84f4a:	2401      	movs	r4, #1
   84f4c:	e005      	b.n	84f5a <__mdiff+0x4e>
   84f4e:	db61      	blt.n	85014 <__mdiff+0x108>
   84f50:	2400      	movs	r4, #0
   84f52:	f109 0714 	add.w	r7, r9, #20
   84f56:	f10a 0b14 	add.w	fp, sl, #20
   84f5a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   84f5e:	f7ff fdbb 	bl	84ad8 <_Balloc>
   84f62:	465d      	mov	r5, fp
   84f64:	f04f 0800 	mov.w	r8, #0
   84f68:	f8d9 e010 	ldr.w	lr, [r9, #16]
   84f6c:	f8da 3010 	ldr.w	r3, [sl, #16]
   84f70:	463e      	mov	r6, r7
   84f72:	60c4      	str	r4, [r0, #12]
   84f74:	eb0b 0c83 	add.w	ip, fp, r3, lsl #2
   84f78:	eb07 078e 	add.w	r7, r7, lr, lsl #2
   84f7c:	f100 0414 	add.w	r4, r0, #20
   84f80:	f856 9b04 	ldr.w	r9, [r6], #4
   84f84:	f855 2b04 	ldr.w	r2, [r5], #4
   84f88:	fa1f f389 	uxth.w	r3, r9
   84f8c:	4443      	add	r3, r8
   84f8e:	fa1f f882 	uxth.w	r8, r2
   84f92:	0c12      	lsrs	r2, r2, #16
   84f94:	eba3 0308 	sub.w	r3, r3, r8
   84f98:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
   84f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   84fa0:	b29b      	uxth	r3, r3
   84fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   84fa6:	45ac      	cmp	ip, r5
   84fa8:	f844 3b04 	str.w	r3, [r4], #4
   84fac:	ea4f 4822 	mov.w	r8, r2, asr #16
   84fb0:	d8e6      	bhi.n	84f80 <__mdiff+0x74>
   84fb2:	42b7      	cmp	r7, r6
   84fb4:	d917      	bls.n	84fe6 <__mdiff+0xda>
   84fb6:	46a4      	mov	ip, r4
   84fb8:	4635      	mov	r5, r6
   84fba:	f855 3b04 	ldr.w	r3, [r5], #4
   84fbe:	b299      	uxth	r1, r3
   84fc0:	4441      	add	r1, r8
   84fc2:	140a      	asrs	r2, r1, #16
   84fc4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   84fc8:	b289      	uxth	r1, r1
   84fca:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   84fce:	42af      	cmp	r7, r5
   84fd0:	f84c 3b04 	str.w	r3, [ip], #4
   84fd4:	ea4f 4822 	mov.w	r8, r2, asr #16
   84fd8:	d8ef      	bhi.n	84fba <__mdiff+0xae>
   84fda:	43f6      	mvns	r6, r6
   84fdc:	4437      	add	r7, r6
   84fde:	f027 0703 	bic.w	r7, r7, #3
   84fe2:	3704      	adds	r7, #4
   84fe4:	443c      	add	r4, r7
   84fe6:	3c04      	subs	r4, #4
   84fe8:	b92b      	cbnz	r3, 84ff6 <__mdiff+0xea>
   84fea:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   84fee:	f10e 3eff 	add.w	lr, lr, #4294967295
   84ff2:	2b00      	cmp	r3, #0
   84ff4:	d0f9      	beq.n	84fea <__mdiff+0xde>
   84ff6:	f8c0 e010 	str.w	lr, [r0, #16]
   84ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ffe:	2100      	movs	r1, #0
   85000:	f7ff fd6a 	bl	84ad8 <_Balloc>
   85004:	2201      	movs	r2, #1
   85006:	2300      	movs	r3, #0
   85008:	6102      	str	r2, [r0, #16]
   8500a:	6143      	str	r3, [r0, #20]
   8500c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85010:	46b3      	mov	fp, r6
   85012:	e7a2      	b.n	84f5a <__mdiff+0x4e>
   85014:	464b      	mov	r3, r9
   85016:	f109 0b14 	add.w	fp, r9, #20
   8501a:	f102 0714 	add.w	r7, r2, #20
   8501e:	4691      	mov	r9, r2
   85020:	2401      	movs	r4, #1
   85022:	469a      	mov	sl, r3
   85024:	e799      	b.n	84f5a <__mdiff+0x4e>
   85026:	bf00      	nop

00085028 <__d2b>:
   85028:	b5f0      	push	{r4, r5, r6, r7, lr}
   8502a:	2101      	movs	r1, #1
   8502c:	b083      	sub	sp, #12
   8502e:	461c      	mov	r4, r3
   85030:	f3c3 550a 	ubfx	r5, r3, #20, #11
   85034:	4616      	mov	r6, r2
   85036:	f7ff fd4f 	bl	84ad8 <_Balloc>
   8503a:	f3c4 0413 	ubfx	r4, r4, #0, #20
   8503e:	4607      	mov	r7, r0
   85040:	b10d      	cbz	r5, 85046 <__d2b+0x1e>
   85042:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   85046:	9401      	str	r4, [sp, #4]
   85048:	b306      	cbz	r6, 8508c <__d2b+0x64>
   8504a:	a802      	add	r0, sp, #8
   8504c:	f840 6d08 	str.w	r6, [r0, #-8]!
   85050:	f7ff fdd4 	bl	84bfc <__lo0bits>
   85054:	2800      	cmp	r0, #0
   85056:	d130      	bne.n	850ba <__d2b+0x92>
   85058:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8505c:	617a      	str	r2, [r7, #20]
   8505e:	2b00      	cmp	r3, #0
   85060:	bf0c      	ite	eq
   85062:	2101      	moveq	r1, #1
   85064:	2102      	movne	r1, #2
   85066:	61bb      	str	r3, [r7, #24]
   85068:	6139      	str	r1, [r7, #16]
   8506a:	b9d5      	cbnz	r5, 850a2 <__d2b+0x7a>
   8506c:	9a08      	ldr	r2, [sp, #32]
   8506e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   85072:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   85076:	6010      	str	r0, [r2, #0]
   85078:	6918      	ldr	r0, [r3, #16]
   8507a:	f7ff fd9f 	bl	84bbc <__hi0bits>
   8507e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85080:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   85084:	6018      	str	r0, [r3, #0]
   85086:	4638      	mov	r0, r7
   85088:	b003      	add	sp, #12
   8508a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8508c:	a801      	add	r0, sp, #4
   8508e:	f7ff fdb5 	bl	84bfc <__lo0bits>
   85092:	2201      	movs	r2, #1
   85094:	9b01      	ldr	r3, [sp, #4]
   85096:	4611      	mov	r1, r2
   85098:	3020      	adds	r0, #32
   8509a:	613a      	str	r2, [r7, #16]
   8509c:	617b      	str	r3, [r7, #20]
   8509e:	2d00      	cmp	r5, #0
   850a0:	d0e4      	beq.n	8506c <__d2b+0x44>
   850a2:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   850a6:	9a08      	ldr	r2, [sp, #32]
   850a8:	4403      	add	r3, r0
   850aa:	6013      	str	r3, [r2, #0]
   850ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   850ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   850b2:	6018      	str	r0, [r3, #0]
   850b4:	4638      	mov	r0, r7
   850b6:	b003      	add	sp, #12
   850b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850ba:	9b01      	ldr	r3, [sp, #4]
   850bc:	f1c0 0220 	rsb	r2, r0, #32
   850c0:	9900      	ldr	r1, [sp, #0]
   850c2:	fa03 f202 	lsl.w	r2, r3, r2
   850c6:	430a      	orrs	r2, r1
   850c8:	40c3      	lsrs	r3, r0
   850ca:	9301      	str	r3, [sp, #4]
   850cc:	617a      	str	r2, [r7, #20]
   850ce:	e7c6      	b.n	8505e <__d2b+0x36>

000850d0 <_realloc_r>:
   850d0:	2900      	cmp	r1, #0
   850d2:	f000 8094 	beq.w	851fe <_realloc_r+0x12e>
   850d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   850da:	460c      	mov	r4, r1
   850dc:	4615      	mov	r5, r2
   850de:	b083      	sub	sp, #12
   850e0:	4680      	mov	r8, r0
   850e2:	f105 060b 	add.w	r6, r5, #11
   850e6:	f7fd f81d 	bl	82124 <__malloc_lock>
   850ea:	f854 ec04 	ldr.w	lr, [r4, #-4]
   850ee:	2e16      	cmp	r6, #22
   850f0:	f02e 0703 	bic.w	r7, lr, #3
   850f4:	f1a4 0908 	sub.w	r9, r4, #8
   850f8:	d83c      	bhi.n	85174 <_realloc_r+0xa4>
   850fa:	2210      	movs	r2, #16
   850fc:	4616      	mov	r6, r2
   850fe:	42b5      	cmp	r5, r6
   85100:	d83d      	bhi.n	8517e <_realloc_r+0xae>
   85102:	4297      	cmp	r7, r2
   85104:	da43      	bge.n	8518e <_realloc_r+0xbe>
   85106:	4bc6      	ldr	r3, [pc, #792]	; (85420 <_realloc_r+0x350>)
   85108:	eb09 0007 	add.w	r0, r9, r7
   8510c:	6899      	ldr	r1, [r3, #8]
   8510e:	4288      	cmp	r0, r1
   85110:	f000 80c3 	beq.w	8529a <_realloc_r+0x1ca>
   85114:	6843      	ldr	r3, [r0, #4]
   85116:	f023 0101 	bic.w	r1, r3, #1
   8511a:	4401      	add	r1, r0
   8511c:	6849      	ldr	r1, [r1, #4]
   8511e:	07c9      	lsls	r1, r1, #31
   85120:	d54d      	bpl.n	851be <_realloc_r+0xee>
   85122:	f01e 0f01 	tst.w	lr, #1
   85126:	f000 809b 	beq.w	85260 <_realloc_r+0x190>
   8512a:	4629      	mov	r1, r5
   8512c:	4640      	mov	r0, r8
   8512e:	f7fc fc93 	bl	81a58 <_malloc_r>
   85132:	4605      	mov	r5, r0
   85134:	2800      	cmp	r0, #0
   85136:	d03b      	beq.n	851b0 <_realloc_r+0xe0>
   85138:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8513c:	f1a0 0208 	sub.w	r2, r0, #8
   85140:	f023 0301 	bic.w	r3, r3, #1
   85144:	444b      	add	r3, r9
   85146:	429a      	cmp	r2, r3
   85148:	f000 812b 	beq.w	853a2 <_realloc_r+0x2d2>
   8514c:	1f3a      	subs	r2, r7, #4
   8514e:	2a24      	cmp	r2, #36	; 0x24
   85150:	f200 8118 	bhi.w	85384 <_realloc_r+0x2b4>
   85154:	2a13      	cmp	r2, #19
   85156:	f200 80eb 	bhi.w	85330 <_realloc_r+0x260>
   8515a:	4603      	mov	r3, r0
   8515c:	4622      	mov	r2, r4
   8515e:	6811      	ldr	r1, [r2, #0]
   85160:	6019      	str	r1, [r3, #0]
   85162:	6851      	ldr	r1, [r2, #4]
   85164:	6059      	str	r1, [r3, #4]
   85166:	6892      	ldr	r2, [r2, #8]
   85168:	609a      	str	r2, [r3, #8]
   8516a:	4621      	mov	r1, r4
   8516c:	4640      	mov	r0, r8
   8516e:	f7ff fafb 	bl	84768 <_free_r>
   85172:	e01d      	b.n	851b0 <_realloc_r+0xe0>
   85174:	f026 0607 	bic.w	r6, r6, #7
   85178:	2e00      	cmp	r6, #0
   8517a:	4632      	mov	r2, r6
   8517c:	dabf      	bge.n	850fe <_realloc_r+0x2e>
   8517e:	2500      	movs	r5, #0
   85180:	230c      	movs	r3, #12
   85182:	4628      	mov	r0, r5
   85184:	f8c8 3000 	str.w	r3, [r8]
   85188:	b003      	add	sp, #12
   8518a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8518e:	4625      	mov	r5, r4
   85190:	1bbb      	subs	r3, r7, r6
   85192:	2b0f      	cmp	r3, #15
   85194:	f8d9 2004 	ldr.w	r2, [r9, #4]
   85198:	d81d      	bhi.n	851d6 <_realloc_r+0x106>
   8519a:	f002 0201 	and.w	r2, r2, #1
   8519e:	433a      	orrs	r2, r7
   851a0:	eb09 0107 	add.w	r1, r9, r7
   851a4:	f8c9 2004 	str.w	r2, [r9, #4]
   851a8:	684b      	ldr	r3, [r1, #4]
   851aa:	f043 0301 	orr.w	r3, r3, #1
   851ae:	604b      	str	r3, [r1, #4]
   851b0:	4640      	mov	r0, r8
   851b2:	f7fc ffbd 	bl	82130 <__malloc_unlock>
   851b6:	4628      	mov	r0, r5
   851b8:	b003      	add	sp, #12
   851ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851be:	f023 0303 	bic.w	r3, r3, #3
   851c2:	18f9      	adds	r1, r7, r3
   851c4:	4291      	cmp	r1, r2
   851c6:	db1d      	blt.n	85204 <_realloc_r+0x134>
   851c8:	68c3      	ldr	r3, [r0, #12]
   851ca:	6882      	ldr	r2, [r0, #8]
   851cc:	4625      	mov	r5, r4
   851ce:	60d3      	str	r3, [r2, #12]
   851d0:	460f      	mov	r7, r1
   851d2:	609a      	str	r2, [r3, #8]
   851d4:	e7dc      	b.n	85190 <_realloc_r+0xc0>
   851d6:	f002 0201 	and.w	r2, r2, #1
   851da:	eb09 0106 	add.w	r1, r9, r6
   851de:	f043 0301 	orr.w	r3, r3, #1
   851e2:	4332      	orrs	r2, r6
   851e4:	f8c9 2004 	str.w	r2, [r9, #4]
   851e8:	444f      	add	r7, r9
   851ea:	604b      	str	r3, [r1, #4]
   851ec:	687b      	ldr	r3, [r7, #4]
   851ee:	3108      	adds	r1, #8
   851f0:	f043 0301 	orr.w	r3, r3, #1
   851f4:	607b      	str	r3, [r7, #4]
   851f6:	4640      	mov	r0, r8
   851f8:	f7ff fab6 	bl	84768 <_free_r>
   851fc:	e7d8      	b.n	851b0 <_realloc_r+0xe0>
   851fe:	4611      	mov	r1, r2
   85200:	f7fc bc2a 	b.w	81a58 <_malloc_r>
   85204:	f01e 0f01 	tst.w	lr, #1
   85208:	d18f      	bne.n	8512a <_realloc_r+0x5a>
   8520a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8520e:	eba9 0a01 	sub.w	sl, r9, r1
   85212:	f8da 1004 	ldr.w	r1, [sl, #4]
   85216:	f021 0103 	bic.w	r1, r1, #3
   8521a:	440b      	add	r3, r1
   8521c:	443b      	add	r3, r7
   8521e:	4293      	cmp	r3, r2
   85220:	db26      	blt.n	85270 <_realloc_r+0x1a0>
   85222:	4655      	mov	r5, sl
   85224:	68c1      	ldr	r1, [r0, #12]
   85226:	6880      	ldr	r0, [r0, #8]
   85228:	1f3a      	subs	r2, r7, #4
   8522a:	60c1      	str	r1, [r0, #12]
   8522c:	6088      	str	r0, [r1, #8]
   8522e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85232:	f8da 100c 	ldr.w	r1, [sl, #12]
   85236:	2a24      	cmp	r2, #36	; 0x24
   85238:	60c1      	str	r1, [r0, #12]
   8523a:	6088      	str	r0, [r1, #8]
   8523c:	d826      	bhi.n	8528c <_realloc_r+0x1bc>
   8523e:	2a13      	cmp	r2, #19
   85240:	f240 8081 	bls.w	85346 <_realloc_r+0x276>
   85244:	6821      	ldr	r1, [r4, #0]
   85246:	2a1b      	cmp	r2, #27
   85248:	f8ca 1008 	str.w	r1, [sl, #8]
   8524c:	6861      	ldr	r1, [r4, #4]
   8524e:	f8ca 100c 	str.w	r1, [sl, #12]
   85252:	f200 80ad 	bhi.w	853b0 <_realloc_r+0x2e0>
   85256:	f104 0008 	add.w	r0, r4, #8
   8525a:	f10a 0210 	add.w	r2, sl, #16
   8525e:	e074      	b.n	8534a <_realloc_r+0x27a>
   85260:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85264:	eba9 0a03 	sub.w	sl, r9, r3
   85268:	f8da 1004 	ldr.w	r1, [sl, #4]
   8526c:	f021 0103 	bic.w	r1, r1, #3
   85270:	187b      	adds	r3, r7, r1
   85272:	4293      	cmp	r3, r2
   85274:	f6ff af59 	blt.w	8512a <_realloc_r+0x5a>
   85278:	4655      	mov	r5, sl
   8527a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8527e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   85282:	1f3a      	subs	r2, r7, #4
   85284:	2a24      	cmp	r2, #36	; 0x24
   85286:	60c1      	str	r1, [r0, #12]
   85288:	6088      	str	r0, [r1, #8]
   8528a:	d9d8      	bls.n	8523e <_realloc_r+0x16e>
   8528c:	4621      	mov	r1, r4
   8528e:	4628      	mov	r0, r5
   85290:	461f      	mov	r7, r3
   85292:	46d1      	mov	r9, sl
   85294:	f7ff fbbc 	bl	84a10 <memmove>
   85298:	e77a      	b.n	85190 <_realloc_r+0xc0>
   8529a:	6841      	ldr	r1, [r0, #4]
   8529c:	f106 0010 	add.w	r0, r6, #16
   852a0:	f021 0b03 	bic.w	fp, r1, #3
   852a4:	44bb      	add	fp, r7
   852a6:	4583      	cmp	fp, r0
   852a8:	da58      	bge.n	8535c <_realloc_r+0x28c>
   852aa:	f01e 0f01 	tst.w	lr, #1
   852ae:	f47f af3c 	bne.w	8512a <_realloc_r+0x5a>
   852b2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   852b6:	eba9 0a01 	sub.w	sl, r9, r1
   852ba:	f8da 1004 	ldr.w	r1, [sl, #4]
   852be:	f021 0103 	bic.w	r1, r1, #3
   852c2:	448b      	add	fp, r1
   852c4:	4558      	cmp	r0, fp
   852c6:	dcd3      	bgt.n	85270 <_realloc_r+0x1a0>
   852c8:	4655      	mov	r5, sl
   852ca:	f8da 100c 	ldr.w	r1, [sl, #12]
   852ce:	f855 0f08 	ldr.w	r0, [r5, #8]!
   852d2:	1f3a      	subs	r2, r7, #4
   852d4:	2a24      	cmp	r2, #36	; 0x24
   852d6:	60c1      	str	r1, [r0, #12]
   852d8:	6088      	str	r0, [r1, #8]
   852da:	f200 808d 	bhi.w	853f8 <_realloc_r+0x328>
   852de:	2a13      	cmp	r2, #19
   852e0:	f240 8087 	bls.w	853f2 <_realloc_r+0x322>
   852e4:	6821      	ldr	r1, [r4, #0]
   852e6:	2a1b      	cmp	r2, #27
   852e8:	f8ca 1008 	str.w	r1, [sl, #8]
   852ec:	6861      	ldr	r1, [r4, #4]
   852ee:	f8ca 100c 	str.w	r1, [sl, #12]
   852f2:	f200 8088 	bhi.w	85406 <_realloc_r+0x336>
   852f6:	f104 0108 	add.w	r1, r4, #8
   852fa:	f10a 0210 	add.w	r2, sl, #16
   852fe:	6808      	ldr	r0, [r1, #0]
   85300:	6010      	str	r0, [r2, #0]
   85302:	6848      	ldr	r0, [r1, #4]
   85304:	6050      	str	r0, [r2, #4]
   85306:	6889      	ldr	r1, [r1, #8]
   85308:	6091      	str	r1, [r2, #8]
   8530a:	ebab 0206 	sub.w	r2, fp, r6
   8530e:	eb0a 0106 	add.w	r1, sl, r6
   85312:	f042 0201 	orr.w	r2, r2, #1
   85316:	6099      	str	r1, [r3, #8]
   85318:	604a      	str	r2, [r1, #4]
   8531a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8531e:	4640      	mov	r0, r8
   85320:	f003 0301 	and.w	r3, r3, #1
   85324:	431e      	orrs	r6, r3
   85326:	f8ca 6004 	str.w	r6, [sl, #4]
   8532a:	f7fc ff01 	bl	82130 <__malloc_unlock>
   8532e:	e742      	b.n	851b6 <_realloc_r+0xe6>
   85330:	6823      	ldr	r3, [r4, #0]
   85332:	2a1b      	cmp	r2, #27
   85334:	6003      	str	r3, [r0, #0]
   85336:	6863      	ldr	r3, [r4, #4]
   85338:	6043      	str	r3, [r0, #4]
   8533a:	d827      	bhi.n	8538c <_realloc_r+0x2bc>
   8533c:	f100 0308 	add.w	r3, r0, #8
   85340:	f104 0208 	add.w	r2, r4, #8
   85344:	e70b      	b.n	8515e <_realloc_r+0x8e>
   85346:	4620      	mov	r0, r4
   85348:	462a      	mov	r2, r5
   8534a:	6801      	ldr	r1, [r0, #0]
   8534c:	461f      	mov	r7, r3
   8534e:	6011      	str	r1, [r2, #0]
   85350:	6841      	ldr	r1, [r0, #4]
   85352:	46d1      	mov	r9, sl
   85354:	6051      	str	r1, [r2, #4]
   85356:	6883      	ldr	r3, [r0, #8]
   85358:	6093      	str	r3, [r2, #8]
   8535a:	e719      	b.n	85190 <_realloc_r+0xc0>
   8535c:	ebab 0b06 	sub.w	fp, fp, r6
   85360:	eb09 0106 	add.w	r1, r9, r6
   85364:	f04b 0201 	orr.w	r2, fp, #1
   85368:	6099      	str	r1, [r3, #8]
   8536a:	604a      	str	r2, [r1, #4]
   8536c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   85370:	4640      	mov	r0, r8
   85372:	f003 0301 	and.w	r3, r3, #1
   85376:	431e      	orrs	r6, r3
   85378:	f844 6c04 	str.w	r6, [r4, #-4]
   8537c:	f7fc fed8 	bl	82130 <__malloc_unlock>
   85380:	4625      	mov	r5, r4
   85382:	e718      	b.n	851b6 <_realloc_r+0xe6>
   85384:	4621      	mov	r1, r4
   85386:	f7ff fb43 	bl	84a10 <memmove>
   8538a:	e6ee      	b.n	8516a <_realloc_r+0x9a>
   8538c:	68a3      	ldr	r3, [r4, #8]
   8538e:	2a24      	cmp	r2, #36	; 0x24
   85390:	6083      	str	r3, [r0, #8]
   85392:	68e3      	ldr	r3, [r4, #12]
   85394:	60c3      	str	r3, [r0, #12]
   85396:	d018      	beq.n	853ca <_realloc_r+0x2fa>
   85398:	f100 0310 	add.w	r3, r0, #16
   8539c:	f104 0210 	add.w	r2, r4, #16
   853a0:	e6dd      	b.n	8515e <_realloc_r+0x8e>
   853a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   853a6:	4625      	mov	r5, r4
   853a8:	f023 0303 	bic.w	r3, r3, #3
   853ac:	441f      	add	r7, r3
   853ae:	e6ef      	b.n	85190 <_realloc_r+0xc0>
   853b0:	68a1      	ldr	r1, [r4, #8]
   853b2:	2a24      	cmp	r2, #36	; 0x24
   853b4:	f8ca 1010 	str.w	r1, [sl, #16]
   853b8:	68e1      	ldr	r1, [r4, #12]
   853ba:	f8ca 1014 	str.w	r1, [sl, #20]
   853be:	d00d      	beq.n	853dc <_realloc_r+0x30c>
   853c0:	f104 0010 	add.w	r0, r4, #16
   853c4:	f10a 0218 	add.w	r2, sl, #24
   853c8:	e7bf      	b.n	8534a <_realloc_r+0x27a>
   853ca:	6922      	ldr	r2, [r4, #16]
   853cc:	f100 0318 	add.w	r3, r0, #24
   853d0:	6102      	str	r2, [r0, #16]
   853d2:	6961      	ldr	r1, [r4, #20]
   853d4:	f104 0218 	add.w	r2, r4, #24
   853d8:	6141      	str	r1, [r0, #20]
   853da:	e6c0      	b.n	8515e <_realloc_r+0x8e>
   853dc:	6922      	ldr	r2, [r4, #16]
   853de:	f104 0018 	add.w	r0, r4, #24
   853e2:	f8ca 2018 	str.w	r2, [sl, #24]
   853e6:	6961      	ldr	r1, [r4, #20]
   853e8:	f10a 0220 	add.w	r2, sl, #32
   853ec:	f8ca 101c 	str.w	r1, [sl, #28]
   853f0:	e7ab      	b.n	8534a <_realloc_r+0x27a>
   853f2:	4621      	mov	r1, r4
   853f4:	462a      	mov	r2, r5
   853f6:	e782      	b.n	852fe <_realloc_r+0x22e>
   853f8:	4621      	mov	r1, r4
   853fa:	4628      	mov	r0, r5
   853fc:	9301      	str	r3, [sp, #4]
   853fe:	f7ff fb07 	bl	84a10 <memmove>
   85402:	9b01      	ldr	r3, [sp, #4]
   85404:	e781      	b.n	8530a <_realloc_r+0x23a>
   85406:	68a1      	ldr	r1, [r4, #8]
   85408:	2a24      	cmp	r2, #36	; 0x24
   8540a:	f8ca 1010 	str.w	r1, [sl, #16]
   8540e:	68e1      	ldr	r1, [r4, #12]
   85410:	f8ca 1014 	str.w	r1, [sl, #20]
   85414:	d006      	beq.n	85424 <_realloc_r+0x354>
   85416:	f104 0110 	add.w	r1, r4, #16
   8541a:	f10a 0218 	add.w	r2, sl, #24
   8541e:	e76e      	b.n	852fe <_realloc_r+0x22e>
   85420:	20070918 	.word	0x20070918
   85424:	6922      	ldr	r2, [r4, #16]
   85426:	f104 0118 	add.w	r1, r4, #24
   8542a:	f8ca 2018 	str.w	r2, [sl, #24]
   8542e:	6960      	ldr	r0, [r4, #20]
   85430:	f10a 0220 	add.w	r2, sl, #32
   85434:	f8ca 001c 	str.w	r0, [sl, #28]
   85438:	e761      	b.n	852fe <_realloc_r+0x22e>
   8543a:	bf00      	nop

0008543c <__ssprint_r>:
   8543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85440:	6893      	ldr	r3, [r2, #8]
   85442:	b083      	sub	sp, #12
   85444:	4690      	mov	r8, r2
   85446:	2b00      	cmp	r3, #0
   85448:	d070      	beq.n	8552c <__ssprint_r+0xf0>
   8544a:	4682      	mov	sl, r0
   8544c:	460c      	mov	r4, r1
   8544e:	6817      	ldr	r7, [r2, #0]
   85450:	688d      	ldr	r5, [r1, #8]
   85452:	6808      	ldr	r0, [r1, #0]
   85454:	e042      	b.n	854dc <__ssprint_r+0xa0>
   85456:	89a3      	ldrh	r3, [r4, #12]
   85458:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8545c:	d02e      	beq.n	854bc <__ssprint_r+0x80>
   8545e:	6965      	ldr	r5, [r4, #20]
   85460:	6921      	ldr	r1, [r4, #16]
   85462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   85466:	eba0 0b01 	sub.w	fp, r0, r1
   8546a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   8546e:	f10b 0001 	add.w	r0, fp, #1
   85472:	106d      	asrs	r5, r5, #1
   85474:	4430      	add	r0, r6
   85476:	42a8      	cmp	r0, r5
   85478:	462a      	mov	r2, r5
   8547a:	bf84      	itt	hi
   8547c:	4605      	movhi	r5, r0
   8547e:	462a      	movhi	r2, r5
   85480:	055b      	lsls	r3, r3, #21
   85482:	d538      	bpl.n	854f6 <__ssprint_r+0xba>
   85484:	4611      	mov	r1, r2
   85486:	4650      	mov	r0, sl
   85488:	f7fc fae6 	bl	81a58 <_malloc_r>
   8548c:	2800      	cmp	r0, #0
   8548e:	d03c      	beq.n	8550a <__ssprint_r+0xce>
   85490:	465a      	mov	r2, fp
   85492:	6921      	ldr	r1, [r4, #16]
   85494:	9001      	str	r0, [sp, #4]
   85496:	f7fc fd81 	bl	81f9c <memcpy>
   8549a:	89a2      	ldrh	r2, [r4, #12]
   8549c:	9b01      	ldr	r3, [sp, #4]
   8549e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   854a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   854a6:	81a2      	strh	r2, [r4, #12]
   854a8:	eba5 020b 	sub.w	r2, r5, fp
   854ac:	eb03 000b 	add.w	r0, r3, fp
   854b0:	6165      	str	r5, [r4, #20]
   854b2:	46b3      	mov	fp, r6
   854b4:	4635      	mov	r5, r6
   854b6:	6123      	str	r3, [r4, #16]
   854b8:	6020      	str	r0, [r4, #0]
   854ba:	60a2      	str	r2, [r4, #8]
   854bc:	465a      	mov	r2, fp
   854be:	4649      	mov	r1, r9
   854c0:	f7ff faa6 	bl	84a10 <memmove>
   854c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   854c8:	68a2      	ldr	r2, [r4, #8]
   854ca:	6820      	ldr	r0, [r4, #0]
   854cc:	1b55      	subs	r5, r2, r5
   854ce:	4458      	add	r0, fp
   854d0:	1b9e      	subs	r6, r3, r6
   854d2:	60a5      	str	r5, [r4, #8]
   854d4:	6020      	str	r0, [r4, #0]
   854d6:	f8c8 6008 	str.w	r6, [r8, #8]
   854da:	b33e      	cbz	r6, 8552c <__ssprint_r+0xf0>
   854dc:	687e      	ldr	r6, [r7, #4]
   854de:	463b      	mov	r3, r7
   854e0:	3708      	adds	r7, #8
   854e2:	2e00      	cmp	r6, #0
   854e4:	d0fa      	beq.n	854dc <__ssprint_r+0xa0>
   854e6:	42ae      	cmp	r6, r5
   854e8:	f8d3 9000 	ldr.w	r9, [r3]
   854ec:	46ab      	mov	fp, r5
   854ee:	d2b2      	bcs.n	85456 <__ssprint_r+0x1a>
   854f0:	4635      	mov	r5, r6
   854f2:	46b3      	mov	fp, r6
   854f4:	e7e2      	b.n	854bc <__ssprint_r+0x80>
   854f6:	4650      	mov	r0, sl
   854f8:	f7ff fdea 	bl	850d0 <_realloc_r>
   854fc:	4603      	mov	r3, r0
   854fe:	2800      	cmp	r0, #0
   85500:	d1d2      	bne.n	854a8 <__ssprint_r+0x6c>
   85502:	6921      	ldr	r1, [r4, #16]
   85504:	4650      	mov	r0, sl
   85506:	f7ff f92f 	bl	84768 <_free_r>
   8550a:	230c      	movs	r3, #12
   8550c:	2200      	movs	r2, #0
   8550e:	f04f 30ff 	mov.w	r0, #4294967295
   85512:	f8ca 3000 	str.w	r3, [sl]
   85516:	89a3      	ldrh	r3, [r4, #12]
   85518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8551c:	81a3      	strh	r3, [r4, #12]
   8551e:	f8c8 2008 	str.w	r2, [r8, #8]
   85522:	f8c8 2004 	str.w	r2, [r8, #4]
   85526:	b003      	add	sp, #12
   85528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8552c:	2000      	movs	r0, #0
   8552e:	f8c8 0004 	str.w	r0, [r8, #4]
   85532:	b003      	add	sp, #12
   85534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00085538 <__ascii_wctomb>:
   85538:	b119      	cbz	r1, 85542 <__ascii_wctomb+0xa>
   8553a:	2aff      	cmp	r2, #255	; 0xff
   8553c:	d803      	bhi.n	85546 <__ascii_wctomb+0xe>
   8553e:	700a      	strb	r2, [r1, #0]
   85540:	2101      	movs	r1, #1
   85542:	4608      	mov	r0, r1
   85544:	4770      	bx	lr
   85546:	238a      	movs	r3, #138	; 0x8a
   85548:	f04f 31ff 	mov.w	r1, #4294967295
   8554c:	6003      	str	r3, [r0, #0]
   8554e:	e7f8      	b.n	85542 <__ascii_wctomb+0xa>

00085550 <__register_exitproc>:
   85550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85554:	4d2c      	ldr	r5, [pc, #176]	; (85608 <__register_exitproc+0xb8>)
   85556:	4606      	mov	r6, r0
   85558:	6828      	ldr	r0, [r5, #0]
   8555a:	4698      	mov	r8, r3
   8555c:	460f      	mov	r7, r1
   8555e:	4691      	mov	r9, r2
   85560:	f7ff f9f6 	bl	84950 <__retarget_lock_acquire_recursive>
   85564:	4b29      	ldr	r3, [pc, #164]	; (8560c <__register_exitproc+0xbc>)
   85566:	681c      	ldr	r4, [r3, #0]
   85568:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8556c:	2b00      	cmp	r3, #0
   8556e:	d03e      	beq.n	855ee <__register_exitproc+0x9e>
   85570:	685a      	ldr	r2, [r3, #4]
   85572:	2a1f      	cmp	r2, #31
   85574:	dc1c      	bgt.n	855b0 <__register_exitproc+0x60>
   85576:	f102 0e01 	add.w	lr, r2, #1
   8557a:	b176      	cbz	r6, 8559a <__register_exitproc+0x4a>
   8557c:	2101      	movs	r1, #1
   8557e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   85582:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85586:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8558a:	4091      	lsls	r1, r2
   8558c:	4308      	orrs	r0, r1
   8558e:	2e02      	cmp	r6, #2
   85590:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85594:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85598:	d023      	beq.n	855e2 <__register_exitproc+0x92>
   8559a:	3202      	adds	r2, #2
   8559c:	f8c3 e004 	str.w	lr, [r3, #4]
   855a0:	6828      	ldr	r0, [r5, #0]
   855a2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   855a6:	f7ff f9d5 	bl	84954 <__retarget_lock_release_recursive>
   855aa:	2000      	movs	r0, #0
   855ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   855b0:	4b17      	ldr	r3, [pc, #92]	; (85610 <__register_exitproc+0xc0>)
   855b2:	b30b      	cbz	r3, 855f8 <__register_exitproc+0xa8>
   855b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   855b8:	f7fc fa46 	bl	81a48 <malloc>
   855bc:	4603      	mov	r3, r0
   855be:	b1d8      	cbz	r0, 855f8 <__register_exitproc+0xa8>
   855c0:	2000      	movs	r0, #0
   855c2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   855c6:	f04f 0e01 	mov.w	lr, #1
   855ca:	6058      	str	r0, [r3, #4]
   855cc:	6019      	str	r1, [r3, #0]
   855ce:	4602      	mov	r2, r0
   855d0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   855d4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   855d8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   855dc:	2e00      	cmp	r6, #0
   855de:	d0dc      	beq.n	8559a <__register_exitproc+0x4a>
   855e0:	e7cc      	b.n	8557c <__register_exitproc+0x2c>
   855e2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   855e6:	4301      	orrs	r1, r0
   855e8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   855ec:	e7d5      	b.n	8559a <__register_exitproc+0x4a>
   855ee:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   855f2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   855f6:	e7bb      	b.n	85570 <__register_exitproc+0x20>
   855f8:	6828      	ldr	r0, [r5, #0]
   855fa:	f7ff f9ab 	bl	84954 <__retarget_lock_release_recursive>
   855fe:	f04f 30ff 	mov.w	r0, #4294967295
   85602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85606:	bf00      	nop
   85608:	20070d28 	.word	0x20070d28
   8560c:	00086364 	.word	0x00086364
   85610:	00081a49 	.word	0x00081a49

00085614 <_calloc_r>:
   85614:	b510      	push	{r4, lr}
   85616:	fb02 f101 	mul.w	r1, r2, r1
   8561a:	f7fc fa1d 	bl	81a58 <_malloc_r>
   8561e:	4604      	mov	r4, r0
   85620:	b1d8      	cbz	r0, 8565a <_calloc_r+0x46>
   85622:	f850 2c04 	ldr.w	r2, [r0, #-4]
   85626:	f022 0203 	bic.w	r2, r2, #3
   8562a:	3a04      	subs	r2, #4
   8562c:	2a24      	cmp	r2, #36	; 0x24
   8562e:	d818      	bhi.n	85662 <_calloc_r+0x4e>
   85630:	2a13      	cmp	r2, #19
   85632:	d914      	bls.n	8565e <_calloc_r+0x4a>
   85634:	2300      	movs	r3, #0
   85636:	2a1b      	cmp	r2, #27
   85638:	6003      	str	r3, [r0, #0]
   8563a:	6043      	str	r3, [r0, #4]
   8563c:	d916      	bls.n	8566c <_calloc_r+0x58>
   8563e:	2a24      	cmp	r2, #36	; 0x24
   85640:	6083      	str	r3, [r0, #8]
   85642:	60c3      	str	r3, [r0, #12]
   85644:	bf11      	iteee	ne
   85646:	f100 0210 	addne.w	r2, r0, #16
   8564a:	6103      	streq	r3, [r0, #16]
   8564c:	6143      	streq	r3, [r0, #20]
   8564e:	f100 0218 	addeq.w	r2, r0, #24
   85652:	2300      	movs	r3, #0
   85654:	6013      	str	r3, [r2, #0]
   85656:	6053      	str	r3, [r2, #4]
   85658:	6093      	str	r3, [r2, #8]
   8565a:	4620      	mov	r0, r4
   8565c:	bd10      	pop	{r4, pc}
   8565e:	4602      	mov	r2, r0
   85660:	e7f7      	b.n	85652 <_calloc_r+0x3e>
   85662:	2100      	movs	r1, #0
   85664:	f7fc fd10 	bl	82088 <memset>
   85668:	4620      	mov	r0, r4
   8566a:	bd10      	pop	{r4, pc}
   8566c:	f100 0208 	add.w	r2, r0, #8
   85670:	e7ef      	b.n	85652 <_calloc_r+0x3e>
   85672:	bf00      	nop

00085674 <__aeabi_drsub>:
   85674:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   85678:	e002      	b.n	85680 <__adddf3>
   8567a:	bf00      	nop

0008567c <__aeabi_dsub>:
   8567c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085680 <__adddf3>:
   85680:	b530      	push	{r4, r5, lr}
   85682:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85686:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8568a:	ea94 0f05 	teq	r4, r5
   8568e:	bf08      	it	eq
   85690:	ea90 0f02 	teqeq	r0, r2
   85694:	bf1f      	itttt	ne
   85696:	ea54 0c00 	orrsne.w	ip, r4, r0
   8569a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8569e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   856a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   856a6:	f000 80e2 	beq.w	8586e <__adddf3+0x1ee>
   856aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   856ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   856b2:	bfb8      	it	lt
   856b4:	426d      	neglt	r5, r5
   856b6:	dd0c      	ble.n	856d2 <__adddf3+0x52>
   856b8:	442c      	add	r4, r5
   856ba:	ea80 0202 	eor.w	r2, r0, r2
   856be:	ea81 0303 	eor.w	r3, r1, r3
   856c2:	ea82 0000 	eor.w	r0, r2, r0
   856c6:	ea83 0101 	eor.w	r1, r3, r1
   856ca:	ea80 0202 	eor.w	r2, r0, r2
   856ce:	ea81 0303 	eor.w	r3, r1, r3
   856d2:	2d36      	cmp	r5, #54	; 0x36
   856d4:	bf88      	it	hi
   856d6:	bd30      	pophi	{r4, r5, pc}
   856d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   856dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   856e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   856e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   856e8:	d002      	beq.n	856f0 <__adddf3+0x70>
   856ea:	4240      	negs	r0, r0
   856ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   856f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   856f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   856f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   856fc:	d002      	beq.n	85704 <__adddf3+0x84>
   856fe:	4252      	negs	r2, r2
   85700:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85704:	ea94 0f05 	teq	r4, r5
   85708:	f000 80a7 	beq.w	8585a <__adddf3+0x1da>
   8570c:	f1a4 0401 	sub.w	r4, r4, #1
   85710:	f1d5 0e20 	rsbs	lr, r5, #32
   85714:	db0d      	blt.n	85732 <__adddf3+0xb2>
   85716:	fa02 fc0e 	lsl.w	ip, r2, lr
   8571a:	fa22 f205 	lsr.w	r2, r2, r5
   8571e:	1880      	adds	r0, r0, r2
   85720:	f141 0100 	adc.w	r1, r1, #0
   85724:	fa03 f20e 	lsl.w	r2, r3, lr
   85728:	1880      	adds	r0, r0, r2
   8572a:	fa43 f305 	asr.w	r3, r3, r5
   8572e:	4159      	adcs	r1, r3
   85730:	e00e      	b.n	85750 <__adddf3+0xd0>
   85732:	f1a5 0520 	sub.w	r5, r5, #32
   85736:	f10e 0e20 	add.w	lr, lr, #32
   8573a:	2a01      	cmp	r2, #1
   8573c:	fa03 fc0e 	lsl.w	ip, r3, lr
   85740:	bf28      	it	cs
   85742:	f04c 0c02 	orrcs.w	ip, ip, #2
   85746:	fa43 f305 	asr.w	r3, r3, r5
   8574a:	18c0      	adds	r0, r0, r3
   8574c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   85750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85754:	d507      	bpl.n	85766 <__adddf3+0xe6>
   85756:	f04f 0e00 	mov.w	lr, #0
   8575a:	f1dc 0c00 	rsbs	ip, ip, #0
   8575e:	eb7e 0000 	sbcs.w	r0, lr, r0
   85762:	eb6e 0101 	sbc.w	r1, lr, r1
   85766:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8576a:	d31b      	bcc.n	857a4 <__adddf3+0x124>
   8576c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   85770:	d30c      	bcc.n	8578c <__adddf3+0x10c>
   85772:	0849      	lsrs	r1, r1, #1
   85774:	ea5f 0030 	movs.w	r0, r0, rrx
   85778:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8577c:	f104 0401 	add.w	r4, r4, #1
   85780:	ea4f 5244 	mov.w	r2, r4, lsl #21
   85784:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   85788:	f080 809a 	bcs.w	858c0 <__adddf3+0x240>
   8578c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85790:	bf08      	it	eq
   85792:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85796:	f150 0000 	adcs.w	r0, r0, #0
   8579a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8579e:	ea41 0105 	orr.w	r1, r1, r5
   857a2:	bd30      	pop	{r4, r5, pc}
   857a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   857a8:	4140      	adcs	r0, r0
   857aa:	eb41 0101 	adc.w	r1, r1, r1
   857ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   857b2:	f1a4 0401 	sub.w	r4, r4, #1
   857b6:	d1e9      	bne.n	8578c <__adddf3+0x10c>
   857b8:	f091 0f00 	teq	r1, #0
   857bc:	bf04      	itt	eq
   857be:	4601      	moveq	r1, r0
   857c0:	2000      	moveq	r0, #0
   857c2:	fab1 f381 	clz	r3, r1
   857c6:	bf08      	it	eq
   857c8:	3320      	addeq	r3, #32
   857ca:	f1a3 030b 	sub.w	r3, r3, #11
   857ce:	f1b3 0220 	subs.w	r2, r3, #32
   857d2:	da0c      	bge.n	857ee <__adddf3+0x16e>
   857d4:	320c      	adds	r2, #12
   857d6:	dd08      	ble.n	857ea <__adddf3+0x16a>
   857d8:	f102 0c14 	add.w	ip, r2, #20
   857dc:	f1c2 020c 	rsb	r2, r2, #12
   857e0:	fa01 f00c 	lsl.w	r0, r1, ip
   857e4:	fa21 f102 	lsr.w	r1, r1, r2
   857e8:	e00c      	b.n	85804 <__adddf3+0x184>
   857ea:	f102 0214 	add.w	r2, r2, #20
   857ee:	bfd8      	it	le
   857f0:	f1c2 0c20 	rsble	ip, r2, #32
   857f4:	fa01 f102 	lsl.w	r1, r1, r2
   857f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   857fc:	bfdc      	itt	le
   857fe:	ea41 010c 	orrle.w	r1, r1, ip
   85802:	4090      	lslle	r0, r2
   85804:	1ae4      	subs	r4, r4, r3
   85806:	bfa2      	ittt	ge
   85808:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8580c:	4329      	orrge	r1, r5
   8580e:	bd30      	popge	{r4, r5, pc}
   85810:	ea6f 0404 	mvn.w	r4, r4
   85814:	3c1f      	subs	r4, #31
   85816:	da1c      	bge.n	85852 <__adddf3+0x1d2>
   85818:	340c      	adds	r4, #12
   8581a:	dc0e      	bgt.n	8583a <__adddf3+0x1ba>
   8581c:	f104 0414 	add.w	r4, r4, #20
   85820:	f1c4 0220 	rsb	r2, r4, #32
   85824:	fa20 f004 	lsr.w	r0, r0, r4
   85828:	fa01 f302 	lsl.w	r3, r1, r2
   8582c:	ea40 0003 	orr.w	r0, r0, r3
   85830:	fa21 f304 	lsr.w	r3, r1, r4
   85834:	ea45 0103 	orr.w	r1, r5, r3
   85838:	bd30      	pop	{r4, r5, pc}
   8583a:	f1c4 040c 	rsb	r4, r4, #12
   8583e:	f1c4 0220 	rsb	r2, r4, #32
   85842:	fa20 f002 	lsr.w	r0, r0, r2
   85846:	fa01 f304 	lsl.w	r3, r1, r4
   8584a:	ea40 0003 	orr.w	r0, r0, r3
   8584e:	4629      	mov	r1, r5
   85850:	bd30      	pop	{r4, r5, pc}
   85852:	fa21 f004 	lsr.w	r0, r1, r4
   85856:	4629      	mov	r1, r5
   85858:	bd30      	pop	{r4, r5, pc}
   8585a:	f094 0f00 	teq	r4, #0
   8585e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   85862:	bf06      	itte	eq
   85864:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   85868:	3401      	addeq	r4, #1
   8586a:	3d01      	subne	r5, #1
   8586c:	e74e      	b.n	8570c <__adddf3+0x8c>
   8586e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85872:	bf18      	it	ne
   85874:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85878:	d029      	beq.n	858ce <__adddf3+0x24e>
   8587a:	ea94 0f05 	teq	r4, r5
   8587e:	bf08      	it	eq
   85880:	ea90 0f02 	teqeq	r0, r2
   85884:	d005      	beq.n	85892 <__adddf3+0x212>
   85886:	ea54 0c00 	orrs.w	ip, r4, r0
   8588a:	bf04      	itt	eq
   8588c:	4619      	moveq	r1, r3
   8588e:	4610      	moveq	r0, r2
   85890:	bd30      	pop	{r4, r5, pc}
   85892:	ea91 0f03 	teq	r1, r3
   85896:	bf1e      	ittt	ne
   85898:	2100      	movne	r1, #0
   8589a:	2000      	movne	r0, #0
   8589c:	bd30      	popne	{r4, r5, pc}
   8589e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   858a2:	d105      	bne.n	858b0 <__adddf3+0x230>
   858a4:	0040      	lsls	r0, r0, #1
   858a6:	4149      	adcs	r1, r1
   858a8:	bf28      	it	cs
   858aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   858ae:	bd30      	pop	{r4, r5, pc}
   858b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   858b4:	bf3c      	itt	cc
   858b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   858ba:	bd30      	popcc	{r4, r5, pc}
   858bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   858c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   858c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   858c8:	f04f 0000 	mov.w	r0, #0
   858cc:	bd30      	pop	{r4, r5, pc}
   858ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   858d2:	bf1a      	itte	ne
   858d4:	4619      	movne	r1, r3
   858d6:	4610      	movne	r0, r2
   858d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   858dc:	bf1c      	itt	ne
   858de:	460b      	movne	r3, r1
   858e0:	4602      	movne	r2, r0
   858e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   858e6:	bf06      	itte	eq
   858e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   858ec:	ea91 0f03 	teqeq	r1, r3
   858f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   858f4:	bd30      	pop	{r4, r5, pc}
   858f6:	bf00      	nop

000858f8 <__aeabi_ui2d>:
   858f8:	f090 0f00 	teq	r0, #0
   858fc:	bf04      	itt	eq
   858fe:	2100      	moveq	r1, #0
   85900:	4770      	bxeq	lr
   85902:	b530      	push	{r4, r5, lr}
   85904:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85908:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8590c:	f04f 0500 	mov.w	r5, #0
   85910:	f04f 0100 	mov.w	r1, #0
   85914:	e750      	b.n	857b8 <__adddf3+0x138>
   85916:	bf00      	nop

00085918 <__aeabi_i2d>:
   85918:	f090 0f00 	teq	r0, #0
   8591c:	bf04      	itt	eq
   8591e:	2100      	moveq	r1, #0
   85920:	4770      	bxeq	lr
   85922:	b530      	push	{r4, r5, lr}
   85924:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85928:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8592c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   85930:	bf48      	it	mi
   85932:	4240      	negmi	r0, r0
   85934:	f04f 0100 	mov.w	r1, #0
   85938:	e73e      	b.n	857b8 <__adddf3+0x138>
   8593a:	bf00      	nop

0008593c <__aeabi_f2d>:
   8593c:	0042      	lsls	r2, r0, #1
   8593e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   85942:	ea4f 0131 	mov.w	r1, r1, rrx
   85946:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8594a:	bf1f      	itttt	ne
   8594c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   85950:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85954:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   85958:	4770      	bxne	lr
   8595a:	f092 0f00 	teq	r2, #0
   8595e:	bf14      	ite	ne
   85960:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85964:	4770      	bxeq	lr
   85966:	b530      	push	{r4, r5, lr}
   85968:	f44f 7460 	mov.w	r4, #896	; 0x380
   8596c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85970:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85974:	e720      	b.n	857b8 <__adddf3+0x138>
   85976:	bf00      	nop

00085978 <__aeabi_ul2d>:
   85978:	ea50 0201 	orrs.w	r2, r0, r1
   8597c:	bf08      	it	eq
   8597e:	4770      	bxeq	lr
   85980:	b530      	push	{r4, r5, lr}
   85982:	f04f 0500 	mov.w	r5, #0
   85986:	e00a      	b.n	8599e <__aeabi_l2d+0x16>

00085988 <__aeabi_l2d>:
   85988:	ea50 0201 	orrs.w	r2, r0, r1
   8598c:	bf08      	it	eq
   8598e:	4770      	bxeq	lr
   85990:	b530      	push	{r4, r5, lr}
   85992:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   85996:	d502      	bpl.n	8599e <__aeabi_l2d+0x16>
   85998:	4240      	negs	r0, r0
   8599a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8599e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   859a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   859a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   859aa:	f43f aedc 	beq.w	85766 <__adddf3+0xe6>
   859ae:	f04f 0203 	mov.w	r2, #3
   859b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   859b6:	bf18      	it	ne
   859b8:	3203      	addne	r2, #3
   859ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   859be:	bf18      	it	ne
   859c0:	3203      	addne	r2, #3
   859c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   859c6:	f1c2 0320 	rsb	r3, r2, #32
   859ca:	fa00 fc03 	lsl.w	ip, r0, r3
   859ce:	fa20 f002 	lsr.w	r0, r0, r2
   859d2:	fa01 fe03 	lsl.w	lr, r1, r3
   859d6:	ea40 000e 	orr.w	r0, r0, lr
   859da:	fa21 f102 	lsr.w	r1, r1, r2
   859de:	4414      	add	r4, r2
   859e0:	e6c1      	b.n	85766 <__adddf3+0xe6>
   859e2:	bf00      	nop

000859e4 <__aeabi_dmul>:
   859e4:	b570      	push	{r4, r5, r6, lr}
   859e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   859ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   859ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   859f2:	bf1d      	ittte	ne
   859f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   859f8:	ea94 0f0c 	teqne	r4, ip
   859fc:	ea95 0f0c 	teqne	r5, ip
   85a00:	f000 f8de 	bleq	85bc0 <__aeabi_dmul+0x1dc>
   85a04:	442c      	add	r4, r5
   85a06:	ea81 0603 	eor.w	r6, r1, r3
   85a0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   85a0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   85a12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   85a16:	bf18      	it	ne
   85a18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   85a1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   85a24:	d038      	beq.n	85a98 <__aeabi_dmul+0xb4>
   85a26:	fba0 ce02 	umull	ip, lr, r0, r2
   85a2a:	f04f 0500 	mov.w	r5, #0
   85a2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   85a32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   85a36:	fbe0 e503 	umlal	lr, r5, r0, r3
   85a3a:	f04f 0600 	mov.w	r6, #0
   85a3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   85a42:	f09c 0f00 	teq	ip, #0
   85a46:	bf18      	it	ne
   85a48:	f04e 0e01 	orrne.w	lr, lr, #1
   85a4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   85a50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   85a54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   85a58:	d204      	bcs.n	85a64 <__aeabi_dmul+0x80>
   85a5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   85a5e:	416d      	adcs	r5, r5
   85a60:	eb46 0606 	adc.w	r6, r6, r6
   85a64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   85a68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   85a6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   85a70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   85a74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   85a78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   85a7c:	bf88      	it	hi
   85a7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   85a82:	d81e      	bhi.n	85ac2 <__aeabi_dmul+0xde>
   85a84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   85a88:	bf08      	it	eq
   85a8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   85a8e:	f150 0000 	adcs.w	r0, r0, #0
   85a92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85a96:	bd70      	pop	{r4, r5, r6, pc}
   85a98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   85a9c:	ea46 0101 	orr.w	r1, r6, r1
   85aa0:	ea40 0002 	orr.w	r0, r0, r2
   85aa4:	ea81 0103 	eor.w	r1, r1, r3
   85aa8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   85aac:	bfc2      	ittt	gt
   85aae:	ebd4 050c 	rsbsgt	r5, r4, ip
   85ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85ab6:	bd70      	popgt	{r4, r5, r6, pc}
   85ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85abc:	f04f 0e00 	mov.w	lr, #0
   85ac0:	3c01      	subs	r4, #1
   85ac2:	f300 80ab 	bgt.w	85c1c <__aeabi_dmul+0x238>
   85ac6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   85aca:	bfde      	ittt	le
   85acc:	2000      	movle	r0, #0
   85ace:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   85ad2:	bd70      	pople	{r4, r5, r6, pc}
   85ad4:	f1c4 0400 	rsb	r4, r4, #0
   85ad8:	3c20      	subs	r4, #32
   85ada:	da35      	bge.n	85b48 <__aeabi_dmul+0x164>
   85adc:	340c      	adds	r4, #12
   85ade:	dc1b      	bgt.n	85b18 <__aeabi_dmul+0x134>
   85ae0:	f104 0414 	add.w	r4, r4, #20
   85ae4:	f1c4 0520 	rsb	r5, r4, #32
   85ae8:	fa00 f305 	lsl.w	r3, r0, r5
   85aec:	fa20 f004 	lsr.w	r0, r0, r4
   85af0:	fa01 f205 	lsl.w	r2, r1, r5
   85af4:	ea40 0002 	orr.w	r0, r0, r2
   85af8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   85afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85b00:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   85b04:	fa21 f604 	lsr.w	r6, r1, r4
   85b08:	eb42 0106 	adc.w	r1, r2, r6
   85b0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85b10:	bf08      	it	eq
   85b12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85b16:	bd70      	pop	{r4, r5, r6, pc}
   85b18:	f1c4 040c 	rsb	r4, r4, #12
   85b1c:	f1c4 0520 	rsb	r5, r4, #32
   85b20:	fa00 f304 	lsl.w	r3, r0, r4
   85b24:	fa20 f005 	lsr.w	r0, r0, r5
   85b28:	fa01 f204 	lsl.w	r2, r1, r4
   85b2c:	ea40 0002 	orr.w	r0, r0, r2
   85b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85b34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   85b38:	f141 0100 	adc.w	r1, r1, #0
   85b3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85b40:	bf08      	it	eq
   85b42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85b46:	bd70      	pop	{r4, r5, r6, pc}
   85b48:	f1c4 0520 	rsb	r5, r4, #32
   85b4c:	fa00 f205 	lsl.w	r2, r0, r5
   85b50:	ea4e 0e02 	orr.w	lr, lr, r2
   85b54:	fa20 f304 	lsr.w	r3, r0, r4
   85b58:	fa01 f205 	lsl.w	r2, r1, r5
   85b5c:	ea43 0302 	orr.w	r3, r3, r2
   85b60:	fa21 f004 	lsr.w	r0, r1, r4
   85b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85b68:	fa21 f204 	lsr.w	r2, r1, r4
   85b6c:	ea20 0002 	bic.w	r0, r0, r2
   85b70:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   85b74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   85b78:	bf08      	it	eq
   85b7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   85b7e:	bd70      	pop	{r4, r5, r6, pc}
   85b80:	f094 0f00 	teq	r4, #0
   85b84:	d10f      	bne.n	85ba6 <__aeabi_dmul+0x1c2>
   85b86:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   85b8a:	0040      	lsls	r0, r0, #1
   85b8c:	eb41 0101 	adc.w	r1, r1, r1
   85b90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85b94:	bf08      	it	eq
   85b96:	3c01      	subeq	r4, #1
   85b98:	d0f7      	beq.n	85b8a <__aeabi_dmul+0x1a6>
   85b9a:	ea41 0106 	orr.w	r1, r1, r6
   85b9e:	f095 0f00 	teq	r5, #0
   85ba2:	bf18      	it	ne
   85ba4:	4770      	bxne	lr
   85ba6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   85baa:	0052      	lsls	r2, r2, #1
   85bac:	eb43 0303 	adc.w	r3, r3, r3
   85bb0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   85bb4:	bf08      	it	eq
   85bb6:	3d01      	subeq	r5, #1
   85bb8:	d0f7      	beq.n	85baa <__aeabi_dmul+0x1c6>
   85bba:	ea43 0306 	orr.w	r3, r3, r6
   85bbe:	4770      	bx	lr
   85bc0:	ea94 0f0c 	teq	r4, ip
   85bc4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   85bc8:	bf18      	it	ne
   85bca:	ea95 0f0c 	teqne	r5, ip
   85bce:	d00c      	beq.n	85bea <__aeabi_dmul+0x206>
   85bd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85bd4:	bf18      	it	ne
   85bd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85bda:	d1d1      	bne.n	85b80 <__aeabi_dmul+0x19c>
   85bdc:	ea81 0103 	eor.w	r1, r1, r3
   85be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85be4:	f04f 0000 	mov.w	r0, #0
   85be8:	bd70      	pop	{r4, r5, r6, pc}
   85bea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85bee:	bf06      	itte	eq
   85bf0:	4610      	moveq	r0, r2
   85bf2:	4619      	moveq	r1, r3
   85bf4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85bf8:	d019      	beq.n	85c2e <__aeabi_dmul+0x24a>
   85bfa:	ea94 0f0c 	teq	r4, ip
   85bfe:	d102      	bne.n	85c06 <__aeabi_dmul+0x222>
   85c00:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   85c04:	d113      	bne.n	85c2e <__aeabi_dmul+0x24a>
   85c06:	ea95 0f0c 	teq	r5, ip
   85c0a:	d105      	bne.n	85c18 <__aeabi_dmul+0x234>
   85c0c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   85c10:	bf1c      	itt	ne
   85c12:	4610      	movne	r0, r2
   85c14:	4619      	movne	r1, r3
   85c16:	d10a      	bne.n	85c2e <__aeabi_dmul+0x24a>
   85c18:	ea81 0103 	eor.w	r1, r1, r3
   85c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   85c20:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   85c24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85c28:	f04f 0000 	mov.w	r0, #0
   85c2c:	bd70      	pop	{r4, r5, r6, pc}
   85c2e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   85c32:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   85c36:	bd70      	pop	{r4, r5, r6, pc}

00085c38 <__aeabi_ddiv>:
   85c38:	b570      	push	{r4, r5, r6, lr}
   85c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   85c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   85c46:	bf1d      	ittte	ne
   85c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   85c4c:	ea94 0f0c 	teqne	r4, ip
   85c50:	ea95 0f0c 	teqne	r5, ip
   85c54:	f000 f8a7 	bleq	85da6 <__aeabi_ddiv+0x16e>
   85c58:	eba4 0405 	sub.w	r4, r4, r5
   85c5c:	ea81 0e03 	eor.w	lr, r1, r3
   85c60:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   85c64:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85c68:	f000 8088 	beq.w	85d7c <__aeabi_ddiv+0x144>
   85c6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85c70:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   85c74:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   85c78:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   85c7c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   85c80:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   85c84:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   85c88:	ea4f 2600 	mov.w	r6, r0, lsl #8
   85c8c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   85c90:	429d      	cmp	r5, r3
   85c92:	bf08      	it	eq
   85c94:	4296      	cmpeq	r6, r2
   85c96:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   85c9a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   85c9e:	d202      	bcs.n	85ca6 <__aeabi_ddiv+0x6e>
   85ca0:	085b      	lsrs	r3, r3, #1
   85ca2:	ea4f 0232 	mov.w	r2, r2, rrx
   85ca6:	1ab6      	subs	r6, r6, r2
   85ca8:	eb65 0503 	sbc.w	r5, r5, r3
   85cac:	085b      	lsrs	r3, r3, #1
   85cae:	ea4f 0232 	mov.w	r2, r2, rrx
   85cb2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   85cb6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   85cba:	ebb6 0e02 	subs.w	lr, r6, r2
   85cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   85cc2:	bf22      	ittt	cs
   85cc4:	1ab6      	subcs	r6, r6, r2
   85cc6:	4675      	movcs	r5, lr
   85cc8:	ea40 000c 	orrcs.w	r0, r0, ip
   85ccc:	085b      	lsrs	r3, r3, #1
   85cce:	ea4f 0232 	mov.w	r2, r2, rrx
   85cd2:	ebb6 0e02 	subs.w	lr, r6, r2
   85cd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   85cda:	bf22      	ittt	cs
   85cdc:	1ab6      	subcs	r6, r6, r2
   85cde:	4675      	movcs	r5, lr
   85ce0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   85ce4:	085b      	lsrs	r3, r3, #1
   85ce6:	ea4f 0232 	mov.w	r2, r2, rrx
   85cea:	ebb6 0e02 	subs.w	lr, r6, r2
   85cee:	eb75 0e03 	sbcs.w	lr, r5, r3
   85cf2:	bf22      	ittt	cs
   85cf4:	1ab6      	subcs	r6, r6, r2
   85cf6:	4675      	movcs	r5, lr
   85cf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   85cfc:	085b      	lsrs	r3, r3, #1
   85cfe:	ea4f 0232 	mov.w	r2, r2, rrx
   85d02:	ebb6 0e02 	subs.w	lr, r6, r2
   85d06:	eb75 0e03 	sbcs.w	lr, r5, r3
   85d0a:	bf22      	ittt	cs
   85d0c:	1ab6      	subcs	r6, r6, r2
   85d0e:	4675      	movcs	r5, lr
   85d10:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   85d14:	ea55 0e06 	orrs.w	lr, r5, r6
   85d18:	d018      	beq.n	85d4c <__aeabi_ddiv+0x114>
   85d1a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   85d1e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   85d22:	ea4f 1606 	mov.w	r6, r6, lsl #4
   85d26:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   85d2a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   85d2e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   85d32:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   85d36:	d1c0      	bne.n	85cba <__aeabi_ddiv+0x82>
   85d38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85d3c:	d10b      	bne.n	85d56 <__aeabi_ddiv+0x11e>
   85d3e:	ea41 0100 	orr.w	r1, r1, r0
   85d42:	f04f 0000 	mov.w	r0, #0
   85d46:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   85d4a:	e7b6      	b.n	85cba <__aeabi_ddiv+0x82>
   85d4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85d50:	bf04      	itt	eq
   85d52:	4301      	orreq	r1, r0
   85d54:	2000      	moveq	r0, #0
   85d56:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   85d5a:	bf88      	it	hi
   85d5c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   85d60:	f63f aeaf 	bhi.w	85ac2 <__aeabi_dmul+0xde>
   85d64:	ebb5 0c03 	subs.w	ip, r5, r3
   85d68:	bf04      	itt	eq
   85d6a:	ebb6 0c02 	subseq.w	ip, r6, r2
   85d6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85d72:	f150 0000 	adcs.w	r0, r0, #0
   85d76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85d7a:	bd70      	pop	{r4, r5, r6, pc}
   85d7c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   85d80:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   85d84:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   85d88:	bfc2      	ittt	gt
   85d8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   85d8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   85d92:	bd70      	popgt	{r4, r5, r6, pc}
   85d94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85d98:	f04f 0e00 	mov.w	lr, #0
   85d9c:	3c01      	subs	r4, #1
   85d9e:	e690      	b.n	85ac2 <__aeabi_dmul+0xde>
   85da0:	ea45 0e06 	orr.w	lr, r5, r6
   85da4:	e68d      	b.n	85ac2 <__aeabi_dmul+0xde>
   85da6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   85daa:	ea94 0f0c 	teq	r4, ip
   85dae:	bf08      	it	eq
   85db0:	ea95 0f0c 	teqeq	r5, ip
   85db4:	f43f af3b 	beq.w	85c2e <__aeabi_dmul+0x24a>
   85db8:	ea94 0f0c 	teq	r4, ip
   85dbc:	d10a      	bne.n	85dd4 <__aeabi_ddiv+0x19c>
   85dbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85dc2:	f47f af34 	bne.w	85c2e <__aeabi_dmul+0x24a>
   85dc6:	ea95 0f0c 	teq	r5, ip
   85dca:	f47f af25 	bne.w	85c18 <__aeabi_dmul+0x234>
   85dce:	4610      	mov	r0, r2
   85dd0:	4619      	mov	r1, r3
   85dd2:	e72c      	b.n	85c2e <__aeabi_dmul+0x24a>
   85dd4:	ea95 0f0c 	teq	r5, ip
   85dd8:	d106      	bne.n	85de8 <__aeabi_ddiv+0x1b0>
   85dda:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   85dde:	f43f aefd 	beq.w	85bdc <__aeabi_dmul+0x1f8>
   85de2:	4610      	mov	r0, r2
   85de4:	4619      	mov	r1, r3
   85de6:	e722      	b.n	85c2e <__aeabi_dmul+0x24a>
   85de8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   85dec:	bf18      	it	ne
   85dee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   85df2:	f47f aec5 	bne.w	85b80 <__aeabi_dmul+0x19c>
   85df6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   85dfa:	f47f af0d 	bne.w	85c18 <__aeabi_dmul+0x234>
   85dfe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   85e02:	f47f aeeb 	bne.w	85bdc <__aeabi_dmul+0x1f8>
   85e06:	e712      	b.n	85c2e <__aeabi_dmul+0x24a>

00085e08 <__gedf2>:
   85e08:	f04f 3cff 	mov.w	ip, #4294967295
   85e0c:	e006      	b.n	85e1c <__cmpdf2+0x4>
   85e0e:	bf00      	nop

00085e10 <__ledf2>:
   85e10:	f04f 0c01 	mov.w	ip, #1
   85e14:	e002      	b.n	85e1c <__cmpdf2+0x4>
   85e16:	bf00      	nop

00085e18 <__cmpdf2>:
   85e18:	f04f 0c01 	mov.w	ip, #1
   85e1c:	f84d cd04 	str.w	ip, [sp, #-4]!
   85e20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   85e24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85e28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   85e2c:	bf18      	it	ne
   85e2e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   85e32:	d01b      	beq.n	85e6c <__cmpdf2+0x54>
   85e34:	b001      	add	sp, #4
   85e36:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   85e3a:	bf0c      	ite	eq
   85e3c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   85e40:	ea91 0f03 	teqne	r1, r3
   85e44:	bf02      	ittt	eq
   85e46:	ea90 0f02 	teqeq	r0, r2
   85e4a:	2000      	moveq	r0, #0
   85e4c:	4770      	bxeq	lr
   85e4e:	f110 0f00 	cmn.w	r0, #0
   85e52:	ea91 0f03 	teq	r1, r3
   85e56:	bf58      	it	pl
   85e58:	4299      	cmppl	r1, r3
   85e5a:	bf08      	it	eq
   85e5c:	4290      	cmpeq	r0, r2
   85e5e:	bf2c      	ite	cs
   85e60:	17d8      	asrcs	r0, r3, #31
   85e62:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   85e66:	f040 0001 	orr.w	r0, r0, #1
   85e6a:	4770      	bx	lr
   85e6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   85e70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85e74:	d102      	bne.n	85e7c <__cmpdf2+0x64>
   85e76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   85e7a:	d107      	bne.n	85e8c <__cmpdf2+0x74>
   85e7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   85e80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85e84:	d1d6      	bne.n	85e34 <__cmpdf2+0x1c>
   85e86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   85e8a:	d0d3      	beq.n	85e34 <__cmpdf2+0x1c>
   85e8c:	f85d 0b04 	ldr.w	r0, [sp], #4
   85e90:	4770      	bx	lr
   85e92:	bf00      	nop

00085e94 <__aeabi_cdrcmple>:
   85e94:	4684      	mov	ip, r0
   85e96:	4610      	mov	r0, r2
   85e98:	4662      	mov	r2, ip
   85e9a:	468c      	mov	ip, r1
   85e9c:	4619      	mov	r1, r3
   85e9e:	4663      	mov	r3, ip
   85ea0:	e000      	b.n	85ea4 <__aeabi_cdcmpeq>
   85ea2:	bf00      	nop

00085ea4 <__aeabi_cdcmpeq>:
   85ea4:	b501      	push	{r0, lr}
   85ea6:	f7ff ffb7 	bl	85e18 <__cmpdf2>
   85eaa:	2800      	cmp	r0, #0
   85eac:	bf48      	it	mi
   85eae:	f110 0f00 	cmnmi.w	r0, #0
   85eb2:	bd01      	pop	{r0, pc}

00085eb4 <__aeabi_dcmpeq>:
   85eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
   85eb8:	f7ff fff4 	bl	85ea4 <__aeabi_cdcmpeq>
   85ebc:	bf0c      	ite	eq
   85ebe:	2001      	moveq	r0, #1
   85ec0:	2000      	movne	r0, #0
   85ec2:	f85d fb08 	ldr.w	pc, [sp], #8
   85ec6:	bf00      	nop

00085ec8 <__aeabi_dcmplt>:
   85ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
   85ecc:	f7ff ffea 	bl	85ea4 <__aeabi_cdcmpeq>
   85ed0:	bf34      	ite	cc
   85ed2:	2001      	movcc	r0, #1
   85ed4:	2000      	movcs	r0, #0
   85ed6:	f85d fb08 	ldr.w	pc, [sp], #8
   85eda:	bf00      	nop

00085edc <__aeabi_dcmple>:
   85edc:	f84d ed08 	str.w	lr, [sp, #-8]!
   85ee0:	f7ff ffe0 	bl	85ea4 <__aeabi_cdcmpeq>
   85ee4:	bf94      	ite	ls
   85ee6:	2001      	movls	r0, #1
   85ee8:	2000      	movhi	r0, #0
   85eea:	f85d fb08 	ldr.w	pc, [sp], #8
   85eee:	bf00      	nop

00085ef0 <__aeabi_dcmpge>:
   85ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
   85ef4:	f7ff ffce 	bl	85e94 <__aeabi_cdrcmple>
   85ef8:	bf94      	ite	ls
   85efa:	2001      	movls	r0, #1
   85efc:	2000      	movhi	r0, #0
   85efe:	f85d fb08 	ldr.w	pc, [sp], #8
   85f02:	bf00      	nop

00085f04 <__aeabi_dcmpgt>:
   85f04:	f84d ed08 	str.w	lr, [sp, #-8]!
   85f08:	f7ff ffc4 	bl	85e94 <__aeabi_cdrcmple>
   85f0c:	bf34      	ite	cc
   85f0e:	2001      	movcc	r0, #1
   85f10:	2000      	movcs	r0, #0
   85f12:	f85d fb08 	ldr.w	pc, [sp], #8
   85f16:	bf00      	nop

00085f18 <__aeabi_dcmpun>:
   85f18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   85f1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85f20:	d102      	bne.n	85f28 <__aeabi_dcmpun+0x10>
   85f22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   85f26:	d10a      	bne.n	85f3e <__aeabi_dcmpun+0x26>
   85f28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   85f2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   85f30:	d102      	bne.n	85f38 <__aeabi_dcmpun+0x20>
   85f32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   85f36:	d102      	bne.n	85f3e <__aeabi_dcmpun+0x26>
   85f38:	f04f 0000 	mov.w	r0, #0
   85f3c:	4770      	bx	lr
   85f3e:	f04f 0001 	mov.w	r0, #1
   85f42:	4770      	bx	lr

00085f44 <__aeabi_d2iz>:
   85f44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   85f48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   85f4c:	d215      	bcs.n	85f7a <__aeabi_d2iz+0x36>
   85f4e:	d511      	bpl.n	85f74 <__aeabi_d2iz+0x30>
   85f50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   85f54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   85f58:	d912      	bls.n	85f80 <__aeabi_d2iz+0x3c>
   85f5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   85f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   85f62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   85f66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85f6a:	fa23 f002 	lsr.w	r0, r3, r2
   85f6e:	bf18      	it	ne
   85f70:	4240      	negne	r0, r0
   85f72:	4770      	bx	lr
   85f74:	f04f 0000 	mov.w	r0, #0
   85f78:	4770      	bx	lr
   85f7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   85f7e:	d105      	bne.n	85f8c <__aeabi_d2iz+0x48>
   85f80:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   85f84:	bf08      	it	eq
   85f86:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   85f8a:	4770      	bx	lr
   85f8c:	f04f 0000 	mov.w	r0, #0
   85f90:	4770      	bx	lr
   85f92:	bf00      	nop

00085f94 <__aeabi_uldivmod>:
   85f94:	b953      	cbnz	r3, 85fac <__aeabi_uldivmod+0x18>
   85f96:	b94a      	cbnz	r2, 85fac <__aeabi_uldivmod+0x18>
   85f98:	2900      	cmp	r1, #0
   85f9a:	bf08      	it	eq
   85f9c:	2800      	cmpeq	r0, #0
   85f9e:	bf1c      	itt	ne
   85fa0:	f04f 31ff 	movne.w	r1, #4294967295
   85fa4:	f04f 30ff 	movne.w	r0, #4294967295
   85fa8:	f000 b97a 	b.w	862a0 <__aeabi_idiv0>
   85fac:	f1ad 0c08 	sub.w	ip, sp, #8
   85fb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85fb4:	f000 f806 	bl	85fc4 <__udivmoddi4>
   85fb8:	f8dd e004 	ldr.w	lr, [sp, #4]
   85fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85fc0:	b004      	add	sp, #16
   85fc2:	4770      	bx	lr

00085fc4 <__udivmoddi4>:
   85fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85fc8:	468c      	mov	ip, r1
   85fca:	460e      	mov	r6, r1
   85fcc:	4604      	mov	r4, r0
   85fce:	9d08      	ldr	r5, [sp, #32]
   85fd0:	2b00      	cmp	r3, #0
   85fd2:	d150      	bne.n	86076 <__udivmoddi4+0xb2>
   85fd4:	428a      	cmp	r2, r1
   85fd6:	4617      	mov	r7, r2
   85fd8:	d96c      	bls.n	860b4 <__udivmoddi4+0xf0>
   85fda:	fab2 fe82 	clz	lr, r2
   85fde:	f1be 0f00 	cmp.w	lr, #0
   85fe2:	d00b      	beq.n	85ffc <__udivmoddi4+0x38>
   85fe4:	f1ce 0c20 	rsb	ip, lr, #32
   85fe8:	fa01 f60e 	lsl.w	r6, r1, lr
   85fec:	fa20 fc0c 	lsr.w	ip, r0, ip
   85ff0:	fa02 f70e 	lsl.w	r7, r2, lr
   85ff4:	ea4c 0c06 	orr.w	ip, ip, r6
   85ff8:	fa00 f40e 	lsl.w	r4, r0, lr
   85ffc:	0c3a      	lsrs	r2, r7, #16
   85ffe:	fbbc f9f2 	udiv	r9, ip, r2
   86002:	b2bb      	uxth	r3, r7
   86004:	fb02 cc19 	mls	ip, r2, r9, ip
   86008:	fb09 fa03 	mul.w	sl, r9, r3
   8600c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86010:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   86014:	45b2      	cmp	sl, r6
   86016:	d90a      	bls.n	8602e <__udivmoddi4+0x6a>
   86018:	19f6      	adds	r6, r6, r7
   8601a:	f109 31ff 	add.w	r1, r9, #4294967295
   8601e:	f080 8125 	bcs.w	8626c <__udivmoddi4+0x2a8>
   86022:	45b2      	cmp	sl, r6
   86024:	f240 8122 	bls.w	8626c <__udivmoddi4+0x2a8>
   86028:	f1a9 0902 	sub.w	r9, r9, #2
   8602c:	443e      	add	r6, r7
   8602e:	eba6 060a 	sub.w	r6, r6, sl
   86032:	fbb6 f0f2 	udiv	r0, r6, r2
   86036:	fb02 6610 	mls	r6, r2, r0, r6
   8603a:	fb00 f303 	mul.w	r3, r0, r3
   8603e:	b2a4      	uxth	r4, r4
   86040:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   86044:	42a3      	cmp	r3, r4
   86046:	d909      	bls.n	8605c <__udivmoddi4+0x98>
   86048:	19e4      	adds	r4, r4, r7
   8604a:	f100 32ff 	add.w	r2, r0, #4294967295
   8604e:	f080 810b 	bcs.w	86268 <__udivmoddi4+0x2a4>
   86052:	42a3      	cmp	r3, r4
   86054:	f240 8108 	bls.w	86268 <__udivmoddi4+0x2a4>
   86058:	3802      	subs	r0, #2
   8605a:	443c      	add	r4, r7
   8605c:	2100      	movs	r1, #0
   8605e:	1ae4      	subs	r4, r4, r3
   86060:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86064:	2d00      	cmp	r5, #0
   86066:	d062      	beq.n	8612e <__udivmoddi4+0x16a>
   86068:	2300      	movs	r3, #0
   8606a:	fa24 f40e 	lsr.w	r4, r4, lr
   8606e:	602c      	str	r4, [r5, #0]
   86070:	606b      	str	r3, [r5, #4]
   86072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86076:	428b      	cmp	r3, r1
   86078:	d907      	bls.n	8608a <__udivmoddi4+0xc6>
   8607a:	2d00      	cmp	r5, #0
   8607c:	d055      	beq.n	8612a <__udivmoddi4+0x166>
   8607e:	2100      	movs	r1, #0
   86080:	e885 0041 	stmia.w	r5, {r0, r6}
   86084:	4608      	mov	r0, r1
   86086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8608a:	fab3 f183 	clz	r1, r3
   8608e:	2900      	cmp	r1, #0
   86090:	f040 808f 	bne.w	861b2 <__udivmoddi4+0x1ee>
   86094:	42b3      	cmp	r3, r6
   86096:	d302      	bcc.n	8609e <__udivmoddi4+0xda>
   86098:	4282      	cmp	r2, r0
   8609a:	f200 80fc 	bhi.w	86296 <__udivmoddi4+0x2d2>
   8609e:	1a84      	subs	r4, r0, r2
   860a0:	eb66 0603 	sbc.w	r6, r6, r3
   860a4:	2001      	movs	r0, #1
   860a6:	46b4      	mov	ip, r6
   860a8:	2d00      	cmp	r5, #0
   860aa:	d040      	beq.n	8612e <__udivmoddi4+0x16a>
   860ac:	e885 1010 	stmia.w	r5, {r4, ip}
   860b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   860b4:	b912      	cbnz	r2, 860bc <__udivmoddi4+0xf8>
   860b6:	2701      	movs	r7, #1
   860b8:	fbb7 f7f2 	udiv	r7, r7, r2
   860bc:	fab7 fe87 	clz	lr, r7
   860c0:	f1be 0f00 	cmp.w	lr, #0
   860c4:	d135      	bne.n	86132 <__udivmoddi4+0x16e>
   860c6:	2101      	movs	r1, #1
   860c8:	1bf6      	subs	r6, r6, r7
   860ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   860ce:	fa1f f887 	uxth.w	r8, r7
   860d2:	fbb6 f2fc 	udiv	r2, r6, ip
   860d6:	fb0c 6612 	mls	r6, ip, r2, r6
   860da:	fb08 f002 	mul.w	r0, r8, r2
   860de:	0c23      	lsrs	r3, r4, #16
   860e0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   860e4:	42b0      	cmp	r0, r6
   860e6:	d907      	bls.n	860f8 <__udivmoddi4+0x134>
   860e8:	19f6      	adds	r6, r6, r7
   860ea:	f102 33ff 	add.w	r3, r2, #4294967295
   860ee:	d202      	bcs.n	860f6 <__udivmoddi4+0x132>
   860f0:	42b0      	cmp	r0, r6
   860f2:	f200 80d2 	bhi.w	8629a <__udivmoddi4+0x2d6>
   860f6:	461a      	mov	r2, r3
   860f8:	1a36      	subs	r6, r6, r0
   860fa:	fbb6 f0fc 	udiv	r0, r6, ip
   860fe:	fb0c 6610 	mls	r6, ip, r0, r6
   86102:	fb08 f800 	mul.w	r8, r8, r0
   86106:	b2a3      	uxth	r3, r4
   86108:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   8610c:	45a0      	cmp	r8, r4
   8610e:	d907      	bls.n	86120 <__udivmoddi4+0x15c>
   86110:	19e4      	adds	r4, r4, r7
   86112:	f100 33ff 	add.w	r3, r0, #4294967295
   86116:	d202      	bcs.n	8611e <__udivmoddi4+0x15a>
   86118:	45a0      	cmp	r8, r4
   8611a:	f200 80b9 	bhi.w	86290 <__udivmoddi4+0x2cc>
   8611e:	4618      	mov	r0, r3
   86120:	eba4 0408 	sub.w	r4, r4, r8
   86124:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86128:	e79c      	b.n	86064 <__udivmoddi4+0xa0>
   8612a:	4629      	mov	r1, r5
   8612c:	4628      	mov	r0, r5
   8612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86132:	fa07 f70e 	lsl.w	r7, r7, lr
   86136:	f1ce 0320 	rsb	r3, lr, #32
   8613a:	fa26 f203 	lsr.w	r2, r6, r3
   8613e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86142:	fbb2 f1fc 	udiv	r1, r2, ip
   86146:	fa1f f887 	uxth.w	r8, r7
   8614a:	fb0c 2211 	mls	r2, ip, r1, r2
   8614e:	fa06 f60e 	lsl.w	r6, r6, lr
   86152:	fa20 f303 	lsr.w	r3, r0, r3
   86156:	fb01 f908 	mul.w	r9, r1, r8
   8615a:	4333      	orrs	r3, r6
   8615c:	0c1e      	lsrs	r6, r3, #16
   8615e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86162:	45b1      	cmp	r9, r6
   86164:	fa00 f40e 	lsl.w	r4, r0, lr
   86168:	d909      	bls.n	8617e <__udivmoddi4+0x1ba>
   8616a:	19f6      	adds	r6, r6, r7
   8616c:	f101 32ff 	add.w	r2, r1, #4294967295
   86170:	f080 808c 	bcs.w	8628c <__udivmoddi4+0x2c8>
   86174:	45b1      	cmp	r9, r6
   86176:	f240 8089 	bls.w	8628c <__udivmoddi4+0x2c8>
   8617a:	3902      	subs	r1, #2
   8617c:	443e      	add	r6, r7
   8617e:	eba6 0609 	sub.w	r6, r6, r9
   86182:	fbb6 f0fc 	udiv	r0, r6, ip
   86186:	fb0c 6210 	mls	r2, ip, r0, r6
   8618a:	fb00 f908 	mul.w	r9, r0, r8
   8618e:	b29e      	uxth	r6, r3
   86190:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86194:	45b1      	cmp	r9, r6
   86196:	d907      	bls.n	861a8 <__udivmoddi4+0x1e4>
   86198:	19f6      	adds	r6, r6, r7
   8619a:	f100 33ff 	add.w	r3, r0, #4294967295
   8619e:	d271      	bcs.n	86284 <__udivmoddi4+0x2c0>
   861a0:	45b1      	cmp	r9, r6
   861a2:	d96f      	bls.n	86284 <__udivmoddi4+0x2c0>
   861a4:	3802      	subs	r0, #2
   861a6:	443e      	add	r6, r7
   861a8:	eba6 0609 	sub.w	r6, r6, r9
   861ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   861b0:	e78f      	b.n	860d2 <__udivmoddi4+0x10e>
   861b2:	f1c1 0720 	rsb	r7, r1, #32
   861b6:	fa22 f807 	lsr.w	r8, r2, r7
   861ba:	408b      	lsls	r3, r1
   861bc:	ea48 0303 	orr.w	r3, r8, r3
   861c0:	fa26 f407 	lsr.w	r4, r6, r7
   861c4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   861c8:	fbb4 f9fe 	udiv	r9, r4, lr
   861cc:	fa1f fc83 	uxth.w	ip, r3
   861d0:	fb0e 4419 	mls	r4, lr, r9, r4
   861d4:	408e      	lsls	r6, r1
   861d6:	fa20 f807 	lsr.w	r8, r0, r7
   861da:	fb09 fa0c 	mul.w	sl, r9, ip
   861de:	ea48 0806 	orr.w	r8, r8, r6
   861e2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   861e6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   861ea:	45a2      	cmp	sl, r4
   861ec:	fa02 f201 	lsl.w	r2, r2, r1
   861f0:	fa00 f601 	lsl.w	r6, r0, r1
   861f4:	d908      	bls.n	86208 <__udivmoddi4+0x244>
   861f6:	18e4      	adds	r4, r4, r3
   861f8:	f109 30ff 	add.w	r0, r9, #4294967295
   861fc:	d244      	bcs.n	86288 <__udivmoddi4+0x2c4>
   861fe:	45a2      	cmp	sl, r4
   86200:	d942      	bls.n	86288 <__udivmoddi4+0x2c4>
   86202:	f1a9 0902 	sub.w	r9, r9, #2
   86206:	441c      	add	r4, r3
   86208:	eba4 040a 	sub.w	r4, r4, sl
   8620c:	fbb4 f0fe 	udiv	r0, r4, lr
   86210:	fb0e 4410 	mls	r4, lr, r0, r4
   86214:	fb00 fc0c 	mul.w	ip, r0, ip
   86218:	fa1f f888 	uxth.w	r8, r8
   8621c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86220:	45a4      	cmp	ip, r4
   86222:	d907      	bls.n	86234 <__udivmoddi4+0x270>
   86224:	18e4      	adds	r4, r4, r3
   86226:	f100 3eff 	add.w	lr, r0, #4294967295
   8622a:	d229      	bcs.n	86280 <__udivmoddi4+0x2bc>
   8622c:	45a4      	cmp	ip, r4
   8622e:	d927      	bls.n	86280 <__udivmoddi4+0x2bc>
   86230:	3802      	subs	r0, #2
   86232:	441c      	add	r4, r3
   86234:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86238:	fba0 8902 	umull	r8, r9, r0, r2
   8623c:	eba4 0c0c 	sub.w	ip, r4, ip
   86240:	45cc      	cmp	ip, r9
   86242:	46c2      	mov	sl, r8
   86244:	46ce      	mov	lr, r9
   86246:	d315      	bcc.n	86274 <__udivmoddi4+0x2b0>
   86248:	d012      	beq.n	86270 <__udivmoddi4+0x2ac>
   8624a:	b155      	cbz	r5, 86262 <__udivmoddi4+0x29e>
   8624c:	ebb6 030a 	subs.w	r3, r6, sl
   86250:	eb6c 060e 	sbc.w	r6, ip, lr
   86254:	fa06 f707 	lsl.w	r7, r6, r7
   86258:	40cb      	lsrs	r3, r1
   8625a:	431f      	orrs	r7, r3
   8625c:	40ce      	lsrs	r6, r1
   8625e:	602f      	str	r7, [r5, #0]
   86260:	606e      	str	r6, [r5, #4]
   86262:	2100      	movs	r1, #0
   86264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86268:	4610      	mov	r0, r2
   8626a:	e6f7      	b.n	8605c <__udivmoddi4+0x98>
   8626c:	4689      	mov	r9, r1
   8626e:	e6de      	b.n	8602e <__udivmoddi4+0x6a>
   86270:	4546      	cmp	r6, r8
   86272:	d2ea      	bcs.n	8624a <__udivmoddi4+0x286>
   86274:	ebb8 0a02 	subs.w	sl, r8, r2
   86278:	eb69 0e03 	sbc.w	lr, r9, r3
   8627c:	3801      	subs	r0, #1
   8627e:	e7e4      	b.n	8624a <__udivmoddi4+0x286>
   86280:	4670      	mov	r0, lr
   86282:	e7d7      	b.n	86234 <__udivmoddi4+0x270>
   86284:	4618      	mov	r0, r3
   86286:	e78f      	b.n	861a8 <__udivmoddi4+0x1e4>
   86288:	4681      	mov	r9, r0
   8628a:	e7bd      	b.n	86208 <__udivmoddi4+0x244>
   8628c:	4611      	mov	r1, r2
   8628e:	e776      	b.n	8617e <__udivmoddi4+0x1ba>
   86290:	3802      	subs	r0, #2
   86292:	443c      	add	r4, r7
   86294:	e744      	b.n	86120 <__udivmoddi4+0x15c>
   86296:	4608      	mov	r0, r1
   86298:	e706      	b.n	860a8 <__udivmoddi4+0xe4>
   8629a:	3a02      	subs	r2, #2
   8629c:	443e      	add	r6, r7
   8629e:	e72b      	b.n	860f8 <__udivmoddi4+0x134>

000862a0 <__aeabi_idiv0>:
   862a0:	4770      	bx	lr
   862a2:	bf00      	nop
   862a4:	74697257 	.word	0x74697257
   862a8:	20676e69 	.word	0x20676e69
   862ac:	66206f74 	.word	0x66206f74
   862b0:	6873616c 	.word	0x6873616c
   862b4:	0000000a 	.word	0x0000000a
   862b8:	20646142 	.word	0x20646142
   862bc:	6f6c6e75 	.word	0x6f6c6e75
   862c0:	000a6b63 	.word	0x000a6b63
   862c4:	20646142 	.word	0x20646142
   862c8:	74697277 	.word	0x74697277
   862cc:	00000a65 	.word	0x00000a65
   862d0:	20646142 	.word	0x20646142
   862d4:	6b636f6c 	.word	0x6b636f6c
   862d8:	0000000a 	.word	0x0000000a
   862dc:	6f727245 	.word	0x6f727245
   862e0:	000a3372 	.word	0x000a3372
   862e4:	646e6553 	.word	0x646e6553
   862e8:	20465220 	.word	0x20465220
   862ec:	0000000a 	.word	0x0000000a

000862f0 <pipe0>:
   862f0:	00f000f0 00f000f0 000000f1 64616572     ............read
   86300:	67657220 20752520 206c6176 25207525      reg %u val %u %
   86310:	75252075 20752520 000a7525 64616572     u %u %u %u..read
   86320:	67657220 20752520 206c6176 0a207525      reg %u val %u .
   86330:	00000000 6f727245 000a3272 6f727245     ....Error2..Erro
   86340:	00000a72 74697257 6f742065 616c6620     r...Write to fla
   86350:	000a6873 74617453 68632065 65676e61     sh..State change
   86360:	0000000a                                ....

00086364 <_global_impure_ptr>:
   86364:	200704f0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   86374:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   86384:	46454443 00000000 33323130 37363534     CDEF....01234567
   86394:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   863a4:	0000296c 00000030                       l)..0...

000863ac <blanks.7223>:
   863ac:	20202020 20202020 20202020 20202020                     

000863bc <zeroes.7224>:
   863bc:	30303030 30303030 30303030 30303030     0000000000000000
   863cc:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   863dc:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   863ec:	00000000                                ....

000863f0 <__mprec_bigtens>:
   863f0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   86400:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   86410:	7f73bf3c 75154fdd                       <.s..O.u

00086418 <__mprec_tens>:
   86418:	00000000 3ff00000 00000000 40240000     .......?......$@
   86428:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   86438:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   86448:	00000000 412e8480 00000000 416312d0     .......A......cA
   86458:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   86468:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   86478:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   86488:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   86498:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   864a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   864b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   864c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   864d8:	79d99db4 44ea7843                       ...yCx.D

000864e0 <p05.6055>:
   864e0:	00000005 00000019 0000007d              ........}...

000864ec <_ctype_>:
   864ec:	20202000 20202020 28282020 20282828     .         ((((( 
   864fc:	20202020 20202020 20202020 20202020                     
   8650c:	10108820 10101010 10101010 10101010      ...............
   8651c:	04040410 04040404 10040404 10101010     ................
   8652c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8653c:	01010101 01010101 01010101 10101010     ................
   8654c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8655c:	02020202 02020202 02020202 10101010     ................
   8656c:	00000020 00000000 00000000 00000000      ...............
	...

000865f0 <_init>:
   865f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   865f2:	bf00      	nop
   865f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   865f6:	bc08      	pop	{r3}
   865f8:	469e      	mov	lr, r3
   865fa:	4770      	bx	lr

000865fc <__init_array_start>:
   865fc:	00083709 	.word	0x00083709

00086600 <__frame_dummy_init_array_entry>:
   86600:	00080119                                ....

00086604 <_fini>:
   86604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86606:	bf00      	nop
   86608:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8660a:	bc08      	pop	{r3}
   8660c:	469e      	mov	lr, r3
   8660e:	4770      	bx	lr

00086610 <__fini_array_start>:
   86610:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b470      	push	{r4, r5, r6}
20070002:	b083      	sub	sp, #12
20070004:	9e06      	ldr	r6, [sp, #24]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070006:	4d1b      	ldr	r5, [pc, #108]	; (20070074 <efc_perform_read_sequence+0x74>)
20070008:	42a8      	cmp	r0, r5
2007000a:	bf0c      	ite	eq
2007000c:	f44f 2500 	moveq.w	r5, #524288	; 0x80000
20070010:	f44f 2540 	movne.w	r5, #786432	; 0xc0000
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070014:	b35b      	cbz	r3, 2007006e <efc_perform_read_sequence+0x6e>
20070016:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070018:	6803      	ldr	r3, [r0, #0]
2007001a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2007001e:	6003      	str	r3, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070020:	b2c9      	uxtb	r1, r1
20070022:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070026:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070028:	6883      	ldr	r3, [r0, #8]
2007002a:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007002c:	9b01      	ldr	r3, [sp, #4]
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d1f9      	bne.n	20070028 <efc_perform_read_sequence+0x28>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070034:	b14e      	cbz	r6, 2007004a <efc_perform_read_sequence+0x4a>
20070036:	4629      	mov	r1, r5
20070038:	1f23      	subs	r3, r4, #4
2007003a:	eb05 0586 	add.w	r5, r5, r6, lsl #2
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007003e:	f851 4b04 	ldr.w	r4, [r1], #4
20070042:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070046:	42a9      	cmp	r1, r5
20070048:	d1f9      	bne.n	2007003e <efc_perform_read_sequence+0x3e>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007004a:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
2007004c:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20070050:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070052:	6883      	ldr	r3, [r0, #8]
20070054:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070056:	9b01      	ldr	r3, [sp, #4]
20070058:	f013 0f01 	tst.w	r3, #1
2007005c:	d0f9      	beq.n	20070052 <efc_perform_read_sequence+0x52>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007005e:	6803      	ldr	r3, [r0, #0]
20070060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070064:	6003      	str	r3, [r0, #0]

	return EFC_RC_OK;
20070066:	2000      	movs	r0, #0
}
20070068:	b003      	add	sp, #12
2007006a:	bc70      	pop	{r4, r5, r6}
2007006c:	4770      	bx	lr
		return EFC_RC_INVALID;
2007006e:	2002      	movs	r0, #2
20070070:	e7fa      	b.n	20070068 <efc_perform_read_sequence+0x68>
20070072:	bf00      	nop
20070074:	400e0a00 	.word	0x400e0a00

20070078 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070078:	6001      	str	r1, [r0, #0]
2007007a:	4770      	bx	lr

2007007c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007007c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007007e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20070080:	6883      	ldr	r3, [r0, #8]
20070082:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070084:	9b01      	ldr	r3, [sp, #4]
20070086:	f013 0f01 	tst.w	r3, #1
2007008a:	d0f9      	beq.n	20070080 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2007008c:	9801      	ldr	r0, [sp, #4]
}
2007008e:	f000 0006 	and.w	r0, r0, #6
20070092:	b002      	add	sp, #8
20070094:	4770      	bx	lr
20070096:	bf00      	nop

20070098 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070098:	f44f 6380 	mov.w	r3, #1024	; 0x400
2007009c:	4a20      	ldr	r2, [pc, #128]	; (20070120 <SystemInit+0x88>)
2007009e:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200700a0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700a4:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
200700a6:	4b1f      	ldr	r3, [pc, #124]	; (20070124 <SystemInit+0x8c>)
200700a8:	6a1b      	ldr	r3, [r3, #32]
200700aa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
200700ae:	d107      	bne.n	200700c0 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700b0:	4a1d      	ldr	r2, [pc, #116]	; (20070128 <SystemInit+0x90>)
200700b2:	4b1c      	ldr	r3, [pc, #112]	; (20070124 <SystemInit+0x8c>)
200700b4:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
200700b6:	461a      	mov	r2, r3
200700b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ba:	f013 0f01 	tst.w	r3, #1
200700be:	d0fb      	beq.n	200700b8 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
200700c0:	4a1a      	ldr	r2, [pc, #104]	; (2007012c <SystemInit+0x94>)
200700c2:	4b18      	ldr	r3, [pc, #96]	; (20070124 <SystemInit+0x8c>)
200700c4:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
200700c6:	461a      	mov	r2, r3
200700c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
200700ce:	d0fb      	beq.n	200700c8 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
200700d0:	4a14      	ldr	r2, [pc, #80]	; (20070124 <SystemInit+0x8c>)
200700d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
200700d4:	f023 0303 	bic.w	r3, r3, #3
200700d8:	f043 0301 	orr.w	r3, r3, #1
200700dc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700de:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700e0:	f013 0f08 	tst.w	r3, #8
200700e4:	d0fb      	beq.n	200700de <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
200700e6:	4a12      	ldr	r2, [pc, #72]	; (20070130 <SystemInit+0x98>)
200700e8:	4b0e      	ldr	r3, [pc, #56]	; (20070124 <SystemInit+0x8c>)
200700ea:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
200700ec:	461a      	mov	r2, r3
200700ee:	6e93      	ldr	r3, [r2, #104]	; 0x68
200700f0:	f013 0f02 	tst.w	r3, #2
200700f4:	d0fb      	beq.n	200700ee <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
200700f6:	2211      	movs	r2, #17
200700f8:	4b0a      	ldr	r3, [pc, #40]	; (20070124 <SystemInit+0x8c>)
200700fa:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
200700fc:	461a      	mov	r2, r3
200700fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070100:	f013 0f08 	tst.w	r3, #8
20070104:	d0fb      	beq.n	200700fe <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070106:	2212      	movs	r2, #18
20070108:	4b06      	ldr	r3, [pc, #24]	; (20070124 <SystemInit+0x8c>)
2007010a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007010c:	461a      	mov	r2, r3
2007010e:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070110:	f013 0f08 	tst.w	r3, #8
20070114:	d0fb      	beq.n	2007010e <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070116:	4a07      	ldr	r2, [pc, #28]	; (20070134 <SystemInit+0x9c>)
20070118:	4b07      	ldr	r3, [pc, #28]	; (20070138 <SystemInit+0xa0>)
2007011a:	601a      	str	r2, [r3, #0]
2007011c:	4770      	bx	lr
2007011e:	bf00      	nop
20070120:	400e0a00 	.word	0x400e0a00
20070124:	400e0600 	.word	0x400e0600
20070128:	00370809 	.word	0x00370809
2007012c:	01370809 	.word	0x01370809
20070130:	200d3f01 	.word	0x200d3f01
20070134:	0501bd00 	.word	0x0501bd00
20070138:	200704dc 	.word	0x200704dc

2007013c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007013c:	4b1b      	ldr	r3, [pc, #108]	; (200701ac <system_init_flash+0x70>)
2007013e:	4298      	cmp	r0, r3
20070140:	d915      	bls.n	2007016e <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
20070142:	4b1b      	ldr	r3, [pc, #108]	; (200701b0 <system_init_flash+0x74>)
20070144:	4298      	cmp	r0, r3
20070146:	d919      	bls.n	2007017c <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070148:	4b1a      	ldr	r3, [pc, #104]	; (200701b4 <system_init_flash+0x78>)
2007014a:	4298      	cmp	r0, r3
2007014c:	d91e      	bls.n	2007018c <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2007014e:	4b1a      	ldr	r3, [pc, #104]	; (200701b8 <system_init_flash+0x7c>)
20070150:	4298      	cmp	r0, r3
20070152:	d923      	bls.n	2007019c <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070154:	4b19      	ldr	r3, [pc, #100]	; (200701bc <system_init_flash+0x80>)
20070156:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070158:	bf94      	ite	ls
2007015a:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070162:	4a17      	ldr	r2, [pc, #92]	; (200701c0 <system_init_flash+0x84>)
20070164:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070166:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007016a:	6013      	str	r3, [r2, #0]
2007016c:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
2007016e:	2300      	movs	r3, #0
20070170:	4a13      	ldr	r2, [pc, #76]	; (200701c0 <system_init_flash+0x84>)
20070172:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070174:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070178:	6013      	str	r3, [r2, #0]
2007017a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
2007017c:	f44f 7380 	mov.w	r3, #256	; 0x100
20070180:	4a0f      	ldr	r2, [pc, #60]	; (200701c0 <system_init_flash+0x84>)
20070182:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
20070184:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070188:	6013      	str	r3, [r2, #0]
2007018a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
2007018c:	f44f 7300 	mov.w	r3, #512	; 0x200
20070190:	4a0b      	ldr	r2, [pc, #44]	; (200701c0 <system_init_flash+0x84>)
20070192:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070194:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070198:	6013      	str	r3, [r2, #0]
2007019a:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007019c:	f44f 7340 	mov.w	r3, #768	; 0x300
200701a0:	4a07      	ldr	r2, [pc, #28]	; (200701c0 <system_init_flash+0x84>)
200701a2:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200701a4:	f502 7200 	add.w	r2, r2, #512	; 0x200
200701a8:	6013      	str	r3, [r2, #0]
200701aa:	4770      	bx	lr
200701ac:	0121eabf 	.word	0x0121eabf
200701b0:	02faf07f 	.word	0x02faf07f
200701b4:	03d08fff 	.word	0x03d08fff
200701b8:	04c4b3ff 	.word	0x04c4b3ff
200701bc:	055d4a7f 	.word	0x055d4a7f
200701c0:	400e0a00 	.word	0x400e0a00

200701c4 <ADC_Handler>:
}

__no_inline
RAMFUNC
ISR(ADC_Handler)
{	
200701c4:	b538      	push	{r3, r4, r5, lr}
	if(ADC->ADC_ISR & ADC_IER_ENDRX)
200701c6:	4b90      	ldr	r3, [pc, #576]	; (20070408 <ADC_Handler+0x244>)
200701c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200701ca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
200701ce:	d100      	bne.n	200701d2 <ADC_Handler+0xe>
200701d0:	bd38      	pop	{r3, r4, r5, pc}
		//float Inp;
		//pio_set_pin_high(LED2_GPIO); //for real time debug	
		uint32_t OutDataToDAC0;
		uint32_t OutDataToDAC1;
	//	uint32_t Energy;
		pio_set_pin_high(PIO_PA7_IDX);
200701d2:	2007      	movs	r0, #7
200701d4:	4b8d      	ldr	r3, [pc, #564]	; (2007040c <ADC_Handler+0x248>)
200701d6:	4798      	blx	r3
		
		ADC->ADC_RNPR =  (uint32_t)ADCC_GlobalRawData;
200701d8:	4b8d      	ldr	r3, [pc, #564]	; (20070410 <ADC_Handler+0x24c>)
200701da:	4a8b      	ldr	r2, [pc, #556]	; (20070408 <ADC_Handler+0x244>)
200701dc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
		ADC->ADC_RNCR = ADC_NUM_CHANNELS;
200701e0:	2103      	movs	r1, #3
200701e2:	f8c2 1114 	str.w	r1, [r2, #276]	; 0x114
		Data = ADCC_GlobalRawData[0] - MAX_ADC/2;;
200701e6:	881a      	ldrh	r2, [r3, #0]
200701e8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
200701ec:	4b89      	ldr	r3, [pc, #548]	; (20070414 <ADC_Handler+0x250>)
200701ee:	601a      	str	r2, [r3, #0]

void FIFO_Init(XFifo* Fifo );

inline void FIFO_Insert(XFifo* Fifo, int32_t input)
{
	Fifo->Data[Fifo->WriteInx] = input;
200701f0:	4989      	ldr	r1, [pc, #548]	; (20070418 <ADC_Handler+0x254>)
200701f2:	680b      	ldr	r3, [r1, #0]
200701f4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
200701f8:	60c2      	str	r2, [r0, #12]
	Fifo->WriteInx = Fifo->WriteInx + 1;
200701fa:	3301      	adds	r3, #1
200701fc:	600b      	str	r3, [r1, #0]
	if(Fifo->WriteInx == 3)
200701fe:	2b03      	cmp	r3, #3
20070200:	d007      	beq.n	20070212 <ADC_Handler+0x4e>


inline int32_t FIFO_Filter(XFifo* Fifo)
{
	int32_t Xn,Xnp,Xnpp;	
	switch(Fifo->WriteInx)
20070202:	b143      	cbz	r3, 20070216 <ADC_Handler+0x52>
20070204:	2b01      	cmp	r3, #1
20070206:	d013      	beq.n	20070230 <ADC_Handler+0x6c>
		Xn = Fifo->Data[0];
		Xnp = Fifo->Data[2];
		Xnpp = Fifo->Data[1];
		break;
		default: // 2
		Xn = Fifo->Data[1];
20070208:	4b83      	ldr	r3, [pc, #524]	; (20070418 <ADC_Handler+0x254>)
2007020a:	6919      	ldr	r1, [r3, #16]
		Xnp = Fifo->Data[0];
2007020c:	68d8      	ldr	r0, [r3, #12]
		Xnpp = Fifo->Data[2];
2007020e:	695b      	ldr	r3, [r3, #20]
20070210:	e005      	b.n	2007021e <ADC_Handler+0x5a>
		Fifo->WriteInx = 0;
20070212:	2200      	movs	r2, #0
20070214:	600a      	str	r2, [r1, #0]
		Xn = Fifo->Data[2];
20070216:	4b80      	ldr	r3, [pc, #512]	; (20070418 <ADC_Handler+0x254>)
20070218:	6959      	ldr	r1, [r3, #20]
		Xnp = Fifo->Data[1];
2007021a:	6918      	ldr	r0, [r3, #16]
		Xnpp = Fifo->Data[0];
2007021c:	68db      	ldr	r3, [r3, #12]
	switch(Fifo->WriteIndxY)
2007021e:	4a7e      	ldr	r2, [pc, #504]	; (20070418 <ADC_Handler+0x254>)
20070220:	6892      	ldr	r2, [r2, #8]
20070222:	b152      	cbz	r2, 2007023a <ADC_Handler+0x76>
20070224:	2a01      	cmp	r2, #1
20070226:	d034      	beq.n	20070292 <ADC_Handler+0xce>
		Yp = Fifo->FilterY[1];
20070228:	4c7b      	ldr	r4, [pc, #492]	; (20070418 <ADC_Handler+0x254>)
2007022a:	69e5      	ldr	r5, [r4, #28]
		Ypp = Fifo->FilterY[0];
2007022c:	69a4      	ldr	r4, [r4, #24]
2007022e:	e007      	b.n	20070240 <ADC_Handler+0x7c>
		Xn = Fifo->Data[0];
20070230:	4b79      	ldr	r3, [pc, #484]	; (20070418 <ADC_Handler+0x254>)
20070232:	68d9      	ldr	r1, [r3, #12]
		Xnp = Fifo->Data[2];
20070234:	6958      	ldr	r0, [r3, #20]
		Xnpp = Fifo->Data[1];
20070236:	691b      	ldr	r3, [r3, #16]
20070238:	e7f1      	b.n	2007021e <ADC_Handler+0x5a>
		Yp = Fifo->FilterY[2];
2007023a:	4c77      	ldr	r4, [pc, #476]	; (20070418 <ADC_Handler+0x254>)
2007023c:	6a25      	ldr	r5, [r4, #32]
		Ypp = Fifo->FilterY[1];
2007023e:	69e4      	ldr	r4, [r4, #28]
	Out = (Xn*BETA_MUL2_Q - 2*BETA_MUL2_Q*Xnp + BETA_MUL2_Q*Xnpp + Fifo->BetaMul2Q*Yp - Ypp*BETA_MUL2_Q)*(Fifo->BetaSQRTInvQ); // The second order filter HPF*/
20070240:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
20070244:	4419      	add	r1, r3
20070246:	4874      	ldr	r0, [pc, #464]	; (20070418 <ADC_Handler+0x254>)
20070248:	6b43      	ldr	r3, [r0, #52]	; 0x34
2007024a:	fb03 f305 	mul.w	r3, r3, r5
2007024e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
20070252:	eba3 1304 	sub.w	r3, r3, r4, lsl #4
20070256:	6b81      	ldr	r1, [r0, #56]	; 0x38
20070258:	fb01 f303 	mul.w	r3, r1, r3
	Fifo->FilterY[Fifo->WriteIndxY] = input;
2007025c:	1d91      	adds	r1, r2, #6
	FIFO_YInsert(Fifo, (Out>>(4+13)) );
2007025e:	145c      	asrs	r4, r3, #17
	Fifo->FilterY[Fifo->WriteIndxY] = input;
20070260:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
20070264:	3201      	adds	r2, #1
	if(Fifo->WriteIndxY == 3)
20070266:	2a03      	cmp	r2, #3
20070268:	d017      	beq.n	2007029a <ADC_Handler+0xd6>
	Fifo->WriteIndxY = Fifo->WriteIndxY + 1;
2007026a:	6082      	str	r2, [r0, #8]
		//Data = ADC->ADC_CDR[0]-MAX_ADC/2;
		
		//Energy = FIFO2_Insert(&WaveArray, Data);
		FIFO_Insert(&Fifo,Data);
		OutData = FIFO_Filter(&Fifo);
		OutData = abs(OutData);
2007026c:	2b00      	cmp	r3, #0
2007026e:	bfb8      	it	lt
20070270:	425b      	neglt	r3, r3
20070272:	4a6a      	ldr	r2, [pc, #424]	; (2007041c <ADC_Handler+0x258>)
20070274:	6013      	str	r3, [r2, #0]
		//SoundSum = FIFO2_Insert(&Fifo2p1, OutData);		
		//FIFO2_Insert(&fifoDebug,SoundSum);
		switch(FilterState)		
20070276:	4a6a      	ldr	r2, [pc, #424]	; (20070420 <ADC_Handler+0x25c>)
20070278:	6812      	ldr	r2, [r2, #0]
2007027a:	2a06      	cmp	r2, #6
2007027c:	f200 80f3 	bhi.w	20070466 <ADC_Handler+0x2a2>
20070280:	e8df f012 	tbh	[pc, r2, lsl #1]
20070284:	002d000f 	.word	0x002d000f
20070288:	006a004e 	.word	0x006a004e
2007028c:	00e600a6 	.word	0x00e600a6
20070290:	0107      	.short	0x0107
		Yp = Fifo->FilterY[0];
20070292:	4c61      	ldr	r4, [pc, #388]	; (20070418 <ADC_Handler+0x254>)
20070294:	69a5      	ldr	r5, [r4, #24]
		Ypp = Fifo->FilterY[2];
20070296:	6a24      	ldr	r4, [r4, #32]
20070298:	e7d2      	b.n	20070240 <ADC_Handler+0x7c>
		Fifo->WriteIndxY = 0;
2007029a:	2100      	movs	r1, #0
2007029c:	4a5e      	ldr	r2, [pc, #376]	; (20070418 <ADC_Handler+0x254>)
2007029e:	6091      	str	r1, [r2, #8]
200702a0:	e7e4      	b.n	2007026c <ADC_Handler+0xa8>
		{
			case 0:
				SecondDetVal = 0;
200702a2:	2200      	movs	r2, #0
200702a4:	495f      	ldr	r1, [pc, #380]	; (20070424 <ADC_Handler+0x260>)
200702a6:	600a      	str	r2, [r1, #0]
				FirstDetVal = 0;
200702a8:	495f      	ldr	r1, [pc, #380]	; (20070428 <ADC_Handler+0x264>)
200702aa:	600a      	str	r2, [r1, #0]
				//MaxEnergy = 0;
				if(OutData>MaxAllowedFirstVal)
200702ac:	4a5f      	ldr	r2, [pc, #380]	; (2007042c <ADC_Handler+0x268>)
200702ae:	6812      	ldr	r2, [r2, #0]
200702b0:	4293      	cmp	r3, r2
200702b2:	d906      	bls.n	200702c2 <ADC_Handler+0xfe>
				{
					FilterState = 5;
200702b4:	2205      	movs	r2, #5
200702b6:	4b5a      	ldr	r3, [pc, #360]	; (20070420 <ADC_Handler+0x25c>)
200702b8:	601a      	str	r2, [r3, #0]
					delay = 0;
200702ba:	2200      	movs	r2, #0
200702bc:	4b5c      	ldr	r3, [pc, #368]	; (20070430 <ADC_Handler+0x26c>)
200702be:	601a      	str	r2, [r3, #0]
200702c0:	e0d1      	b.n	20070466 <ADC_Handler+0x2a2>
				}
				else if(OutData>Threshold)
200702c2:	4a5c      	ldr	r2, [pc, #368]	; (20070434 <ADC_Handler+0x270>)
200702c4:	6812      	ldr	r2, [r2, #0]
200702c6:	4293      	cmp	r3, r2
200702c8:	f240 80cd 	bls.w	20070466 <ADC_Handler+0x2a2>
				{
					//Det_flag = 1;
					//adc_disable_interrupt(ADC,ADC_IER_EOC0);;
					FirstDetVal = OutData;
200702cc:	4a56      	ldr	r2, [pc, #344]	; (20070428 <ADC_Handler+0x264>)
200702ce:	6013      	str	r3, [r2, #0]
					//MaxEnergy = Energy;
					FilterState = 1;
200702d0:	2201      	movs	r2, #1
200702d2:	4b53      	ldr	r3, [pc, #332]	; (20070420 <ADC_Handler+0x25c>)
200702d4:	601a      	str	r2, [r3, #0]
					delay = 0;					
200702d6:	2200      	movs	r2, #0
200702d8:	4b55      	ldr	r3, [pc, #340]	; (20070430 <ADC_Handler+0x26c>)
200702da:	601a      	str	r2, [r3, #0]
200702dc:	e0c3      	b.n	20070466 <ADC_Handler+0x2a2>
				}	
			break;
			
			case 1:
				if(OutData>MaxAllowedFirstVal)
200702de:	4a53      	ldr	r2, [pc, #332]	; (2007042c <ADC_Handler+0x268>)
200702e0:	6812      	ldr	r2, [r2, #0]
200702e2:	4293      	cmp	r3, r2
200702e4:	d906      	bls.n	200702f4 <ADC_Handler+0x130>
				{
					FilterState = 5;
200702e6:	2205      	movs	r2, #5
200702e8:	4b4d      	ldr	r3, [pc, #308]	; (20070420 <ADC_Handler+0x25c>)
200702ea:	601a      	str	r2, [r3, #0]
					delay = 0;
200702ec:	2200      	movs	r2, #0
200702ee:	4b50      	ldr	r3, [pc, #320]	; (20070430 <ADC_Handler+0x26c>)
200702f0:	601a      	str	r2, [r3, #0]
200702f2:	e0b8      	b.n	20070466 <ADC_Handler+0x2a2>
				}
				else
				{
					if(FirstDetVal<(OutData))
200702f4:	4a4c      	ldr	r2, [pc, #304]	; (20070428 <ADC_Handler+0x264>)
200702f6:	6812      	ldr	r2, [r2, #0]
200702f8:	4293      	cmp	r3, r2
					{					
						FirstDetVal	= OutData; // finding the max FirstDetVal					
200702fa:	bfc4      	itt	gt
200702fc:	4a4a      	ldrgt	r2, [pc, #296]	; (20070428 <ADC_Handler+0x264>)
200702fe:	6013      	strgt	r3, [r2, #0]
					}				
					delay++;
20070300:	4a4b      	ldr	r2, [pc, #300]	; (20070430 <ADC_Handler+0x26c>)
20070302:	6813      	ldr	r3, [r2, #0]
20070304:	3301      	adds	r3, #1
20070306:	6013      	str	r3, [r2, #0]
					if(delay>=2600)
20070308:	f640 2227 	movw	r2, #2599	; 0xa27
2007030c:	4293      	cmp	r3, r2
2007030e:	f240 80aa 	bls.w	20070466 <ADC_Handler+0x2a2>
					{
						FilterState = 2;
20070312:	2202      	movs	r2, #2
20070314:	4b42      	ldr	r3, [pc, #264]	; (20070420 <ADC_Handler+0x25c>)
20070316:	601a      	str	r2, [r3, #0]
						delay = 0;
20070318:	2200      	movs	r2, #0
2007031a:	4b45      	ldr	r3, [pc, #276]	; (20070430 <ADC_Handler+0x26c>)
2007031c:	601a      	str	r2, [r3, #0]
2007031e:	e0a2      	b.n	20070466 <ADC_Handler+0x2a2>
				/*if(Energy > MaxEnergy)
					MaxEnergy = Energy;*/
			break;
				
			case 2:
				if(OutData>FirstDetVal)
20070320:	4a41      	ldr	r2, [pc, #260]	; (20070428 <ADC_Handler+0x264>)
20070322:	6812      	ldr	r2, [r2, #0]
20070324:	4293      	cmp	r3, r2
20070326:	dd06      	ble.n	20070336 <ADC_Handler+0x172>
				{
					FilterState = 5;
20070328:	2205      	movs	r2, #5
2007032a:	4b3d      	ldr	r3, [pc, #244]	; (20070420 <ADC_Handler+0x25c>)
2007032c:	601a      	str	r2, [r3, #0]
					delay = 0;
2007032e:	2200      	movs	r2, #0
20070330:	4b3f      	ldr	r3, [pc, #252]	; (20070430 <ADC_Handler+0x26c>)
20070332:	601a      	str	r2, [r3, #0]
20070334:	e097      	b.n	20070466 <ADC_Handler+0x2a2>
				}				
				else if(delay<9000)
20070336:	4b3e      	ldr	r3, [pc, #248]	; (20070430 <ADC_Handler+0x26c>)
20070338:	681b      	ldr	r3, [r3, #0]
2007033a:	f242 3227 	movw	r2, #8999	; 0x2327
2007033e:	4293      	cmp	r3, r2
20070340:	d803      	bhi.n	2007034a <ADC_Handler+0x186>
				{
					delay++;
20070342:	3301      	adds	r3, #1
20070344:	4a3a      	ldr	r2, [pc, #232]	; (20070430 <ADC_Handler+0x26c>)
20070346:	6013      	str	r3, [r2, #0]
20070348:	e08d      	b.n	20070466 <ADC_Handler+0x2a2>
				}
				else
				{
					FilterState = 3;
2007034a:	2203      	movs	r2, #3
2007034c:	4b34      	ldr	r3, [pc, #208]	; (20070420 <ADC_Handler+0x25c>)
2007034e:	601a      	str	r2, [r3, #0]
					delay = 0;
20070350:	2200      	movs	r2, #0
20070352:	4b37      	ldr	r3, [pc, #220]	; (20070430 <ADC_Handler+0x26c>)
20070354:	601a      	str	r2, [r3, #0]
20070356:	e086      	b.n	20070466 <ADC_Handler+0x2a2>
				}				
			break;
			
			case 3:
				if(delay<10000)
20070358:	4a35      	ldr	r2, [pc, #212]	; (20070430 <ADC_Handler+0x26c>)
2007035a:	6812      	ldr	r2, [r2, #0]
2007035c:	f242 710f 	movw	r1, #9999	; 0x270f
20070360:	428a      	cmp	r2, r1
20070362:	d809      	bhi.n	20070378 <ADC_Handler+0x1b4>
				{
					delay++;
20070364:	3201      	adds	r2, #1
20070366:	4932      	ldr	r1, [pc, #200]	; (20070430 <ADC_Handler+0x26c>)
20070368:	600a      	str	r2, [r1, #0]
					if(SecondDetVal<OutData)					
2007036a:	4a2e      	ldr	r2, [pc, #184]	; (20070424 <ADC_Handler+0x260>)
2007036c:	6812      	ldr	r2, [r2, #0]
2007036e:	4293      	cmp	r3, r2
20070370:	dd79      	ble.n	20070466 <ADC_Handler+0x2a2>
						SecondDetVal = OutData;
20070372:	4a2c      	ldr	r2, [pc, #176]	; (20070424 <ADC_Handler+0x260>)
20070374:	6013      	str	r3, [r2, #0]
20070376:	e076      	b.n	20070466 <ADC_Handler+0x2a2>
				}
				else
				{
					if( ((SecondDetVal/5)<=(FirstDetVal/2)) && ((SecondDetVal/126)>=(FirstDetVal/100)) )  //last working value = 1.25
20070378:	4b2a      	ldr	r3, [pc, #168]	; (20070424 <ADC_Handler+0x260>)
2007037a:	681b      	ldr	r3, [r3, #0]
2007037c:	4a2a      	ldr	r2, [pc, #168]	; (20070428 <ADC_Handler+0x264>)
2007037e:	6812      	ldr	r2, [r2, #0]
20070380:	482d      	ldr	r0, [pc, #180]	; (20070438 <ADC_Handler+0x274>)
20070382:	fb80 1003 	smull	r1, r0, r0, r3
20070386:	17d9      	asrs	r1, r3, #31
20070388:	ebc1 0160 	rsb	r1, r1, r0, asr #1
2007038c:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
20070390:	ebb1 0f60 	cmp.w	r1, r0, asr #1
20070394:	dc15      	bgt.n	200703c2 <ADC_Handler+0x1fe>
20070396:	4929      	ldr	r1, [pc, #164]	; (2007043c <ADC_Handler+0x278>)
20070398:	fb81 0103 	smull	r0, r1, r1, r3
2007039c:	4419      	add	r1, r3
2007039e:	17db      	asrs	r3, r3, #31
200703a0:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
200703a4:	4926      	ldr	r1, [pc, #152]	; (20070440 <ADC_Handler+0x27c>)
200703a6:	fb81 0102 	smull	r0, r1, r1, r2
200703aa:	17d2      	asrs	r2, r2, #31
200703ac:	ebc2 1261 	rsb	r2, r2, r1, asr #5
200703b0:	4293      	cmp	r3, r2
200703b2:	db06      	blt.n	200703c2 <ADC_Handler+0x1fe>
					{
						FilterState = 4;
200703b4:	2204      	movs	r2, #4
200703b6:	4b1a      	ldr	r3, [pc, #104]	; (20070420 <ADC_Handler+0x25c>)
200703b8:	601a      	str	r2, [r3, #0]
						delay = 0;
200703ba:	2200      	movs	r2, #0
200703bc:	4b1c      	ldr	r3, [pc, #112]	; (20070430 <ADC_Handler+0x26c>)
200703be:	601a      	str	r2, [r3, #0]
200703c0:	e051      	b.n	20070466 <ADC_Handler+0x2a2>
					}
					else
					{
						FilterState = 5;
200703c2:	2205      	movs	r2, #5
200703c4:	4b16      	ldr	r3, [pc, #88]	; (20070420 <ADC_Handler+0x25c>)
200703c6:	601a      	str	r2, [r3, #0]
						delay = 0;
200703c8:	2200      	movs	r2, #0
200703ca:	4b19      	ldr	r3, [pc, #100]	; (20070430 <ADC_Handler+0x26c>)
200703cc:	601a      	str	r2, [r3, #0]
200703ce:	e04a      	b.n	20070466 <ADC_Handler+0x2a2>
					}
				}				
			break;
			
			case 4:
				if(delay<250)
200703d0:	4b17      	ldr	r3, [pc, #92]	; (20070430 <ADC_Handler+0x26c>)
200703d2:	681b      	ldr	r3, [r3, #0]
200703d4:	2bf9      	cmp	r3, #249	; 0xf9
200703d6:	d803      	bhi.n	200703e0 <ADC_Handler+0x21c>
				{
					delay++;					
200703d8:	3301      	adds	r3, #1
200703da:	4a15      	ldr	r2, [pc, #84]	; (20070430 <ADC_Handler+0x26c>)
200703dc:	6013      	str	r3, [r2, #0]
200703de:	e042      	b.n	20070466 <ADC_Handler+0x2a2>
				}
				else
				{
					Det_flag = 1;
200703e0:	2201      	movs	r2, #1
200703e2:	4b18      	ldr	r3, [pc, #96]	; (20070444 <ADC_Handler+0x280>)
200703e4:	601a      	str	r2, [r3, #0]
					FilterState = 6;
200703e6:	2206      	movs	r2, #6
200703e8:	4b0d      	ldr	r3, [pc, #52]	; (20070420 <ADC_Handler+0x25c>)
200703ea:	601a      	str	r2, [r3, #0]
					delay = 0;
200703ec:	2200      	movs	r2, #0
200703ee:	4b10      	ldr	r3, [pc, #64]	; (20070430 <ADC_Handler+0x26c>)
200703f0:	601a      	str	r2, [r3, #0]
					adc_disable_interrupt(ADC,ADC_IER_ENDRX);
200703f2:	4c05      	ldr	r4, [pc, #20]	; (20070408 <ADC_Handler+0x244>)
200703f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
200703f8:	4620      	mov	r0, r4
200703fa:	4b13      	ldr	r3, [pc, #76]	; (20070448 <ADC_Handler+0x284>)
200703fc:	4798      	blx	r3
					adc_reset(ADC);
200703fe:	4620      	mov	r0, r4
20070400:	4b12      	ldr	r3, [pc, #72]	; (2007044c <ADC_Handler+0x288>)
20070402:	4798      	blx	r3
20070404:	e02f      	b.n	20070466 <ADC_Handler+0x2a2>
20070406:	bf00      	nop
20070408:	400c0000 	.word	0x400c0000
2007040c:	000811cf 	.word	0x000811cf
20070410:	20071068 	.word	0x20071068
20070414:	2007109c 	.word	0x2007109c
20070418:	200710b4 	.word	0x200710b4
2007041c:	20071030 	.word	0x20071030
20070420:	200704e0 	.word	0x200704e0
20070424:	200710ac 	.word	0x200710ac
20070428:	200710a4 	.word	0x200710a4
2007042c:	200704e4 	.word	0x200704e4
20070430:	200710a8 	.word	0x200710a8
20070434:	200704e8 	.word	0x200704e8
20070438:	66666667 	.word	0x66666667
2007043c:	82082083 	.word	0x82082083
20070440:	51eb851f 	.word	0x51eb851f
20070444:	2007102c 	.word	0x2007102c
20070448:	000801f1 	.word	0x000801f1
2007044c:	000801d5 	.word	0x000801d5
				}				
			break;
			
			case 5: // Noise state
				if(delay<150000) //3 seconds hold off due noise
20070450:	4b19      	ldr	r3, [pc, #100]	; (200704b8 <ADC_Handler+0x2f4>)
20070452:	681b      	ldr	r3, [r3, #0]
20070454:	4a19      	ldr	r2, [pc, #100]	; (200704bc <ADC_Handler+0x2f8>)
20070456:	4293      	cmp	r3, r2
				{					
					delay++;
20070458:	bf91      	iteee	ls
2007045a:	3301      	addls	r3, #1
				}
				else
				{					
					FilterState = 0;
2007045c:	2300      	movhi	r3, #0
2007045e:	4a18      	ldrhi	r2, [pc, #96]	; (200704c0 <ADC_Handler+0x2fc>)
20070460:	6013      	strhi	r3, [r2, #0]
					delay = 0;
20070462:	4a15      	ldr	r2, [pc, #84]	; (200704b8 <ADC_Handler+0x2f4>)
20070464:	6013      	str	r3, [r2, #0]
				break;
			default:break;
			
		}	
		//pio_set_pin_low(LED2_GPIO);// for real time debug
		if(!pio_get_pin_value(PIO_PA15_IDX))
20070466:	200f      	movs	r0, #15
20070468:	4b16      	ldr	r3, [pc, #88]	; (200704c4 <ADC_Handler+0x300>)
2007046a:	4798      	blx	r3
2007046c:	b9f0      	cbnz	r0, 200704ac <ADC_Handler+0x2e8>
		{
			OutDataToDAC0  = (FirstDetVal>>9)&0xfff;			
2007046e:	4b16      	ldr	r3, [pc, #88]	; (200704c8 <ADC_Handler+0x304>)
20070470:	6818      	ldr	r0, [r3, #0]
20070472:	f3c0 204b 	ubfx	r0, r0, #9, #12
			OutDataToDAC1  = ((SecondDetVal>>9)&0xfff)|(1<<12);			
20070476:	4b15      	ldr	r3, [pc, #84]	; (200704cc <ADC_Handler+0x308>)
20070478:	681c      	ldr	r4, [r3, #0]
2007047a:	f3c4 244b 	ubfx	r4, r4, #9, #12
2007047e:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
		{
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
			OutDataToDAC1  = ((MAX_SIGNAL)<<(17-9))|(1<<12);
			//OutDataToDAC1  = (1<<(28-18))|(1<<12);
		}
		DAC3X8E_write(OutDataToDAC0);
20070482:	4d13      	ldr	r5, [pc, #76]	; (200704d0 <ADC_Handler+0x30c>)
20070484:	47a8      	blx	r5
		DAC3X8E_write(OutDataToDAC1);
20070486:	4620      	mov	r0, r4
20070488:	47a8      	blx	r5
		pio_set_pin_low(PIO_PA7_IDX);
2007048a:	2007      	movs	r0, #7
2007048c:	4b11      	ldr	r3, [pc, #68]	; (200704d4 <ADC_Handler+0x310>)
2007048e:	4798      	blx	r3
	}
}
20070490:	e69e      	b.n	200701d0 <ADC_Handler+0xc>
				if(delay<50000) //1 seconds to stable the filter
20070492:	4b09      	ldr	r3, [pc, #36]	; (200704b8 <ADC_Handler+0x2f4>)
20070494:	681b      	ldr	r3, [r3, #0]
20070496:	f24c 324f 	movw	r2, #49999	; 0xc34f
2007049a:	4293      	cmp	r3, r2
					delay++;
2007049c:	bf91      	iteee	ls
2007049e:	3301      	addls	r3, #1
					FilterState = 0;
200704a0:	2300      	movhi	r3, #0
200704a2:	4a07      	ldrhi	r2, [pc, #28]	; (200704c0 <ADC_Handler+0x2fc>)
200704a4:	6013      	strhi	r3, [r2, #0]
					delay = 0;
200704a6:	4a04      	ldr	r2, [pc, #16]	; (200704b8 <ADC_Handler+0x2f4>)
200704a8:	6013      	str	r3, [r2, #0]
200704aa:	e7dc      	b.n	20070466 <ADC_Handler+0x2a2>
			OutDataToDAC1  = ((MAX_SIGNAL)<<(17-9))|(1<<12);
200704ac:	f44f 54c8 	mov.w	r4, #6400	; 0x1900
			OutDataToDAC0 = MAX_SIGNAL<<(17-9);
200704b0:	f44f 6010 	mov.w	r0, #2304	; 0x900
200704b4:	e7e5      	b.n	20070482 <ADC_Handler+0x2be>
200704b6:	bf00      	nop
200704b8:	200710a8 	.word	0x200710a8
200704bc:	000249ef 	.word	0x000249ef
200704c0:	200704e0 	.word	0x200704e0
200704c4:	000811b3 	.word	0x000811b3
200704c8:	200710a4 	.word	0x200710a4
200704cc:	200710ac 	.word	0x200710ac
200704d0:	00080379 	.word	0x00080379
200704d4:	000811e9 	.word	0x000811e9

200704d8 <g_interrupt_enabled>:
200704d8:	00000001                                ....

200704dc <SystemCoreClock>:
200704dc:	003d0900                                ..=.

200704e0 <FilterState>:
200704e0:	00000006                                ....

200704e4 <MaxAllowedFirstVal>:
200704e4:	ffffffff                                ....

200704e8 <Threshold>:
200704e8:	00000fa0                                ....

200704ec <_impure_ptr>:
200704ec:	200704f0                                ... 

200704f0 <impure_data>:
200704f0:	00000000 200707dc 20070844 200708ac     ....... D.. ... 
	...
20070598:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200705a8:	0005deec 0000000b 00000000 00000000     ................
	...

20070918 <__malloc_av_>:
	...
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 
20070af0:	20070ae8 20070ae8 20070af0 20070af0     ... ... ... ... 
20070b00:	20070af8 20070af8 20070b00 20070b00     ... ... ... ... 
20070b10:	20070b08 20070b08 20070b10 20070b10     ... ... ... ... 
20070b20:	20070b18 20070b18 20070b20 20070b20     ... ...  ..  .. 
20070b30:	20070b28 20070b28 20070b30 20070b30     (.. (.. 0.. 0.. 
20070b40:	20070b38 20070b38 20070b40 20070b40     8.. 8.. @.. @.. 
20070b50:	20070b48 20070b48 20070b50 20070b50     H.. H.. P.. P.. 
20070b60:	20070b58 20070b58 20070b60 20070b60     X.. X.. `.. `.. 
20070b70:	20070b68 20070b68 20070b70 20070b70     h.. h.. p.. p.. 
20070b80:	20070b78 20070b78 20070b80 20070b80     x.. x.. ... ... 
20070b90:	20070b88 20070b88 20070b90 20070b90     ... ... ... ... 
20070ba0:	20070b98 20070b98 20070ba0 20070ba0     ... ... ... ... 
20070bb0:	20070ba8 20070ba8 20070bb0 20070bb0     ... ... ... ... 
20070bc0:	20070bb8 20070bb8 20070bc0 20070bc0     ... ... ... ... 
20070bd0:	20070bc8 20070bc8 20070bd0 20070bd0     ... ... ... ... 
20070be0:	20070bd8 20070bd8 20070be0 20070be0     ... ... ... ... 
20070bf0:	20070be8 20070be8 20070bf0 20070bf0     ... ... ... ... 
20070c00:	20070bf8 20070bf8 20070c00 20070c00     ... ... ... ... 
20070c10:	20070c08 20070c08 20070c10 20070c10     ... ... ... ... 
20070c20:	20070c18 20070c18 20070c20 20070c20     ... ...  ..  .. 
20070c30:	20070c28 20070c28 20070c30 20070c30     (.. (.. 0.. 0.. 
20070c40:	20070c38 20070c38 20070c40 20070c40     8.. 8.. @.. @.. 
20070c50:	20070c48 20070c48 20070c50 20070c50     H.. H.. P.. P.. 
20070c60:	20070c58 20070c58 20070c60 20070c60     X.. X.. `.. `.. 
20070c70:	20070c68 20070c68 20070c70 20070c70     h.. h.. p.. p.. 
20070c80:	20070c78 20070c78 20070c80 20070c80     x.. x.. ... ... 
20070c90:	20070c88 20070c88 20070c90 20070c90     ... ... ... ... 
20070ca0:	20070c98 20070c98 20070ca0 20070ca0     ... ... ... ... 
20070cb0:	20070ca8 20070ca8 20070cb0 20070cb0     ... ... ... ... 
20070cc0:	20070cb8 20070cb8 20070cc0 20070cc0     ... ... ... ... 
20070cd0:	20070cc8 20070cc8 20070cd0 20070cd0     ... ... ... ... 
20070ce0:	20070cd8 20070cd8 20070ce0 20070ce0     ... ... ... ... 
20070cf0:	20070ce8 20070ce8 20070cf0 20070cf0     ... ... ... ... 
20070d00:	20070cf8 20070cf8 20070d00 20070d00     ... ... ... ... 
20070d10:	20070d08 20070d08 20070d10 20070d10     ... ... ... ... 

20070d20 <__malloc_sbrk_base>:
20070d20:	ffffffff                                ....

20070d24 <__malloc_trim_threshold>:
20070d24:	00020000                                ....

20070d28 <__atexit_recursive_mutex>:
20070d28:	20071100                                ... 

20070d2c <__global_locale>:
20070d2c:	00000043 00000000 00000000 00000000     C...............
	...
20070d4c:	00000043 00000000 00000000 00000000     C...............
	...
20070d6c:	00000043 00000000 00000000 00000000     C...............
	...
20070d8c:	00000043 00000000 00000000 00000000     C...............
	...
20070dac:	00000043 00000000 00000000 00000000     C...............
	...
20070dcc:	00000043 00000000 00000000 00000000     C...............
	...
20070dec:	00000043 00000000 00000000 00000000     C...............
	...
20070e0c:	00085539 00084959 00000000 000864ec     9U..YI.......d..
20070e1c:	000863e8 00086330 00086330 00086330     .c..0c..0c..0c..
20070e2c:	00086330 00086330 00086330 00086330     0c..0c..0c..0c..
20070e3c:	00086330 00086330 ffffffff ffffffff     0c..0c..........
20070e4c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070e74:	53410000 00494943 00000000 00000000     ..ASCII.........
	...
